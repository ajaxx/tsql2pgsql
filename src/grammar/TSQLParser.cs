//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Src\Patchwork\tsql2pgsql\grammar\TSQL.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace tsql2pgsql.grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class TSQLParser : Parser {
	public const int
		T__10=1, T__9=2, T__8=3, T__7=4, T__6=5, T__5=6, T__4=7, T__3=8, T__2=9, 
		T__1=10, T__0=11, READONLY=12, TRY=13, CATCH=14, TRANSACTION=15, COMMIT=16, 
		ROLLBACK=17, RAISE_ERROR=18, PRINT=19, CLUSTERED=20, NONCLUSTERED=21, 
		TABLE=22, PROCEDURE=23, PARTITION=24, INDEX=25, DATABASE=26, CONSTRAINT=27, 
		FOREIGN=28, PRIMARY=29, KEY=30, REFERENCES=31, LEFT=32, RIGHT=33, CROSS=34, 
		OUTER=35, INNER=36, FULL=37, CURSOR=38, FETCH=39, OPEN=40, CLOSE=41, DEALLOCATE=42, 
		FIRST=43, LAST=44, PRIOR=45, NEXT=46, ABSOLUTE=47, RELATIVE=48, CASE=49, 
		CAST=50, CONVERT=51, COLLATE=52, COUNT=53, COUNT_BIG=54, DISTINCT=55, 
		UNIQUE=56, MAX=57, TOP=58, WHEN=59, THEN=60, SWITCH=61, OVER=62, INCLUDE=63, 
		INTERSECT=64, EXCEPT=65, UNION=66, ALL=67, APPLY=68, IF=69, ELSE=70, WHILE=71, 
		GOTO=72, CONTINUE=73, BREAK=74, TRUNCATE=75, ADD=76, REMOVE=77, ALTER=78, 
		CREATE=79, DROP=80, AS=81, WITH=82, FOR=83, REPLICATION=84, BEGIN=85, 
		END=86, EXISTS=87, DEFAULT=88, VARYING=89, SELECT=90, UPDATE=91, INSERT=92, 
		DELETE=93, WHERE=94, FROM=95, JOIN=96, DECLARE=97, OPTION=98, SET=99, 
		TO=100, ON=101, OFF=102, GROUP=103, HAVING=104, ORDER=105, BY=106, EXECUTE=107, 
		INTO=108, VALUES=109, IS=110, IN=111, NOT=112, NULL=113, BETWEEN=114, 
		RETURN=115, OUTPUT=116, OUT=117, LIKE=118, ESCAPE=119, OF=120, DECIMAL=121, 
		NUMERIC=122, VARCHAR=123, NVARCHAR=124, CHAR=125, CHARACTER=126, NCHAR=127, 
		INT=128, TINYINT=129, SMALLINT=130, BIGINT=131, FLOAT=132, IDENTITY=133, 
		LOG=134, AND=135, OR=136, ASC=137, DESC=138, STATISTICS=139, USING=140, 
		MERGE=141, MATCHED=142, TARGET=143, SOURCE=144, XML=145, RAW=146, AUTO=147, 
		EXPLICIT=148, PATH=149, ENABLE=150, DISABLE=151, TRIGGER=152, WAITFOR=153, 
		DELAY=154, COMPUTE=155, LEVEL=156, ISOLATION=157, SPLIT=158, RANGE=159, 
		FUNCTION=160, SCHEME=161, USED=162, OPTIMIZE=163, ROWCOUNT=164, HASH=165, 
		LPAREN=166, RPAREN=167, LBRACKET=168, RBRACKET=169, EQUALS=170, AT=171, 
		SEMICOLON=172, COLON=173, STAR=174, SLASH=175, AMPERSAND=176, PIPE=177, 
		PERCENT=178, CARET=179, PLUS=180, MINUS=181, DOT=182, COMMA=183, LT=184, 
		LTE=185, GT=186, GTE=187, GT_LT=188, EQUAL_EQUAL=189, NOT_EQUAL=190, ADD_ASSIGN=191, 
		SUB_ASSIGN=192, MUL_ASSIGN=193, DIV_ASSIGN=194, AND_ASSIGN=195, OR_ASSIGN=196, 
		XOR_ASSIGN=197, MOD_ASSIGN=198, FloatingPointLiteral=199, StringLiteral=200, 
		Identifier=201, IntegerLiteral=202, WS=203, COMMENT=204, LINE_COMMENT=205;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'snapshot'", "'read'", "'repeatable'", "'serializable'", 
		"'percent'", "'uncommitted'", "'dbcc'", "'checkpoint'", "'committed'", 
		"'&&'", "'||'", "'readonly'", "'try'", "'catch'", "TRANSACTION", "'commit'", 
		"'rollback'", "'raiserror'", "'print'", "'clustered'", "'nonclustered'", 
		"'table'", "PROCEDURE", "'partition'", "'index'", "'database'", "'constraint'", 
		"FOREIGN", "PRIMARY", "'key'", "'references'", "'left'", "'right'", "'cross'", 
		"'outer'", "'inner'", "'full'", "'cursor'", "'fetch'", "'open'", "'close'", 
		"'deallocate'", "'first'", "'last'", "'prior'", "'next'", "'absolute'", 
		"'relative'", "'case'", "'cast'", "'convert'", "'collate'", "'count'", 
		"'count_big'", "'distinct'", "'unique'", "'max'", "'top'", "'when'", "'then'", 
		"'switch'", "'over'", "'include'", "'intersect'", "'except'", "'union'", 
		"'all'", "'apply'", "'if'", "'else'", "'while'", "'goto'", "'continue'", 
		"'break'", "'truncate'", "'add'", "'remove'", "'alter'", "'create'", "'drop'", 
		"'as'", "'with'", "'for'", "'replication'", "'begin'", "'end'", "'exists'", 
		"'default'", "'varying'", "'select'", "'update'", "'insert'", "'delete'", 
		"'where'", "'from'", "'join'", "'declare'", "'option'", "'set'", "'to'", 
		"'on'", "'off'", "'group'", "'having'", "'order'", "'by'", "EXECUTE", 
		"'into'", "'values'", "'is'", "'in'", "'not'", "'null'", "'between'", 
		"'return'", "'output'", "'out'", "'like'", "'escape'", "'of'", "DECIMAL", 
		"NUMERIC", "VARCHAR", "NVARCHAR", "CHAR", "CHARACTER", "NCHAR", "INT", 
		"TINYINT", "SMALLINT", "BIGINT", "FLOAT", "IDENTITY", "'log'", "'and'", 
		"'or'", "'asc'", "'desc'", "'statistics'", "'using'", "'merge'", "'matched'", 
		"'target'", "'source'", "'xml'", "'raw'", "'auto'", "'explicit'", "'path'", 
		"'enable'", "'disable'", "'trigger'", "'waitfor'", "'delay'", "'compute'", 
		"'level'", "'isolation'", "'split'", "'range'", "'function'", "'scheme'", 
		"'used'", "'optimize'", "'rowcount'", "'#'", "'('", "')'", "'['", "']'", 
		"'='", "'@'", "';'", "':'", "'*'", "'/'", "'&'", "'|'", "'%'", "'^'", 
		"'+'", "'-'", "'.'", "','", "'<'", "'<='", "'>'", "'>='", "'<>'", "'=='", 
		"'!='", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
		"FloatingPointLiteral", "StringLiteral", "Identifier", "IntegerLiteral", 
		"WS", "COMMENT", "LINE_COMMENT"
	};
	public const int
		RULE_compileUnit = 0, RULE_dropTable = 1, RULE_alterTable = 2, RULE_alterTableSwitchPartition = 3, 
		RULE_alterTableDropConstraint = 4, RULE_alterTableAddConstraint = 5, RULE_partitionIdent = 6, 
		RULE_alterTableTrigger = 7, RULE_alterIndex = 8, RULE_alterPartitionScheme = 9, 
		RULE_alterPartitionFunction = 10, RULE_basicOptionList = 11, RULE_basicOption = 12, 
		RULE_createTable = 13, RULE_dropIndex = 14, RULE_createIndex = 15, RULE_createIndexIncludeList = 16, 
		RULE_createIndexPartition = 17, RULE_orderedIndexColumnList = 18, RULE_orderedIndexColumn = 19, 
		RULE_createStatistics = 20, RULE_dropProcedure = 21, RULE_createProcedure = 22, 
		RULE_truncateTable = 23, RULE_obscureCommands = 24, RULE_predicateList = 25, 
		RULE_primary = 26, RULE_expression = 27, RULE_conditionalExpression = 28, 
		RULE_conditionalOrExpression = 29, RULE_conditionalAndExpression = 30, 
		RULE_inclusiveOrExpression = 31, RULE_exclusiveOrExpression = 32, RULE_andExpression = 33, 
		RULE_equalityExpression = 34, RULE_relationalExpression = 35, RULE_additiveExpression = 36, 
		RULE_multiplicativeExpression = 37, RULE_unaryExpression = 38, RULE_unaryExpressionNotPlusMinus = 39, 
		RULE_postfixExpression = 40, RULE_likeTestExpression = 41, RULE_minSelectElement = 42, 
		RULE_expressionSet = 43, RULE_caseWhen = 44, RULE_caseElse = 45, RULE_subSelectExpression = 46, 
		RULE_type = 47, RULE_typeInBracket = 48, RULE_expressionInRest = 49, RULE_literalValue = 50, 
		RULE_stringValue = 51, RULE_integerValue = 52, RULE_qualifiedNamePart = 53, 
		RULE_qualifiedName = 54, RULE_qualifiedNameList = 55, RULE_tempIndex = 56, 
		RULE_tempTable = 57, RULE_variable = 58, RULE_procedureBody = 59, RULE_procedureParameters = 60, 
		RULE_procedureParameter = 61, RULE_procedureParameterInitialValue = 62, 
		RULE_procedureParameterName = 63, RULE_procedureOptions = 64, RULE_statementList = 65, 
		RULE_statement = 66, RULE_ddl = 67, RULE_dml = 68, RULE_returnExpression = 69, 
		RULE_ifStatement = 70, RULE_whileStatement = 71, RULE_waitFor = 72, RULE_raiseError = 73, 
		RULE_tryBlock = 74, RULE_transactionBlock = 75, RULE_deleteTop = 76, RULE_deleteStatement = 77, 
		RULE_deleteFromClause = 78, RULE_deleteFromClauseLoose = 79, RULE_deleteOutput = 80, 
		RULE_commonTableExpression = 81, RULE_commonTableExpressionAtom = 82, 
		RULE_insertStatement = 83, RULE_insertPreamble = 84, RULE_insertOutputClause = 85, 
		RULE_insertDataSource = 86, RULE_insertValueList = 87, RULE_insertValue = 88, 
		RULE_declareStatement = 89, RULE_variableDeclaration = 90, RULE_variableDeclarationAssignment = 91, 
		RULE_columnList = 92, RULE_columnDefinitionList = 93, RULE_columnDefinition = 94, 
		RULE_tableDeclarationOptions = 95, RULE_tableDeclarationOption = 96, RULE_partitionName = 97, 
		RULE_setStatement = 98, RULE_setSessionOther = 99, RULE_setVariableAssignment = 100, 
		RULE_setVariableToCursor = 101, RULE_transactionIsolationLevel = 102, 
		RULE_updateTop = 103, RULE_updateStatement = 104, RULE_updateStatementSetClauseRest = 105, 
		RULE_argument = 106, RULE_argumentList = 107, RULE_computeStatement = 108, 
		RULE_selectStatement = 109, RULE_selectStatementPart = 110, RULE_xmlWithOption = 111, 
		RULE_xmlDefinitionList = 112, RULE_xmlDefinition = 113, RULE_forXmlClause = 114, 
		RULE_selectTopLimit = 115, RULE_selectVariableAssignment = 116, RULE_selectList = 117, 
		RULE_selectListElement = 118, RULE_dmlOptions = 119, RULE_dmlOption = 120, 
		RULE_overClause = 121, RULE_intoClause = 122, RULE_fromClause = 123, RULE_moreInnerJoin = 124, 
		RULE_groupByClause = 125, RULE_groupByElement = 126, RULE_havingClause = 127, 
		RULE_joinOrApply = 128, RULE_joinType = 129, RULE_whereClause = 130, RULE_orderByClause = 131, 
		RULE_orderByElement = 132, RULE_mergeStatement = 133, RULE_mergeMatched = 134, 
		RULE_mergeNotMatched = 135, RULE_tableTargetWithOptions = 136, RULE_tableTarget = 137, 
		RULE_tableTargetOptions = 138, RULE_tableSourceWithOptions = 139, RULE_tableSource = 140, 
		RULE_tableSourceOptions = 141, RULE_tableAlias = 142, RULE_functionName = 143, 
		RULE_functionCall = 144, RULE_executeStatement = 145, RULE_executeArgumentList = 146, 
		RULE_executeArgument = 147, RULE_characterStringTypeLength = 148, RULE_characterStringType = 149, 
		RULE_numericType = 150, RULE_integerType = 151, RULE_identityType = 152, 
		RULE_identitySpec = 153, RULE_propertyOrField = 154, RULE_assignmentOperator = 155, 
		RULE_qualifiedColumnNameList = 156, RULE_qualifiedColumnName = 157, RULE_columnIndexOrName = 158, 
		RULE_columnName = 159, RULE_columnAlias = 160, RULE_cursorId = 161, RULE_cursorStatement = 162, 
		RULE_cursorOpen = 163, RULE_cursorClose = 164, RULE_cursorFetch = 165, 
		RULE_cursorDeallocate = 166, RULE_stringExpression = 167, RULE_collate = 168, 
		RULE_clusterType = 169, RULE_keyword = 170;
	public static readonly string[] ruleNames = {
		"compileUnit", "dropTable", "alterTable", "alterTableSwitchPartition", 
		"alterTableDropConstraint", "alterTableAddConstraint", "partitionIdent", 
		"alterTableTrigger", "alterIndex", "alterPartitionScheme", "alterPartitionFunction", 
		"basicOptionList", "basicOption", "createTable", "dropIndex", "createIndex", 
		"createIndexIncludeList", "createIndexPartition", "orderedIndexColumnList", 
		"orderedIndexColumn", "createStatistics", "dropProcedure", "createProcedure", 
		"truncateTable", "obscureCommands", "predicateList", "primary", "expression", 
		"conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
		"inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression", 
		"relationalExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "unaryExpressionNotPlusMinus", "postfixExpression", 
		"likeTestExpression", "minSelectElement", "expressionSet", "caseWhen", 
		"caseElse", "subSelectExpression", "type", "typeInBracket", "expressionInRest", 
		"literalValue", "stringValue", "integerValue", "qualifiedNamePart", "qualifiedName", 
		"qualifiedNameList", "tempIndex", "tempTable", "variable", "procedureBody", 
		"procedureParameters", "procedureParameter", "procedureParameterInitialValue", 
		"procedureParameterName", "procedureOptions", "statementList", "statement", 
		"ddl", "dml", "returnExpression", "ifStatement", "whileStatement", "waitFor", 
		"raiseError", "tryBlock", "transactionBlock", "deleteTop", "deleteStatement", 
		"deleteFromClause", "deleteFromClauseLoose", "deleteOutput", "commonTableExpression", 
		"commonTableExpressionAtom", "insertStatement", "insertPreamble", "insertOutputClause", 
		"insertDataSource", "insertValueList", "insertValue", "declareStatement", 
		"variableDeclaration", "variableDeclarationAssignment", "columnList", 
		"columnDefinitionList", "columnDefinition", "tableDeclarationOptions", 
		"tableDeclarationOption", "partitionName", "setStatement", "setSessionOther", 
		"setVariableAssignment", "setVariableToCursor", "transactionIsolationLevel", 
		"updateTop", "updateStatement", "updateStatementSetClauseRest", "argument", 
		"argumentList", "computeStatement", "selectStatement", "selectStatementPart", 
		"xmlWithOption", "xmlDefinitionList", "xmlDefinition", "forXmlClause", 
		"selectTopLimit", "selectVariableAssignment", "selectList", "selectListElement", 
		"dmlOptions", "dmlOption", "overClause", "intoClause", "fromClause", "moreInnerJoin", 
		"groupByClause", "groupByElement", "havingClause", "joinOrApply", "joinType", 
		"whereClause", "orderByClause", "orderByElement", "mergeStatement", "mergeMatched", 
		"mergeNotMatched", "tableTargetWithOptions", "tableTarget", "tableTargetOptions", 
		"tableSourceWithOptions", "tableSource", "tableSourceOptions", "tableAlias", 
		"functionName", "functionCall", "executeStatement", "executeArgumentList", 
		"executeArgument", "characterStringTypeLength", "characterStringType", 
		"numericType", "integerType", "identityType", "identitySpec", "propertyOrField", 
		"assignmentOperator", "qualifiedColumnNameList", "qualifiedColumnName", 
		"columnIndexOrName", "columnName", "columnAlias", "cursorId", "cursorStatement", 
		"cursorOpen", "cursorClose", "cursorFetch", "cursorDeallocate", "stringExpression", 
		"collate", "clusterType", "keyword"
	};

	public override string GrammarFileName { get { return "TSQL.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TSQLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TSQLParser.Eof, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; statementList();
			State = 343; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_dropTable);
		try {
			State = 351;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345; Match(DROP);
				State = 346; Match(TABLE);
				State = 347; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348; Match(DROP);
				State = 349; Match(TABLE);
				State = 350; tempTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public AlterTableSwitchPartitionContext alterTableSwitchPartition() {
			return GetRuleContext<AlterTableSwitchPartitionContext>(0);
		}
		public AlterTableTriggerContext alterTableTrigger() {
			return GetRuleContext<AlterTableTriggerContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public AlterTableAddConstraintContext alterTableAddConstraint() {
			return GetRuleContext<AlterTableAddConstraintContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public AlterTableDropConstraintContext alterTableDropConstraint() {
			return GetRuleContext<AlterTableDropConstraintContext>(0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_alterTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(ALTER);
			State = 354; Match(TABLE);
			State = 355; tableTargetWithOptions();
			State = 360;
			switch (_input.La(1)) {
			case SWITCH:
				{
				State = 356; alterTableSwitchPartition();
				}
				break;
			case ADD:
				{
				State = 357; alterTableAddConstraint();
				}
				break;
			case DROP:
				{
				State = 358; alterTableDropConstraint();
				}
				break;
			case ENABLE:
			case DISABLE:
				{
				State = 359; alterTableTrigger();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableSwitchPartitionContext : ParserRuleContext {
		public PartitionNameContext partitionName() {
			return GetRuleContext<PartitionNameContext>(0);
		}
		public IntegerValueContext integerValue(int i) {
			return GetRuleContext<IntegerValueContext>(i);
		}
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSQLParser.PARTITION, i);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode SWITCH() { return GetToken(TSQLParser.SWITCH, 0); }
		public ITerminalNode TO() { return GetToken(TSQLParser.TO, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSQLParser.PARTITION); }
		public IntegerValueContext[] integerValue() {
			return GetRuleContexts<IntegerValueContext>();
		}
		public AlterTableSwitchPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableSwitchPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableSwitchPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableSwitchPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableSwitchPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableSwitchPartitionContext alterTableSwitchPartition() {
		AlterTableSwitchPartitionContext _localctx = new AlterTableSwitchPartitionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_alterTableSwitchPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(SWITCH);
			State = 363; Match(PARTITION);
			State = 366;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 364; integerValue();
				}
				break;
			case AT:
				{
				State = 365; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 368; Match(TO);
			State = 369; partitionName();
			State = 370; Match(PARTITION);
			State = 373;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 371; integerValue();
				}
				break;
			case AT:
				{
				State = 372; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableDropConstraintContext : ParserRuleContext {
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public AlterTableDropConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableDropConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableDropConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableDropConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableDropConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableDropConstraintContext alterTableDropConstraint() {
		AlterTableDropConstraintContext _localctx = new AlterTableDropConstraintContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_alterTableDropConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(DROP);
			State = 376; Match(CONSTRAINT);
			State = 377; qualifiedName();
			State = 379;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 378; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableAddConstraintContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ColumnListContext[] columnList() {
			return GetRuleContexts<ColumnListContext>();
		}
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(TSQLParser.RPAREN, i);
		}
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode[] LPAREN() { return GetTokens(TSQLParser.LPAREN); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public ITerminalNode REFERENCES() { return GetToken(TSQLParser.REFERENCES, 0); }
		public ITerminalNode ADD() { return GetToken(TSQLParser.ADD, 0); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(TSQLParser.LPAREN, i);
		}
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ColumnListContext columnList(int i) {
			return GetRuleContext<ColumnListContext>(i);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(TSQLParser.RPAREN); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSQLParser.FOREIGN, 0); }
		public AlterTableAddConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableAddConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableAddConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableAddConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableAddConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableAddConstraintContext alterTableAddConstraint() {
		AlterTableAddConstraintContext _localctx = new AlterTableAddConstraintContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_alterTableAddConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(ADD);
			State = 382; Match(CONSTRAINT);
			State = 383; qualifiedName();
			State = 417;
			switch (_input.La(1)) {
			case PRIMARY:
				{
				{
				State = 384; Match(PRIMARY);
				State = 385; Match(KEY);
				State = 387;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 386; clusterType();
					}
				}

				}
				State = 389; Match(LPAREN);
				State = 390; orderedIndexColumnList();
				State = 391; Match(RPAREN);
				State = 393;
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 392; basicOptionList();
					}
					break;
				}
				State = 397;
				_la = _input.La(1);
				if (_la==ON) {
					{
					State = 395; Match(ON);
					State = 396; partitionIdent();
					}
				}

				}
				break;
			case DEFAULT:
				{
				State = 399; Match(DEFAULT);
				State = 400; Match(LPAREN);
				State = 401; literalValue();
				State = 402; Match(RPAREN);
				State = 403; Match(FOR);
				State = 404; qualifiedName();
				}
				break;
			case FOREIGN:
				{
				State = 406; Match(FOREIGN);
				State = 407; Match(KEY);
				State = 408; Match(LPAREN);
				State = 409; columnList();
				State = 410; Match(RPAREN);
				State = 411; Match(REFERENCES);
				State = 412; tableSource();
				State = 413; Match(LPAREN);
				State = 414; columnList();
				State = 415; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionIdentContext : ParserRuleContext {
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public PartitionIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPartitionIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPartitionIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionIdentContext partitionIdent() {
		PartitionIdentContext _localctx = new PartitionIdentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_partitionIdent);
		try {
			State = 428;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 419; Match(PRIMARY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 420; Match(LBRACKET);
				State = 421; Match(PRIMARY);
				State = 422; Match(RBRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 423; qualifiedName();
				State = 424; Match(LPAREN);
				State = 425; columnList();
				State = 426; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableTriggerContext : ParserRuleContext {
		public ITerminalNode ENABLE() { return GetToken(TSQLParser.ENABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSQLParser.TRIGGER, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DISABLE() { return GetToken(TSQLParser.DISABLE, 0); }
		public AlterTableTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableTriggerContext alterTableTrigger() {
		AlterTableTriggerContext _localctx = new AlterTableTriggerContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_alterTableTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			_la = _input.La(1);
			if ( !(_la==ENABLE || _la==DISABLE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 431; Match(TRIGGER);
			State = 432; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterIndexContext : ParserRuleContext {
		public QualifiedNameContext Index;
		public QualifiedNameContext Table;
		public QualifiedNameContext Operation;
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSQLParser.ALL, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public AlterIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterIndexContext alterIndex() {
		AlterIndexContext _localctx = new AlterIndexContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_alterIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(ALTER);
			State = 435; Match(INDEX);
			State = 438;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 436; _localctx.Index = qualifiedName();
				}
				break;

			case 2:
				{
				State = 437; Match(ALL);
				}
				break;
			}
			State = 440; Match(ON);
			{
			State = 441; _localctx.Table = qualifiedName();
			}
			{
			State = 442; _localctx.Operation = qualifiedName();
			}
			State = 444;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 443; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionSchemeContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public ITerminalNode SCHEME() { return GetToken(TSQLParser.SCHEME, 0); }
		public ITerminalNode USED() { return GetToken(TSQLParser.USED, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public AlterPartitionSchemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartitionScheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterPartitionScheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterPartitionScheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartitionScheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionSchemeContext alterPartitionScheme() {
		AlterPartitionSchemeContext _localctx = new AlterPartitionSchemeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_alterPartitionScheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(ALTER);
			State = 447; Match(PARTITION);
			State = 448; Match(SCHEME);
			State = 449; qualifiedName();
			State = 450; Match(NEXT);
			State = 451; Match(USED);
			State = 452; partitionIdent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionFunctionContext : ParserRuleContext {
		public ITerminalNode RANGE() { return GetToken(TSQLParser.RANGE, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSQLParser.FUNCTION, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SPLIT() { return GetToken(TSQLParser.SPLIT, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public AlterPartitionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartitionFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterPartitionFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterPartitionFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartitionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionFunctionContext alterPartitionFunction() {
		AlterPartitionFunctionContext _localctx = new AlterPartitionFunctionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_alterPartitionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(ALTER);
			State = 455; Match(PARTITION);
			State = 456; Match(FUNCTION);
			State = 457; functionName();
			State = 458; Match(LPAREN);
			State = 459; Match(RPAREN);
			State = 472;
			switch (_input.La(1)) {
			case MERGE:
				{
				State = 460; Match(MERGE);
				State = 461; Match(RANGE);
				State = 462; Match(LPAREN);
				State = 463; variable();
				State = 464; Match(RPAREN);
				}
				break;
			case SPLIT:
				{
				State = 466; Match(SPLIT);
				State = 467; Match(RANGE);
				State = 468; Match(LPAREN);
				State = 469; variable();
				State = 470; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicOptionListContext : ParserRuleContext {
		public BasicOptionContext basicOption(int i) {
			return GetRuleContext<BasicOptionContext>(i);
		}
		public BasicOptionContext[] basicOption() {
			return GetRuleContexts<BasicOptionContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public BasicOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicOptionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterBasicOptionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitBasicOptionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicOptionListContext basicOptionList() {
		BasicOptionListContext _localctx = new BasicOptionListContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_basicOptionList);
		int _la;
		try {
			State = 488;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474; Match(WITH);
				State = 475; Match(LPAREN);
				State = 476; basicOption();
				State = 481;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 477; Match(COMMA);
					State = 478; basicOption();
					}
					}
					State = 483;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 484; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486; Match(WITH);
				State = 487; basicOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicOptionContext : ParserRuleContext {
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public BasicOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterBasicOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitBasicOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicOptionContext basicOption() {
		BasicOptionContext _localctx = new BasicOptionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_basicOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490; Match(Identifier);
			State = 493;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 491; Match(EQUALS);
				State = 492;
				_la = _input.La(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public TableDeclarationOptionsContext tableDeclarationOptions() {
			return GetRuleContext<TableDeclarationOptionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ColumnDefinitionListContext columnDefinitionList() {
			return GetRuleContext<ColumnDefinitionListContext>(0);
		}
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(CREATE);
			State = 496; Match(TABLE);
			State = 499;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 497; qualifiedName();
				}
				break;

			case 2:
				{
				State = 498; tempTable();
				}
				break;
			}
			State = 501; Match(LPAREN);
			State = 502; columnDefinitionList();
			State = 505;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 503; Match(COMMA);
				State = 504; tableDeclarationOptions();
				}
				break;
			}
			State = 508;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 507; Match(COMMA);
				}
			}

			State = 510; Match(RPAREN);
			State = 513;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 511; Match(ON);
				State = 512; partitionIdent();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_dropIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515; Match(DROP);
			State = 516; Match(INDEX);
			State = 517; qualifiedName();
			State = 523;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 518; Match(ON);
				State = 519; tableTarget();
				State = 521;
				switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					State = 520; basicOptionList();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public CreateIndexPartitionContext createIndexPartition() {
			return GetRuleContext<CreateIndexPartitionContext>(0);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public CreateIndexIncludeListContext createIndexIncludeList() {
			return GetRuleContext<CreateIndexIncludeListContext>(0);
		}
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public TempIndexContext tempIndex() {
			return GetRuleContext<TempIndexContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_createIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(CREATE);
			State = 527;
			_la = _input.La(1);
			if (_la==UNIQUE) {
				{
				State = 526; Match(UNIQUE);
				}
			}

			State = 530;
			_la = _input.La(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 529; clusterType();
				}
			}

			State = 532; Match(INDEX);
			State = 535;
			switch (_input.La(1)) {
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				{
				State = 533; qualifiedName();
				}
				break;
			case HASH:
				{
				State = 534; tempIndex();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 537; Match(ON);
			State = 538; tableTarget();
			State = 539; Match(LPAREN);
			State = 540; orderedIndexColumnList();
			State = 541; Match(RPAREN);
			State = 543;
			_la = _input.La(1);
			if (_la==INCLUDE) {
				{
				State = 542; createIndexIncludeList();
				}
			}

			State = 546;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 545; whereClause();
				}
			}

			State = 549;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 548; basicOptionList();
				}
				break;
			}
			State = 552;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 551; createIndexPartition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexIncludeListContext : ParserRuleContext {
		public ITerminalNode INCLUDE() { return GetToken(TSQLParser.INCLUDE, 0); }
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public CreateIndexIncludeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexIncludeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndexIncludeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndexIncludeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexIncludeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexIncludeListContext createIndexIncludeList() {
		CreateIndexIncludeListContext _localctx = new CreateIndexIncludeListContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_createIndexIncludeList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 554; Match(INCLUDE);
			State = 555; Match(LPAREN);
			State = 556; columnList();
			State = 557; Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexPartitionContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public CreateIndexPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndexPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndexPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexPartitionContext createIndexPartition() {
		CreateIndexPartitionContext _localctx = new CreateIndexPartitionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_createIndexPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; Match(ON);
			State = 569;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 560; qualifiedName();
				State = 561; Match(LPAREN);
				State = 562; columnList();
				State = 563; Match(RPAREN);
				}
				break;

			case 2:
				{
				State = 565; Match(LBRACKET);
				State = 566; Match(PRIMARY);
				State = 567; Match(RBRACKET);
				}
				break;

			case 3:
				{
				State = 568; Match(PRIMARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedIndexColumnListContext : ParserRuleContext {
		public OrderedIndexColumnContext[] orderedIndexColumn() {
			return GetRuleContexts<OrderedIndexColumnContext>();
		}
		public OrderedIndexColumnContext orderedIndexColumn(int i) {
			return GetRuleContext<OrderedIndexColumnContext>(i);
		}
		public OrderedIndexColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedIndexColumnList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderedIndexColumnList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderedIndexColumnList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedIndexColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedIndexColumnListContext orderedIndexColumnList() {
		OrderedIndexColumnListContext _localctx = new OrderedIndexColumnListContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_orderedIndexColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; orderedIndexColumn();
			State = 576;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 572; Match(COMMA);
				State = 573; orderedIndexColumn();
				}
				}
				State = 578;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedIndexColumnContext : ParserRuleContext {
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public OrderedIndexColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedIndexColumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderedIndexColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderedIndexColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedIndexColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedIndexColumnContext orderedIndexColumn() {
		OrderedIndexColumnContext _localctx = new OrderedIndexColumnContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_orderedIndexColumn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579; columnName();
			State = 581;
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 580;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateStatisticsContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public CreateStatisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createStatistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateStatistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateStatistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateStatistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateStatisticsContext createStatistics() {
		CreateStatisticsContext _localctx = new CreateStatisticsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_createStatistics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; Match(CREATE);
			State = 584; Match(STATISTICS);
			State = 585; qualifiedName();
			State = 586; Match(ON);
			State = 587; tableTarget();
			State = 588; Match(LPAREN);
			State = 589; qualifiedColumnNameList();
			State = 590; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; Match(DROP);
			State = 593; Match(PROCEDURE);
			State = 594; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ProcedureParametersContext procedureParameters() {
			return GetRuleContext<ProcedureParametersContext>(0);
		}
		public ProcedureBodyContext procedureBody() {
			return GetRuleContext<ProcedureBodyContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public ProcedureOptionsContext procedureOptions() {
			return GetRuleContext<ProcedureOptionsContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_createProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; Match(CREATE);
			State = 597; Match(PROCEDURE);
			State = 598; qualifiedName();
			State = 600;
			_la = _input.La(1);
			if (_la==LPAREN || _la==AT) {
				{
				State = 599; procedureParameters();
				}
			}

			State = 603;
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 602; procedureOptions();
				}
			}

			State = 605; Match(AS);
			State = 606; procedureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(TSQLParser.TRUNCATE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTruncateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTruncateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableContext truncateTable() {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_truncateTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; Match(TRUNCATE);
			State = 609; Match(TABLE);
			State = 610; tableTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObscureCommandsContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObscureCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obscureCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterObscureCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitObscureCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObscureCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObscureCommandsContext obscureCommands() {
		ObscureCommandsContext _localctx = new ObscureCommandsContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_obscureCommands);
		int _la;
		try {
			State = 626;
			switch (_input.La(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 612; Match(T__4);
				State = 613; Match(Identifier);
				State = 620;
				switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					State = 614; expression();
					}
					break;

				case 2:
					{
					State = 615; Match(LPAREN);
					State = 617;
					_la = _input.La(1);
					if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
						{
						State = 616; argumentList();
						}
					}

					State = 619; Match(RPAREN);
					}
					break;
				}
				State = 623;
				switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					State = 622; basicOptionList();
					}
					break;
				}
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 625; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateListContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PredicateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPredicateList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPredicateList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateListContext predicateList() {
		PredicateListContext _localctx = new PredicateListContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_predicateList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public IntegerValueContext Style;
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode COUNT_BIG() { return GetToken(TSQLParser.COUNT_BIG, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSQLParser.EXISTS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubSelectExpressionContext subSelectExpression() {
			return GetRuleContext<SubSelectExpressionContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(TSQLParser.COUNT, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode CONVERT() { return GetToken(TSQLParser.CONVERT, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ITerminalNode CAST() { return GetToken(TSQLParser.CAST, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public CaseWhenContext caseWhen(int i) {
			return GetRuleContext<CaseWhenContext>(i);
		}
		public CaseElseContext caseElse() {
			return GetRuleContext<CaseElseContext>(0);
		}
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public CaseWhenContext[] caseWhen() {
			return GetRuleContexts<CaseWhenContext>();
		}
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public MinSelectElementContext minSelectElement() {
			return GetRuleContext<MinSelectElementContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CASE() { return GetToken(TSQLParser.CASE, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_primary);
		int _la;
		try {
			State = 700;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630; literalValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631; qualifiedColumnName();
				State = 633;
				switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					State = 632; collate();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 635; variable();
				State = 637;
				switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					State = 636; collate();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 639; functionCall();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 640; Match(CAST);
				State = 641; Match(LPAREN);
				State = 642; expression();
				State = 643; Match(AS);
				State = 644; type();
				State = 645; Match(RPAREN);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 647; Match(CONVERT);
				State = 648; Match(LPAREN);
				State = 649; type();
				State = 650; Match(COMMA);
				State = 651; expression();
				State = 654;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 652; Match(COMMA);
					State = 653; _localctx.Style = integerValue();
					}
				}

				State = 656; Match(RPAREN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 658;
				_la = _input.La(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 665;
				switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					State = 659; minSelectElement();
					}
					break;

				case 2:
					{
					State = 660; Match(LPAREN);
					State = 661; Match(DISTINCT);
					State = 662; minSelectElement();
					State = 663; Match(RPAREN);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 667; Match(EXISTS);
				State = 668; Match(LPAREN);
				State = 669; selectStatement();
				State = 670; Match(RPAREN);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 672; Match(CASE);
				State = 674;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 673; caseWhen();
					}
					}
					State = 676;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WHEN );
				State = 679;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 678; caseElse();
					}
				}

				State = 681; Match(END);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 683; Match(CASE);
				State = 684; expression();
				State = 686;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 685; caseWhen();
					}
					}
					State = 688;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WHEN );
				State = 691;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 690; caseElse();
					}
				}

				State = 693; Match(END);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 695; Match(LPAREN);
				State = 696; expression();
				State = 697; Match(RPAREN);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 699; subSelectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_expression);
		try {
			State = 704;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 702; primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 703; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706; conditionalOrExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ITerminalNode OR() { return GetToken(TSQLParser.OR, 0); }
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(_ctx, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 709; conditionalAndExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 719;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 717;
					switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
					case 1:
						{
						_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
						State = 711;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 712; Match(OR);
						State = 713; conditionalAndExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
						State = 714;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 715; Match(T__0);
						State = 716; conditionalAndExpression(0);
						}
						break;
					}
					} 
				}
				State = 721;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,49,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 723; inclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 733;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 731;
					switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
					case 1:
						{
						_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
						State = 725;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 726; Match(AND);
						State = 727; inclusiveOrExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
						State = 728;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 729; Match(T__1);
						State = 730; inclusiveOrExpression(0);
						}
						break;
					}
					} 
				}
				State = 735;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode IS() { return GetToken(TSQLParser.IS, 0); }
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(_ctx, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_inclusiveOrExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 737; exclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 750;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 748;
					switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
					case 1:
						{
						_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
						State = 739;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 740; Match(PIPE);
						State = 741; exclusiveOrExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
						State = 742;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 743; Match(IS);
						State = 745;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 744; Match(NOT);
							}
						}

						State = 747; Match(NULL);
						}
						break;
					}
					} 
				}
				State = 752;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(_ctx, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 754; andExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 761;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 756;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 757; Match(CARET);
					State = 758; andExpression(0);
					}
					} 
				}
				State = 763;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(_ctx, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 765; equalityExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 772;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 767;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 768; Match(AMPERSAND);
					State = 769; equalityExpression(0);
					}
					} 
				}
				State = 774;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(_ctx, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 776; relationalExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 789;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 787;
					switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 778;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 779; Match(EQUALS);
						State = 780; relationalExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 781;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 782; Match(EQUAL_EQUAL);
						State = 783; relationalExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 784;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 785; Match(NOT_EQUAL);
						State = 786; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 791;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public LikeTestExpressionContext likeTestExpression() {
			return GetRuleContext<LikeTestExpressionContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(_ctx, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 793; additiveExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 827;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 825;
					switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 795;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 796; Match(LT);
						State = 797; additiveExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 798;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 799; Match(GT);
						State = 800; additiveExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 801;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 802; Match(LTE);
						State = 803; additiveExpression(0);
						}
						break;

					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 804;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 805; Match(LT);
						State = 806; Match(EQUALS);
						State = 807; additiveExpression(0);
						}
						break;

					case 5:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 808;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 809; Match(GTE);
						State = 810; additiveExpression(0);
						}
						break;

					case 6:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 811;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 812; Match(GT);
						State = 813; Match(EQUALS);
						State = 814; additiveExpression(0);
						}
						break;

					case 7:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 815;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 816; Match(GT_LT);
						State = 817; additiveExpression(0);
						}
						break;

					case 8:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 818;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 819; Match(LIKE);
						State = 820; likeTestExpression();
						}
						break;

					case 9:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 821;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 822; Match(NOT);
						State = 823; Match(LIKE);
						State = 824; likeTestExpression();
						}
						break;
					}
					} 
				}
				State = 829;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 831; multiplicativeExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 841;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,62,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 839;
					switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 833;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 834; Match(PLUS);
						State = 835; multiplicativeExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 836;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 837; Match(MINUS);
						State = 838; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 843;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,62,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 845; unaryExpression();
			}
			_ctx.stop = _input.Lt(-1);
			State = 858;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 856;
					switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 847;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 848; Match(STAR);
						State = 849; unaryExpression();
						}
						break;

					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 850;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 851; Match(SLASH);
						State = 852; unaryExpression();
						}
						break;

					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 853;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 854; Match(PERCENT);
						State = 855; unaryExpression();
						}
						break;
					}
					} 
				}
				State = 860;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_unaryExpression);
		try {
			State = 866;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861; Match(PLUS);
				State = 862; unaryExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 863; Match(MINUS);
				State = 864; unaryExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 865; unaryExpressionNotPlusMinus();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionNotPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 871;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868; postfixExpression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 869; Match(NOT);
				State = 870; unaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(TSQLParser.IN, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BETWEEN() { return GetToken(TSQLParser.BETWEEN, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionSetContext expressionSet() {
			return GetRuleContext<ExpressionSetContext>(0);
		}
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public LikeTestExpressionContext likeTestExpression() {
			return GetRuleContext<LikeTestExpressionContext>(0);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(_ctx, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 874; primary();
			}
			_ctx.stop = _input.Lt(-1);
			State = 900;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 898;
					switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 876;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 877; Match(IN);
						State = 878; expressionSet();
						}
						break;

					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 879;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 880; Match(NOT);
						State = 881; Match(IN);
						State = 882; expressionSet();
						}
						break;

					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 883;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 885;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 884; Match(NOT);
							}
						}

						State = 887; Match(BETWEEN);
						State = 888; expression();
						State = 889; Match(AND);
						State = 890; expression();
						}
						break;

					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 892;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 894;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 893; Match(NOT);
							}
						}

						State = 896; Match(LIKE);
						State = 897; likeTestExpression();
						}
						break;
					}
					} 
				}
				State = 902;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LikeTestExpressionContext : ParserRuleContext {
		public ITerminalNode ESCAPE() { return GetToken(TSQLParser.ESCAPE, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public LikeTestExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeTestExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterLikeTestExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitLikeTestExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeTestExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeTestExpressionContext likeTestExpression() {
		LikeTestExpressionContext _localctx = new LikeTestExpressionContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_likeTestExpression);
		try {
			State = 909;
			switch (_input.La(1)) {
			case AT:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 903; stringValue();
				State = 906;
				switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					State = 904; Match(ESCAPE);
					State = 905; Match(StringLiteral);
					}
					break;
				}
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 908; functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinSelectElementContext : ParserRuleContext {
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public MinSelectElementContext minSelectElement() {
			return GetRuleContext<MinSelectElementContext>(0);
		}
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public MinSelectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minSelectElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMinSelectElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMinSelectElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinSelectElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinSelectElementContext minSelectElement() {
		MinSelectElementContext _localctx = new MinSelectElementContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_minSelectElement);
		try {
			State = 919;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 911; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 912; qualifiedColumnName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 913; literalValue();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 914; functionCall();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 915; Match(LPAREN);
				State = 916; minSelectElement();
				State = 917; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSetContext : ParserRuleContext {
		public SubSelectExpressionContext subSelectExpression() {
			return GetRuleContext<SubSelectExpressionContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpressionSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpressionSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSetContext expressionSet() {
		ExpressionSetContext _localctx = new ExpressionSetContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_expressionSet);
		int _la;
		try {
			State = 938;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 921; Match(LPAREN);
				State = 922; expression();
				State = 927;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 923; Match(COMMA);
					State = 924; expression();
					}
					}
					State = 929;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 930; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 932; variable();
				State = 934;
				switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					State = 933; collate();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 936; functionCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 937; subSelectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseWhenContext : ParserRuleContext {
		public ITerminalNode THEN() { return GetToken(TSQLParser.THEN, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode WHEN() { return GetToken(TSQLParser.WHEN, 0); }
		public CaseWhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseWhen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCaseWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCaseWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseWhenContext caseWhen() {
		CaseWhenContext _localctx = new CaseWhenContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_caseWhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940; Match(WHEN);
			State = 941; expression();
			State = 942; Match(THEN);
			State = 943; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseElseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCaseElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCaseElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseElseContext caseElse() {
		CaseElseContext _localctx = new CaseElseContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_caseElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945; Match(ELSE);
			State = 946; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubSelectExpressionContext : ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public SubSelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subSelectExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSubSelectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSubSelectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubSelectExpressionContext subSelectExpression() {
		SubSelectExpressionContext _localctx = new SubSelectExpressionContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_subSelectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948; Match(LPAREN);
			State = 949; selectStatement();
			State = 950; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public IdentityTypeContext identityType() {
			return GetRuleContext<IdentityTypeContext>(0);
		}
		public TypeInBracketContext typeInBracket() {
			return GetRuleContext<TypeInBracketContext>(0);
		}
		public CharacterStringTypeContext characterStringType() {
			return GetRuleContext<CharacterStringTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_type);
		try {
			State = 961;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 952; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 953; characterStringType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 954; numericType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 955; identityType();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 956; integerType();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 957; characterStringType();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 958; Match(XML);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 959; Match(CURSOR);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 960; typeInBracket();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInBracketContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public TypeInBracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInBracket; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTypeInBracket(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTypeInBracket(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInBracket(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInBracketContext typeInBracket() {
		TypeInBracketContext _localctx = new TypeInBracketContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_typeInBracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963; Match(LBRACKET);
			State = 964; type();
			State = 965; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionInRestContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExpressionInRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionInRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpressionInRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpressionInRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionInRestContext expressionInRest() {
		ExpressionInRestContext _localctx = new ExpressionInRestContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_expressionInRest);
		int _la;
		try {
			State = 984;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 967; Match(LPAREN);
				State = 968; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 969; Match(LPAREN);
				State = 970; selectStatement();
				State = 971; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 973; Match(LPAREN);
				State = 974; expression();
				State = 979;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 975; Match(COMMA);
					State = 976; expression();
					}
					}
					State = 981;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 982; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		public LiteralValueContext[] literalValue() {
			return GetRuleContexts<LiteralValueContext>();
		}
		public LiteralValueContext literalValue(int i) {
			return GetRuleContext<LiteralValueContext>(i);
		}
		public ITerminalNode FloatingPointLiteral() { return GetToken(TSQLParser.FloatingPointLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_literalValue);
		int _la;
		try {
			State = 1001;
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 986; Match(StringLiteral);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 987; integerValue();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 988; Match(FloatingPointLiteral);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 989; Match(NULL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 990; Match(LPAREN);
				State = 991; literalValue();
				State = 996;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 992; Match(COMMA);
					State = 993; literalValue();
					}
					}
					State = 998;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 999; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_stringValue);
		try {
			State = 1005;
			switch (_input.La(1)) {
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1003; Match(StringLiteral);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1004; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerValueContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(TSQLParser.IntegerLiteral, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public IntegerValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntegerValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntegerValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerValueContext integerValue() {
		IntegerValueContext _localctx = new IntegerValueContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_integerValue);
		int _la;
		try {
			State = 1015;
			switch (_input.La(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1008;
				_la = _input.La(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 1007;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
				}

				State = 1010; Match(IntegerLiteral);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1011; Match(LPAREN);
				State = 1012; integerValue();
				State = 1013; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNamePartContext : ParserRuleContext {
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public QualifiedNamePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNamePart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedNamePart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedNamePart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNamePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNamePartContext qualifiedNamePart() {
		QualifiedNamePartContext _localctx = new QualifiedNamePartContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_qualifiedNamePart);
		int _la;
		try {
			State = 1026;
			switch (_input.La(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1017; Match(LBRACKET);
				State = 1019;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1018; keyword();
					}
					}
					State = 1021;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << READONLY) | (1L << TRY) | (1L << CATCH) | (1L << TRANSACTION) | (1L << COMMIT) | (1L << ROLLBACK) | (1L << RAISE_ERROR) | (1L << PRINT) | (1L << CLUSTERED) | (1L << NONCLUSTERED) | (1L << TABLE) | (1L << PROCEDURE) | (1L << PARTITION) | (1L << INDEX) | (1L << DATABASE) | (1L << CONSTRAINT) | (1L << FOREIGN) | (1L << PRIMARY) | (1L << KEY) | (1L << REFERENCES) | (1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL) | (1L << CURSOR) | (1L << FETCH) | (1L << OPEN) | (1L << CLOSE) | (1L << DEALLOCATE) | (1L << FIRST) | (1L << LAST) | (1L << PRIOR) | (1L << NEXT) | (1L << ABSOLUTE) | (1L << RELATIVE) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << COLLATE) | (1L << COUNT) | (1L << COUNT_BIG) | (1L << DISTINCT) | (1L << UNIQUE) | (1L << MAX) | (1L << TOP) | (1L << WHEN) | (1L << THEN) | (1L << SWITCH) | (1L << OVER) | (1L << INCLUDE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTERSECT - 64)) | (1L << (EXCEPT - 64)) | (1L << (UNION - 64)) | (1L << (ALL - 64)) | (1L << (APPLY - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (WHILE - 64)) | (1L << (GOTO - 64)) | (1L << (CONTINUE - 64)) | (1L << (BREAK - 64)) | (1L << (TRUNCATE - 64)) | (1L << (ADD - 64)) | (1L << (REMOVE - 64)) | (1L << (ALTER - 64)) | (1L << (CREATE - 64)) | (1L << (DROP - 64)) | (1L << (AS - 64)) | (1L << (WITH - 64)) | (1L << (FOR - 64)) | (1L << (REPLICATION - 64)) | (1L << (BEGIN - 64)) | (1L << (END - 64)) | (1L << (EXISTS - 64)) | (1L << (DEFAULT - 64)) | (1L << (VARYING - 64)) | (1L << (SELECT - 64)) | (1L << (UPDATE - 64)) | (1L << (INSERT - 64)) | (1L << (DELETE - 64)) | (1L << (WHERE - 64)) | (1L << (FROM - 64)) | (1L << (JOIN - 64)) | (1L << (DECLARE - 64)) | (1L << (OPTION - 64)) | (1L << (SET - 64)) | (1L << (TO - 64)) | (1L << (ON - 64)) | (1L << (OFF - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (EXECUTE - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (IS - 64)) | (1L << (IN - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (BETWEEN - 64)) | (1L << (RETURN - 64)) | (1L << (OUTPUT - 64)) | (1L << (OUT - 64)) | (1L << (LIKE - 64)) | (1L << (ESCAPE - 64)) | (1L << (OF - 64)) | (1L << (DECIMAL - 64)) | (1L << (NUMERIC - 64)) | (1L << (VARCHAR - 64)) | (1L << (NVARCHAR - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (NCHAR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT - 128)) | (1L << (IDENTITY - 128)) | (1L << (LOG - 128)) | (1L << (AND - 128)) | (1L << (OR - 128)) | (1L << (ASC - 128)) | (1L << (DESC - 128)) | (1L << (STATISTICS - 128)) | (1L << (USING - 128)) | (1L << (MERGE - 128)) | (1L << (MATCHED - 128)) | (1L << (TARGET - 128)) | (1L << (SOURCE - 128)) | (1L << (XML - 128)) | (1L << (RAW - 128)) | (1L << (AUTO - 128)) | (1L << (EXPLICIT - 128)) | (1L << (PATH - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (TRIGGER - 128)) | (1L << (WAITFOR - 128)) | (1L << (DELAY - 128)) | (1L << (COMPUTE - 128)) | (1L << (LEVEL - 128)) | (1L << (ISOLATION - 128)) | (1L << (SPLIT - 128)) | (1L << (RANGE - 128)) | (1L << (FUNCTION - 128)) | (1L << (SCHEME - 128)) | (1L << (USED - 128)) | (1L << (OPTIMIZE - 128)) | (1L << (ROWCOUNT - 128)))) != 0) );
				State = 1023; Match(RBRACKET);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1025; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public QualifiedNamePartContext qualifiedNamePart(int i) {
			return GetRuleContext<QualifiedNamePartContext>(i);
		}
		public QualifiedNamePartContext[] qualifiedNamePart() {
			return GetRuleContexts<QualifiedNamePartContext>();
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_qualifiedName);
		int _la;
		try {
			int _alt;
			State = 1041;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1028; qualifiedNamePart();
				State = 1037;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,88,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1030;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 1029; Match(DOT);
							}
							}
							State = 1032;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==DOT );
						State = 1034; qualifiedNamePart();
						}
						} 
					}
					State = 1039;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,88,_ctx);
				}
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1040; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1043; qualifiedName();
			State = 1048;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1044; Match(COMMA);
				State = 1045; qualifiedName();
				}
				}
				State = 1050;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempIndexContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode[] HASH() { return GetTokens(TSQLParser.HASH); }
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode HASH(int i) {
			return GetToken(TSQLParser.HASH, i);
		}
		public TempIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTempIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTempIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempIndexContext tempIndex() {
		TempIndexContext _localctx = new TempIndexContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_tempIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1051; Match(HASH);
				}
				}
				State = 1054;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==HASH );
			State = 1058;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				{
				State = 1056; qualifiedNamePart();
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
				{
				State = 1057; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempTableContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(TSQLParser.DOT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode[] HASH() { return GetTokens(TSQLParser.HASH); }
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode HASH(int i) {
			return GetToken(TSQLParser.HASH, i);
		}
		public TempTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTempTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTempTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempTableContext tempTable() {
		TempTableContext _localctx = new TempTableContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_tempTable);
		int _la;
		try {
			State = 1073;
			switch (_input.La(1)) {
			case HASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1061;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1060; Match(HASH);
					}
					}
					State = 1063;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==HASH );
				State = 1067;
				switch (_input.La(1)) {
				case LBRACKET:
				case Identifier:
					{
					State = 1065; qualifiedNamePart();
					}
					break;
				case READONLY:
				case TRY:
				case CATCH:
				case TRANSACTION:
				case COMMIT:
				case ROLLBACK:
				case RAISE_ERROR:
				case PRINT:
				case CLUSTERED:
				case NONCLUSTERED:
				case TABLE:
				case PROCEDURE:
				case PARTITION:
				case INDEX:
				case DATABASE:
				case CONSTRAINT:
				case FOREIGN:
				case PRIMARY:
				case KEY:
				case REFERENCES:
				case LEFT:
				case RIGHT:
				case CROSS:
				case OUTER:
				case INNER:
				case FULL:
				case CURSOR:
				case FETCH:
				case OPEN:
				case CLOSE:
				case DEALLOCATE:
				case FIRST:
				case LAST:
				case PRIOR:
				case NEXT:
				case ABSOLUTE:
				case RELATIVE:
				case CASE:
				case CAST:
				case CONVERT:
				case COLLATE:
				case COUNT:
				case COUNT_BIG:
				case DISTINCT:
				case UNIQUE:
				case MAX:
				case TOP:
				case WHEN:
				case THEN:
				case SWITCH:
				case OVER:
				case INCLUDE:
				case INTERSECT:
				case EXCEPT:
				case UNION:
				case ALL:
				case APPLY:
				case IF:
				case ELSE:
				case WHILE:
				case GOTO:
				case CONTINUE:
				case BREAK:
				case TRUNCATE:
				case ADD:
				case REMOVE:
				case ALTER:
				case CREATE:
				case DROP:
				case AS:
				case WITH:
				case FOR:
				case REPLICATION:
				case BEGIN:
				case END:
				case EXISTS:
				case DEFAULT:
				case VARYING:
				case SELECT:
				case UPDATE:
				case INSERT:
				case DELETE:
				case WHERE:
				case FROM:
				case JOIN:
				case DECLARE:
				case OPTION:
				case SET:
				case TO:
				case ON:
				case OFF:
				case GROUP:
				case HAVING:
				case ORDER:
				case BY:
				case EXECUTE:
				case INTO:
				case VALUES:
				case IS:
				case IN:
				case NOT:
				case NULL:
				case BETWEEN:
				case RETURN:
				case OUTPUT:
				case OUT:
				case LIKE:
				case ESCAPE:
				case OF:
				case DECIMAL:
				case NUMERIC:
				case VARCHAR:
				case NVARCHAR:
				case CHAR:
				case CHARACTER:
				case NCHAR:
				case INT:
				case TINYINT:
				case SMALLINT:
				case BIGINT:
				case FLOAT:
				case IDENTITY:
				case LOG:
				case AND:
				case OR:
				case ASC:
				case DESC:
				case STATISTICS:
				case USING:
				case MERGE:
				case MATCHED:
				case TARGET:
				case SOURCE:
				case XML:
				case RAW:
				case AUTO:
				case EXPLICIT:
				case PATH:
				case ENABLE:
				case DISABLE:
				case TRIGGER:
				case WAITFOR:
				case DELAY:
				case COMPUTE:
				case LEVEL:
				case ISOLATION:
				case SPLIT:
				case RANGE:
				case FUNCTION:
				case SCHEME:
				case USED:
				case OPTIMIZE:
				case ROWCOUNT:
					{
					State = 1066; keyword();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1069; qualifiedName();
				State = 1070; Match(DOT);
				State = 1071; tempTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode AT(int i) {
			return GetToken(TSQLParser.AT, i);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode[] AT() { return GetTokens(TSQLParser.AT); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_variable);
		int _la;
		try {
			State = 1087;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1076;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1075; Match(AT);
					}
					}
					State = 1078;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==AT );
				State = 1080; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1082;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1081; Match(AT);
					}
					}
					State = 1084;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==AT );
				State = 1086; keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureBodyContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ProcedureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureBodyContext procedureBody() {
		ProcedureBodyContext _localctx = new ProcedureBodyContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_procedureBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1089; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParametersContext : ParserRuleContext {
		public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ProcedureParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParametersContext procedureParameters() {
		ProcedureParametersContext _localctx = new ProcedureParametersContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_procedureParameters);
		int _la;
		try {
			State = 1110;
			switch (_input.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1091; Match(LPAREN);
				State = 1092; procedureParameter();
				State = 1097;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1093; Match(COMMA);
					State = 1094; procedureParameter();
					}
					}
					State = 1099;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1100; Match(RPAREN);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1102; procedureParameter();
				State = 1107;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1103; Match(COMMA);
					State = 1104; procedureParameter();
					}
					}
					State = 1109;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ProcedureParameterNameContext procedureParameterName() {
			return GetRuleContext<ProcedureParameterNameContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode READONLY() { return GetToken(TSQLParser.READONLY, 0); }
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ProcedureParameterInitialValueContext procedureParameterInitialValue() {
			return GetRuleContext<ProcedureParameterInitialValueContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112; procedureParameterName();
			State = 1114;
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 1113; Match(AS);
				}
				break;
			}
			State = 1116; type();
			{
			State = 1118;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 1117; Match(NOT);
				}
			}

			State = 1121;
			_la = _input.La(1);
			if (_la==NULL) {
				{
				State = 1120; Match(NULL);
				}
			}

			}
			State = 1124;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 1123; procedureParameterInitialValue();
				}
			}

			State = 1127;
			_la = _input.La(1);
			if (_la==READONLY) {
				{
				State = 1126; Match(READONLY);
				}
			}

			State = 1130;
			_la = _input.La(1);
			if (_la==OUTPUT || _la==OUT) {
				{
				State = 1129;
				_la = _input.La(1);
				if ( !(_la==OUTPUT || _la==OUT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterInitialValueContext : ParserRuleContext {
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ProcedureParameterInitialValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterInitialValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameterInitialValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameterInitialValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameterInitialValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterInitialValueContext procedureParameterInitialValue() {
		ProcedureParameterInitialValueContext _localctx = new ProcedureParameterInitialValueContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_procedureParameterInitialValue);
		try {
			State = 1136;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1132; Match(EQUALS);
				State = 1133; literalValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1134; Match(EQUALS);
				State = 1135; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterNameContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ProcedureParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameterName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameterName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterNameContext procedureParameterName() {
		ProcedureParameterNameContext _localctx = new ProcedureParameterNameContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_procedureParameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureOptionsContext : ParserRuleContext {
		public ITerminalNode Identifier(int i) {
			return GetToken(TSQLParser.Identifier, i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(TSQLParser.Identifier); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ProcedureOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureOptionsContext procedureOptions() {
		ProcedureOptionsContext _localctx = new ProcedureOptionsContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_procedureOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140; Match(WITH);
			State = 1141; Match(Identifier);
			State = 1146;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1142; Match(COMMA);
				State = 1143; Match(Identifier);
				}
				}
				State = 1148;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1149; statement();
			State = 1153;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,110,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1150; statement();
					}
					} 
				}
				State = 1155;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,110,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TSQLParser.SEMICOLON, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public DdlContext ddl() {
			return GetRuleContext<DdlContext>(0);
		}
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_statement);
		try {
			State = 1169;
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1156; Match(BEGIN);
				State = 1157; statementList();
				State = 1158; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1160; ddl();
				State = 1162;
				switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					State = 1161; Match(SEMICOLON);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1164; dml();
				State = 1166;
				switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					State = 1165; Match(SEMICOLON);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1168; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlContext : ParserRuleContext {
		public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		public AlterPartitionFunctionContext alterPartitionFunction() {
			return GetRuleContext<AlterPartitionFunctionContext>(0);
		}
		public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		public ObscureCommandsContext obscureCommands() {
			return GetRuleContext<ObscureCommandsContext>(0);
		}
		public TruncateTableContext truncateTable() {
			return GetRuleContext<TruncateTableContext>(0);
		}
		public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		public AlterIndexContext alterIndex() {
			return GetRuleContext<AlterIndexContext>(0);
		}
		public CreateStatisticsContext createStatistics() {
			return GetRuleContext<CreateStatisticsContext>(0);
		}
		public AlterPartitionSchemeContext alterPartitionScheme() {
			return GetRuleContext<AlterPartitionSchemeContext>(0);
		}
		public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		public DdlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDdl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDdl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdlContext ddl() {
		DdlContext _localctx = new DdlContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_ddl);
		try {
			State = 1184;
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1171; createProcedure();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1172; createTable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1173; createIndex();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1174; createStatistics();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1175; dropProcedure();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1176; dropTable();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1177; dropIndex();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1178; truncateTable();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1179; alterTable();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1180; alterIndex();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1181; alterPartitionFunction();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1182; alterPartitionScheme();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1183; obscureCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlContext : ParserRuleContext {
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public CommonTableExpressionContext commonTableExpression() {
			return GetRuleContext<CommonTableExpressionContext>(0);
		}
		public WaitForContext waitFor() {
			return GetRuleContext<WaitForContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public RaiseErrorContext raiseError() {
			return GetRuleContext<RaiseErrorContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public CursorStatementContext cursorStatement() {
			return GetRuleContext<CursorStatementContext>(0);
		}
		public TransactionBlockContext transactionBlock() {
			return GetRuleContext<TransactionBlockContext>(0);
		}
		public DeclareStatementContext declareStatement() {
			return GetRuleContext<DeclareStatementContext>(0);
		}
		public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		public ITerminalNode ROLLBACK() { return GetToken(TSQLParser.ROLLBACK, 0); }
		public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public ReturnExpressionContext returnExpression() {
			return GetRuleContext<ReturnExpressionContext>(0);
		}
		public ITerminalNode PRINT() { return GetToken(TSQLParser.PRINT, 0); }
		public TryBlockContext tryBlock() {
			return GetRuleContext<TryBlockContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(TSQLParser.BREAK, 0); }
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public ITerminalNode CONTINUE() { return GetToken(TSQLParser.CONTINUE, 0); }
		public ITerminalNode GOTO() { return GetToken(TSQLParser.GOTO, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSQLParser.COMMIT, 0); }
		public MergeStatementContext mergeStatement() {
			return GetRuleContext<MergeStatementContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TSQLParser.COLON, 0); }
		public ComputeStatementContext computeStatement() {
			return GetRuleContext<ComputeStatementContext>(0);
		}
		public DmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDml(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlContext dml() {
		DmlContext _localctx = new DmlContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_dml);
		try {
			State = 1234;
			switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1186; selectStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1187; insertStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1188; deleteStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1189; updateStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1190; executeStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1191; mergeStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1192; computeStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1193; setStatement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1194; declareStatement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1195; tryBlock();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1196; transactionBlock();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1197; raiseError();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1198; waitFor();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1199; commonTableExpression();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1200; cursorStatement();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1201; Match(PRINT);
				State = 1202; expression();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1203; ifStatement();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1204; whileStatement();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1205; Match(BREAK);
				State = 1207;
				switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					State = 1206; qualifiedName();
					}
					break;
				}
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1209; Match(CONTINUE);
				State = 1211;
				switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					State = 1210; qualifiedName();
					}
					break;
				}
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1213; Match(COMMIT);
				State = 1215;
				switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					State = 1214; Match(TRANSACTION);
					}
					break;
				}
				State = 1218;
				switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					State = 1217; qualifiedName();
					}
					break;
				}
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1220; Match(GOTO);
				State = 1222;
				switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					State = 1221; qualifiedName();
					}
					break;
				}
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1224; Match(ROLLBACK);
				State = 1226;
				switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					State = 1225; Match(TRANSACTION);
					}
					break;
				}
				State = 1229;
				switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
				case 1:
					{
					State = 1228; qualifiedName();
					}
					break;
				}
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1231; returnExpression();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1232; Match(Identifier);
				State = 1233; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExpressionContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TSQLParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterReturnExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitReturnExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExpressionContext returnExpression() {
		ReturnExpressionContext _localctx = new ReturnExpressionContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_returnExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236; Match(RETURN);
			State = 1238;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1237; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public ITerminalNode IF() { return GetToken(TSQLParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240; Match(IF);
			State = 1241; predicateList();
			State = 1242; statement();
			State = 1245;
			switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				State = 1243; Match(ELSE);
				State = 1244; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(TSQLParser.WHILE, 0); }
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1247; Match(WHILE);
			State = 1248; predicateList();
			State = 1249; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitForContext : ParserRuleContext {
		public ITerminalNode DELAY() { return GetToken(TSQLParser.DELAY, 0); }
		public ITerminalNode WAITFOR() { return GetToken(TSQLParser.WAITFOR, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public WaitForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitFor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWaitFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWaitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitForContext waitFor() {
		WaitForContext _localctx = new WaitForContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_waitFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251; Match(WAITFOR);
			State = 1252; Match(DELAY);
			State = 1253; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseErrorContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ITerminalNode RAISE_ERROR() { return GetToken(TSQLParser.RAISE_ERROR, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode LOG() { return GetToken(TSQLParser.LOG, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public RaiseErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseError; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterRaiseError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitRaiseError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseErrorContext raiseError() {
		RaiseErrorContext _localctx = new RaiseErrorContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_raiseError);
		try {
			int _alt;
			State = 1273;
			switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1255; Match(RAISE_ERROR);
				State = 1256; Match(LPAREN);
				State = 1257; argumentList();
				State = 1258; Match(RPAREN);
				State = 1261;
				switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					State = 1259; Match(WITH);
					State = 1260; Match(LOG);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1263; Match(RAISE_ERROR);
				State = 1265;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1264; argument();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1267;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,126,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1271;
				switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					State = 1269; Match(WITH);
					State = 1270; Match(LOG);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryBlockContext : ParserRuleContext {
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public ITerminalNode CATCH(int i) {
			return GetToken(TSQLParser.CATCH, i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(TSQLParser.CATCH); }
		public ITerminalNode END(int i) {
			return GetToken(TSQLParser.END, i);
		}
		public ITerminalNode BEGIN(int i) {
			return GetToken(TSQLParser.BEGIN, i);
		}
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public ITerminalNode[] BEGIN() { return GetTokens(TSQLParser.BEGIN); }
		public ITerminalNode[] END() { return GetTokens(TSQLParser.END); }
		public ITerminalNode TRY(int i) {
			return GetToken(TSQLParser.TRY, i);
		}
		public ITerminalNode[] TRY() { return GetTokens(TSQLParser.TRY); }
		public TryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTryBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTryBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryBlockContext tryBlock() {
		TryBlockContext _localctx = new TryBlockContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_tryBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275; Match(BEGIN);
			State = 1276; Match(TRY);
			State = 1277; statementList();
			State = 1278; Match(END);
			State = 1279; Match(TRY);
			State = 1280; Match(BEGIN);
			State = 1281; Match(CATCH);
			State = 1282; statementList();
			State = 1283; Match(END);
			State = 1284; Match(CATCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionBlockContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public TransactionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTransactionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTransactionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionBlockContext transactionBlock() {
		TransactionBlockContext _localctx = new TransactionBlockContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_transactionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286; Match(BEGIN);
			State = 1287; Match(TRANSACTION);
			State = 1289;
			switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				State = 1288; qualifiedName();
				}
				break;
			}
			State = 1291; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteTopContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public DeleteTopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteTop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteTop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteTop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteTopContext deleteTop() {
		DeleteTopContext _localctx = new DeleteTopContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_deleteTop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293; Match(TOP);
			State = 1300;
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				State = 1294; integerValue();
				}
				break;

			case 2:
				{
				State = 1295; variable();
				}
				break;

			case 3:
				{
				State = 1296; Match(LPAREN);
				State = 1297; variable();
				State = 1298; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		public DeleteOutputContext deleteOutput() {
			return GetRuleContext<DeleteOutputContext>(0);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public DeleteFromClauseLooseContext deleteFromClauseLoose(int i) {
			return GetRuleContext<DeleteFromClauseLooseContext>(i);
		}
		public DeleteFromClauseContext[] deleteFromClause() {
			return GetRuleContexts<DeleteFromClauseContext>();
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public DeleteTopContext deleteTop() {
			return GetRuleContext<DeleteTopContext>(0);
		}
		public DeleteFromClauseLooseContext[] deleteFromClauseLoose() {
			return GetRuleContexts<DeleteFromClauseLooseContext>();
		}
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public DeleteFromClauseContext deleteFromClause(int i) {
			return GetRuleContext<DeleteFromClauseContext>(i);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			State = 1351;
			switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1302; Match(DELETE);
				State = 1304;
				switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					State = 1303; deleteTop();
					}
					break;
				}
				State = 1307;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1306; deleteFromClause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1309;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,132,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1312;
				_la = _input.La(1);
				if (_la==OUTPUT) {
					{
					State = 1311; deleteOutput();
					}
				}

				State = 1317;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1314; joinOrApply();
					}
					}
					State = 1319;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1321;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1320; whereClause();
					}
				}

				State = 1324;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1323; dmlOptions();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1326; Match(DELETE);
				State = 1328;
				switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
				case 1:
					{
					State = 1327; deleteTop();
					}
					break;
				}
				State = 1330; tableTarget();
				State = 1332;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1331; deleteFromClauseLoose();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1334;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,138,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1337;
				_la = _input.La(1);
				if (_la==OUTPUT) {
					{
					State = 1336; deleteOutput();
					}
				}

				State = 1342;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1339; joinOrApply();
					}
					}
					State = 1344;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1346;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1345; whereClause();
					}
				}

				State = 1349;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1348; dmlOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFromClauseContext : ParserRuleContext {
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public DeleteFromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFromClauseContext deleteFromClause() {
		DeleteFromClauseContext _localctx = new DeleteFromClauseContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_deleteFromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1354;
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				State = 1353; Match(FROM);
				}
				break;
			}
			State = 1356; tableTargetWithOptions();
			State = 1361;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1357; Match(COMMA);
				State = 1358; tableSourceWithOptions();
				}
				}
				State = 1363;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFromClauseLooseContext : ParserRuleContext {
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public DeleteFromClauseLooseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFromClauseLoose; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteFromClauseLoose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteFromClauseLoose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteFromClauseLoose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFromClauseLooseContext deleteFromClauseLoose() {
		DeleteFromClauseLooseContext _localctx = new DeleteFromClauseLooseContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_deleteFromClauseLoose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1364; Match(FROM);
				}
				break;
			}
			State = 1367; tableSourceWithOptions();
			State = 1372;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1368; Match(COMMA);
				State = 1369; tableSourceWithOptions();
				}
				}
				State = 1374;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteOutputContext : ParserRuleContext {
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public DeleteOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteOutputContext deleteOutput() {
		DeleteOutputContext _localctx = new DeleteOutputContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_deleteOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375; Match(OUTPUT);
			State = 1376; qualifiedColumnNameList();
			State = 1377; Match(INTO);
			State = 1378; tableTargetWithOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionContext : ParserRuleContext {
		public CommonTableExpressionAtomContext commonTableExpressionAtom(int i) {
			return GetRuleContext<CommonTableExpressionAtomContext>(i);
		}
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public CommonTableExpressionAtomContext[] commonTableExpressionAtom() {
			return GetRuleContexts<CommonTableExpressionAtomContext>();
		}
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCommonTableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCommonTableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionContext commonTableExpression() {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_commonTableExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1380; Match(WITH);
			State = 1381; commonTableExpressionAtom();
			State = 1386;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1382; Match(COMMA);
				State = 1383; commonTableExpressionAtom();
				}
				}
				State = 1388;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1389; dml();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionAtomContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public ITerminalNode LPAREN(int i) {
			return GetToken(TSQLParser.LPAREN, i);
		}
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(TSQLParser.RPAREN, i);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(TSQLParser.RPAREN); }
		public ITerminalNode[] LPAREN() { return GetTokens(TSQLParser.LPAREN); }
		public CommonTableExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpressionAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCommonTableExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCommonTableExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionAtomContext commonTableExpressionAtom() {
		CommonTableExpressionAtomContext _localctx = new CommonTableExpressionAtomContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_commonTableExpressionAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1391; qualifiedName();
			State = 1396;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1392; Match(LPAREN);
				State = 1393; columnList();
				State = 1394; Match(RPAREN);
				}
			}

			State = 1398; Match(AS);
			State = 1399; Match(LPAREN);
			State = 1400; dml();
			State = 1401; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public InsertPreambleContext insertPreamble() {
			return GetRuleContext<InsertPreambleContext>(0);
		}
		public InsertOutputClauseContext insertOutputClause() {
			return GetRuleContext<InsertOutputClauseContext>(0);
		}
		public InsertDataSourceContext insertDataSource() {
			return GetRuleContext<InsertDataSourceContext>(0);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1403; insertPreamble();
			State = 1405;
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 1404; insertOutputClause();
				}
				break;
			}
			State = 1407; insertDataSource();
			State = 1409;
			_la = _input.La(1);
			if (_la==OPTION) {
				{
				State = 1408; dmlOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertPreambleContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public TableTargetOptionsContext tableTargetOptions() {
			return GetRuleContext<TableTargetOptionsContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public InsertPreambleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertPreamble; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertPreamble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertPreamble(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertPreamble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertPreambleContext insertPreamble() {
		InsertPreambleContext _localctx = new InsertPreambleContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_insertPreamble);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1411; Match(INSERT);
			State = 1413;
			switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				State = 1412; Match(INTO);
				}
				break;
			}
			State = 1415; tableTarget();
			State = 1417;
			switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				State = 1416; tableTargetOptions();
				}
				break;
			}
			State = 1423;
			switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				State = 1419; Match(LPAREN);
				State = 1420; qualifiedNameList();
				State = 1421; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertOutputClauseContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public InsertOutputClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertOutputClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertOutputClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertOutputClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertOutputClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertOutputClauseContext insertOutputClause() {
		InsertOutputClauseContext _localctx = new InsertOutputClauseContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_insertOutputClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425; Match(OUTPUT);
			State = 1426; selectList();
			State = 1435;
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				State = 1427; Match(INTO);
				State = 1428; tableTarget();
				State = 1433;
				switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					State = 1429; Match(LPAREN);
					State = 1430; qualifiedColumnNameList();
					State = 1431; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertDataSourceContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public InsertValueListContext insertValueList(int i) {
			return GetRuleContext<InsertValueListContext>(i);
		}
		public InsertValueListContext[] insertValueList() {
			return GetRuleContexts<InsertValueListContext>();
		}
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public InsertDataSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertDataSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertDataSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertDataSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertDataSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertDataSourceContext insertDataSource() {
		InsertDataSourceContext _localctx = new InsertDataSourceContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_insertDataSource);
		int _la;
		try {
			State = 1450;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1437; Match(VALUES);
				State = 1438; insertValueList();
				State = 1443;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1439; Match(COMMA);
					State = 1440; insertValueList();
					}
					}
					State = 1445;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1446; Match(DEFAULT);
				State = 1447; Match(VALUES);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1448; selectStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1449; tableSource();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValueListContext : ParserRuleContext {
		public InsertValueContext insertValue(int i) {
			return GetRuleContext<InsertValueContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public InsertValueContext[] insertValue() {
			return GetRuleContexts<InsertValueContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public InsertValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValueListContext insertValueList() {
		InsertValueListContext _localctx = new InsertValueListContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_insertValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452; Match(LPAREN);
			State = 1453; insertValue();
			State = 1458;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1454; Match(COMMA);
				State = 1455; insertValue();
				}
				}
				State = 1460;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1461; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InsertValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValueContext insertValue() {
		InsertValueContext _localctx = new InsertValueContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_insertValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1463; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStatementContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSQLParser.FOR); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public ITerminalNode DECLARE() { return GetToken(TSQLParser.DECLARE, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSQLParser.FOR, i);
		}
		public ITerminalNode OF() { return GetToken(TSQLParser.OF, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public DeclareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeclareStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeclareStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStatementContext declareStatement() {
		DeclareStatementContext _localctx = new DeclareStatementContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_declareStatement);
		int _la;
		try {
			State = 1488;
			switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1465; Match(DECLARE);
				State = 1466; variableDeclaration();
				State = 1471;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1467; Match(COMMA);
					State = 1468; variableDeclaration();
					}
					}
					State = 1473;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1474; Match(DECLARE);
				State = 1475; qualifiedName();
				State = 1476; Match(CURSOR);
				State = 1478;
				_la = _input.La(1);
				if (_la==Identifier) {
					{
					State = 1477; Match(Identifier);
					}
				}

				State = 1480; Match(FOR);
				State = 1481; selectStatement();
				State = 1486;
				_la = _input.La(1);
				if (_la==FOR) {
					{
					State = 1482; Match(FOR);
					State = 1483; Match(UPDATE);
					State = 1484; Match(OF);
					State = 1485; tableTarget();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public TableDeclarationOptionsContext tableDeclarationOptions() {
			return GetRuleContext<TableDeclarationOptionsContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ColumnDefinitionListContext columnDefinitionList() {
			return GetRuleContext<ColumnDefinitionListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490; variable();
			State = 1510;
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1492;
				switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
				case 1:
					{
					State = 1491; Match(AS);
					}
					break;
				}
				State = 1494; type();
				State = 1496;
				switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					State = 1495; variableDeclarationAssignment();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1498; Match(TABLE);
				State = 1499; Match(LPAREN);
				State = 1500; columnDefinitionList();
				State = 1503;
				switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
				case 1:
					{
					State = 1501; Match(COMMA);
					State = 1502; tableDeclarationOptions();
					}
					break;
				}
				State = 1506;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1505; Match(COMMA);
					}
				}

				State = 1508; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
		VariableDeclarationAssignmentContext _localctx = new VariableDeclarationAssignmentContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_variableDeclarationAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 1512; Match(EQUALS);
				State = 1513; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnListContext : ParserRuleContext {
		public ColumnNameContext columnName(int i) {
			return GetRuleContext<ColumnNameContext>(i);
		}
		public ColumnNameContext[] columnName() {
			return GetRuleContexts<ColumnNameContext>();
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnListContext columnList() {
		ColumnListContext _localctx = new ColumnListContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_columnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516; columnName();
			State = 1521;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1517; Match(COMMA);
				State = 1518; columnName();
				}
				}
				State = 1523;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionListContext : ParserRuleContext {
		public ColumnDefinitionContext columnDefinition(int i) {
			return GetRuleContext<ColumnDefinitionContext>(i);
		}
		public ColumnDefinitionContext[] columnDefinition() {
			return GetRuleContexts<ColumnDefinitionContext>();
		}
		public ColumnDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinitionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnDefinitionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnDefinitionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionListContext columnDefinitionList() {
		ColumnDefinitionListContext _localctx = new ColumnDefinitionListContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_columnDefinitionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1524; columnDefinition();
			State = 1529;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,171,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1525; Match(COMMA);
					State = 1526; columnDefinition();
					}
					} 
				}
				State = 1531;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,171,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public IdentitySpecContext identitySpec() {
			return GetRuleContext<IdentitySpecContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_columnDefinition);
		int _la;
		try {
			State = 1579;
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1532; columnName();
				State = 1533; type();
				State = 1539;
				_la = _input.La(1);
				if (_la==PRIMARY) {
					{
					State = 1534; Match(PRIMARY);
					State = 1535; Match(KEY);
					State = 1537;
					_la = _input.La(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						State = 1536; clusterType();
						}
					}

					}
				}

				State = 1542;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 1541; Match(NOT);
					}
				}

				State = 1545;
				_la = _input.La(1);
				if (_la==NULL) {
					{
					State = 1544; Match(NULL);
					}
				}

				State = 1552;
				_la = _input.La(1);
				if (_la==DEFAULT) {
					{
					State = 1547; Match(DEFAULT);
					State = 1550;
					switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
					case 1:
						{
						State = 1548; literalValue();
						}
						break;

					case 2:
						{
						State = 1549; functionCall();
						}
						break;
					}
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1554; columnName();
				State = 1555; integerType();
				State = 1561;
				_la = _input.La(1);
				if (_la==PRIMARY) {
					{
					State = 1556; Match(PRIMARY);
					State = 1557; Match(KEY);
					State = 1559;
					_la = _input.La(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						State = 1558; clusterType();
						}
					}

					}
				}

				State = 1564;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 1563; Match(NOT);
					}
				}

				State = 1567;
				_la = _input.La(1);
				if (_la==NULL) {
					{
					State = 1566; Match(NULL);
					}
				}

				State = 1570;
				_la = _input.La(1);
				if (_la==IDENTITY) {
					{
					State = 1569; identitySpec();
					}
				}

				State = 1577;
				_la = _input.La(1);
				if (_la==DEFAULT) {
					{
					State = 1572; Match(DEFAULT);
					State = 1575;
					switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
					case 1:
						{
						State = 1573; literalValue();
						}
						break;

					case 2:
						{
						State = 1574; functionCall();
						}
						break;
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeclarationOptionsContext : ParserRuleContext {
		public TableDeclarationOptionContext tableDeclarationOption(int i) {
			return GetRuleContext<TableDeclarationOptionContext>(i);
		}
		public TableDeclarationOptionContext[] tableDeclarationOption() {
			return GetRuleContexts<TableDeclarationOptionContext>();
		}
		public TableDeclarationOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeclarationOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableDeclarationOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableDeclarationOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeclarationOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeclarationOptionsContext tableDeclarationOptions() {
		TableDeclarationOptionsContext _localctx = new TableDeclarationOptionsContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_tableDeclarationOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581; tableDeclarationOption();
			State = 1586;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,186,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1582; Match(COMMA);
					State = 1583; tableDeclarationOption();
					}
					} 
				}
				State = 1588;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,186,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeclarationOptionContext : ParserRuleContext {
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public TableDeclarationOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeclarationOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableDeclarationOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableDeclarationOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeclarationOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeclarationOptionContext tableDeclarationOption() {
		TableDeclarationOptionContext _localctx = new TableDeclarationOptionContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_tableDeclarationOption);
		int _la;
		try {
			State = 1608;
			switch (_input.La(1)) {
			case UNIQUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1589; Match(UNIQUE);
				State = 1591;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1590; clusterType();
					}
				}

				State = 1593; Match(LPAREN);
				State = 1594; columnList();
				State = 1595; Match(RPAREN);
				}
				break;
			case PRIMARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1597; Match(PRIMARY);
				State = 1598; Match(KEY);
				State = 1600;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1599; clusterType();
					}
				}

				State = 1602; Match(LPAREN);
				State = 1603; orderedIndexColumnList();
				State = 1604; Match(RPAREN);
				State = 1606;
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 1605; basicOptionList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionNameContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PartitionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPartitionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPartitionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionNameContext partitionName() {
		PartitionNameContext _localctx = new PartitionNameContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_partitionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public SetVariableAssignmentContext setVariableAssignment() {
			return GetRuleContext<SetVariableAssignmentContext>(0);
		}
		public SetSessionOtherContext setSessionOther() {
			return GetRuleContext<SetSessionOtherContext>(0);
		}
		public SetVariableToCursorContext setVariableToCursor() {
			return GetRuleContext<SetVariableToCursorContext>(0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_setStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612; Match(SET);
			State = 1616;
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 1613; setVariableAssignment();
				}
				break;

			case 2:
				{
				State = 1614; setVariableToCursor();
				}
				break;

			case 3:
				{
				State = 1615; setSessionOther();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSessionOtherContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TransactionIsolationLevelContext transactionIsolationLevel() {
			return GetRuleContext<TransactionIsolationLevelContext>(0);
		}
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSQLParser.LEVEL, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSQLParser.ISOLATION, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSQLParser.ROWCOUNT, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public SetSessionOtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSessionOther; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetSessionOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetSessionOther(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSessionOther(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetSessionOtherContext setSessionOther() {
		SetSessionOtherContext _localctx = new SetSessionOtherContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_setSessionOther);
		int _la;
		try {
			int _alt;
			State = 1632;
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1618; Match(ROWCOUNT);
				State = 1619; integerValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1620; Match(TRANSACTION);
				State = 1621; Match(ISOLATION);
				State = 1622; Match(LEVEL);
				State = 1623; transactionIsolationLevel();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1625;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1624; qualifiedName();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1627;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,192,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1629;
				_la = _input.La(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1631; qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableAssignmentContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyOrFieldContext propertyOrField() {
			return GetRuleContext<PropertyOrFieldContext>(0);
		}
		public SetVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariableAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetVariableAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetVariableAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableAssignmentContext setVariableAssignment() {
		SetVariableAssignmentContext _localctx = new SetVariableAssignmentContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_setVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634; variable();
			State = 1636;
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 1635; propertyOrField();
				}
			}

			State = 1638; assignmentOperator();
			State = 1639; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableToCursorContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode EQUALS() { return GetToken(TSQLParser.EQUALS, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public PropertyOrFieldContext propertyOrField() {
			return GetRuleContext<PropertyOrFieldContext>(0);
		}
		public SetVariableToCursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariableToCursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetVariableToCursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetVariableToCursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariableToCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableToCursorContext setVariableToCursor() {
		SetVariableToCursorContext _localctx = new SetVariableToCursorContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_setVariableToCursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1641; variable();
			State = 1643;
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 1642; propertyOrField();
				}
			}

			State = 1645; Match(EQUALS);
			State = 1646; Match(CURSOR);
			State = 1647; Match(FOR);
			State = 1648; selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionIsolationLevelContext : ParserRuleContext {
		public TransactionIsolationLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionIsolationLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTransactionIsolationLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTransactionIsolationLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionIsolationLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionIsolationLevelContext transactionIsolationLevel() {
		TransactionIsolationLevelContext _localctx = new TransactionIsolationLevelContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_transactionIsolationLevel);
		int _la;
		try {
			State = 1656;
			switch (_input.La(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1650; Match(T__9);
				State = 1651;
				_la = _input.La(1);
				if ( !(_la==T__5 || _la==T__2) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1652; Match(T__8);
				State = 1653; Match(T__9);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1654; Match(T__10);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1655; Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateTopContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public UpdateTopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateTop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateTop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateTop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateTopContext updateTop() {
		UpdateTopContext _localctx = new UpdateTopContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_updateTop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1658; Match(TOP);
			State = 1665;
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 1659; integerValue();
				}
				break;

			case 2:
				{
				State = 1660; variable();
				}
				break;

			case 3:
				{
				State = 1661; Match(LPAREN);
				State = 1662; variable();
				State = 1663; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public MoreInnerJoinContext moreInnerJoin(int i) {
			return GetRuleContext<MoreInnerJoinContext>(i);
		}
		public UpdateStatementSetClauseRestContext[] updateStatementSetClauseRest() {
			return GetRuleContexts<UpdateStatementSetClauseRestContext>();
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public UpdateTopContext updateTop() {
			return GetRuleContext<UpdateTopContext>(0);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public UpdateStatementSetClauseRestContext updateStatementSetClauseRest(int i) {
			return GetRuleContext<UpdateStatementSetClauseRestContext>(i);
		}
		public MoreInnerJoinContext[] moreInnerJoin() {
			return GetRuleContexts<MoreInnerJoinContext>();
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_updateStatement);
		int _la;
		try {
			int _alt;
			State = 1708;
			switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1667; Match(UPDATE);
				State = 1669;
				switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					State = 1668; updateTop();
					}
					break;
				}
				State = 1671; tableTargetWithOptions();
				State = 1672; Match(SET);
				State = 1673; updateStatementSetClauseRest();
				State = 1678;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,199,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1674; Match(COMMA);
						State = 1675; updateStatementSetClauseRest();
						}
						} 
					}
					State = 1680;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,199,_ctx);
				}
				State = 1682;
				_la = _input.La(1);
				if (_la==FROM) {
					{
					State = 1681; fromClause();
					}
				}

				State = 1687;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1684; joinOrApply();
					}
					}
					State = 1689;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1693;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1690; moreInnerJoin();
					}
					}
					State = 1695;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1697;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1696; whereClause();
					}
				}

				State = 1700;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1699; dmlOptions();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1702; Match(UPDATE);
				State = 1703; Match(STATISTICS);
				State = 1704; tableTarget();
				State = 1706;
				switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					State = 1705; basicOptionList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementSetClauseRestContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ITerminalNode EQUALS() { return GetToken(TSQLParser.EQUALS, 0); }
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public UpdateStatementSetClauseRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatementSetClauseRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateStatementSetClauseRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateStatementSetClauseRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatementSetClauseRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementSetClauseRestContext updateStatementSetClauseRest() {
		UpdateStatementSetClauseRestContext _localctx = new UpdateStatementSetClauseRestContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_updateStatementSetClauseRest);
		try {
			State = 1739;
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1710; qualifiedColumnName();
				State = 1711; assignmentOperator();
				State = 1715;
				switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					State = 1712; expression();
					}
					break;

				case 2:
					{
					State = 1713; Match(DEFAULT);
					}
					break;

				case 3:
					{
					State = 1714; Match(NULL);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1717; variable();
				State = 1718; assignmentOperator();
				State = 1722;
				switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					State = 1719; qualifiedColumnName();
					State = 1720; Match(EQUALS);
					}
					break;
				}
				State = 1724; expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1726; qualifiedColumnName();
				State = 1727; Match(DOT);
				State = 1728; qualifiedNamePart();
				State = 1737;
				switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
				case 1:
					{
					State = 1729; Match(EQUALS);
					State = 1730; expression();
					}
					break;

				case 2:
					{
					State = 1731; Match(LPAREN);
					State = 1732; Match(RPAREN);
					}
					break;

				case 3:
					{
					State = 1733; Match(LPAREN);
					State = 1734; argumentList();
					State = 1735; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_argument);
		try {
			State = 1744;
			switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1741; expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1742; tempTable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1743; type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1746; argument();
			State = 1751;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1747; Match(COMMA);
				State = 1748; argument();
				}
				}
				State = 1753;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputeStatementContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMPUTE() { return GetToken(TSQLParser.COMPUTE, 0); }
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ComputeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterComputeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitComputeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputeStatementContext computeStatement() {
		ComputeStatementContext _localctx = new ComputeStatementContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_computeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754; Match(COMPUTE);
			State = 1755; expression();
			State = 1760;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1756; Match(COMMA);
				State = 1757; expression();
				}
				}
				State = 1762;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1772;
			_la = _input.La(1);
			if (_la==BY) {
				{
				State = 1763; Match(BY);
				State = 1764; expression();
				State = 1769;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1765; Match(COMMA);
					State = 1766; expression();
					}
					}
					State = 1771;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public ITerminalNode[] EXCEPT() { return GetTokens(TSQLParser.EXCEPT); }
		public SelectStatementPartContext[] selectStatementPart() {
			return GetRuleContexts<SelectStatementPartContext>();
		}
		public ITerminalNode[] UNION() { return GetTokens(TSQLParser.UNION); }
		public ITerminalNode EXCEPT(int i) {
			return GetToken(TSQLParser.EXCEPT, i);
		}
		public ITerminalNode[] ALL() { return GetTokens(TSQLParser.ALL); }
		public ITerminalNode[] INTERSECT() { return GetTokens(TSQLParser.INTERSECT); }
		public ITerminalNode ALL(int i) {
			return GetToken(TSQLParser.ALL, i);
		}
		public SelectStatementPartContext selectStatementPart(int i) {
			return GetRuleContext<SelectStatementPartContext>(i);
		}
		public ITerminalNode UNION(int i) {
			return GetToken(TSQLParser.UNION, i);
		}
		public ITerminalNode INTERSECT(int i) {
			return GetToken(TSQLParser.INTERSECT, i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_selectStatement);
		int _la;
		try {
			State = 1793;
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1774; selectStatementPart();
				State = 1782;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==UNION) {
					{
					{
					State = 1775; Match(UNION);
					State = 1777;
					_la = _input.La(1);
					if (_la==ALL) {
						{
						State = 1776; Match(ALL);
						}
					}

					State = 1779; selectStatementPart();
					}
					}
					State = 1784;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1785; selectStatementPart();
				State = 1790;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==INTERSECT || _la==EXCEPT) {
					{
					{
					State = 1786;
					_la = _input.La(1);
					if ( !(_la==INTERSECT || _la==EXCEPT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 1787; selectStatementPart();
					}
					}
					State = 1792;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementPartContext : ParserRuleContext {
		public MoreInnerJoinContext moreInnerJoin(int i) {
			return GetRuleContext<MoreInnerJoinContext>(i);
		}
		public XmlWithOptionContext xmlWithOption() {
			return GetRuleContext<XmlWithOptionContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ForXmlClauseContext forXmlClause() {
			return GetRuleContext<ForXmlClauseContext>(0);
		}
		public ITerminalNode SELECT() { return GetToken(TSQLParser.SELECT, 0); }
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public SelectTopLimitContext selectTopLimit() {
			return GetRuleContext<SelectTopLimitContext>(0);
		}
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public MoreInnerJoinContext[] moreInnerJoin() {
			return GetRuleContexts<MoreInnerJoinContext>();
		}
		public SelectStatementPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatementPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectStatementPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectStatementPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatementPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementPartContext selectStatementPart() {
		SelectStatementPartContext _localctx = new SelectStatementPartContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_selectStatementPart);
		int _la;
		try {
			State = 1843;
			switch (_input.La(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1795; Match(SELECT);
				State = 1797;
				switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					State = 1796; selectTopLimit();
					}
					break;
				}
				State = 1799; selectList();
				State = 1801;
				_la = _input.La(1);
				if (_la==INTO) {
					{
					State = 1800; intoClause();
					}
				}

				State = 1804;
				_la = _input.La(1);
				if (_la==FROM) {
					{
					State = 1803; fromClause();
					}
				}

				State = 1807;
				switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
				case 1:
					{
					State = 1806; xmlWithOption();
					}
					break;
				}
				State = 1812;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1809; joinOrApply();
					}
					}
					State = 1814;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1818;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1815; moreInnerJoin();
					}
					}
					State = 1820;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1822;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1821; whereClause();
					}
				}

				State = 1825;
				_la = _input.La(1);
				if (_la==GROUP) {
					{
					State = 1824; groupByClause();
					}
				}

				State = 1828;
				_la = _input.La(1);
				if (_la==HAVING) {
					{
					State = 1827; havingClause();
					}
				}

				State = 1831;
				_la = _input.La(1);
				if (_la==ORDER) {
					{
					State = 1830; orderByClause();
					}
				}

				State = 1834;
				switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					State = 1833; dmlOptions();
					}
					break;
				}
				State = 1837;
				switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					State = 1836; forXmlClause();
					}
					break;
				}
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1839; Match(LPAREN);
				State = 1840; selectStatement();
				State = 1841; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlWithOptionContext : ParserRuleContext {
		public QualifiedNameContext Alias;
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public XmlDefinitionListContext xmlDefinitionList() {
			return GetRuleContext<XmlDefinitionListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public XmlWithOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlWithOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlWithOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlWithOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlWithOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlWithOptionContext xmlWithOption() {
		XmlWithOptionContext _localctx = new XmlWithOptionContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_xmlWithOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845; Match(WITH);
			State = 1846; Match(LPAREN);
			State = 1847; xmlDefinitionList();
			State = 1848; Match(RPAREN);
			State = 1850;
			switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				State = 1849; _localctx.Alias = qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlDefinitionListContext : ParserRuleContext {
		public XmlDefinitionContext xmlDefinition(int i) {
			return GetRuleContext<XmlDefinitionContext>(i);
		}
		public XmlDefinitionContext[] xmlDefinition() {
			return GetRuleContexts<XmlDefinitionContext>();
		}
		public XmlDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlDefinitionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlDefinitionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlDefinitionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlDefinitionListContext xmlDefinitionList() {
		XmlDefinitionListContext _localctx = new XmlDefinitionListContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_xmlDefinitionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1852; xmlDefinition();
			State = 1857;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1853; Match(COMMA);
				State = 1854; xmlDefinition();
				}
				}
				State = 1859;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlDefinitionContext : ParserRuleContext {
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public XmlDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlDefinitionContext xmlDefinition() {
		XmlDefinitionContext _localctx = new XmlDefinitionContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_xmlDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1860; columnName();
			State = 1861; type();
			State = 1864;
			switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				State = 1862; literalValue();
				}
				break;

			case 2:
				{
				State = 1863; functionCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForXmlClauseContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode RAW() { return GetToken(TSQLParser.RAW, 0); }
		public ITerminalNode PATH() { return GetToken(TSQLParser.PATH, 0); }
		public ITerminalNode AUTO() { return GetToken(TSQLParser.AUTO, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSQLParser.EXPLICIT, 0); }
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public ForXmlClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forXmlClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterForXmlClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitForXmlClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForXmlClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForXmlClauseContext forXmlClause() {
		ForXmlClauseContext _localctx = new ForXmlClauseContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_forXmlClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866; Match(FOR);
			State = 1867; Match(XML);
			State = 1877;
			switch (_input.La(1)) {
			case AUTO:
				{
				State = 1868; Match(AUTO);
				}
				break;
			case RAW:
				{
				State = 1869; Match(RAW);
				}
				break;
			case EXPLICIT:
				{
				State = 1870; Match(EXPLICIT);
				}
				break;
			case PATH:
				{
				State = 1871; Match(PATH);
				State = 1872; Match(LPAREN);
				State = 1874;
				_la = _input.La(1);
				if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
					{
					State = 1873; argumentList();
					}
				}

				State = 1876; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTopLimitContext : ParserRuleContext {
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public SelectTopLimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTopLimit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectTopLimit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectTopLimit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTopLimit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTopLimitContext selectTopLimit() {
		SelectTopLimitContext _localctx = new SelectTopLimitContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_selectTopLimit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1880;
			_la = _input.La(1);
			if (_la==DISTINCT) {
				{
				State = 1879; Match(DISTINCT);
				}
			}

			State = 1882; Match(TOP);
			State = 1892;
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				State = 1883; integerValue();
				State = 1885;
				_la = _input.La(1);
				if (_la==T__6) {
					{
					State = 1884; Match(T__6);
					}
				}

				}
				break;

			case 2:
				{
				State = 1887; variable();
				}
				break;

			case 3:
				{
				State = 1888; Match(LPAREN);
				State = 1889; variable();
				State = 1890; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectVariableAssignmentContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectVariableAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectVariableAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectVariableAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectVariableAssignmentContext selectVariableAssignment() {
		SelectVariableAssignmentContext _localctx = new SelectVariableAssignmentContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_selectVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894; variable();
			State = 1895;
			_la = _input.La(1);
			if ( !(((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (EQUALS - 170)) | (1L << (ADD_ASSIGN - 170)) | (1L << (SUB_ASSIGN - 170)) | (1L << (MUL_ASSIGN - 170)) | (1L << (DIV_ASSIGN - 170)) | (1L << (AND_ASSIGN - 170)) | (1L << (OR_ASSIGN - 170)) | (1L << (XOR_ASSIGN - 170)) | (1L << (MOD_ASSIGN - 170)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1896; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		public SelectListElementContext selectListElement(int i) {
			return GetRuleContext<SelectListElementContext>(i);
		}
		public SelectListElementContext[] selectListElement() {
			return GetRuleContexts<SelectListElementContext>();
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_selectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898; selectListElement();
			State = 1903;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,241,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1899; Match(COMMA);
					State = 1900; selectListElement();
					}
					} 
				}
				State = 1905;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,241,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListElementContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSQLParser.DOT, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(TSQLParser.STAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColumnAliasContext columnAlias() {
			return GetRuleContext<ColumnAliasContext>(0);
		}
		public SelectListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListElementContext selectListElement() {
		SelectListElementContext _localctx = new SelectListElementContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_selectListElement);
		int _la;
		try {
			State = 1939;
			switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1907;
				switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					State = 1906; Match(DISTINCT);
					}
					break;
				}
				State = 1924;
				switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					State = 1909; expression();
					State = 1911;
					switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
					case 1:
						{
						State = 1910; overClause();
						}
						break;
					}
					State = 1917;
					switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
					case 1:
						{
						State = 1914;
						_la = _input.La(1);
						if (_la==AS) {
							{
							State = 1913; Match(AS);
							}
						}

						State = 1916; columnAlias();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 1919; qualifiedName();
					State = 1920; Match(DOT);
					State = 1921; Match(STAR);
					}
					break;

				case 3:
					{
					State = 1923; Match(STAR);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1926; variable();
				State = 1927;
				_la = _input.La(1);
				if ( !(((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (EQUALS - 170)) | (1L << (ADD_ASSIGN - 170)) | (1L << (SUB_ASSIGN - 170)) | (1L << (MUL_ASSIGN - 170)) | (1L << (DIV_ASSIGN - 170)) | (1L << (AND_ASSIGN - 170)) | (1L << (OR_ASSIGN - 170)) | (1L << (XOR_ASSIGN - 170)) | (1L << (MOD_ASSIGN - 170)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1928; expression();
				State = 1933;
				switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					State = 1930;
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1929; Match(AS);
						}
					}

					State = 1932; columnAlias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1935; qualifiedColumnName();
				{
				State = 1936; Match(EQUALS);
				}
				State = 1937; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlOptionsContext : ParserRuleContext {
		public DmlOptionContext[] dmlOption() {
			return GetRuleContexts<DmlOptionContext>();
		}
		public DmlOptionContext dmlOption(int i) {
			return GetRuleContext<DmlOptionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode OPTION() { return GetToken(TSQLParser.OPTION, 0); }
		public DmlOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDmlOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDmlOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlOptionsContext dmlOptions() {
		DmlOptionsContext _localctx = new DmlOptionsContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_dmlOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1941; Match(OPTION);
			State = 1942; Match(LPAREN);
			State = 1943; dmlOption();
			State = 1948;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1944; Match(COMMA);
				State = 1945; dmlOption();
				}
				}
				State = 1950;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1951; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlOptionContext : ParserRuleContext {
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSQLParser.OPTIMIZE, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public DmlOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDmlOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDmlOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlOptionContext dmlOption() {
		DmlOptionContext _localctx = new DmlOptionContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_dmlOption);
		int _la;
		try {
			State = 1966;
			switch (_input.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1953; Match(Identifier);
				State = 1955;
				_la = _input.La(1);
				if (_la==NULL || _la==LPAREN || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (PLUS - 180)) | (1L << (MINUS - 180)) | (1L << (FloatingPointLiteral - 180)) | (1L << (StringLiteral - 180)) | (1L << (IntegerLiteral - 180)))) != 0)) {
					{
					State = 1954; literalValue();
					}
				}

				}
				break;
			case OPTIMIZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1957; Match(OPTIMIZE);
				State = 1958; Match(FOR);
				State = 1959; Match(LPAREN);
				{
				State = 1960; variable();
				State = 1961; Match(EQUALS);
				State = 1962; literalValue();
				}
				State = 1964; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverClauseContext : ParserRuleContext {
		public ITerminalNode BY(int i) {
			return GetToken(TSQLParser.BY, i);
		}
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSQLParser.PARTITION, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode ORDER(int i) {
			return GetToken(TSQLParser.ORDER, i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OVER() { return GetToken(TSQLParser.OVER, 0); }
		public ITerminalNode[] ORDER() { return GetTokens(TSQLParser.ORDER); }
		public OrderByElementContext[] orderByElement() {
			return GetRuleContexts<OrderByElementContext>();
		}
		public ITerminalNode[] BY() { return GetTokens(TSQLParser.BY); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public OrderByElementContext orderByElement(int i) {
			return GetRuleContext<OrderByElementContext>(i);
		}
		public ITerminalNode[] PARTITION() { return GetTokens(TSQLParser.PARTITION); }
		public OverClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOverClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOverClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverClauseContext overClause() {
		OverClauseContext _localctx = new OverClauseContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_overClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1968; Match(OVER);
			State = 1969; Match(LPAREN);
			State = 1990;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 1990;
				switch (_input.La(1)) {
				case PARTITION:
					{
					State = 1970; Match(PARTITION);
					State = 1971; Match(BY);
					State = 1972; expression();
					State = 1977;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1973; Match(COMMA);
						State = 1974; expression();
						}
						}
						State = 1979;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				case ORDER:
					{
					State = 1980; Match(ORDER);
					State = 1981; Match(BY);
					State = 1982; orderByElement();
					State = 1987;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1983; Match(COMMA);
						State = 1984; orderByElement();
						}
						}
						State = 1989;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1992;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PARTITION || _la==ORDER );
			State = 1994; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntoClauseContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public IntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntoClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntoClauseContext intoClause() {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_intoClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996; Match(INTO);
			State = 1997; tableTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_fromClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999; Match(FROM);
			State = 2000; tableSourceWithOptions();
			State = 2005;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,257,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2001; Match(COMMA);
					State = 2002; tableSourceWithOptions();
					}
					} 
				}
				State = 2007;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,257,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreInnerJoinContext : ParserRuleContext {
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public MoreInnerJoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreInnerJoin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMoreInnerJoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMoreInnerJoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreInnerJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreInnerJoinContext moreInnerJoin() {
		MoreInnerJoinContext _localctx = new MoreInnerJoinContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_moreInnerJoin);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2010;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2008; Match(COMMA);
					State = 2009; tableSourceWithOptions();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2012;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,258,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		public GroupByElementContext groupByElement(int i) {
			return GetRuleContext<GroupByElementContext>(i);
		}
		public GroupByElementContext[] groupByElement() {
			return GetRuleContexts<GroupByElementContext>();
		}
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public ITerminalNode GROUP() { return GetToken(TSQLParser.GROUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_groupByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2014; Match(GROUP);
			State = 2015; Match(BY);
			State = 2016; groupByElement();
			State = 2021;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2017; Match(COMMA);
				State = 2018; groupByElement();
				}
				}
				State = 2023;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByElementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColumnIndexOrNameContext columnIndexOrName() {
			return GetRuleContext<ColumnIndexOrNameContext>(0);
		}
		public GroupByElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterGroupByElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitGroupByElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByElementContext groupByElement() {
		GroupByElementContext _localctx = new GroupByElementContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_groupByElement);
		try {
			State = 2026;
			switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2024; columnIndexOrName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2025; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public ITerminalNode HAVING() { return GetToken(TSQLParser.HAVING, 0); }
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2028; Match(HAVING);
			State = 2029; predicateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinOrApplyContext : ParserRuleContext {
		public ITerminalNode APPLY() { return GetToken(TSQLParser.APPLY, 0); }
		public ITerminalNode JOIN() { return GetToken(TSQLParser.JOIN, 0); }
		public ITerminalNode[] ON() { return GetTokens(TSQLParser.ON); }
		public PredicateListContext[] predicateList() {
			return GetRuleContexts<PredicateListContext>();
		}
		public ITerminalNode ON(int i) {
			return GetToken(TSQLParser.ON, i);
		}
		public PredicateListContext predicateList(int i) {
			return GetRuleContext<PredicateListContext>(i);
		}
		public JoinTypeContext joinType() {
			return GetRuleContext<JoinTypeContext>(0);
		}
		public TableSourceWithOptionsContext tableSourceWithOptions() {
			return GetRuleContext<TableSourceWithOptionsContext>(0);
		}
		public JoinOrApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinOrApply; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterJoinOrApply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitJoinOrApply(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinOrApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinOrApplyContext joinOrApply() {
		JoinOrApplyContext _localctx = new JoinOrApplyContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_joinOrApply);
		int _la;
		try {
			State = 2048;
			switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2032;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0)) {
					{
					State = 2031; joinType();
					}
				}

				State = 2034; Match(JOIN);
				State = 2035; tableSourceWithOptions();
				State = 2040;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ON) {
					{
					{
					State = 2036; Match(ON);
					State = 2037; predicateList();
					}
					}
					State = 2042;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2044;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0)) {
					{
					State = 2043; joinType();
					}
				}

				State = 2046; Match(APPLY);
				State = 2047; tableSourceWithOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinTypeContext : ParserRuleContext {
		public ITerminalNode OUTER() { return GetToken(TSQLParser.OUTER, 0); }
		public ITerminalNode FULL() { return GetToken(TSQLParser.FULL, 0); }
		public ITerminalNode CROSS() { return GetToken(TSQLParser.CROSS, 0); }
		public ITerminalNode INNER() { return GetToken(TSQLParser.INNER, 0); }
		public ITerminalNode LEFT() { return GetToken(TSQLParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSQLParser.RIGHT, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterJoinType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitJoinType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinTypeContext joinType() {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_joinType);
		try {
			State = 2062;
			switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2050; Match(LEFT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2051; Match(RIGHT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2052; Match(OUTER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2053; Match(INNER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2054; Match(CROSS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2055; Match(FULL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2056; Match(FULL);
				State = 2057; Match(OUTER);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2058; Match(LEFT);
				State = 2059; Match(OUTER);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2060; Match(RIGHT);
				State = 2061; Match(OUTER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(TSQLParser.WHERE, 0); }
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064; Match(WHERE);
			State = 2065; predicateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(TSQLParser.ORDER, 0); }
		public OrderByElementContext[] orderByElement() {
			return GetRuleContexts<OrderByElementContext>();
		}
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public OrderByElementContext orderByElement(int i) {
			return GetRuleContext<OrderByElementContext>(i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_orderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2067; Match(ORDER);
			State = 2068; Match(BY);
			State = 2069; orderByElement();
			State = 2074;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2070; Match(COMMA);
				State = 2071; orderByElement();
				}
				}
				State = 2076;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByElementContext : ParserRuleContext {
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColumnIndexOrNameContext columnIndexOrName() {
			return GetRuleContext<ColumnIndexOrNameContext>(0);
		}
		public OrderByElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderByElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderByElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByElementContext orderByElement() {
		OrderByElementContext _localctx = new OrderByElementContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_orderByElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079;
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				State = 2077; columnIndexOrName();
				}
				break;

			case 2:
				{
				State = 2078; expression();
				}
				break;
			}
			State = 2082;
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 2081;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeStatementContext : ParserRuleContext {
		public MergeNotMatchedContext[] mergeNotMatched() {
			return GetRuleContexts<MergeNotMatchedContext>();
		}
		public ITerminalNode THEN(int i) {
			return GetToken(TSQLParser.THEN, i);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public PredicateListContext[] predicateList() {
			return GetRuleContexts<PredicateListContext>();
		}
		public ITerminalNode[] AND() { return GetTokens(TSQLParser.AND); }
		public ITerminalNode[] INTO() { return GetTokens(TSQLParser.INTO); }
		public MergeMatchedContext[] mergeMatched() {
			return GetRuleContexts<MergeMatchedContext>();
		}
		public ITerminalNode SOURCE(int i) {
			return GetToken(TSQLParser.SOURCE, i);
		}
		public ITerminalNode AND(int i) {
			return GetToken(TSQLParser.AND, i);
		}
		public ITerminalNode[] SOURCE() { return GetTokens(TSQLParser.SOURCE); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode NOT(int i) {
			return GetToken(TSQLParser.NOT, i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSQLParser.BY); }
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public MergeNotMatchedContext mergeNotMatched(int i) {
			return GetRuleContext<MergeNotMatchedContext>(i);
		}
		public ITerminalNode[] WHEN() { return GetTokens(TSQLParser.WHEN); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode[] THEN() { return GetTokens(TSQLParser.THEN); }
		public ITerminalNode BY(int i) {
			return GetToken(TSQLParser.BY, i);
		}
		public ITerminalNode INTO(int i) {
			return GetToken(TSQLParser.INTO, i);
		}
		public MergeMatchedContext mergeMatched(int i) {
			return GetRuleContext<MergeMatchedContext>(i);
		}
		public ITerminalNode[] TARGET() { return GetTokens(TSQLParser.TARGET); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSQLParser.TARGET, i);
		}
		public ITerminalNode[] MATCHED() { return GetTokens(TSQLParser.MATCHED); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public ITerminalNode WHEN(int i) {
			return GetToken(TSQLParser.WHEN, i);
		}
		public ITerminalNode MATCHED(int i) {
			return GetToken(TSQLParser.MATCHED, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSQLParser.NOT); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode USING() { return GetToken(TSQLParser.USING, 0); }
		public PredicateListContext predicateList(int i) {
			return GetRuleContext<PredicateListContext>(i);
		}
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public MergeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeStatementContext mergeStatement() {
		MergeStatementContext _localctx = new MergeStatementContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_mergeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2084; Match(MERGE);
			State = 2086;
			switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				State = 2085; Match(INTO);
				}
				break;
			}
			State = 2088; tableTarget();
			State = 2089; Match(USING);
			State = 2090; tableSource();
			State = 2091; Match(ON);
			State = 2092; predicateList();
			State = 2125;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 2125;
				switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					State = 2093; Match(WHEN);
					State = 2094; Match(MATCHED);
					State = 2097;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2095; Match(AND);
						State = 2096; predicateList();
						}
					}

					State = 2099; Match(THEN);
					State = 2100; mergeMatched();
					}
					break;

				case 2:
					{
					State = 2101; Match(WHEN);
					State = 2102; Match(NOT);
					State = 2103; Match(MATCHED);
					State = 2106;
					_la = _input.La(1);
					if (_la==BY) {
						{
						State = 2104; Match(BY);
						State = 2105; Match(TARGET);
						}
					}

					State = 2110;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2108; Match(AND);
						State = 2109; predicateList();
						}
					}

					State = 2112; Match(THEN);
					State = 2113; mergeNotMatched();
					}
					break;

				case 3:
					{
					State = 2114; Match(WHEN);
					State = 2115; Match(NOT);
					State = 2116; Match(MATCHED);
					State = 2117; Match(BY);
					State = 2118; Match(SOURCE);
					State = 2121;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2119; Match(AND);
						State = 2120; predicateList();
						}
					}

					State = 2123; Match(THEN);
					State = 2124; mergeMatched();
					}
					break;
				}
				}
				State = 2127;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==WHEN );
			State = 2134;
			_la = _input.La(1);
			if (_la==OUTPUT) {
				{
				State = 2129; Match(OUTPUT);
				State = 2130; selectList();
				State = 2131; Match(INTO);
				State = 2132; tableTargetWithOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeMatchedContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public UpdateStatementSetClauseRestContext[] updateStatementSetClauseRest() {
			return GetRuleContexts<UpdateStatementSetClauseRestContext>();
		}
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public UpdateStatementSetClauseRestContext updateStatementSetClauseRest(int i) {
			return GetRuleContext<UpdateStatementSetClauseRestContext>(i);
		}
		public MergeMatchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeMatched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeMatched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeMatched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeMatched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeMatchedContext mergeMatched() {
		MergeMatchedContext _localctx = new MergeMatchedContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_mergeMatched);
		int _la;
		try {
			State = 2147;
			switch (_input.La(1)) {
			case UPDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2136; Match(UPDATE);
				State = 2137; Match(SET);
				State = 2138; updateStatementSetClauseRest();
				State = 2143;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2139; Match(COMMA);
					State = 2140; updateStatementSetClauseRest();
					}
					}
					State = 2145;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2146; Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeNotMatchedContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public InsertValueListContext insertValueList(int i) {
			return GetRuleContext<InsertValueListContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public InsertValueListContext[] insertValueList() {
			return GetRuleContexts<InsertValueListContext>();
		}
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public MergeNotMatchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeNotMatched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeNotMatched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeNotMatched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeNotMatched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeNotMatchedContext mergeNotMatched() {
		MergeNotMatchedContext _localctx = new MergeNotMatchedContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_mergeNotMatched);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2149; Match(INSERT);
			State = 2154;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 2150; Match(LPAREN);
				State = 2151; qualifiedNameList();
				State = 2152; Match(RPAREN);
				}
			}

			State = 2156; Match(VALUES);
			State = 2157; insertValueList();
			State = 2162;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2158; Match(COMMA);
				State = 2159; insertValueList();
				}
				}
				State = 2164;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetWithOptionsContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public TableTargetOptionsContext tableTargetOptions() {
			return GetRuleContext<TableTargetOptionsContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public TableTargetWithOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTargetWithOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTargetWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTargetWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTargetWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetWithOptionsContext tableTargetWithOptions() {
		TableTargetWithOptionsContext _localctx = new TableTargetWithOptionsContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_tableTargetWithOptions);
		int _la;
		try {
			State = 2179;
			switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2165; tableTarget();
				State = 2167;
				switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					State = 2166; tableTargetOptions();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2169; tableTarget();
				State = 2171;
				switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					State = 2170; tableTargetOptions();
					}
					break;
				}
				State = 2177;
				switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					State = 2174;
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 2173; Match(AS);
						}
					}

					State = 2176; tableAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public TableTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetContext tableTarget() {
		TableTargetContext _localctx = new TableTargetContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_tableTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2184;
			switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				State = 2181; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2182; variable();
				}
				break;

			case 3:
				{
				State = 2183; tempTable();
				}
				break;
			}
			State = 2190;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 2187;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2186; Match(AS);
					}
				}

				State = 2189; tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetOptionsContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public TableTargetOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTargetOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTargetOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTargetOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTargetOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetOptionsContext tableTargetOptions() {
		TableTargetOptionsContext _localctx = new TableTargetOptionsContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_tableTargetOptions);
		try {
			State = 2198;
			switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2192; Match(WITH);
				State = 2193; Match(LPAREN);
				State = 2194; Match(Identifier);
				State = 2195; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2196; Match(WITH);
				State = 2197; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceWithOptionsContext : ParserRuleContext {
		public TableSourceOptionsContext tableSourceOptions() {
			return GetRuleContext<TableSourceOptionsContext>(0);
		}
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public TableSourceWithOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceWithOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSourceWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSourceWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceWithOptionsContext tableSourceWithOptions() {
		TableSourceWithOptionsContext _localctx = new TableSourceWithOptionsContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_tableSourceWithOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2200; tableSource();
			State = 2202;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				State = 2201; tableSourceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public XmlDefinitionListContext xmlDefinitionList() {
			return GetRuleContext<XmlDefinitionListContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_tableSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2228;
			switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				State = 2204; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2205; variable();
				State = 2208;
				_la = _input.La(1);
				if (_la==DOT) {
					{
					State = 2206; Match(DOT);
					State = 2207; functionCall();
					}
				}

				}
				break;

			case 3:
				{
				State = 2210; tempTable();
				State = 2213;
				_la = _input.La(1);
				if (_la==DOT) {
					{
					State = 2211; Match(DOT);
					State = 2212; functionCall();
					}
				}

				}
				break;

			case 4:
				{
				State = 2215; Match(LPAREN);
				State = 2216; selectStatement();
				State = 2217; Match(RPAREN);
				}
				break;

			case 5:
				{
				State = 2219; executeStatement();
				}
				break;

			case 6:
				{
				State = 2220; functionCall();
				State = 2226;
				switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					State = 2221; Match(WITH);
					State = 2222; Match(LPAREN);
					State = 2223; xmlDefinitionList();
					State = 2224; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			State = 2234;
			switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				State = 2231;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2230; Match(AS);
					}
				}

				State = 2233; tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceOptionsContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public TableSourceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSourceOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSourceOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceOptionsContext tableSourceOptions() {
		TableSourceOptionsContext _localctx = new TableSourceOptionsContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_tableSourceOptions);
		try {
			State = 2243;
			switch (_input.La(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2236; Match(WITH);
				State = 2237; Match(LPAREN);
				State = 2238; Match(Identifier);
				State = 2239; Match(RPAREN);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2240; Match(LPAREN);
				State = 2241; Match(Identifier);
				State = 2242; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public TableAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasContext tableAlias() {
		TableAliasContext _localctx = new TableAliasContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_tableAlias);
		try {
			State = 2247;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2245; qualifiedNamePart();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2246; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2251;
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				State = 2249; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2250; keyword();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2253; functionName();
			State = 2254; Match(LPAREN);
			State = 2256;
			_la = _input.La(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
				{
				State = 2255; argumentList();
				}
			}

			State = 2258; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(TSQLParser.EXECUTE, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ExecuteArgumentListContext executeArgumentList() {
			return GetRuleContext<ExecuteArgumentListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_executeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2260; Match(EXECUTE);
			State = 2269;
			switch (_input.La(1)) {
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				{
				State = 2261; qualifiedName();
				State = 2263;
				switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					State = 2262; executeArgumentList();
					}
					break;
				}
				}
				break;
			case LPAREN:
				{
				State = 2265; Match(LPAREN);
				State = 2266; expression();
				State = 2267; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2272;
			switch ( Interpreter.AdaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				State = 2271; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteArgumentListContext : ParserRuleContext {
		public ExecuteArgumentContext executeArgument(int i) {
			return GetRuleContext<ExecuteArgumentContext>(i);
		}
		public ExecuteArgumentContext[] executeArgument() {
			return GetRuleContexts<ExecuteArgumentContext>();
		}
		public ExecuteArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteArgumentListContext executeArgumentList() {
		ExecuteArgumentListContext _localctx = new ExecuteArgumentListContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_executeArgumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2274; executeArgument();
			State = 2279;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,304,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2275; Match(COMMA);
					State = 2276; executeArgument();
					}
					} 
				}
				State = 2281;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,304,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteArgumentContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExecuteArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteArgumentContext executeArgument() {
		ExecuteArgumentContext _localctx = new ExecuteArgumentContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_executeArgument);
		int _la;
		try {
			State = 2291;
			switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2282; variable();
				State = 2283; Match(EQUALS);
				State = 2285;
				switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					State = 2284; expression();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2287; expression();
				State = 2289;
				switch ( Interpreter.AdaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					State = 2288;
					_la = _input.La(1);
					if ( !(_la==OUTPUT || _la==OUT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterStringTypeLengthContext : ParserRuleContext {
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode MAX() { return GetToken(TSQLParser.MAX, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public CharacterStringTypeLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterStringTypeLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCharacterStringTypeLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCharacterStringTypeLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterStringTypeLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterStringTypeLengthContext characterStringTypeLength() {
		CharacterStringTypeLengthContext _localctx = new CharacterStringTypeLengthContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_characterStringTypeLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2293; Match(LPAREN);
			State = 2296;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 2294; integerValue();
				}
				break;
			case MAX:
				{
				State = 2295; Match(MAX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2298; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterStringTypeContext : ParserRuleContext {
		public CharacterStringTypeLengthContext characterStringTypeLength() {
			return GetRuleContext<CharacterStringTypeLengthContext>(0);
		}
		public ITerminalNode VARYING() { return GetToken(TSQLParser.VARYING, 0); }
		public ITerminalNode CHARACTER() { return GetToken(TSQLParser.CHARACTER, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSQLParser.NVARCHAR, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSQLParser.VARCHAR, 0); }
		public ITerminalNode NCHAR() { return GetToken(TSQLParser.NCHAR, 0); }
		public ITerminalNode CHAR() { return GetToken(TSQLParser.CHAR, 0); }
		public CharacterStringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterStringType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCharacterStringType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCharacterStringType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterStringType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterStringTypeContext characterStringType() {
		CharacterStringTypeContext _localctx = new CharacterStringTypeContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_characterStringType);
		int _la;
		try {
			State = 2309;
			switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2300;
				_la = _input.La(1);
				if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (CHAR - 125)) | (1L << (CHARACTER - 125)) | (1L << (NCHAR - 125)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2302;
				switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					State = 2301; characterStringTypeLength();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2304;
				_la = _input.La(1);
				if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (CHAR - 125)) | (1L << (CHARACTER - 125)) | (1L << (NCHAR - 125)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2305; Match(VARYING);
				State = 2306; characterStringTypeLength();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2307;
				_la = _input.La(1);
				if ( !(_la==VARCHAR || _la==NVARCHAR) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2308; characterStringTypeLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public IToken Scale;
		public IToken Precision;
		public ITerminalNode NUMERIC() { return GetToken(TSQLParser.NUMERIC, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSQLParser.FLOAT, 0); }
		public ITerminalNode IntegerLiteral(int i) {
			return GetToken(TSQLParser.IntegerLiteral, i);
		}
		public ITerminalNode[] IntegerLiteral() { return GetTokens(TSQLParser.IntegerLiteral); }
		public ITerminalNode DECIMAL() { return GetToken(TSQLParser.DECIMAL, 0); }
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_numericType);
		int _la;
		try {
			State = 2322;
			switch (_input.La(1)) {
			case DECIMAL:
			case NUMERIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2311;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==NUMERIC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2319;
				switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					State = 2312; Match(LPAREN);
					State = 2313; _localctx.Scale = Match(IntegerLiteral);
					State = 2316;
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 2314; Match(COMMA);
						State = 2315; _localctx.Precision = Match(IntegerLiteral);
						}
					}

					State = 2318; Match(RPAREN);
					}
					break;
				}
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2321; Match(FLOAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		public ITerminalNode TINYINT() { return GetToken(TSQLParser.TINYINT, 0); }
		public ITerminalNode INT() { return GetToken(TSQLParser.INT, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSQLParser.BIGINT, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSQLParser.SMALLINT, 0); }
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_integerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2324;
			_la = _input.La(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentityTypeContext : ParserRuleContext {
		public IdentitySpecContext identitySpec() {
			return GetRuleContext<IdentitySpecContext>(0);
		}
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public IdentityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identityType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIdentityType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIdentityType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityTypeContext identityType() {
		IdentityTypeContext _localctx = new IdentityTypeContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_identityType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2327;
			_la = _input.La(1);
			if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)))) != 0)) {
				{
				State = 2326; integerType();
				}
			}

			State = 2329; identitySpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentitySpecContext : ParserRuleContext {
		public IntegerValueContext Seed;
		public IntegerValueContext Increment;
		public ITerminalNode IDENTITY() { return GetToken(TSQLParser.IDENTITY, 0); }
		public IntegerValueContext integerValue(int i) {
			return GetRuleContext<IntegerValueContext>(i);
		}
		public IntegerValueContext[] integerValue() {
			return GetRuleContexts<IntegerValueContext>();
		}
		public IdentitySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identitySpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIdentitySpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIdentitySpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentitySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentitySpecContext identitySpec() {
		IdentitySpecContext _localctx = new IdentitySpecContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_identitySpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2331; Match(IDENTITY);
			State = 2340;
			switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
			case 1:
				{
				State = 2332; Match(LPAREN);
				State = 2333; _localctx.Seed = integerValue();
				State = 2336;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 2334; Match(COMMA);
					State = 2335; _localctx.Increment = integerValue();
					}
				}

				State = 2338; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyOrFieldContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public PropertyOrFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyOrField; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPropertyOrField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPropertyOrField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyOrField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyOrFieldContext propertyOrField() {
		PropertyOrFieldContext _localctx = new PropertyOrFieldContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_propertyOrField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2342; Match(DOT);
			State = 2343; qualifiedNamePart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345;
			_la = _input.La(1);
			if ( !(((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (EQUALS - 170)) | (1L << (ADD_ASSIGN - 170)) | (1L << (SUB_ASSIGN - 170)) | (1L << (MUL_ASSIGN - 170)) | (1L << (DIV_ASSIGN - 170)) | (1L << (AND_ASSIGN - 170)) | (1L << (OR_ASSIGN - 170)) | (1L << (XOR_ASSIGN - 170)) | (1L << (MOD_ASSIGN - 170)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedColumnNameListContext : ParserRuleContext {
		public QualifiedColumnNameContext qualifiedColumnName(int i) {
			return GetRuleContext<QualifiedColumnNameContext>(i);
		}
		public QualifiedColumnNameContext[] qualifiedColumnName() {
			return GetRuleContexts<QualifiedColumnNameContext>();
		}
		public QualifiedColumnNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedColumnNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedColumnNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedColumnNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedColumnNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedColumnNameListContext qualifiedColumnNameList() {
		QualifiedColumnNameListContext _localctx = new QualifiedColumnNameListContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_qualifiedColumnNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2347; qualifiedColumnName();
			State = 2352;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2348; Match(COMMA);
				State = 2349; qualifiedColumnName();
				}
				}
				State = 2354;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedColumnNameContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public QualifiedColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedColumnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedColumnNameContext qualifiedColumnName() {
		QualifiedColumnNameContext _localctx = new QualifiedColumnNameContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_qualifiedColumnName);
		try {
			State = 2364;
			switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2355; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2356; qualifiedName();
				State = 2357; Match(DOT);
				State = 2358; keyword();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2360; tempTable();
				State = 2361; Match(DOT);
				State = 2362; qualifiedNamePart();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnIndexOrNameContext : ParserRuleContext {
		public IntegerValueContext ColumnIndex;
		public QualifiedNameContext ColumnName;
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ColumnIndexOrNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnIndexOrName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnIndexOrName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnIndexOrName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnIndexOrName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnIndexOrNameContext columnIndexOrName() {
		ColumnIndexOrNameContext _localctx = new ColumnIndexOrNameContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_columnIndexOrName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2368;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 2366; _localctx.ColumnIndex = integerValue();
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				{
				State = 2367; _localctx.ColumnName = qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_columnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2370; qualifiedNamePart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAliasContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ColumnAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAliasContext columnAlias() {
		ColumnAliasContext _localctx = new ColumnAliasContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_columnAlias);
		try {
			State = 2374;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2372; qualifiedNamePart();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2373; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorIdContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CursorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorIdContext cursorId() {
		CursorIdContext _localctx = new CursorIdContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_cursorId);
		try {
			State = 2378;
			switch (_input.La(1)) {
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2376; qualifiedName();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2377; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorStatementContext : ParserRuleContext {
		public CursorCloseContext cursorClose() {
			return GetRuleContext<CursorCloseContext>(0);
		}
		public CursorOpenContext cursorOpen() {
			return GetRuleContext<CursorOpenContext>(0);
		}
		public CursorDeallocateContext cursorDeallocate() {
			return GetRuleContext<CursorDeallocateContext>(0);
		}
		public CursorFetchContext cursorFetch() {
			return GetRuleContext<CursorFetchContext>(0);
		}
		public CursorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorStatementContext cursorStatement() {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_cursorStatement);
		try {
			State = 2384;
			switch (_input.La(1)) {
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2380; cursorOpen();
				}
				break;
			case CLOSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2381; cursorClose();
				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2382; cursorFetch();
				}
				break;
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2383; cursorDeallocate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorOpenContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(TSQLParser.OPEN, 0); }
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorOpen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorOpen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorOpen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorOpen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorOpenContext cursorOpen() {
		CursorOpenContext _localctx = new CursorOpenContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_cursorOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2386; Match(OPEN);
			State = 2387; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorCloseContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(TSQLParser.CLOSE, 0); }
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorClose; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorClose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorClose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorClose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorCloseContext cursorClose() {
		CursorCloseContext _localctx = new CursorCloseContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_cursorClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389; Match(CLOSE);
			State = 2390; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorFetchContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public ITerminalNode FIRST() { return GetToken(TSQLParser.FIRST, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode PRIOR() { return GetToken(TSQLParser.PRIOR, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public ITerminalNode FETCH() { return GetToken(TSQLParser.FETCH, 0); }
		public ITerminalNode LAST() { return GetToken(TSQLParser.LAST, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSQLParser.RELATIVE, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(TSQLParser.ABSOLUTE, 0); }
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorFetch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorFetch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorFetchContext cursorFetch() {
		CursorFetchContext _localctx = new CursorFetchContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_cursorFetch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2392; Match(FETCH);
			State = 2408;
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 2393; Match(NEXT);
				}
				break;

			case 2:
				{
				State = 2394; Match(PRIOR);
				}
				break;

			case 3:
				{
				State = 2395; Match(FIRST);
				}
				break;

			case 4:
				{
				State = 2396; Match(LAST);
				}
				break;

			case 5:
				{
				State = 2397; Match(ABSOLUTE);
				State = 2400;
				switch (_input.La(1)) {
				case LPAREN:
				case PLUS:
				case MINUS:
				case IntegerLiteral:
					{
					State = 2398; integerValue();
					}
					break;
				case AT:
					{
					State = 2399; variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 6:
				{
				State = 2402; Match(RELATIVE);
				State = 2405;
				switch (_input.La(1)) {
				case LPAREN:
				case PLUS:
				case MINUS:
				case IntegerLiteral:
					{
					State = 2403; integerValue();
					}
					break;
				case AT:
					{
					State = 2404; variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 7:
				{
				State = 2407; qualifiedName();
				}
				break;
			}
			State = 2412;
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 2410; Match(FROM);
				State = 2411; cursorId();
				}
			}

			State = 2414; Match(INTO);
			State = 2415; variable();
			State = 2420;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2416; Match(COMMA);
				State = 2417; variable();
				}
				}
				State = 2422;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorDeallocateContext : ParserRuleContext {
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode DEALLOCATE() { return GetToken(TSQLParser.DEALLOCATE, 0); }
		public CursorDeallocateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorDeallocate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorDeallocate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorDeallocate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorDeallocate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorDeallocateContext cursorDeallocate() {
		CursorDeallocateContext _localctx = new CursorDeallocateContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_cursorDeallocate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2423; Match(DEALLOCATE);
			State = 2424; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpressionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public StringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpressionContext stringExpression() {
		StringExpressionContext _localctx = new StringExpressionContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_stringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2426; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollateContext : ParserRuleContext {
		public ITerminalNode COLLATE() { return GetToken(TSQLParser.COLLATE, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public CollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollateContext collate() {
		CollateContext _localctx = new CollateContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2428; Match(COLLATE);
			State = 2429; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusterTypeContext : ParserRuleContext {
		public ITerminalNode NONCLUSTERED() { return GetToken(TSQLParser.NONCLUSTERED, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSQLParser.CLUSTERED, 0); }
		public ClusterTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clusterType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterClusterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitClusterType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClusterType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusterTypeContext clusterType() {
		ClusterTypeContext _localctx = new ClusterTypeContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_clusterType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2431;
			_la = _input.La(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode OUTER() { return GetToken(TSQLParser.OUTER, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSQLParser.COUNT_BIG, 0); }
		public ITerminalNode INT() { return GetToken(TSQLParser.INT, 0); }
		public ITerminalNode LOG() { return GetToken(TSQLParser.LOG, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSQLParser.NVARCHAR, 0); }
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public ITerminalNode MAX() { return GetToken(TSQLParser.MAX, 0); }
		public ITerminalNode IS() { return GetToken(TSQLParser.IS, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(TSQLParser.TRUNCATE, 0); }
		public ITerminalNode ADD() { return GetToken(TSQLParser.ADD, 0); }
		public ITerminalNode COUNT() { return GetToken(TSQLParser.COUNT, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSQLParser.SOURCE, 0); }
		public ITerminalNode VARYING() { return GetToken(TSQLParser.VARYING, 0); }
		public ITerminalNode DELAY() { return GetToken(TSQLParser.DELAY, 0); }
		public ITerminalNode WAITFOR() { return GetToken(TSQLParser.WAITFOR, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSQLParser.ROLLBACK, 0); }
		public ITerminalNode USED() { return GetToken(TSQLParser.USED, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public ITerminalNode AUTO() { return GetToken(TSQLParser.AUTO, 0); }
		public ITerminalNode CHAR() { return GetToken(TSQLParser.CHAR, 0); }
		public ITerminalNode WHEN() { return GetToken(TSQLParser.WHEN, 0); }
		public ITerminalNode RAISE_ERROR() { return GetToken(TSQLParser.RAISE_ERROR, 0); }
		public ITerminalNode ESCAPE() { return GetToken(TSQLParser.ESCAPE, 0); }
		public ITerminalNode THEN() { return GetToken(TSQLParser.THEN, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSQLParser.SCHEME, 0); }
		public ITerminalNode OR() { return GetToken(TSQLParser.OR, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSQLParser.VARCHAR, 0); }
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode MATCHED() { return GetToken(TSQLParser.MATCHED, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(TSQLParser.DEALLOCATE, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TSQLParser.CONTINUE, 0); }
		public ITerminalNode LAST() { return GetToken(TSQLParser.LAST, 0); }
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSQLParser.COLLATE, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ITerminalNode CLOSE() { return GetToken(TSQLParser.CLOSE, 0); }
		public ITerminalNode RAW() { return GetToken(TSQLParser.RAW, 0); }
		public ITerminalNode NCHAR() { return GetToken(TSQLParser.NCHAR, 0); }
		public ITerminalNode CASE() { return GetToken(TSQLParser.CASE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode INNER() { return GetToken(TSQLParser.INNER, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSQLParser.FOREIGN, 0); }
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSQLParser.ISOLATION, 0); }
		public ITerminalNode LEFT() { return GetToken(TSQLParser.LEFT, 0); }
		public ITerminalNode IN() { return GetToken(TSQLParser.IN, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSQLParser.REMOVE, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public ITerminalNode HAVING() { return GetToken(TSQLParser.HAVING, 0); }
		public ITerminalNode ORDER() { return GetToken(TSQLParser.ORDER, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(TSQLParser.ABSOLUTE, 0); }
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ITerminalNode RETURN() { return GetToken(TSQLParser.RETURN, 0); }
		public ITerminalNode OPTION() { return GetToken(TSQLParser.OPTION, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSQLParser.TINYINT, 0); }
		public ITerminalNode TARGET() { return GetToken(TSQLParser.TARGET, 0); }
		public ITerminalNode CATCH() { return GetToken(TSQLParser.CATCH, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSQLParser.OPTIMIZE, 0); }
		public ITerminalNode GOTO() { return GetToken(TSQLParser.GOTO, 0); }
		public ITerminalNode BETWEEN() { return GetToken(TSQLParser.BETWEEN, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSQLParser.NONCLUSTERED, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSQLParser.COMMIT, 0); }
		public ITerminalNode OPEN() { return GetToken(TSQLParser.OPEN, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSQLParser.CLUSTERED, 0); }
		public ITerminalNode SWITCH() { return GetToken(TSQLParser.SWITCH, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSQLParser.RIGHT, 0); }
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public ITerminalNode EXCEPT() { return GetToken(TSQLParser.EXCEPT, 0); }
		public ITerminalNode JOIN() { return GetToken(TSQLParser.JOIN, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSQLParser.IDENTITY, 0); }
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public ITerminalNode FIRST() { return GetToken(TSQLParser.FIRST, 0); }
		public ITerminalNode FULL() { return GetToken(TSQLParser.FULL, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSQLParser.EXISTS, 0); }
		public ITerminalNode DECLARE() { return GetToken(TSQLParser.DECLARE, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public ITerminalNode COMPUTE() { return GetToken(TSQLParser.COMPUTE, 0); }
		public ITerminalNode UNION() { return GetToken(TSQLParser.UNION, 0); }
		public ITerminalNode IF() { return GetToken(TSQLParser.IF, 0); }
		public ITerminalNode OVER() { return GetToken(TSQLParser.OVER, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public ITerminalNode CONVERT() { return GetToken(TSQLParser.CONVERT, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSQLParser.SPLIT, 0); }
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public ITerminalNode TO() { return GetToken(TSQLParser.TO, 0); }
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSQLParser.SMALLINT, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSQLParser.INCLUDE, 0); }
		public ITerminalNode ALL() { return GetToken(TSQLParser.ALL, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSQLParser.PRIOR, 0); }
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSQLParser.ROWCOUNT, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSQLParser.REFERENCES, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSQLParser.TRIGGER, 0); }
		public ITerminalNode APPLY() { return GetToken(TSQLParser.APPLY, 0); }
		public ITerminalNode WHERE() { return GetToken(TSQLParser.WHERE, 0); }
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode USING() { return GetToken(TSQLParser.USING, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSQLParser.DISABLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSQLParser.DECIMAL, 0); }
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSQLParser.ENABLE, 0); }
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSQLParser.EXECUTE, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSQLParser.RELATIVE, 0); }
		public ITerminalNode WHILE() { return GetToken(TSQLParser.WHILE, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode CHARACTER() { return GetToken(TSQLParser.CHARACTER, 0); }
		public ITerminalNode READONLY() { return GetToken(TSQLParser.READONLY, 0); }
		public ITerminalNode OF() { return GetToken(TSQLParser.OF, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSQLParser.BIGINT, 0); }
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public ITerminalNode CAST() { return GetToken(TSQLParser.CAST, 0); }
		public ITerminalNode GROUP() { return GetToken(TSQLParser.GROUP, 0); }
		public ITerminalNode PRINT() { return GetToken(TSQLParser.PRINT, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSQLParser.DATABASE, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public ITerminalNode RANGE() { return GetToken(TSQLParser.RANGE, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSQLParser.FLOAT, 0); }
		public ITerminalNode INTERSECT() { return GetToken(TSQLParser.INTERSECT, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSQLParser.LEVEL, 0); }
		public ITerminalNode BREAK() { return GetToken(TSQLParser.BREAK, 0); }
		public ITerminalNode SELECT() { return GetToken(TSQLParser.SELECT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSQLParser.EXPLICIT, 0); }
		public ITerminalNode FETCH() { return GetToken(TSQLParser.FETCH, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSQLParser.REPLICATION, 0); }
		public ITerminalNode NUMERIC() { return GetToken(TSQLParser.NUMERIC, 0); }
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public ITerminalNode CROSS() { return GetToken(TSQLParser.CROSS, 0); }
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSQLParser.FUNCTION, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode PATH() { return GetToken(TSQLParser.PATH, 0); }
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public ITerminalNode TRY() { return GetToken(TSQLParser.TRY, 0); }
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2433;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << READONLY) | (1L << TRY) | (1L << CATCH) | (1L << TRANSACTION) | (1L << COMMIT) | (1L << ROLLBACK) | (1L << RAISE_ERROR) | (1L << PRINT) | (1L << CLUSTERED) | (1L << NONCLUSTERED) | (1L << TABLE) | (1L << PROCEDURE) | (1L << PARTITION) | (1L << INDEX) | (1L << DATABASE) | (1L << CONSTRAINT) | (1L << FOREIGN) | (1L << PRIMARY) | (1L << KEY) | (1L << REFERENCES) | (1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL) | (1L << CURSOR) | (1L << FETCH) | (1L << OPEN) | (1L << CLOSE) | (1L << DEALLOCATE) | (1L << FIRST) | (1L << LAST) | (1L << PRIOR) | (1L << NEXT) | (1L << ABSOLUTE) | (1L << RELATIVE) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << COLLATE) | (1L << COUNT) | (1L << COUNT_BIG) | (1L << DISTINCT) | (1L << UNIQUE) | (1L << MAX) | (1L << TOP) | (1L << WHEN) | (1L << THEN) | (1L << SWITCH) | (1L << OVER) | (1L << INCLUDE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTERSECT - 64)) | (1L << (EXCEPT - 64)) | (1L << (UNION - 64)) | (1L << (ALL - 64)) | (1L << (APPLY - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (WHILE - 64)) | (1L << (GOTO - 64)) | (1L << (CONTINUE - 64)) | (1L << (BREAK - 64)) | (1L << (TRUNCATE - 64)) | (1L << (ADD - 64)) | (1L << (REMOVE - 64)) | (1L << (ALTER - 64)) | (1L << (CREATE - 64)) | (1L << (DROP - 64)) | (1L << (AS - 64)) | (1L << (WITH - 64)) | (1L << (FOR - 64)) | (1L << (REPLICATION - 64)) | (1L << (BEGIN - 64)) | (1L << (END - 64)) | (1L << (EXISTS - 64)) | (1L << (DEFAULT - 64)) | (1L << (VARYING - 64)) | (1L << (SELECT - 64)) | (1L << (UPDATE - 64)) | (1L << (INSERT - 64)) | (1L << (DELETE - 64)) | (1L << (WHERE - 64)) | (1L << (FROM - 64)) | (1L << (JOIN - 64)) | (1L << (DECLARE - 64)) | (1L << (OPTION - 64)) | (1L << (SET - 64)) | (1L << (TO - 64)) | (1L << (ON - 64)) | (1L << (OFF - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (EXECUTE - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (IS - 64)) | (1L << (IN - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (BETWEEN - 64)) | (1L << (RETURN - 64)) | (1L << (OUTPUT - 64)) | (1L << (OUT - 64)) | (1L << (LIKE - 64)) | (1L << (ESCAPE - 64)) | (1L << (OF - 64)) | (1L << (DECIMAL - 64)) | (1L << (NUMERIC - 64)) | (1L << (VARCHAR - 64)) | (1L << (NVARCHAR - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (NCHAR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT - 128)) | (1L << (IDENTITY - 128)) | (1L << (LOG - 128)) | (1L << (AND - 128)) | (1L << (OR - 128)) | (1L << (ASC - 128)) | (1L << (DESC - 128)) | (1L << (STATISTICS - 128)) | (1L << (USING - 128)) | (1L << (MERGE - 128)) | (1L << (MATCHED - 128)) | (1L << (TARGET - 128)) | (1L << (SOURCE - 128)) | (1L << (XML - 128)) | (1L << (RAW - 128)) | (1L << (AUTO - 128)) | (1L << (EXPLICIT - 128)) | (1L << (PATH - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (TRIGGER - 128)) | (1L << (WAITFOR - 128)) | (1L << (DELAY - 128)) | (1L << (COMPUTE - 128)) | (1L << (LEVEL - 128)) | (1L << (ISOLATION - 128)) | (1L << (SPLIT - 128)) | (1L << (RANGE - 128)) | (1L << (FUNCTION - 128)) | (1L << (SCHEME - 128)) | (1L << (USED - 128)) | (1L << (OPTIMIZE - 128)) | (1L << (ROWCOUNT - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 29: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);

		case 30: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);

		case 31: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);

		case 32: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);

		case 33: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);

		case 34: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);

		case 35: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);

		case 36: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);

		case 37: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);

		case 40: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 2);

		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(_ctx, 3);

		case 9: return Precpred(_ctx, 2);

		case 10: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(_ctx, 3);

		case 16: return Precpred(_ctx, 4);

		case 19: return Precpred(_ctx, 1);

		case 18: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 9);

		case 12: return Precpred(_ctx, 8);

		case 13: return Precpred(_ctx, 7);

		case 14: return Precpred(_ctx, 6);

		case 15: return Precpred(_ctx, 5);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(_ctx, 1);

		case 20: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(_ctx, 4);

		case 27: return Precpred(_ctx, 2);

		case 26: return Precpred(_ctx, 3);

		case 28: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(_ctx, 2);

		case 22: return Precpred(_ctx, 3);

		case 24: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xCF\x986\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x3\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x162\n\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x16B\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5"+
		"\x171\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x178\n\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x5\x6\x17E\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x186\n\a"+
		"\x3\a\x3\a\x3\a\x3\a\x5\a\x18C\n\a\x3\a\x3\a\x5\a\x190\n\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x5\a\x1A4\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5"+
		"\b\x1AF\n\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x5\n\x1B9\n\n\x3\n"+
		"\x3\n\x3\n\x3\n\x5\n\x1BF\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x5\f\x1DB\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x1E2\n"+
		"\r\f\r\xE\r\x1E5\v\r\x3\r\x3\r\x3\r\x3\r\x5\r\x1EB\n\r\x3\xE\x3\xE\x3"+
		"\xE\x5\xE\x1F0\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x1F6\n\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x5\xF\x1FC\n\xF\x3\xF\x5\xF\x1FF\n\xF\x3\xF\x3\xF\x3\xF\x5"+
		"\xF\x204\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x20C\n"+
		"\x10\x5\x10\x20E\n\x10\x3\x11\x3\x11\x5\x11\x212\n\x11\x3\x11\x5\x11\x215"+
		"\n\x11\x3\x11\x3\x11\x3\x11\x5\x11\x21A\n\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\x222\n\x11\x3\x11\x5\x11\x225\n\x11\x3\x11\x5"+
		"\x11\x228\n\x11\x3\x11\x5\x11\x22B\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x5\x13\x23C\n\x13\x3\x14\x3\x14\x3\x14\a\x14\x241\n\x14\f\x14\xE"+
		"\x14\x244\v\x14\x3\x15\x3\x15\x5\x15\x248\n\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x5\x18\x25B\n\x18\x3\x18\x5\x18\x25E\n\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x26C\n\x1A\x3\x1A\x5\x1A\x26F\n\x1A\x3\x1A\x5\x1A\x272"+
		"\n\x1A\x3\x1A\x5\x1A\x275\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5"+
		"\x1C\x27C\n\x1C\x3\x1C\x3\x1C\x5\x1C\x280\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x5\x1C\x291\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x29C\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x6\x1C\x2A5\n\x1C\r\x1C\xE\x1C\x2A6\x3\x1C\x5\x1C\x2AA"+
		"\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x6\x1C\x2B1\n\x1C\r\x1C\xE\x1C"+
		"\x2B2\x3\x1C\x5\x1C\x2B6\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x5\x1C\x2BF\n\x1C\x3\x1D\x3\x1D\x5\x1D\x2C3\n\x1D\x3\x1E\x3\x1E"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F"+
		"\x2D0\n\x1F\f\x1F\xE\x1F\x2D3\v\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3"+
		" \a \x2DE\n \f \xE \x2E1\v \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x2EC"+
		"\n!\x3!\a!\x2EF\n!\f!\xE!\x2F2\v!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\a\"\x2FA"+
		"\n\"\f\"\xE\"\x2FD\v\"\x3#\x3#\x3#\x3#\x3#\x3#\a#\x305\n#\f#\xE#\x308"+
		"\v#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\a$\x316\n$\f$\xE$"+
		"\x319\v$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%"+
		"\a%\x33C\n%\f%\xE%\x33F\v%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\a&\x34A"+
		"\n&\f&\xE&\x34D\v&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\a\'\x35B\n\'\f\'\xE\'\x35E\v\'\x3(\x3(\x3(\x3(\x3(\x5(\x365\n"+
		"(\x3)\x3)\x3)\x5)\x36A\n)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\x3*\x5*\x378\n*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x381\n*\x3*\x3*\a*\x385"+
		"\n*\f*\xE*\x388\v*\x3+\x3+\x3+\x5+\x38D\n+\x3+\x5+\x390\n+\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x3,\x5,\x39A\n,\x3-\x3-\x3-\x3-\a-\x3A0\n-\f-\xE-\x3A3"+
		"\v-\x3-\x3-\x3-\x3-\x5-\x3A9\n-\x3-\x3-\x5-\x3AD\n-\x3.\x3.\x3.\x3.\x3"+
		".\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31"+
		"\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x3C4\n\x31\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\a\x33\x3D4\n\x33\f\x33\xE\x33\x3D7\v\x33\x3\x33\x3\x33\x5"+
		"\x33\x3DB\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\a\x34\x3E5\n\x34\f\x34\xE\x34\x3E8\v\x34\x3\x34\x3\x34\x5\x34\x3EC\n"+
		"\x34\x3\x35\x3\x35\x5\x35\x3F0\n\x35\x3\x36\x5\x36\x3F3\n\x36\x3\x36\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x5\x36\x3FA\n\x36\x3\x37\x3\x37\x6\x37\x3FE"+
		"\n\x37\r\x37\xE\x37\x3FF\x3\x37\x3\x37\x3\x37\x5\x37\x405\n\x37\x3\x38"+
		"\x3\x38\x6\x38\x409\n\x38\r\x38\xE\x38\x40A\x3\x38\a\x38\x40E\n\x38\f"+
		"\x38\xE\x38\x411\v\x38\x3\x38\x5\x38\x414\n\x38\x3\x39\x3\x39\x3\x39\a"+
		"\x39\x419\n\x39\f\x39\xE\x39\x41C\v\x39\x3:\x6:\x41F\n:\r:\xE:\x420\x3"+
		":\x3:\x5:\x425\n:\x3;\x6;\x428\n;\r;\xE;\x429\x3;\x3;\x5;\x42E\n;\x3;"+
		"\x3;\x3;\x3;\x5;\x434\n;\x3<\x6<\x437\n<\r<\xE<\x438\x3<\x3<\x6<\x43D"+
		"\n<\r<\xE<\x43E\x3<\x5<\x442\n<\x3=\x3=\x3>\x3>\x3>\x3>\a>\x44A\n>\f>"+
		"\xE>\x44D\v>\x3>\x3>\x3>\x3>\x3>\a>\x454\n>\f>\xE>\x457\v>\x5>\x459\n"+
		">\x3?\x3?\x5?\x45D\n?\x3?\x3?\x5?\x461\n?\x3?\x5?\x464\n?\x3?\x5?\x467"+
		"\n?\x3?\x5?\x46A\n?\x3?\x5?\x46D\n?\x3@\x3@\x3@\x3@\x5@\x473\n@\x3\x41"+
		"\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\a\x42\x47B\n\x42\f\x42\xE\x42\x47E"+
		"\v\x42\x3\x43\x3\x43\a\x43\x482\n\x43\f\x43\xE\x43\x485\v\x43\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x48D\n\x44\x3\x44\x3\x44\x5\x44"+
		"\x491\n\x44\x3\x44\x5\x44\x494\n\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x4A3\n"+
		"\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x5\x46\x4BA\n\x46\x3\x46\x3\x46\x5\x46\x4BE\n\x46\x3\x46\x3"+
		"\x46\x5\x46\x4C2\n\x46\x3\x46\x5\x46\x4C5\n\x46\x3\x46\x3\x46\x5\x46\x4C9"+
		"\n\x46\x3\x46\x3\x46\x5\x46\x4CD\n\x46\x3\x46\x5\x46\x4D0\n\x46\x3\x46"+
		"\x3\x46\x3\x46\x5\x46\x4D5\n\x46\x3G\x3G\x5G\x4D9\nG\x3H\x3H\x3H\x3H\x3"+
		"H\x5H\x4E0\nH\x3I\x3I\x3I\x3I\x3J\x3J\x3J\x3J\x3K\x3K\x3K\x3K\x3K\x3K"+
		"\x5K\x4F0\nK\x3K\x3K\x6K\x4F4\nK\rK\xEK\x4F5\x3K\x3K\x5K\x4FA\nK\x5K\x4FC"+
		"\nK\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3M\x3M\x3M\x5M\x50C\n"+
		"M\x3M\x3M\x3N\x3N\x3N\x3N\x3N\x3N\x3N\x5N\x517\nN\x3O\x3O\x5O\x51B\nO"+
		"\x3O\x6O\x51E\nO\rO\xEO\x51F\x3O\x5O\x523\nO\x3O\aO\x526\nO\fO\xEO\x529"+
		"\vO\x3O\x5O\x52C\nO\x3O\x5O\x52F\nO\x3O\x3O\x5O\x533\nO\x3O\x3O\x6O\x537"+
		"\nO\rO\xEO\x538\x3O\x5O\x53C\nO\x3O\aO\x53F\nO\fO\xEO\x542\vO\x3O\x5O"+
		"\x545\nO\x3O\x5O\x548\nO\x5O\x54A\nO\x3P\x5P\x54D\nP\x3P\x3P\x3P\aP\x552"+
		"\nP\fP\xEP\x555\vP\x3Q\x5Q\x558\nQ\x3Q\x3Q\x3Q\aQ\x55D\nQ\fQ\xEQ\x560"+
		"\vQ\x3R\x3R\x3R\x3R\x3R\x3S\x3S\x3S\x3S\aS\x56B\nS\fS\xES\x56E\vS\x3S"+
		"\x3S\x3T\x3T\x3T\x3T\x3T\x5T\x577\nT\x3T\x3T\x3T\x3T\x3T\x3U\x3U\x5U\x580"+
		"\nU\x3U\x3U\x5U\x584\nU\x3V\x3V\x5V\x588\nV\x3V\x3V\x5V\x58C\nV\x3V\x3"+
		"V\x3V\x3V\x5V\x592\nV\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x5W\x59C\nW\x5W"+
		"\x59E\nW\x3X\x3X\x3X\x3X\aX\x5A4\nX\fX\xEX\x5A7\vX\x3X\x3X\x3X\x3X\x5"+
		"X\x5AD\nX\x3Y\x3Y\x3Y\x3Y\aY\x5B3\nY\fY\xEY\x5B6\vY\x3Y\x3Y\x3Z\x3Z\x3"+
		"[\x3[\x3[\x3[\a[\x5C0\n[\f[\xE[\x5C3\v[\x3[\x3[\x3[\x3[\x5[\x5C9\n[\x3"+
		"[\x3[\x3[\x3[\x3[\x3[\x5[\x5D1\n[\x5[\x5D3\n[\x3\\\x3\\\x5\\\x5D7\n\\"+
		"\x3\\\x3\\\x5\\\x5DB\n\\\x3\\\x3\\\x3\\\x3\\\x3\\\x5\\\x5E2\n\\\x3\\\x5"+
		"\\\x5E5\n\\\x3\\\x3\\\x5\\\x5E9\n\\\x3]\x3]\x5]\x5ED\n]\x3^\x3^\x3^\a"+
		"^\x5F2\n^\f^\xE^\x5F5\v^\x3_\x3_\x3_\a_\x5FA\n_\f_\xE_\x5FD\v_\x3`\x3"+
		"`\x3`\x3`\x3`\x5`\x604\n`\x5`\x606\n`\x3`\x5`\x609\n`\x3`\x5`\x60C\n`"+
		"\x3`\x3`\x3`\x5`\x611\n`\x5`\x613\n`\x3`\x3`\x3`\x3`\x3`\x5`\x61A\n`\x5"+
		"`\x61C\n`\x3`\x5`\x61F\n`\x3`\x5`\x622\n`\x3`\x5`\x625\n`\x3`\x3`\x3`"+
		"\x5`\x62A\n`\x5`\x62C\n`\x5`\x62E\n`\x3\x61\x3\x61\x3\x61\a\x61\x633\n"+
		"\x61\f\x61\xE\x61\x636\v\x61\x3\x62\x3\x62\x5\x62\x63A\n\x62\x3\x62\x3"+
		"\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x5\x62\x643\n\x62\x3\x62\x3\x62"+
		"\x3\x62\x3\x62\x5\x62\x649\n\x62\x5\x62\x64B\n\x62\x3\x63\x3\x63\x3\x64"+
		"\x3\x64\x3\x64\x3\x64\x5\x64\x653\n\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3"+
		"\x65\x3\x65\x3\x65\x6\x65\x65C\n\x65\r\x65\xE\x65\x65D\x3\x65\x3\x65\x3"+
		"\x65\x5\x65\x663\n\x65\x3\x66\x3\x66\x5\x66\x667\n\x66\x3\x66\x3\x66\x3"+
		"\x66\x3g\x3g\x5g\x66E\ng\x3g\x3g\x3g\x3g\x3g\x3h\x3h\x3h\x3h\x3h\x3h\x5"+
		"h\x67B\nh\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x5i\x684\ni\x3j\x3j\x5j\x688\nj"+
		"\x3j\x3j\x3j\x3j\x3j\aj\x68F\nj\fj\xEj\x692\vj\x3j\x5j\x695\nj\x3j\aj"+
		"\x698\nj\fj\xEj\x69B\vj\x3j\aj\x69E\nj\fj\xEj\x6A1\vj\x3j\x5j\x6A4\nj"+
		"\x3j\x5j\x6A7\nj\x3j\x3j\x3j\x3j\x5j\x6AD\nj\x5j\x6AF\nj\x3k\x3k\x3k\x3"+
		"k\x3k\x5k\x6B6\nk\x3k\x3k\x3k\x3k\x3k\x5k\x6BD\nk\x3k\x3k\x3k\x3k\x3k"+
		"\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x5k\x6CC\nk\x5k\x6CE\nk\x3l\x3l\x3l\x5"+
		"l\x6D3\nl\x3m\x3m\x3m\am\x6D8\nm\fm\xEm\x6DB\vm\x3n\x3n\x3n\x3n\an\x6E1"+
		"\nn\fn\xEn\x6E4\vn\x3n\x3n\x3n\x3n\an\x6EA\nn\fn\xEn\x6ED\vn\x5n\x6EF"+
		"\nn\x3o\x3o\x3o\x5o\x6F4\no\x3o\ao\x6F7\no\fo\xEo\x6FA\vo\x3o\x3o\x3o"+
		"\ao\x6FF\no\fo\xEo\x702\vo\x5o\x704\no\x3p\x3p\x5p\x708\np\x3p\x3p\x5"+
		"p\x70C\np\x3p\x5p\x70F\np\x3p\x5p\x712\np\x3p\ap\x715\np\fp\xEp\x718\v"+
		"p\x3p\ap\x71B\np\fp\xEp\x71E\vp\x3p\x5p\x721\np\x3p\x5p\x724\np\x3p\x5"+
		"p\x727\np\x3p\x5p\x72A\np\x3p\x5p\x72D\np\x3p\x5p\x730\np\x3p\x3p\x3p"+
		"\x3p\x5p\x736\np\x3q\x3q\x3q\x3q\x3q\x5q\x73D\nq\x3r\x3r\x3r\ar\x742\n"+
		"r\fr\xEr\x745\vr\x3s\x3s\x3s\x3s\x5s\x74B\ns\x3t\x3t\x3t\x3t\x3t\x3t\x3"+
		"t\x3t\x5t\x755\nt\x3t\x5t\x758\nt\x3u\x5u\x75B\nu\x3u\x3u\x3u\x5u\x760"+
		"\nu\x3u\x3u\x3u\x3u\x3u\x5u\x767\nu\x3v\x3v\x3v\x3v\x3w\x3w\x3w\aw\x770"+
		"\nw\fw\xEw\x773\vw\x3x\x5x\x776\nx\x3x\x3x\x5x\x77A\nx\x3x\x5x\x77D\n"+
		"x\x3x\x5x\x780\nx\x3x\x3x\x3x\x3x\x3x\x5x\x787\nx\x3x\x3x\x3x\x3x\x5x"+
		"\x78D\nx\x3x\x5x\x790\nx\x3x\x3x\x3x\x3x\x5x\x796\nx\x3y\x3y\x3y\x3y\x3"+
		"y\ay\x79D\ny\fy\xEy\x7A0\vy\x3y\x3y\x3z\x3z\x5z\x7A6\nz\x3z\x3z\x3z\x3"+
		"z\x3z\x3z\x3z\x3z\x3z\x5z\x7B1\nz\x3{\x3{\x3{\x3{\x3{\x3{\x3{\a{\x7BA"+
		"\n{\f{\xE{\x7BD\v{\x3{\x3{\x3{\x3{\x3{\a{\x7C4\n{\f{\xE{\x7C7\v{\x6{\x7C9"+
		"\n{\r{\xE{\x7CA\x3{\x3{\x3|\x3|\x3|\x3}\x3}\x3}\x3}\a}\x7D6\n}\f}\xE}"+
		"\x7D9\v}\x3~\x3~\x6~\x7DD\n~\r~\xE~\x7DE\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3"+
		"\x7F\a\x7F\x7E6\n\x7F\f\x7F\xE\x7F\x7E9\v\x7F\x3\x80\x3\x80\x5\x80\x7ED"+
		"\n\x80\x3\x81\x3\x81\x3\x81\x3\x82\x5\x82\x7F3\n\x82\x3\x82\x3\x82\x3"+
		"\x82\x3\x82\a\x82\x7F9\n\x82\f\x82\xE\x82\x7FC\v\x82\x3\x82\x5\x82\x7FF"+
		"\n\x82\x3\x82\x3\x82\x5\x82\x803\n\x82\x3\x83\x3\x83\x3\x83\x3\x83\x3"+
		"\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x5\x83\x811\n\x83"+
		"\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\a\x85\x81B\n"+
		"\x85\f\x85\xE\x85\x81E\v\x85\x3\x86\x3\x86\x5\x86\x822\n\x86\x3\x86\x5"+
		"\x86\x825\n\x86\x3\x87\x3\x87\x5\x87\x829\n\x87\x3\x87\x3\x87\x3\x87\x3"+
		"\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\x834\n\x87\x3\x87\x3\x87"+
		"\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\x83D\n\x87\x3\x87\x3\x87\x5"+
		"\x87\x841\n\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87"+
		"\x3\x87\x5\x87\x84C\n\x87\x3\x87\x3\x87\x6\x87\x850\n\x87\r\x87\xE\x87"+
		"\x851\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\x859\n\x87\x3\x88\x3\x88"+
		"\x3\x88\x3\x88\x3\x88\a\x88\x860\n\x88\f\x88\xE\x88\x863\v\x88\x3\x88"+
		"\x5\x88\x866\n\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x5\x89\x86D\n\x89"+
		"\x3\x89\x3\x89\x3\x89\x3\x89\a\x89\x873\n\x89\f\x89\xE\x89\x876\v\x89"+
		"\x3\x8A\x3\x8A\x5\x8A\x87A\n\x8A\x3\x8A\x3\x8A\x5\x8A\x87E\n\x8A\x3\x8A"+
		"\x5\x8A\x881\n\x8A\x3\x8A\x5\x8A\x884\n\x8A\x5\x8A\x886\n\x8A\x3\x8B\x3"+
		"\x8B\x3\x8B\x5\x8B\x88B\n\x8B\x3\x8B\x5\x8B\x88E\n\x8B\x3\x8B\x5\x8B\x891"+
		"\n\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\x899\n\x8C\x3"+
		"\x8D\x3\x8D\x5\x8D\x89D\n\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E\x8A3"+
		"\n\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E\x8A8\n\x8E\x3\x8E\x3\x8E\x3\x8E\x3"+
		"\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E\x8B5\n\x8E"+
		"\x5\x8E\x8B7\n\x8E\x3\x8E\x5\x8E\x8BA\n\x8E\x3\x8E\x5\x8E\x8BD\n\x8E\x3"+
		"\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\x8C6\n\x8F\x3\x90"+
		"\x3\x90\x5\x90\x8CA\n\x90\x3\x91\x3\x91\x5\x91\x8CE\n\x91\x3\x92\x3\x92"+
		"\x3\x92\x5\x92\x8D3\n\x92\x3\x92\x3\x92\x3\x93\x3\x93\x3\x93\x5\x93\x8DA"+
		"\n\x93\x3\x93\x3\x93\x3\x93\x3\x93\x5\x93\x8E0\n\x93\x3\x93\x5\x93\x8E3"+
		"\n\x93\x3\x94\x3\x94\x3\x94\a\x94\x8E8\n\x94\f\x94\xE\x94\x8EB\v\x94\x3"+
		"\x95\x3\x95\x3\x95\x5\x95\x8F0\n\x95\x3\x95\x3\x95\x5\x95\x8F4\n\x95\x5"+
		"\x95\x8F6\n\x95\x3\x96\x3\x96\x3\x96\x5\x96\x8FB\n\x96\x3\x96\x3\x96\x3"+
		"\x97\x3\x97\x5\x97\x901\n\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97"+
		"\x908\n\x97\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\x90F\n\x98\x3\x98"+
		"\x5\x98\x912\n\x98\x3\x98\x5\x98\x915\n\x98\x3\x99\x3\x99\x3\x9A\x5\x9A"+
		"\x91A\n\x9A\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x5\x9B\x923"+
		"\n\x9B\x3\x9B\x3\x9B\x5\x9B\x927\n\x9B\x3\x9C\x3\x9C\x3\x9C\x3\x9D\x3"+
		"\x9D\x3\x9E\x3\x9E\x3\x9E\a\x9E\x931\n\x9E\f\x9E\xE\x9E\x934\v\x9E\x3"+
		"\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\x93F"+
		"\n\x9F\x3\xA0\x3\xA0\x5\xA0\x943\n\xA0\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x5"+
		"\xA2\x949\n\xA2\x3\xA3\x3\xA3\x5\xA3\x94D\n\xA3\x3\xA4\x3\xA4\x3\xA4\x3"+
		"\xA4\x5\xA4\x953\n\xA4\x3\xA5\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA7"+
		"\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x963\n\xA7\x3"+
		"\xA7\x3\xA7\x3\xA7\x5\xA7\x968\n\xA7\x3\xA7\x5\xA7\x96B\n\xA7\x3\xA7\x3"+
		"\xA7\x5\xA7\x96F\n\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\a\xA7\x975\n\xA7\f"+
		"\xA7\xE\xA7\x978\v\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA9\x3\xA9\x3\xAA\x3\xAA"+
		"\x3\xAA\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\x2\x2\f<>@\x42\x44\x46HJLR"+
		"\xAD\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32"+
		"\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2"+
		"L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2"+
		"j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86"+
		"\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A"+
		"\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE"+
		"\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2"+
		"\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6"+
		"\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA"+
		"\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE"+
		"\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110"+
		"\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122"+
		"\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134"+
		"\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146"+
		"\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x2"+
		"\x11\x3\x2\x98\x99\x3\x2gh\x3\x2\x8B\x8C\x3\x2\x37\x38\x3\x2\xB6\xB7\x3"+
		"\x2vw\x4\x2\b\b\v\v\x3\x2\x42\x43\x4\x2\xAC\xAC\xC1\xC8\x3\x2\x7F\x81"+
		"\x3\x2}~\x3\x2{|\x3\x2\x82\x85\x3\x2\x16\x17\x3\x2\xE\xA6\xA9A\x2\x158"+
		"\x3\x2\x2\x2\x4\x161\x3\x2\x2\x2\x6\x163\x3\x2\x2\x2\b\x16C\x3\x2\x2\x2"+
		"\n\x179\x3\x2\x2\x2\f\x17F\x3\x2\x2\x2\xE\x1AE\x3\x2\x2\x2\x10\x1B0\x3"+
		"\x2\x2\x2\x12\x1B4\x3\x2\x2\x2\x14\x1C0\x3\x2\x2\x2\x16\x1C8\x3\x2\x2"+
		"\x2\x18\x1EA\x3\x2\x2\x2\x1A\x1EC\x3\x2\x2\x2\x1C\x1F1\x3\x2\x2\x2\x1E"+
		"\x205\x3\x2\x2\x2 \x20F\x3\x2\x2\x2\"\x22C\x3\x2\x2\x2$\x231\x3\x2\x2"+
		"\x2&\x23D\x3\x2\x2\x2(\x245\x3\x2\x2\x2*\x249\x3\x2\x2\x2,\x252\x3\x2"+
		"\x2\x2.\x256\x3\x2\x2\x2\x30\x262\x3\x2\x2\x2\x32\x274\x3\x2\x2\x2\x34"+
		"\x276\x3\x2\x2\x2\x36\x2BE\x3\x2\x2\x2\x38\x2C2\x3\x2\x2\x2:\x2C4\x3\x2"+
		"\x2\x2<\x2C6\x3\x2\x2\x2>\x2D4\x3\x2\x2\x2@\x2E2\x3\x2\x2\x2\x42\x2F3"+
		"\x3\x2\x2\x2\x44\x2FE\x3\x2\x2\x2\x46\x309\x3\x2\x2\x2H\x31A\x3\x2\x2"+
		"\x2J\x340\x3\x2\x2\x2L\x34E\x3\x2\x2\x2N\x364\x3\x2\x2\x2P\x369\x3\x2"+
		"\x2\x2R\x36B\x3\x2\x2\x2T\x38F\x3\x2\x2\x2V\x399\x3\x2\x2\x2X\x3AC\x3"+
		"\x2\x2\x2Z\x3AE\x3\x2\x2\x2\\\x3B3\x3\x2\x2\x2^\x3B6\x3\x2\x2\x2`\x3C3"+
		"\x3\x2\x2\x2\x62\x3C5\x3\x2\x2\x2\x64\x3DA\x3\x2\x2\x2\x66\x3EB\x3\x2"+
		"\x2\x2h\x3EF\x3\x2\x2\x2j\x3F9\x3\x2\x2\x2l\x404\x3\x2\x2\x2n\x413\x3"+
		"\x2\x2\x2p\x415\x3\x2\x2\x2r\x41E\x3\x2\x2\x2t\x433\x3\x2\x2\x2v\x441"+
		"\x3\x2\x2\x2x\x443\x3\x2\x2\x2z\x458\x3\x2\x2\x2|\x45A\x3\x2\x2\x2~\x472"+
		"\x3\x2\x2\x2\x80\x474\x3\x2\x2\x2\x82\x476\x3\x2\x2\x2\x84\x47F\x3\x2"+
		"\x2\x2\x86\x493\x3\x2\x2\x2\x88\x4A2\x3\x2\x2\x2\x8A\x4D4\x3\x2\x2\x2"+
		"\x8C\x4D6\x3\x2\x2\x2\x8E\x4DA\x3\x2\x2\x2\x90\x4E1\x3\x2\x2\x2\x92\x4E5"+
		"\x3\x2\x2\x2\x94\x4FB\x3\x2\x2\x2\x96\x4FD\x3\x2\x2\x2\x98\x508\x3\x2"+
		"\x2\x2\x9A\x50F\x3\x2\x2\x2\x9C\x549\x3\x2\x2\x2\x9E\x54C\x3\x2\x2\x2"+
		"\xA0\x557\x3\x2\x2\x2\xA2\x561\x3\x2\x2\x2\xA4\x566\x3\x2\x2\x2\xA6\x571"+
		"\x3\x2\x2\x2\xA8\x57D\x3\x2\x2\x2\xAA\x585\x3\x2\x2\x2\xAC\x593\x3\x2"+
		"\x2\x2\xAE\x5AC\x3\x2\x2\x2\xB0\x5AE\x3\x2\x2\x2\xB2\x5B9\x3\x2\x2\x2"+
		"\xB4\x5D2\x3\x2\x2\x2\xB6\x5D4\x3\x2\x2\x2\xB8\x5EC\x3\x2\x2\x2\xBA\x5EE"+
		"\x3\x2\x2\x2\xBC\x5F6\x3\x2\x2\x2\xBE\x62D\x3\x2\x2\x2\xC0\x62F\x3\x2"+
		"\x2\x2\xC2\x64A\x3\x2\x2\x2\xC4\x64C\x3\x2\x2\x2\xC6\x64E\x3\x2\x2\x2"+
		"\xC8\x662\x3\x2\x2\x2\xCA\x664\x3\x2\x2\x2\xCC\x66B\x3\x2\x2\x2\xCE\x67A"+
		"\x3\x2\x2\x2\xD0\x67C\x3\x2\x2\x2\xD2\x6AE\x3\x2\x2\x2\xD4\x6CD\x3\x2"+
		"\x2\x2\xD6\x6D2\x3\x2\x2\x2\xD8\x6D4\x3\x2\x2\x2\xDA\x6DC\x3\x2\x2\x2"+
		"\xDC\x703\x3\x2\x2\x2\xDE\x735\x3\x2\x2\x2\xE0\x737\x3\x2\x2\x2\xE2\x73E"+
		"\x3\x2\x2\x2\xE4\x746\x3\x2\x2\x2\xE6\x74C\x3\x2\x2\x2\xE8\x75A\x3\x2"+
		"\x2\x2\xEA\x768\x3\x2\x2\x2\xEC\x76C\x3\x2\x2\x2\xEE\x795\x3\x2\x2\x2"+
		"\xF0\x797\x3\x2\x2\x2\xF2\x7B0\x3\x2\x2\x2\xF4\x7B2\x3\x2\x2\x2\xF6\x7CE"+
		"\x3\x2\x2\x2\xF8\x7D1\x3\x2\x2\x2\xFA\x7DC\x3\x2\x2\x2\xFC\x7E0\x3\x2"+
		"\x2\x2\xFE\x7EC\x3\x2\x2\x2\x100\x7EE\x3\x2\x2\x2\x102\x802\x3\x2\x2\x2"+
		"\x104\x810\x3\x2\x2\x2\x106\x812\x3\x2\x2\x2\x108\x815\x3\x2\x2\x2\x10A"+
		"\x821\x3\x2\x2\x2\x10C\x826\x3\x2\x2\x2\x10E\x865\x3\x2\x2\x2\x110\x867"+
		"\x3\x2\x2\x2\x112\x885\x3\x2\x2\x2\x114\x88A\x3\x2\x2\x2\x116\x898\x3"+
		"\x2\x2\x2\x118\x89A\x3\x2\x2\x2\x11A\x8B6\x3\x2\x2\x2\x11C\x8C5\x3\x2"+
		"\x2\x2\x11E\x8C9\x3\x2\x2\x2\x120\x8CD\x3\x2\x2\x2\x122\x8CF\x3\x2\x2"+
		"\x2\x124\x8D6\x3\x2\x2\x2\x126\x8E4\x3\x2\x2\x2\x128\x8F5\x3\x2\x2\x2"+
		"\x12A\x8F7\x3\x2\x2\x2\x12C\x907\x3\x2\x2\x2\x12E\x914\x3\x2\x2\x2\x130"+
		"\x916\x3\x2\x2\x2\x132\x919\x3\x2\x2\x2\x134\x91D\x3\x2\x2\x2\x136\x928"+
		"\x3\x2\x2\x2\x138\x92B\x3\x2\x2\x2\x13A\x92D\x3\x2\x2\x2\x13C\x93E\x3"+
		"\x2\x2\x2\x13E\x942\x3\x2\x2\x2\x140\x944\x3\x2\x2\x2\x142\x948\x3\x2"+
		"\x2\x2\x144\x94C\x3\x2\x2\x2\x146\x952\x3\x2\x2\x2\x148\x954\x3\x2\x2"+
		"\x2\x14A\x957\x3\x2\x2\x2\x14C\x95A\x3\x2\x2\x2\x14E\x979\x3\x2\x2\x2"+
		"\x150\x97C\x3\x2\x2\x2\x152\x97E\x3\x2\x2\x2\x154\x981\x3\x2\x2\x2\x156"+
		"\x983\x3\x2\x2\x2\x158\x159\x5\x84\x43\x2\x159\x15A\a\x2\x2\x3\x15A\x3"+
		"\x3\x2\x2\x2\x15B\x15C\aR\x2\x2\x15C\x15D\a\x18\x2\x2\x15D\x162\x5n\x38"+
		"\x2\x15E\x15F\aR\x2\x2\x15F\x160\a\x18\x2\x2\x160\x162\x5t;\x2\x161\x15B"+
		"\x3\x2\x2\x2\x161\x15E\x3\x2\x2\x2\x162\x5\x3\x2\x2\x2\x163\x164\aP\x2"+
		"\x2\x164\x165\a\x18\x2\x2\x165\x16A\x5\x112\x8A\x2\x166\x16B\x5\b\x5\x2"+
		"\x167\x16B\x5\f\a\x2\x168\x16B\x5\n\x6\x2\x169\x16B\x5\x10\t\x2\x16A\x166"+
		"\x3\x2\x2\x2\x16A\x167\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16A\x169\x3"+
		"\x2\x2\x2\x16B\a\x3\x2\x2\x2\x16C\x16D\a?\x2\x2\x16D\x170\a\x1A\x2\x2"+
		"\x16E\x171\x5j\x36\x2\x16F\x171\x5v<\x2\x170\x16E\x3\x2\x2\x2\x170\x16F"+
		"\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172\x173\a\x66\x2\x2\x173\x174\x5"+
		"\xC4\x63\x2\x174\x177\a\x1A\x2\x2\x175\x178\x5j\x36\x2\x176\x178\x5v<"+
		"\x2\x177\x175\x3\x2\x2\x2\x177\x176\x3\x2\x2\x2\x178\t\x3\x2\x2\x2\x179"+
		"\x17A\aR\x2\x2\x17A\x17B\a\x1D\x2\x2\x17B\x17D\x5n\x38\x2\x17C\x17E\x5"+
		"\x18\r\x2\x17D\x17C\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E\v\x3\x2\x2"+
		"\x2\x17F\x180\aN\x2\x2\x180\x181\a\x1D\x2\x2\x181\x1A3\x5n\x38\x2\x182"+
		"\x183\a\x1F\x2\x2\x183\x185\a \x2\x2\x184\x186\x5\x154\xAB\x2\x185\x184"+
		"\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x188\a\xA8"+
		"\x2\x2\x188\x189\x5&\x14\x2\x189\x18B\a\xA9\x2\x2\x18A\x18C\x5\x18\r\x2"+
		"\x18B\x18A\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18C\x18F\x3\x2\x2\x2\x18D"+
		"\x18E\ag\x2\x2\x18E\x190\x5\xE\b\x2\x18F\x18D\x3\x2\x2\x2\x18F\x190\x3"+
		"\x2\x2\x2\x190\x1A4\x3\x2\x2\x2\x191\x192\aZ\x2\x2\x192\x193\a\xA8\x2"+
		"\x2\x193\x194\x5\x66\x34\x2\x194\x195\a\xA9\x2\x2\x195\x196\aU\x2\x2\x196"+
		"\x197\x5n\x38\x2\x197\x1A4\x3\x2\x2\x2\x198\x199\a\x1E\x2\x2\x199\x19A"+
		"\a \x2\x2\x19A\x19B\a\xA8\x2\x2\x19B\x19C\x5\xBA^\x2\x19C\x19D\a\xA9\x2"+
		"\x2\x19D\x19E\a!\x2\x2\x19E\x19F\x5\x11A\x8E\x2\x19F\x1A0\a\xA8\x2\x2"+
		"\x1A0\x1A1\x5\xBA^\x2\x1A1\x1A2\a\xA9\x2\x2\x1A2\x1A4\x3\x2\x2\x2\x1A3"+
		"\x182\x3\x2\x2\x2\x1A3\x191\x3\x2\x2\x2\x1A3\x198\x3\x2\x2\x2\x1A4\r\x3"+
		"\x2\x2\x2\x1A5\x1AF\a\x1F\x2\x2\x1A6\x1A7\a\xAA\x2\x2\x1A7\x1A8\a\x1F"+
		"\x2\x2\x1A8\x1AF\a\xAB\x2\x2\x1A9\x1AA\x5n\x38\x2\x1AA\x1AB\a\xA8\x2\x2"+
		"\x1AB\x1AC\x5\xBA^\x2\x1AC\x1AD\a\xA9\x2\x2\x1AD\x1AF\x3\x2\x2\x2\x1AE"+
		"\x1A5\x3\x2\x2\x2\x1AE\x1A6\x3\x2\x2\x2\x1AE\x1A9\x3\x2\x2\x2\x1AF\xF"+
		"\x3\x2\x2\x2\x1B0\x1B1\t\x2\x2\x2\x1B1\x1B2\a\x9A\x2\x2\x1B2\x1B3\x5n"+
		"\x38\x2\x1B3\x11\x3\x2\x2\x2\x1B4\x1B5\aP\x2\x2\x1B5\x1B8\a\x1B\x2\x2"+
		"\x1B6\x1B9\x5n\x38\x2\x1B7\x1B9\a\x45\x2\x2\x1B8\x1B6\x3\x2\x2\x2\x1B8"+
		"\x1B7\x3\x2\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1BB\ag\x2\x2\x1BB\x1BC\x5"+
		"n\x38\x2\x1BC\x1BE\x5n\x38\x2\x1BD\x1BF\x5\x18\r\x2\x1BE\x1BD\x3\x2\x2"+
		"\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x13\x3\x2\x2\x2\x1C0\x1C1\aP\x2\x2\x1C1"+
		"\x1C2\a\x1A\x2\x2\x1C2\x1C3\a\xA3\x2\x2\x1C3\x1C4\x5n\x38\x2\x1C4\x1C5"+
		"\a\x30\x2\x2\x1C5\x1C6\a\xA4\x2\x2\x1C6\x1C7\x5\xE\b\x2\x1C7\x15\x3\x2"+
		"\x2\x2\x1C8\x1C9\aP\x2\x2\x1C9\x1CA\a\x1A\x2\x2\x1CA\x1CB\a\xA2\x2\x2"+
		"\x1CB\x1CC\x5\x120\x91\x2\x1CC\x1CD\a\xA8\x2\x2\x1CD\x1DA\a\xA9\x2\x2"+
		"\x1CE\x1CF\a\x8F\x2\x2\x1CF\x1D0\a\xA1\x2\x2\x1D0\x1D1\a\xA8\x2\x2\x1D1"+
		"\x1D2\x5v<\x2\x1D2\x1D3\a\xA9\x2\x2\x1D3\x1DB\x3\x2\x2\x2\x1D4\x1D5\a"+
		"\xA0\x2\x2\x1D5\x1D6\a\xA1\x2\x2\x1D6\x1D7\a\xA8\x2\x2\x1D7\x1D8\x5v<"+
		"\x2\x1D8\x1D9\a\xA9\x2\x2\x1D9\x1DB\x3\x2\x2\x2\x1DA\x1CE\x3\x2\x2\x2"+
		"\x1DA\x1D4\x3\x2\x2\x2\x1DB\x17\x3\x2\x2\x2\x1DC\x1DD\aT\x2\x2\x1DD\x1DE"+
		"\a\xA8\x2\x2\x1DE\x1E3\x5\x1A\xE\x2\x1DF\x1E0\a\xB9\x2\x2\x1E0\x1E2\x5"+
		"\x1A\xE\x2\x1E1\x1DF\x3\x2\x2\x2\x1E2\x1E5\x3\x2\x2\x2\x1E3\x1E1\x3\x2"+
		"\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E6\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2"+
		"\x2\x1E6\x1E7\a\xA9\x2\x2\x1E7\x1EB\x3\x2\x2\x2\x1E8\x1E9\aT\x2\x2\x1E9"+
		"\x1EB\x5\x1A\xE\x2\x1EA\x1DC\x3\x2\x2\x2\x1EA\x1E8\x3\x2\x2\x2\x1EB\x19"+
		"\x3\x2\x2\x2\x1EC\x1EF\a\xCB\x2\x2\x1ED\x1EE\a\xAC\x2\x2\x1EE\x1F0\t\x3"+
		"\x2\x2\x1EF\x1ED\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1B\x3\x2\x2\x2"+
		"\x1F1\x1F2\aQ\x2\x2\x1F2\x1F5\a\x18\x2\x2\x1F3\x1F6\x5n\x38\x2\x1F4\x1F6"+
		"\x5t;\x2\x1F5\x1F3\x3\x2\x2\x2\x1F5\x1F4\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2"+
		"\x2\x1F7\x1F8\a\xA8\x2\x2\x1F8\x1FB\x5\xBC_\x2\x1F9\x1FA\a\xB9\x2\x2\x1FA"+
		"\x1FC\x5\xC0\x61\x2\x1FB\x1F9\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FE"+
		"\x3\x2\x2\x2\x1FD\x1FF\a\xB9\x2\x2\x1FE\x1FD\x3\x2\x2\x2\x1FE\x1FF\x3"+
		"\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200\x203\a\xA9\x2\x2\x201\x202\ag\x2"+
		"\x2\x202\x204\x5\xE\b\x2\x203\x201\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204"+
		"\x1D\x3\x2\x2\x2\x205\x206\aR\x2\x2\x206\x207\a\x1B\x2\x2\x207\x20D\x5"+
		"n\x38\x2\x208\x209\ag\x2\x2\x209\x20B\x5\x114\x8B\x2\x20A\x20C\x5\x18"+
		"\r\x2\x20B\x20A\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20E\x3\x2\x2\x2"+
		"\x20D\x208\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x1F\x3\x2\x2\x2\x20F"+
		"\x211\aQ\x2\x2\x210\x212\a:\x2\x2\x211\x210\x3\x2\x2\x2\x211\x212\x3\x2"+
		"\x2\x2\x212\x214\x3\x2\x2\x2\x213\x215\x5\x154\xAB\x2\x214\x213\x3\x2"+
		"\x2\x2\x214\x215\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x219\a\x1B\x2"+
		"\x2\x217\x21A\x5n\x38\x2\x218\x21A\x5r:\x2\x219\x217\x3\x2\x2\x2\x219"+
		"\x218\x3\x2\x2\x2\x21A\x21B\x3\x2\x2\x2\x21B\x21C\ag\x2\x2\x21C\x21D\x5"+
		"\x114\x8B\x2\x21D\x21E\a\xA8\x2\x2\x21E\x21F\x5&\x14\x2\x21F\x221\a\xA9"+
		"\x2\x2\x220\x222\x5\"\x12\x2\x221\x220\x3\x2\x2\x2\x221\x222\x3\x2\x2"+
		"\x2\x222\x224\x3\x2\x2\x2\x223\x225\x5\x106\x84\x2\x224\x223\x3\x2\x2"+
		"\x2\x224\x225\x3\x2\x2\x2\x225\x227\x3\x2\x2\x2\x226\x228\x5\x18\r\x2"+
		"\x227\x226\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x22A\x3\x2\x2\x2\x229"+
		"\x22B\x5$\x13\x2\x22A\x229\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B!\x3"+
		"\x2\x2\x2\x22C\x22D\a\x41\x2\x2\x22D\x22E\a\xA8\x2\x2\x22E\x22F\x5\xBA"+
		"^\x2\x22F\x230\a\xA9\x2\x2\x230#\x3\x2\x2\x2\x231\x23B\ag\x2\x2\x232\x233"+
		"\x5n\x38\x2\x233\x234\a\xA8\x2\x2\x234\x235\x5\xBA^\x2\x235\x236\a\xA9"+
		"\x2\x2\x236\x23C\x3\x2\x2\x2\x237\x238\a\xAA\x2\x2\x238\x239\a\x1F\x2"+
		"\x2\x239\x23C\a\xAB\x2\x2\x23A\x23C\a\x1F\x2\x2\x23B\x232\x3\x2\x2\x2"+
		"\x23B\x237\x3\x2\x2\x2\x23B\x23A\x3\x2\x2\x2\x23C%\x3\x2\x2\x2\x23D\x242"+
		"\x5(\x15\x2\x23E\x23F\a\xB9\x2\x2\x23F\x241\x5(\x15\x2\x240\x23E\x3\x2"+
		"\x2\x2\x241\x244\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2\x242\x243\x3\x2\x2"+
		"\x2\x243\'\x3\x2\x2\x2\x244\x242\x3\x2\x2\x2\x245\x247\x5\x140\xA1\x2"+
		"\x246\x248\t\x4\x2\x2\x247\x246\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248"+
		")\x3\x2\x2\x2\x249\x24A\aQ\x2\x2\x24A\x24B\a\x8D\x2\x2\x24B\x24C\x5n\x38"+
		"\x2\x24C\x24D\ag\x2\x2\x24D\x24E\x5\x114\x8B\x2\x24E\x24F\a\xA8\x2\x2"+
		"\x24F\x250\x5\x13A\x9E\x2\x250\x251\a\xA9\x2\x2\x251+\x3\x2\x2\x2\x252"+
		"\x253\aR\x2\x2\x253\x254\a\x19\x2\x2\x254\x255\x5n\x38\x2\x255-\x3\x2"+
		"\x2\x2\x256\x257\aQ\x2\x2\x257\x258\a\x19\x2\x2\x258\x25A\x5n\x38\x2\x259"+
		"\x25B\x5z>\x2\x25A\x259\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x25D\x3"+
		"\x2\x2\x2\x25C\x25E\x5\x82\x42\x2\x25D\x25C\x3\x2\x2\x2\x25D\x25E\x3\x2"+
		"\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x260\aS\x2\x2\x260\x261\x5x=\x2\x261"+
		"/\x3\x2\x2\x2\x262\x263\aM\x2\x2\x263\x264\a\x18\x2\x2\x264\x265\x5\x114"+
		"\x8B\x2\x265\x31\x3\x2\x2\x2\x266\x267\a\t\x2\x2\x267\x26E\a\xCB\x2\x2"+
		"\x268\x26F\x5\x38\x1D\x2\x269\x26B\a\xA8\x2\x2\x26A\x26C\x5\xD8m\x2\x26B"+
		"\x26A\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2\x26C\x26D\x3\x2\x2\x2\x26D\x26F"+
		"\a\xA9\x2\x2\x26E\x268\x3\x2\x2\x2\x26E\x269\x3\x2\x2\x2\x26F\x271\x3"+
		"\x2\x2\x2\x270\x272\x5\x18\r\x2\x271\x270\x3\x2\x2\x2\x271\x272\x3\x2"+
		"\x2\x2\x272\x275\x3\x2\x2\x2\x273\x275\a\n\x2\x2\x274\x266\x3\x2\x2\x2"+
		"\x274\x273\x3\x2\x2\x2\x275\x33\x3\x2\x2\x2\x276\x277\x5\x38\x1D\x2\x277"+
		"\x35\x3\x2\x2\x2\x278\x2BF\x5\x66\x34\x2\x279\x27B\x5\x13C\x9F\x2\x27A"+
		"\x27C\x5\x152\xAA\x2\x27B\x27A\x3\x2\x2\x2\x27B\x27C\x3\x2\x2\x2\x27C"+
		"\x2BF\x3\x2\x2\x2\x27D\x27F\x5v<\x2\x27E\x280\x5\x152\xAA\x2\x27F\x27E"+
		"\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280\x2BF\x3\x2\x2\x2\x281\x2BF\x5"+
		"\x122\x92\x2\x282\x283\a\x34\x2\x2\x283\x284\a\xA8\x2\x2\x284\x285\x5"+
		"\x38\x1D\x2\x285\x286\aS\x2\x2\x286\x287\x5`\x31\x2\x287\x288\a\xA9\x2"+
		"\x2\x288\x2BF\x3\x2\x2\x2\x289\x28A\a\x35\x2\x2\x28A\x28B\a\xA8\x2\x2"+
		"\x28B\x28C\x5`\x31\x2\x28C\x28D\a\xB9\x2\x2\x28D\x290\x5\x38\x1D\x2\x28E"+
		"\x28F\a\xB9\x2\x2\x28F\x291\x5j\x36\x2\x290\x28E\x3\x2\x2\x2\x290\x291"+
		"\x3\x2\x2\x2\x291\x292\x3\x2\x2\x2\x292\x293\a\xA9\x2\x2\x293\x2BF\x3"+
		"\x2\x2\x2\x294\x29B\t\x5\x2\x2\x295\x29C\x5V,\x2\x296\x297\a\xA8\x2\x2"+
		"\x297\x298\a\x39\x2\x2\x298\x299\x5V,\x2\x299\x29A\a\xA9\x2\x2\x29A\x29C"+
		"\x3\x2\x2\x2\x29B\x295\x3\x2\x2\x2\x29B\x296\x3\x2\x2\x2\x29C\x2BF\x3"+
		"\x2\x2\x2\x29D\x29E\aY\x2\x2\x29E\x29F\a\xA8\x2\x2\x29F\x2A0\x5\xDCo\x2"+
		"\x2A0\x2A1\a\xA9\x2\x2\x2A1\x2BF\x3\x2\x2\x2\x2A2\x2A4\a\x33\x2\x2\x2A3"+
		"\x2A5\x5Z.\x2\x2A4\x2A3\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2A4\x3"+
		"\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A9\x3\x2\x2\x2\x2A8\x2AA\x5\\/"+
		"\x2\x2A9\x2A8\x3\x2\x2\x2\x2A9\x2AA\x3\x2\x2\x2\x2AA\x2AB\x3\x2\x2\x2"+
		"\x2AB\x2AC\aX\x2\x2\x2AC\x2BF\x3\x2\x2\x2\x2AD\x2AE\a\x33\x2\x2\x2AE\x2B0"+
		"\x5\x38\x1D\x2\x2AF\x2B1\x5Z.\x2\x2B0\x2AF\x3\x2\x2\x2\x2B1\x2B2\x3\x2"+
		"\x2\x2\x2B2\x2B0\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3\x2B5\x3\x2\x2"+
		"\x2\x2B4\x2B6\x5\\/\x2\x2B5\x2B4\x3\x2\x2\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6"+
		"\x2B7\x3\x2\x2\x2\x2B7\x2B8\aX\x2\x2\x2B8\x2BF\x3\x2\x2\x2\x2B9\x2BA\a"+
		"\xA8\x2\x2\x2BA\x2BB\x5\x38\x1D\x2\x2BB\x2BC\a\xA9\x2\x2\x2BC\x2BF\x3"+
		"\x2\x2\x2\x2BD\x2BF\x5^\x30\x2\x2BE\x278\x3\x2\x2\x2\x2BE\x279\x3\x2\x2"+
		"\x2\x2BE\x27D\x3\x2\x2\x2\x2BE\x281\x3\x2\x2\x2\x2BE\x282\x3\x2\x2\x2"+
		"\x2BE\x289\x3\x2\x2\x2\x2BE\x294\x3\x2\x2\x2\x2BE\x29D\x3\x2\x2\x2\x2BE"+
		"\x2A2\x3\x2\x2\x2\x2BE\x2AD\x3\x2\x2\x2\x2BE\x2B9\x3\x2\x2\x2\x2BE\x2BD"+
		"\x3\x2\x2\x2\x2BF\x37\x3\x2\x2\x2\x2C0\x2C3\x5\x36\x1C\x2\x2C1\x2C3\x5"+
		":\x1E\x2\x2C2\x2C0\x3\x2\x2\x2\x2C2\x2C1\x3\x2\x2\x2\x2C3\x39\x3\x2\x2"+
		"\x2\x2C4\x2C5\x5<\x1F\x2\x2C5;\x3\x2\x2\x2\x2C6\x2C7\b\x1F\x1\x2\x2C7"+
		"\x2C8\x5> \x2\x2C8\x2D1\x3\x2\x2\x2\x2C9\x2CA\f\x4\x2\x2\x2CA\x2CB\a\x8A"+
		"\x2\x2\x2CB\x2D0\x5> \x2\x2CC\x2CD\f\x3\x2\x2\x2CD\x2CE\a\r\x2\x2\x2CE"+
		"\x2D0\x5> \x2\x2CF\x2C9\x3\x2\x2\x2\x2CF\x2CC\x3\x2\x2\x2\x2D0\x2D3\x3"+
		"\x2\x2\x2\x2D1\x2CF\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2=\x3\x2\x2\x2"+
		"\x2D3\x2D1\x3\x2\x2\x2\x2D4\x2D5\b \x1\x2\x2D5\x2D6\x5@!\x2\x2D6\x2DF"+
		"\x3\x2\x2\x2\x2D7\x2D8\f\x4\x2\x2\x2D8\x2D9\a\x89\x2\x2\x2D9\x2DE\x5@"+
		"!\x2\x2DA\x2DB\f\x3\x2\x2\x2DB\x2DC\a\f\x2\x2\x2DC\x2DE\x5@!\x2\x2DD\x2D7"+
		"\x3\x2\x2\x2\x2DD\x2DA\x3\x2\x2\x2\x2DE\x2E1\x3\x2\x2\x2\x2DF\x2DD\x3"+
		"\x2\x2\x2\x2DF\x2E0\x3\x2\x2\x2\x2E0?\x3\x2\x2\x2\x2E1\x2DF\x3\x2\x2\x2"+
		"\x2E2\x2E3\b!\x1\x2\x2E3\x2E4\x5\x42\"\x2\x2E4\x2F0\x3\x2\x2\x2\x2E5\x2E6"+
		"\f\x4\x2\x2\x2E6\x2E7\a\xB3\x2\x2\x2E7\x2EF\x5\x42\"\x2\x2E8\x2E9\f\x3"+
		"\x2\x2\x2E9\x2EB\ap\x2\x2\x2EA\x2EC\ar\x2\x2\x2EB\x2EA\x3\x2\x2\x2\x2EB"+
		"\x2EC\x3\x2\x2\x2\x2EC\x2ED\x3\x2\x2\x2\x2ED\x2EF\as\x2\x2\x2EE\x2E5\x3"+
		"\x2\x2\x2\x2EE\x2E8\x3\x2\x2\x2\x2EF\x2F2\x3\x2\x2\x2\x2F0\x2EE\x3\x2"+
		"\x2\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x41\x3\x2\x2\x2\x2F2\x2F0\x3\x2\x2\x2"+
		"\x2F3\x2F4\b\"\x1\x2\x2F4\x2F5\x5\x44#\x2\x2F5\x2FB\x3\x2\x2\x2\x2F6\x2F7"+
		"\f\x3\x2\x2\x2F7\x2F8\a\xB5\x2\x2\x2F8\x2FA\x5\x44#\x2\x2F9\x2F6\x3\x2"+
		"\x2\x2\x2FA\x2FD\x3\x2\x2\x2\x2FB\x2F9\x3\x2\x2\x2\x2FB\x2FC\x3\x2\x2"+
		"\x2\x2FC\x43\x3\x2\x2\x2\x2FD\x2FB\x3\x2\x2\x2\x2FE\x2FF\b#\x1\x2\x2FF"+
		"\x300\x5\x46$\x2\x300\x306\x3\x2\x2\x2\x301\x302\f\x3\x2\x2\x302\x303"+
		"\a\xB2\x2\x2\x303\x305\x5\x46$\x2\x304\x301\x3\x2\x2\x2\x305\x308\x3\x2"+
		"\x2\x2\x306\x304\x3\x2\x2\x2\x306\x307\x3\x2\x2\x2\x307\x45\x3\x2\x2\x2"+
		"\x308\x306\x3\x2\x2\x2\x309\x30A\b$\x1\x2\x30A\x30B\x5H%\x2\x30B\x317"+
		"\x3\x2\x2\x2\x30C\x30D\f\x5\x2\x2\x30D\x30E\a\xAC\x2\x2\x30E\x316\x5H"+
		"%\x2\x30F\x310\f\x4\x2\x2\x310\x311\a\xBF\x2\x2\x311\x316\x5H%\x2\x312"+
		"\x313\f\x3\x2\x2\x313\x314\a\xC0\x2\x2\x314\x316\x5H%\x2\x315\x30C\x3"+
		"\x2\x2\x2\x315\x30F\x3\x2\x2\x2\x315\x312\x3\x2\x2\x2\x316\x319\x3\x2"+
		"\x2\x2\x317\x315\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2\x318G\x3\x2\x2\x2\x319"+
		"\x317\x3\x2\x2\x2\x31A\x31B\b%\x1\x2\x31B\x31C\x5J&\x2\x31C\x33D\x3\x2"+
		"\x2\x2\x31D\x31E\f\v\x2\x2\x31E\x31F\a\xBA\x2\x2\x31F\x33C\x5J&\x2\x320"+
		"\x321\f\n\x2\x2\x321\x322\a\xBC\x2\x2\x322\x33C\x5J&\x2\x323\x324\f\t"+
		"\x2\x2\x324\x325\a\xBB\x2\x2\x325\x33C\x5J&\x2\x326\x327\f\b\x2\x2\x327"+
		"\x328\a\xBA\x2\x2\x328\x329\a\xAC\x2\x2\x329\x33C\x5J&\x2\x32A\x32B\f"+
		"\a\x2\x2\x32B\x32C\a\xBD\x2\x2\x32C\x33C\x5J&\x2\x32D\x32E\f\x6\x2\x2"+
		"\x32E\x32F\a\xBC\x2\x2\x32F\x330\a\xAC\x2\x2\x330\x33C\x5J&\x2\x331\x332"+
		"\f\x5\x2\x2\x332\x333\a\xBE\x2\x2\x333\x33C\x5J&\x2\x334\x335\f\x4\x2"+
		"\x2\x335\x336\ax\x2\x2\x336\x33C\x5T+\x2\x337\x338\f\x3\x2\x2\x338\x339"+
		"\ar\x2\x2\x339\x33A\ax\x2\x2\x33A\x33C\x5T+\x2\x33B\x31D\x3\x2\x2\x2\x33B"+
		"\x320\x3\x2\x2\x2\x33B\x323\x3\x2\x2\x2\x33B\x326\x3\x2\x2\x2\x33B\x32A"+
		"\x3\x2\x2\x2\x33B\x32D\x3\x2\x2\x2\x33B\x331\x3\x2\x2\x2\x33B\x334\x3"+
		"\x2\x2\x2\x33B\x337\x3\x2\x2\x2\x33C\x33F\x3\x2\x2\x2\x33D\x33B\x3\x2"+
		"\x2\x2\x33D\x33E\x3\x2\x2\x2\x33EI\x3\x2\x2\x2\x33F\x33D\x3\x2\x2\x2\x340"+
		"\x341\b&\x1\x2\x341\x342\x5L\'\x2\x342\x34B\x3\x2\x2\x2\x343\x344\f\x4"+
		"\x2\x2\x344\x345\a\xB6\x2\x2\x345\x34A\x5L\'\x2\x346\x347\f\x3\x2\x2\x347"+
		"\x348\a\xB7\x2\x2\x348\x34A\x5L\'\x2\x349\x343\x3\x2\x2\x2\x349\x346\x3"+
		"\x2\x2\x2\x34A\x34D\x3\x2\x2\x2\x34B\x349\x3\x2\x2\x2\x34B\x34C\x3\x2"+
		"\x2\x2\x34CK\x3\x2\x2\x2\x34D\x34B\x3\x2\x2\x2\x34E\x34F\b\'\x1\x2\x34F"+
		"\x350\x5N(\x2\x350\x35C\x3\x2\x2\x2\x351\x352\f\x5\x2\x2\x352\x353\a\xB0"+
		"\x2\x2\x353\x35B\x5N(\x2\x354\x355\f\x4\x2\x2\x355\x356\a\xB1\x2\x2\x356"+
		"\x35B\x5N(\x2\x357\x358\f\x3\x2\x2\x358\x359\a\xB4\x2\x2\x359\x35B\x5"+
		"N(\x2\x35A\x351\x3\x2\x2\x2\x35A\x354\x3\x2\x2\x2\x35A\x357\x3\x2\x2\x2"+
		"\x35B\x35E\x3\x2\x2\x2\x35C\x35A\x3\x2\x2\x2\x35C\x35D\x3\x2\x2\x2\x35D"+
		"M\x3\x2\x2\x2\x35E\x35C\x3\x2\x2\x2\x35F\x360\a\xB6\x2\x2\x360\x365\x5"+
		"N(\x2\x361\x362\a\xB7\x2\x2\x362\x365\x5N(\x2\x363\x365\x5P)\x2\x364\x35F"+
		"\x3\x2\x2\x2\x364\x361\x3\x2\x2\x2\x364\x363\x3\x2\x2\x2\x365O\x3\x2\x2"+
		"\x2\x366\x36A\x5R*\x2\x367\x368\ar\x2\x2\x368\x36A\x5N(\x2\x369\x366\x3"+
		"\x2\x2\x2\x369\x367\x3\x2\x2\x2\x36AQ\x3\x2\x2\x2\x36B\x36C\b*\x1\x2\x36C"+
		"\x36D\x5\x36\x1C\x2\x36D\x386\x3\x2\x2\x2\x36E\x36F\f\x6\x2\x2\x36F\x370"+
		"\aq\x2\x2\x370\x385\x5X-\x2\x371\x372\f\x5\x2\x2\x372\x373\ar\x2\x2\x373"+
		"\x374\aq\x2\x2\x374\x385\x5X-\x2\x375\x377\f\x4\x2\x2\x376\x378\ar\x2"+
		"\x2\x377\x376\x3\x2\x2\x2\x377\x378\x3\x2\x2\x2\x378\x379\x3\x2\x2\x2"+
		"\x379\x37A\at\x2\x2\x37A\x37B\x5\x38\x1D\x2\x37B\x37C\a\x89\x2\x2\x37C"+
		"\x37D\x5\x38\x1D\x2\x37D\x385\x3\x2\x2\x2\x37E\x380\f\x3\x2\x2\x37F\x381"+
		"\ar\x2\x2\x380\x37F\x3\x2\x2\x2\x380\x381\x3\x2\x2\x2\x381\x382\x3\x2"+
		"\x2\x2\x382\x383\ax\x2\x2\x383\x385\x5T+\x2\x384\x36E\x3\x2\x2\x2\x384"+
		"\x371\x3\x2\x2\x2\x384\x375\x3\x2\x2\x2\x384\x37E\x3\x2\x2\x2\x385\x388"+
		"\x3\x2\x2\x2\x386\x384\x3\x2\x2\x2\x386\x387\x3\x2\x2\x2\x387S\x3\x2\x2"+
		"\x2\x388\x386\x3\x2\x2\x2\x389\x38C\x5h\x35\x2\x38A\x38B\ay\x2\x2\x38B"+
		"\x38D\a\xCA\x2\x2\x38C\x38A\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x390"+
		"\x3\x2\x2\x2\x38E\x390\x5\x122\x92\x2\x38F\x389\x3\x2\x2\x2\x38F\x38E"+
		"\x3\x2\x2\x2\x390U\x3\x2\x2\x2\x391\x39A\a\xB0\x2\x2\x392\x39A\x5\x13C"+
		"\x9F\x2\x393\x39A\x5\x66\x34\x2\x394\x39A\x5\x122\x92\x2\x395\x396\a\xA8"+
		"\x2\x2\x396\x397\x5V,\x2\x397\x398\a\xA9\x2\x2\x398\x39A\x3\x2\x2\x2\x399"+
		"\x391\x3\x2\x2\x2\x399\x392\x3\x2\x2\x2\x399\x393\x3\x2\x2\x2\x399\x394"+
		"\x3\x2\x2\x2\x399\x395\x3\x2\x2\x2\x39AW\x3\x2\x2\x2\x39B\x39C\a\xA8\x2"+
		"\x2\x39C\x3A1\x5\x38\x1D\x2\x39D\x39E\a\xB9\x2\x2\x39E\x3A0\x5\x38\x1D"+
		"\x2\x39F\x39D\x3\x2\x2\x2\x3A0\x3A3\x3\x2\x2\x2\x3A1\x39F\x3\x2\x2\x2"+
		"\x3A1\x3A2\x3\x2\x2\x2\x3A2\x3A4\x3\x2\x2\x2\x3A3\x3A1\x3\x2\x2\x2\x3A4"+
		"\x3A5\a\xA9\x2\x2\x3A5\x3AD\x3\x2\x2\x2\x3A6\x3A8\x5v<\x2\x3A7\x3A9\x5"+
		"\x152\xAA\x2\x3A8\x3A7\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9\x3AD\x3"+
		"\x2\x2\x2\x3AA\x3AD\x5\x122\x92\x2\x3AB\x3AD\x5^\x30\x2\x3AC\x39B\x3\x2"+
		"\x2\x2\x3AC\x3A6\x3\x2\x2\x2\x3AC\x3AA\x3\x2\x2\x2\x3AC\x3AB\x3\x2\x2"+
		"\x2\x3ADY\x3\x2\x2\x2\x3AE\x3AF\a=\x2\x2\x3AF\x3B0\x5\x38\x1D\x2\x3B0"+
		"\x3B1\a>\x2\x2\x3B1\x3B2\x5\x38\x1D\x2\x3B2[\x3\x2\x2\x2\x3B3\x3B4\aH"+
		"\x2\x2\x3B4\x3B5\x5\x38\x1D\x2\x3B5]\x3\x2\x2\x2\x3B6\x3B7\a\xA8\x2\x2"+
		"\x3B7\x3B8\x5\xDCo\x2\x3B8\x3B9\a\xA9\x2\x2\x3B9_\x3\x2\x2\x2\x3BA\x3C4"+
		"\x5n\x38\x2\x3BB\x3C4\x5\x12C\x97\x2\x3BC\x3C4\x5\x12E\x98\x2\x3BD\x3C4"+
		"\x5\x132\x9A\x2\x3BE\x3C4\x5\x130\x99\x2\x3BF\x3C4\x5\x12C\x97\x2\x3C0"+
		"\x3C4\a\x93\x2\x2\x3C1\x3C4\a(\x2\x2\x3C2\x3C4\x5\x62\x32\x2\x3C3\x3BA"+
		"\x3\x2\x2\x2\x3C3\x3BB\x3\x2\x2\x2\x3C3\x3BC\x3\x2\x2\x2\x3C3\x3BD\x3"+
		"\x2\x2\x2\x3C3\x3BE\x3\x2\x2\x2\x3C3\x3BF\x3\x2\x2\x2\x3C3\x3C0\x3\x2"+
		"\x2\x2\x3C3\x3C1\x3\x2\x2\x2\x3C3\x3C2\x3\x2\x2\x2\x3C4\x61\x3\x2\x2\x2"+
		"\x3C5\x3C6\a\xAA\x2\x2\x3C6\x3C7\x5`\x31\x2\x3C7\x3C8\a\xAB\x2\x2\x3C8"+
		"\x63\x3\x2\x2\x2\x3C9\x3CA\a\xA8\x2\x2\x3CA\x3DB\a\xA9\x2\x2\x3CB\x3CC"+
		"\a\xA8\x2\x2\x3CC\x3CD\x5\xDCo\x2\x3CD\x3CE\a\xA9\x2\x2\x3CE\x3DB\x3\x2"+
		"\x2\x2\x3CF\x3D0\a\xA8\x2\x2\x3D0\x3D5\x5\x38\x1D\x2\x3D1\x3D2\a\xB9\x2"+
		"\x2\x3D2\x3D4\x5\x38\x1D\x2\x3D3\x3D1\x3\x2\x2\x2\x3D4\x3D7\x3\x2\x2\x2"+
		"\x3D5\x3D3\x3\x2\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6\x3D8\x3\x2\x2\x2\x3D7"+
		"\x3D5\x3\x2\x2\x2\x3D8\x3D9\a\xA9\x2\x2\x3D9\x3DB\x3\x2\x2\x2\x3DA\x3C9"+
		"\x3\x2\x2\x2\x3DA\x3CB\x3\x2\x2\x2\x3DA\x3CF\x3\x2\x2\x2\x3DB\x65\x3\x2"+
		"\x2\x2\x3DC\x3EC\a\xCA\x2\x2\x3DD\x3EC\x5j\x36\x2\x3DE\x3EC\a\xC9\x2\x2"+
		"\x3DF\x3EC\as\x2\x2\x3E0\x3E1\a\xA8\x2\x2\x3E1\x3E6\x5\x66\x34\x2\x3E2"+
		"\x3E3\a\xB9\x2\x2\x3E3\x3E5\x5\x66\x34\x2\x3E4\x3E2\x3\x2\x2\x2\x3E5\x3E8"+
		"\x3\x2\x2\x2\x3E6\x3E4\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7\x3E9\x3"+
		"\x2\x2\x2\x3E8\x3E6\x3\x2\x2\x2\x3E9\x3EA\a\xA9\x2\x2\x3EA\x3EC\x3\x2"+
		"\x2\x2\x3EB\x3DC\x3\x2\x2\x2\x3EB\x3DD\x3\x2\x2\x2\x3EB\x3DE\x3\x2\x2"+
		"\x2\x3EB\x3DF\x3\x2\x2\x2\x3EB\x3E0\x3\x2\x2\x2\x3ECg\x3\x2\x2\x2\x3ED"+
		"\x3F0\a\xCA\x2\x2\x3EE\x3F0\x5v<\x2\x3EF\x3ED\x3\x2\x2\x2\x3EF\x3EE\x3"+
		"\x2\x2\x2\x3F0i\x3\x2\x2\x2\x3F1\x3F3\t\x6\x2\x2\x3F2\x3F1\x3\x2\x2\x2"+
		"\x3F2\x3F3\x3\x2\x2\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4\x3FA\a\xCC\x2\x2\x3F5"+
		"\x3F6\a\xA8\x2\x2\x3F6\x3F7\x5j\x36\x2\x3F7\x3F8\a\xA9\x2\x2\x3F8\x3FA"+
		"\x3\x2\x2\x2\x3F9\x3F2\x3\x2\x2\x2\x3F9\x3F5\x3\x2\x2\x2\x3FAk\x3\x2\x2"+
		"\x2\x3FB\x3FD\a\xAA\x2\x2\x3FC\x3FE\x5\x156\xAC\x2\x3FD\x3FC\x3\x2\x2"+
		"\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF\x3FD\x3\x2\x2\x2\x3FF\x400\x3\x2\x2\x2"+
		"\x400\x401\x3\x2\x2\x2\x401\x402\a\xAB\x2\x2\x402\x405\x3\x2\x2\x2\x403"+
		"\x405\a\xCB\x2\x2\x404\x3FB\x3\x2\x2\x2\x404\x403\x3\x2\x2\x2\x405m\x3"+
		"\x2\x2\x2\x406\x40F\x5l\x37\x2\x407\x409\a\xB8\x2\x2\x408\x407\x3\x2\x2"+
		"\x2\x409\x40A\x3\x2\x2\x2\x40A\x408\x3\x2\x2\x2\x40A\x40B\x3\x2\x2\x2"+
		"\x40B\x40C\x3\x2\x2\x2\x40C\x40E\x5l\x37\x2\x40D\x408\x3\x2\x2\x2\x40E"+
		"\x411\x3\x2\x2\x2\x40F\x40D\x3\x2\x2\x2\x40F\x410\x3\x2\x2\x2\x410\x414"+
		"\x3\x2\x2\x2\x411\x40F\x3\x2\x2\x2\x412\x414\x5\x156\xAC\x2\x413\x406"+
		"\x3\x2\x2\x2\x413\x412\x3\x2\x2\x2\x414o\x3\x2\x2\x2\x415\x41A\x5n\x38"+
		"\x2\x416\x417\a\xB9\x2\x2\x417\x419\x5n\x38\x2\x418\x416\x3\x2\x2\x2\x419"+
		"\x41C\x3\x2\x2\x2\x41A\x418\x3\x2\x2\x2\x41A\x41B\x3\x2\x2\x2\x41Bq\x3"+
		"\x2\x2\x2\x41C\x41A\x3\x2\x2\x2\x41D\x41F\a\xA7\x2\x2\x41E\x41D\x3\x2"+
		"\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x41E\x3\x2\x2\x2\x420\x421\x3\x2\x2"+
		"\x2\x421\x424\x3\x2\x2\x2\x422\x425\x5l\x37\x2\x423\x425\x5\x156\xAC\x2"+
		"\x424\x422\x3\x2\x2\x2\x424\x423\x3\x2\x2\x2\x425s\x3\x2\x2\x2\x426\x428"+
		"\a\xA7\x2\x2\x427\x426\x3\x2\x2\x2\x428\x429\x3\x2\x2\x2\x429\x427\x3"+
		"\x2\x2\x2\x429\x42A\x3\x2\x2\x2\x42A\x42D\x3\x2\x2\x2\x42B\x42E\x5l\x37"+
		"\x2\x42C\x42E\x5\x156\xAC\x2\x42D\x42B\x3\x2\x2\x2\x42D\x42C\x3\x2\x2"+
		"\x2\x42E\x434\x3\x2\x2\x2\x42F\x430\x5n\x38\x2\x430\x431\a\xB8\x2\x2\x431"+
		"\x432\x5t;\x2\x432\x434\x3\x2\x2\x2\x433\x427\x3\x2\x2\x2\x433\x42F\x3"+
		"\x2\x2\x2\x434u\x3\x2\x2\x2\x435\x437\a\xAD\x2\x2\x436\x435\x3\x2\x2\x2"+
		"\x437\x438\x3\x2\x2\x2\x438\x436\x3\x2\x2\x2\x438\x439\x3\x2\x2\x2\x439"+
		"\x43A\x3\x2\x2\x2\x43A\x442\a\xCB\x2\x2\x43B\x43D\a\xAD\x2\x2\x43C\x43B"+
		"\x3\x2\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E\x43C\x3\x2\x2\x2\x43E\x43F\x3"+
		"\x2\x2\x2\x43F\x440\x3\x2\x2\x2\x440\x442\x5\x156\xAC\x2\x441\x436\x3"+
		"\x2\x2\x2\x441\x43C\x3\x2\x2\x2\x442w\x3\x2\x2\x2\x443\x444\x5\x84\x43"+
		"\x2\x444y\x3\x2\x2\x2\x445\x446\a\xA8\x2\x2\x446\x44B\x5|?\x2\x447\x448"+
		"\a\xB9\x2\x2\x448\x44A\x5|?\x2\x449\x447\x3\x2\x2\x2\x44A\x44D\x3\x2\x2"+
		"\x2\x44B\x449\x3\x2\x2\x2\x44B\x44C\x3\x2\x2\x2\x44C\x44E\x3\x2\x2\x2"+
		"\x44D\x44B\x3\x2\x2\x2\x44E\x44F\a\xA9\x2\x2\x44F\x459\x3\x2\x2\x2\x450"+
		"\x455\x5|?\x2\x451\x452\a\xB9\x2\x2\x452\x454\x5|?\x2\x453\x451\x3\x2"+
		"\x2\x2\x454\x457\x3\x2\x2\x2\x455\x453\x3\x2\x2\x2\x455\x456\x3\x2\x2"+
		"\x2\x456\x459\x3\x2\x2\x2\x457\x455\x3\x2\x2\x2\x458\x445\x3\x2\x2\x2"+
		"\x458\x450\x3\x2\x2\x2\x459{\x3\x2\x2\x2\x45A\x45C\x5\x80\x41\x2\x45B"+
		"\x45D\aS\x2\x2\x45C\x45B\x3\x2\x2\x2\x45C\x45D\x3\x2\x2\x2\x45D\x45E\x3"+
		"\x2\x2\x2\x45E\x460\x5`\x31\x2\x45F\x461\ar\x2\x2\x460\x45F\x3\x2\x2\x2"+
		"\x460\x461\x3\x2\x2\x2\x461\x463\x3\x2\x2\x2\x462\x464\as\x2\x2\x463\x462"+
		"\x3\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\x466\x3\x2\x2\x2\x465\x467\x5"+
		"~@\x2\x466\x465\x3\x2\x2\x2\x466\x467\x3\x2\x2\x2\x467\x469\x3\x2\x2\x2"+
		"\x468\x46A\a\xE\x2\x2\x469\x468\x3\x2\x2\x2\x469\x46A\x3\x2\x2\x2\x46A"+
		"\x46C\x3\x2\x2\x2\x46B\x46D\t\a\x2\x2\x46C\x46B\x3\x2\x2\x2\x46C\x46D"+
		"\x3\x2\x2\x2\x46D}\x3\x2\x2\x2\x46E\x46F\a\xAC\x2\x2\x46F\x473\x5\x66"+
		"\x34\x2\x470\x471\a\xAC\x2\x2\x471\x473\as\x2\x2\x472\x46E\x3\x2\x2\x2"+
		"\x472\x470\x3\x2\x2\x2\x473\x7F\x3\x2\x2\x2\x474\x475\x5v<\x2\x475\x81"+
		"\x3\x2\x2\x2\x476\x477\aT\x2\x2\x477\x47C\a\xCB\x2\x2\x478\x479\a\xB9"+
		"\x2\x2\x479\x47B\a\xCB\x2\x2\x47A\x478\x3\x2\x2\x2\x47B\x47E\x3\x2\x2"+
		"\x2\x47C\x47A\x3\x2\x2\x2\x47C\x47D\x3\x2\x2\x2\x47D\x83\x3\x2\x2\x2\x47E"+
		"\x47C\x3\x2\x2\x2\x47F\x483\x5\x86\x44\x2\x480\x482\x5\x86\x44\x2\x481"+
		"\x480\x3\x2\x2\x2\x482\x485\x3\x2\x2\x2\x483\x481\x3\x2\x2\x2\x483\x484"+
		"\x3\x2\x2\x2\x484\x85\x3\x2\x2\x2\x485\x483\x3\x2\x2\x2\x486\x487\aW\x2"+
		"\x2\x487\x488\x5\x84\x43\x2\x488\x489\aX\x2\x2\x489\x494\x3\x2\x2\x2\x48A"+
		"\x48C\x5\x88\x45\x2\x48B\x48D\a\xAE\x2\x2\x48C\x48B\x3\x2\x2\x2\x48C\x48D"+
		"\x3\x2\x2\x2\x48D\x494\x3\x2\x2\x2\x48E\x490\x5\x8A\x46\x2\x48F\x491\a"+
		"\xAE\x2\x2\x490\x48F\x3\x2\x2\x2\x490\x491\x3\x2\x2\x2\x491\x494\x3\x2"+
		"\x2\x2\x492\x494\a\xAE\x2\x2\x493\x486\x3\x2\x2\x2\x493\x48A\x3\x2\x2"+
		"\x2\x493\x48E\x3\x2\x2\x2\x493\x492\x3\x2\x2\x2\x494\x87\x3\x2\x2\x2\x495"+
		"\x4A3\x5.\x18\x2\x496\x4A3\x5\x1C\xF\x2\x497\x4A3\x5 \x11\x2\x498\x4A3"+
		"\x5*\x16\x2\x499\x4A3\x5,\x17\x2\x49A\x4A3\x5\x4\x3\x2\x49B\x4A3\x5\x1E"+
		"\x10\x2\x49C\x4A3\x5\x30\x19\x2\x49D\x4A3\x5\x6\x4\x2\x49E\x4A3\x5\x12"+
		"\n\x2\x49F\x4A3\x5\x16\f\x2\x4A0\x4A3\x5\x14\v\x2\x4A1\x4A3\x5\x32\x1A"+
		"\x2\x4A2\x495\x3\x2\x2\x2\x4A2\x496\x3\x2\x2\x2\x4A2\x497\x3\x2\x2\x2"+
		"\x4A2\x498\x3\x2\x2\x2\x4A2\x499\x3\x2\x2\x2\x4A2\x49A\x3\x2\x2\x2\x4A2"+
		"\x49B\x3\x2\x2\x2\x4A2\x49C\x3\x2\x2\x2\x4A2\x49D\x3\x2\x2\x2\x4A2\x49E"+
		"\x3\x2\x2\x2\x4A2\x49F\x3\x2\x2\x2\x4A2\x4A0\x3\x2\x2\x2\x4A2\x4A1\x3"+
		"\x2\x2\x2\x4A3\x89\x3\x2\x2\x2\x4A4\x4D5\x5\xDCo\x2\x4A5\x4D5\x5\xA8U"+
		"\x2\x4A6\x4D5\x5\x9CO\x2\x4A7\x4D5\x5\xD2j\x2\x4A8\x4D5\x5\x124\x93\x2"+
		"\x4A9\x4D5\x5\x10C\x87\x2\x4AA\x4D5\x5\xDAn\x2\x4AB\x4D5\x5\xC6\x64\x2"+
		"\x4AC\x4D5\x5\xB4[\x2\x4AD\x4D5\x5\x96L\x2\x4AE\x4D5\x5\x98M\x2\x4AF\x4D5"+
		"\x5\x94K\x2\x4B0\x4D5\x5\x92J\x2\x4B1\x4D5\x5\xA4S\x2\x4B2\x4D5\x5\x146"+
		"\xA4\x2\x4B3\x4B4\a\x15\x2\x2\x4B4\x4D5\x5\x38\x1D\x2\x4B5\x4D5\x5\x8E"+
		"H\x2\x4B6\x4D5\x5\x90I\x2\x4B7\x4B9\aL\x2\x2\x4B8\x4BA\x5n\x38\x2\x4B9"+
		"\x4B8\x3\x2\x2\x2\x4B9\x4BA\x3\x2\x2\x2\x4BA\x4D5\x3\x2\x2\x2\x4BB\x4BD"+
		"\aK\x2\x2\x4BC\x4BE\x5n\x38\x2\x4BD\x4BC\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2"+
		"\x2\x4BE\x4D5\x3\x2\x2\x2\x4BF\x4C1\a\x12\x2\x2\x4C0\x4C2\a\x11\x2\x2"+
		"\x4C1\x4C0\x3\x2\x2\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2\x4C4\x3\x2\x2\x2\x4C3"+
		"\x4C5\x5n\x38\x2\x4C4\x4C3\x3\x2\x2\x2\x4C4\x4C5\x3\x2\x2\x2\x4C5\x4D5"+
		"\x3\x2\x2\x2\x4C6\x4C8\aJ\x2\x2\x4C7\x4C9\x5n\x38\x2\x4C8\x4C7\x3\x2\x2"+
		"\x2\x4C8\x4C9\x3\x2\x2\x2\x4C9\x4D5\x3\x2\x2\x2\x4CA\x4CC\a\x13\x2\x2"+
		"\x4CB\x4CD\a\x11\x2\x2\x4CC\x4CB\x3\x2\x2\x2\x4CC\x4CD\x3\x2\x2\x2\x4CD"+
		"\x4CF\x3\x2\x2\x2\x4CE\x4D0\x5n\x38\x2\x4CF\x4CE\x3\x2\x2\x2\x4CF\x4D0"+
		"\x3\x2\x2\x2\x4D0\x4D5\x3\x2\x2\x2\x4D1\x4D5\x5\x8CG\x2\x4D2\x4D3\a\xCB"+
		"\x2\x2\x4D3\x4D5\a\xAF\x2\x2\x4D4\x4A4\x3\x2\x2\x2\x4D4\x4A5\x3\x2\x2"+
		"\x2\x4D4\x4A6\x3\x2\x2\x2\x4D4\x4A7\x3\x2\x2\x2\x4D4\x4A8\x3\x2\x2\x2"+
		"\x4D4\x4A9\x3\x2\x2\x2\x4D4\x4AA\x3\x2\x2\x2\x4D4\x4AB\x3\x2\x2\x2\x4D4"+
		"\x4AC\x3\x2\x2\x2\x4D4\x4AD\x3\x2\x2\x2\x4D4\x4AE\x3\x2\x2\x2\x4D4\x4AF"+
		"\x3\x2\x2\x2\x4D4\x4B0\x3\x2\x2\x2\x4D4\x4B1\x3\x2\x2\x2\x4D4\x4B2\x3"+
		"\x2\x2\x2\x4D4\x4B3\x3\x2\x2\x2\x4D4\x4B5\x3\x2\x2\x2\x4D4\x4B6\x3\x2"+
		"\x2\x2\x4D4\x4B7\x3\x2\x2\x2\x4D4\x4BB\x3\x2\x2\x2\x4D4\x4BF\x3\x2\x2"+
		"\x2\x4D4\x4C6\x3\x2\x2\x2\x4D4\x4CA\x3\x2\x2\x2\x4D4\x4D1\x3\x2\x2\x2"+
		"\x4D4\x4D2\x3\x2\x2\x2\x4D5\x8B\x3\x2\x2\x2\x4D6\x4D8\au\x2\x2\x4D7\x4D9"+
		"\x5\x38\x1D\x2\x4D8\x4D7\x3\x2\x2\x2\x4D8\x4D9\x3\x2\x2\x2\x4D9\x8D\x3"+
		"\x2\x2\x2\x4DA\x4DB\aG\x2\x2\x4DB\x4DC\x5\x34\x1B\x2\x4DC\x4DF\x5\x86"+
		"\x44\x2\x4DD\x4DE\aH\x2\x2\x4DE\x4E0\x5\x86\x44\x2\x4DF\x4DD\x3\x2\x2"+
		"\x2\x4DF\x4E0\x3\x2\x2\x2\x4E0\x8F\x3\x2\x2\x2\x4E1\x4E2\aI\x2\x2\x4E2"+
		"\x4E3\x5\x34\x1B\x2\x4E3\x4E4\x5\x86\x44\x2\x4E4\x91\x3\x2\x2\x2\x4E5"+
		"\x4E6\a\x9B\x2\x2\x4E6\x4E7\a\x9C\x2\x2\x4E7\x4E8\a\xCA\x2\x2\x4E8\x93"+
		"\x3\x2\x2\x2\x4E9\x4EA\a\x14\x2\x2\x4EA\x4EB\a\xA8\x2\x2\x4EB\x4EC\x5"+
		"\xD8m\x2\x4EC\x4EF\a\xA9\x2\x2\x4ED\x4EE\aT\x2\x2\x4EE\x4F0\a\x88\x2\x2"+
		"\x4EF\x4ED\x3\x2\x2\x2\x4EF\x4F0\x3\x2\x2\x2\x4F0\x4FC\x3\x2\x2\x2\x4F1"+
		"\x4F3\a\x14\x2\x2\x4F2\x4F4\x5\xD6l\x2\x4F3\x4F2\x3\x2\x2\x2\x4F4\x4F5"+
		"\x3\x2\x2\x2\x4F5\x4F3\x3\x2\x2\x2\x4F5\x4F6\x3\x2\x2\x2\x4F6\x4F9\x3"+
		"\x2\x2\x2\x4F7\x4F8\aT\x2\x2\x4F8\x4FA\a\x88\x2\x2\x4F9\x4F7\x3\x2\x2"+
		"\x2\x4F9\x4FA\x3\x2\x2\x2\x4FA\x4FC\x3\x2\x2\x2\x4FB\x4E9\x3\x2\x2\x2"+
		"\x4FB\x4F1\x3\x2\x2\x2\x4FC\x95\x3\x2\x2\x2\x4FD\x4FE\aW\x2\x2\x4FE\x4FF"+
		"\a\xF\x2\x2\x4FF\x500\x5\x84\x43\x2\x500\x501\aX\x2\x2\x501\x502\a\xF"+
		"\x2\x2\x502\x503\aW\x2\x2\x503\x504\a\x10\x2\x2\x504\x505\x5\x84\x43\x2"+
		"\x505\x506\aX\x2\x2\x506\x507\a\x10\x2\x2\x507\x97\x3\x2\x2\x2\x508\x509"+
		"\aW\x2\x2\x509\x50B\a\x11\x2\x2\x50A\x50C\x5n\x38\x2\x50B\x50A\x3\x2\x2"+
		"\x2\x50B\x50C\x3\x2\x2\x2\x50C\x50D\x3\x2\x2\x2\x50D\x50E\x5\x84\x43\x2"+
		"\x50E\x99\x3\x2\x2\x2\x50F\x516\a<\x2\x2\x510\x517\x5j\x36\x2\x511\x517"+
		"\x5v<\x2\x512\x513\a\xA8\x2\x2\x513\x514\x5v<\x2\x514\x515\a\xA9\x2\x2"+
		"\x515\x517\x3\x2\x2\x2\x516\x510\x3\x2\x2\x2\x516\x511\x3\x2\x2\x2\x516"+
		"\x512\x3\x2\x2\x2\x517\x9B\x3\x2\x2\x2\x518\x51A\a_\x2\x2\x519\x51B\x5"+
		"\x9AN\x2\x51A\x519\x3\x2\x2\x2\x51A\x51B\x3\x2\x2\x2\x51B\x51D\x3\x2\x2"+
		"\x2\x51C\x51E\x5\x9EP\x2\x51D\x51C\x3\x2\x2\x2\x51E\x51F\x3\x2\x2\x2\x51F"+
		"\x51D\x3\x2\x2\x2\x51F\x520\x3\x2\x2\x2\x520\x522\x3\x2\x2\x2\x521\x523"+
		"\x5\xA2R\x2\x522\x521\x3\x2\x2\x2\x522\x523\x3\x2\x2\x2\x523\x527\x3\x2"+
		"\x2\x2\x524\x526\x5\x102\x82\x2\x525\x524\x3\x2\x2\x2\x526\x529\x3\x2"+
		"\x2\x2\x527\x525\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2\x528\x52B\x3\x2\x2"+
		"\x2\x529\x527\x3\x2\x2\x2\x52A\x52C\x5\x106\x84\x2\x52B\x52A\x3\x2\x2"+
		"\x2\x52B\x52C\x3\x2\x2\x2\x52C\x52E\x3\x2\x2\x2\x52D\x52F\x5\xF0y\x2\x52E"+
		"\x52D\x3\x2\x2\x2\x52E\x52F\x3\x2\x2\x2\x52F\x54A\x3\x2\x2\x2\x530\x532"+
		"\a_\x2\x2\x531\x533\x5\x9AN\x2\x532\x531\x3\x2\x2\x2\x532\x533\x3\x2\x2"+
		"\x2\x533\x534\x3\x2\x2\x2\x534\x536\x5\x114\x8B\x2\x535\x537\x5\xA0Q\x2"+
		"\x536\x535\x3\x2\x2\x2\x537\x538\x3\x2\x2\x2\x538\x536\x3\x2\x2\x2\x538"+
		"\x539\x3\x2\x2\x2\x539\x53B\x3\x2\x2\x2\x53A\x53C\x5\xA2R\x2\x53B\x53A"+
		"\x3\x2\x2\x2\x53B\x53C\x3\x2\x2\x2\x53C\x540\x3\x2\x2\x2\x53D\x53F\x5"+
		"\x102\x82\x2\x53E\x53D\x3\x2\x2\x2\x53F\x542\x3\x2\x2\x2\x540\x53E\x3"+
		"\x2\x2\x2\x540\x541\x3\x2\x2\x2\x541\x544\x3\x2\x2\x2\x542\x540\x3\x2"+
		"\x2\x2\x543\x545\x5\x106\x84\x2\x544\x543\x3\x2\x2\x2\x544\x545\x3\x2"+
		"\x2\x2\x545\x547\x3\x2\x2\x2\x546\x548\x5\xF0y\x2\x547\x546\x3\x2\x2\x2"+
		"\x547\x548\x3\x2\x2\x2\x548\x54A\x3\x2\x2\x2\x549\x518\x3\x2\x2\x2\x549"+
		"\x530\x3\x2\x2\x2\x54A\x9D\x3\x2\x2\x2\x54B\x54D\a\x61\x2\x2\x54C\x54B"+
		"\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x553\x5"+
		"\x112\x8A\x2\x54F\x550\a\xB9\x2\x2\x550\x552\x5\x118\x8D\x2\x551\x54F"+
		"\x3\x2\x2\x2\x552\x555\x3\x2\x2\x2\x553\x551\x3\x2\x2\x2\x553\x554\x3"+
		"\x2\x2\x2\x554\x9F\x3\x2\x2\x2\x555\x553\x3\x2\x2\x2\x556\x558\a\x61\x2"+
		"\x2\x557\x556\x3\x2\x2\x2\x557\x558\x3\x2\x2\x2\x558\x559\x3\x2\x2\x2"+
		"\x559\x55E\x5\x118\x8D\x2\x55A\x55B\a\xB9\x2\x2\x55B\x55D\x5\x118\x8D"+
		"\x2\x55C\x55A\x3\x2\x2\x2\x55D\x560\x3\x2\x2\x2\x55E\x55C\x3\x2\x2\x2"+
		"\x55E\x55F\x3\x2\x2\x2\x55F\xA1\x3\x2\x2\x2\x560\x55E\x3\x2\x2\x2\x561"+
		"\x562\av\x2\x2\x562\x563\x5\x13A\x9E\x2\x563\x564\an\x2\x2\x564\x565\x5"+
		"\x112\x8A\x2\x565\xA3\x3\x2\x2\x2\x566\x567\aT\x2\x2\x567\x56C\x5\xA6"+
		"T\x2\x568\x569\a\xB9\x2\x2\x569\x56B\x5\xA6T\x2\x56A\x568\x3\x2\x2\x2"+
		"\x56B\x56E\x3\x2\x2\x2\x56C\x56A\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D"+
		"\x56F\x3\x2\x2\x2\x56E\x56C\x3\x2\x2\x2\x56F\x570\x5\x8A\x46\x2\x570\xA5"+
		"\x3\x2\x2\x2\x571\x576\x5n\x38\x2\x572\x573\a\xA8\x2\x2\x573\x574\x5\xBA"+
		"^\x2\x574\x575\a\xA9\x2\x2\x575\x577\x3\x2\x2\x2\x576\x572\x3\x2\x2\x2"+
		"\x576\x577\x3\x2\x2\x2\x577\x578\x3\x2\x2\x2\x578\x579\aS\x2\x2\x579\x57A"+
		"\a\xA8\x2\x2\x57A\x57B\x5\x8A\x46\x2\x57B\x57C\a\xA9\x2\x2\x57C\xA7\x3"+
		"\x2\x2\x2\x57D\x57F\x5\xAAV\x2\x57E\x580\x5\xACW\x2\x57F\x57E\x3\x2\x2"+
		"\x2\x57F\x580\x3\x2\x2\x2\x580\x581\x3\x2\x2\x2\x581\x583\x5\xAEX\x2\x582"+
		"\x584\x5\xF0y\x2\x583\x582\x3\x2\x2\x2\x583\x584\x3\x2\x2\x2\x584\xA9"+
		"\x3\x2\x2\x2\x585\x587\a^\x2\x2\x586\x588\an\x2\x2\x587\x586\x3\x2\x2"+
		"\x2\x587\x588\x3\x2\x2\x2\x588\x589\x3\x2\x2\x2\x589\x58B\x5\x114\x8B"+
		"\x2\x58A\x58C\x5\x116\x8C\x2\x58B\x58A\x3\x2\x2\x2\x58B\x58C\x3\x2\x2"+
		"\x2\x58C\x591\x3\x2\x2\x2\x58D\x58E\a\xA8\x2\x2\x58E\x58F\x5p\x39\x2\x58F"+
		"\x590\a\xA9\x2\x2\x590\x592\x3\x2\x2\x2\x591\x58D\x3\x2\x2\x2\x591\x592"+
		"\x3\x2\x2\x2\x592\xAB\x3\x2\x2\x2\x593\x594\av\x2\x2\x594\x59D\x5\xEC"+
		"w\x2\x595\x596\an\x2\x2\x596\x59B\x5\x114\x8B\x2\x597\x598\a\xA8\x2\x2"+
		"\x598\x599\x5\x13A\x9E\x2\x599\x59A\a\xA9\x2\x2\x59A\x59C\x3\x2\x2\x2"+
		"\x59B\x597\x3\x2\x2\x2\x59B\x59C\x3\x2\x2\x2\x59C\x59E\x3\x2\x2\x2\x59D"+
		"\x595\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E\xAD\x3\x2\x2\x2\x59F\x5A0"+
		"\ao\x2\x2\x5A0\x5A5\x5\xB0Y\x2\x5A1\x5A2\a\xB9\x2\x2\x5A2\x5A4\x5\xB0"+
		"Y\x2\x5A3\x5A1\x3\x2\x2\x2\x5A4\x5A7\x3\x2\x2\x2\x5A5\x5A3\x3\x2\x2\x2"+
		"\x5A5\x5A6\x3\x2\x2\x2\x5A6\x5AD\x3\x2\x2\x2\x5A7\x5A5\x3\x2\x2\x2\x5A8"+
		"\x5A9\aZ\x2\x2\x5A9\x5AD\ao\x2\x2\x5AA\x5AD\x5\xDCo\x2\x5AB\x5AD\x5\x11A"+
		"\x8E\x2\x5AC\x59F\x3\x2\x2\x2\x5AC\x5A8\x3\x2\x2\x2\x5AC\x5AA\x3\x2\x2"+
		"\x2\x5AC\x5AB\x3\x2\x2\x2\x5AD\xAF\x3\x2\x2\x2\x5AE\x5AF\a\xA8\x2\x2\x5AF"+
		"\x5B4\x5\xB2Z\x2\x5B0\x5B1\a\xB9\x2\x2\x5B1\x5B3\x5\xB2Z\x2\x5B2\x5B0"+
		"\x3\x2\x2\x2\x5B3\x5B6\x3\x2\x2\x2\x5B4\x5B2\x3\x2\x2\x2\x5B4\x5B5\x3"+
		"\x2\x2\x2\x5B5\x5B7\x3\x2\x2\x2\x5B6\x5B4\x3\x2\x2\x2\x5B7\x5B8\a\xA9"+
		"\x2\x2\x5B8\xB1\x3\x2\x2\x2\x5B9\x5BA\x5\x38\x1D\x2\x5BA\xB3\x3\x2\x2"+
		"\x2\x5BB\x5BC\a\x63\x2\x2\x5BC\x5C1\x5\xB6\\\x2\x5BD\x5BE\a\xB9\x2\x2"+
		"\x5BE\x5C0\x5\xB6\\\x2\x5BF\x5BD\x3\x2\x2\x2\x5C0\x5C3\x3\x2\x2\x2\x5C1"+
		"\x5BF\x3\x2\x2\x2\x5C1\x5C2\x3\x2\x2\x2\x5C2\x5D3\x3\x2\x2\x2\x5C3\x5C1"+
		"\x3\x2\x2\x2\x5C4\x5C5\a\x63\x2\x2\x5C5\x5C6\x5n\x38\x2\x5C6\x5C8\a(\x2"+
		"\x2\x5C7\x5C9\a\xCB\x2\x2\x5C8\x5C7\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2\x2"+
		"\x5C9\x5CA\x3\x2\x2\x2\x5CA\x5CB\aU\x2\x2\x5CB\x5D0\x5\xDCo\x2\x5CC\x5CD"+
		"\aU\x2\x2\x5CD\x5CE\a]\x2\x2\x5CE\x5CF\az\x2\x2\x5CF\x5D1\x5\x114\x8B"+
		"\x2\x5D0\x5CC\x3\x2\x2\x2\x5D0\x5D1\x3\x2\x2\x2\x5D1\x5D3\x3\x2\x2\x2"+
		"\x5D2\x5BB\x3\x2\x2\x2\x5D2\x5C4\x3\x2\x2\x2\x5D3\xB5\x3\x2\x2\x2\x5D4"+
		"\x5E8\x5v<\x2\x5D5\x5D7\aS\x2\x2\x5D6\x5D5\x3\x2\x2\x2\x5D6\x5D7\x3\x2"+
		"\x2\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8\x5DA\x5`\x31\x2\x5D9\x5DB\x5\xB8]\x2"+
		"\x5DA\x5D9\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5E9\x3\x2\x2\x2\x5DC"+
		"\x5DD\a\x18\x2\x2\x5DD\x5DE\a\xA8\x2\x2\x5DE\x5E1\x5\xBC_\x2\x5DF\x5E0"+
		"\a\xB9\x2\x2\x5E0\x5E2\x5\xC0\x61\x2\x5E1\x5DF\x3\x2\x2\x2\x5E1\x5E2\x3"+
		"\x2\x2\x2\x5E2\x5E4\x3\x2\x2\x2\x5E3\x5E5\a\xB9\x2\x2\x5E4\x5E3\x3\x2"+
		"\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5E7\a\xA9\x2"+
		"\x2\x5E7\x5E9\x3\x2\x2\x2\x5E8\x5D6\x3\x2\x2\x2\x5E8\x5DC\x3\x2\x2\x2"+
		"\x5E9\xB7\x3\x2\x2\x2\x5EA\x5EB\a\xAC\x2\x2\x5EB\x5ED\x5\x38\x1D\x2\x5EC"+
		"\x5EA\x3\x2\x2\x2\x5EC\x5ED\x3\x2\x2\x2\x5ED\xB9\x3\x2\x2\x2\x5EE\x5F3"+
		"\x5\x140\xA1\x2\x5EF\x5F0\a\xB9\x2\x2\x5F0\x5F2\x5\x140\xA1\x2\x5F1\x5EF"+
		"\x3\x2\x2\x2\x5F2\x5F5\x3\x2\x2\x2\x5F3\x5F1\x3\x2\x2\x2\x5F3\x5F4\x3"+
		"\x2\x2\x2\x5F4\xBB\x3\x2\x2\x2\x5F5\x5F3\x3\x2\x2\x2\x5F6\x5FB\x5\xBE"+
		"`\x2\x5F7\x5F8\a\xB9\x2\x2\x5F8\x5FA\x5\xBE`\x2\x5F9\x5F7\x3\x2\x2\x2"+
		"\x5FA\x5FD\x3\x2\x2\x2\x5FB\x5F9\x3\x2\x2\x2\x5FB\x5FC\x3\x2\x2\x2\x5FC"+
		"\xBD\x3\x2\x2\x2\x5FD\x5FB\x3\x2\x2\x2\x5FE\x5FF\x5\x140\xA1\x2\x5FF\x605"+
		"\x5`\x31\x2\x600\x601\a\x1F\x2\x2\x601\x603\a \x2\x2\x602\x604\x5\x154"+
		"\xAB\x2\x603\x602\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\x606\x3\x2\x2"+
		"\x2\x605\x600\x3\x2\x2\x2\x605\x606\x3\x2\x2\x2\x606\x608\x3\x2\x2\x2"+
		"\x607\x609\ar\x2\x2\x608\x607\x3\x2\x2\x2\x608\x609\x3\x2\x2\x2\x609\x60B"+
		"\x3\x2\x2\x2\x60A\x60C\as\x2\x2\x60B\x60A\x3\x2\x2\x2\x60B\x60C\x3\x2"+
		"\x2\x2\x60C\x612\x3\x2\x2\x2\x60D\x610\aZ\x2\x2\x60E\x611\x5\x66\x34\x2"+
		"\x60F\x611\x5\x122\x92\x2\x610\x60E\x3\x2\x2\x2\x610\x60F\x3\x2\x2\x2"+
		"\x611\x613\x3\x2\x2\x2\x612\x60D\x3\x2\x2\x2\x612\x613\x3\x2\x2\x2\x613"+
		"\x62E\x3\x2\x2\x2\x614\x615\x5\x140\xA1\x2\x615\x61B\x5\x130\x99\x2\x616"+
		"\x617\a\x1F\x2\x2\x617\x619\a \x2\x2\x618\x61A\x5\x154\xAB\x2\x619\x618"+
		"\x3\x2\x2\x2\x619\x61A\x3\x2\x2\x2\x61A\x61C\x3\x2\x2\x2\x61B\x616\x3"+
		"\x2\x2\x2\x61B\x61C\x3\x2\x2\x2\x61C\x61E\x3\x2\x2\x2\x61D\x61F\ar\x2"+
		"\x2\x61E\x61D\x3\x2\x2\x2\x61E\x61F\x3\x2\x2\x2\x61F\x621\x3\x2\x2\x2"+
		"\x620\x622\as\x2\x2\x621\x620\x3\x2\x2\x2\x621\x622\x3\x2\x2\x2\x622\x624"+
		"\x3\x2\x2\x2\x623\x625\x5\x134\x9B\x2\x624\x623\x3\x2\x2\x2\x624\x625"+
		"\x3\x2\x2\x2\x625\x62B\x3\x2\x2\x2\x626\x629\aZ\x2\x2\x627\x62A\x5\x66"+
		"\x34\x2\x628\x62A\x5\x122\x92\x2\x629\x627\x3\x2\x2\x2\x629\x628\x3\x2"+
		"\x2\x2\x62A\x62C\x3\x2\x2\x2\x62B\x626\x3\x2\x2\x2\x62B\x62C\x3\x2\x2"+
		"\x2\x62C\x62E\x3\x2\x2\x2\x62D\x5FE\x3\x2\x2\x2\x62D\x614\x3\x2\x2\x2"+
		"\x62E\xBF\x3\x2\x2\x2\x62F\x634\x5\xC2\x62\x2\x630\x631\a\xB9\x2\x2\x631"+
		"\x633\x5\xC2\x62\x2\x632\x630\x3\x2\x2\x2\x633\x636\x3\x2\x2\x2\x634\x632"+
		"\x3\x2\x2\x2\x634\x635\x3\x2\x2\x2\x635\xC1\x3\x2\x2\x2\x636\x634\x3\x2"+
		"\x2\x2\x637\x639\a:\x2\x2\x638\x63A\x5\x154\xAB\x2\x639\x638\x3\x2\x2"+
		"\x2\x639\x63A\x3\x2\x2\x2\x63A\x63B\x3\x2\x2\x2\x63B\x63C\a\xA8\x2\x2"+
		"\x63C\x63D\x5\xBA^\x2\x63D\x63E\a\xA9\x2\x2\x63E\x64B\x3\x2\x2\x2\x63F"+
		"\x640\a\x1F\x2\x2\x640\x642\a \x2\x2\x641\x643\x5\x154\xAB\x2\x642\x641"+
		"\x3\x2\x2\x2\x642\x643\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x645\a\xA8"+
		"\x2\x2\x645\x646\x5&\x14\x2\x646\x648\a\xA9\x2\x2\x647\x649\x5\x18\r\x2"+
		"\x648\x647\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\x64B\x3\x2\x2\x2\x64A"+
		"\x637\x3\x2\x2\x2\x64A\x63F\x3\x2\x2\x2\x64B\xC3\x3\x2\x2\x2\x64C\x64D"+
		"\x5n\x38\x2\x64D\xC5\x3\x2\x2\x2\x64E\x652\a\x65\x2\x2\x64F\x653\x5\xCA"+
		"\x66\x2\x650\x653\x5\xCCg\x2\x651\x653\x5\xC8\x65\x2\x652\x64F\x3\x2\x2"+
		"\x2\x652\x650\x3\x2\x2\x2\x652\x651\x3\x2\x2\x2\x653\xC7\x3\x2\x2\x2\x654"+
		"\x655\a\xA6\x2\x2\x655\x663\x5j\x36\x2\x656\x657\a\x11\x2\x2\x657\x658"+
		"\a\x9F\x2\x2\x658\x659\a\x9E\x2\x2\x659\x663\x5\xCEh\x2\x65A\x65C\x5n"+
		"\x38\x2\x65B\x65A\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\x65B\x3\x2\x2"+
		"\x2\x65D\x65E\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2\x65F\x660\t\x3\x2\x2\x660"+
		"\x663\x3\x2\x2\x2\x661\x663\x5n\x38\x2\x662\x654\x3\x2\x2\x2\x662\x656"+
		"\x3\x2\x2\x2\x662\x65B\x3\x2\x2\x2\x662\x661\x3\x2\x2\x2\x663\xC9\x3\x2"+
		"\x2\x2\x664\x666\x5v<\x2\x665\x667\x5\x136\x9C\x2\x666\x665\x3\x2\x2\x2"+
		"\x666\x667\x3\x2\x2\x2\x667\x668\x3\x2\x2\x2\x668\x669\x5\x138\x9D\x2"+
		"\x669\x66A\x5\x38\x1D\x2\x66A\xCB\x3\x2\x2\x2\x66B\x66D\x5v<\x2\x66C\x66E"+
		"\x5\x136\x9C\x2\x66D\x66C\x3\x2\x2\x2\x66D\x66E\x3\x2\x2\x2\x66E\x66F"+
		"\x3\x2\x2\x2\x66F\x670\a\xAC\x2\x2\x670\x671\a(\x2\x2\x671\x672\aU\x2"+
		"\x2\x672\x673\x5\xDCo\x2\x673\xCD\x3\x2\x2\x2\x674\x675\a\x4\x2\x2\x675"+
		"\x67B\t\b\x2\x2\x676\x677\a\x5\x2\x2\x677\x67B\a\x4\x2\x2\x678\x67B\a"+
		"\x3\x2\x2\x679\x67B\a\x6\x2\x2\x67A\x674\x3\x2\x2\x2\x67A\x676\x3\x2\x2"+
		"\x2\x67A\x678\x3\x2\x2\x2\x67A\x679\x3\x2\x2\x2\x67B\xCF\x3\x2\x2\x2\x67C"+
		"\x683\a<\x2\x2\x67D\x684\x5j\x36\x2\x67E\x684\x5v<\x2\x67F\x680\a\xA8"+
		"\x2\x2\x680\x681\x5v<\x2\x681\x682\a\xA9\x2\x2\x682\x684\x3\x2\x2\x2\x683"+
		"\x67D\x3\x2\x2\x2\x683\x67E\x3\x2\x2\x2\x683\x67F\x3\x2\x2\x2\x684\xD1"+
		"\x3\x2\x2\x2\x685\x687\a]\x2\x2\x686\x688\x5\xD0i\x2\x687\x686\x3\x2\x2"+
		"\x2\x687\x688\x3\x2\x2\x2\x688\x689\x3\x2\x2\x2\x689\x68A\x5\x112\x8A"+
		"\x2\x68A\x68B\a\x65\x2\x2\x68B\x690\x5\xD4k\x2\x68C\x68D\a\xB9\x2\x2\x68D"+
		"\x68F\x5\xD4k\x2\x68E\x68C\x3\x2\x2\x2\x68F\x692\x3\x2\x2\x2\x690\x68E"+
		"\x3\x2\x2\x2\x690\x691\x3\x2\x2\x2\x691\x694\x3\x2\x2\x2\x692\x690\x3"+
		"\x2\x2\x2\x693\x695\x5\xF8}\x2\x694\x693\x3\x2\x2\x2\x694\x695\x3\x2\x2"+
		"\x2\x695\x699\x3\x2\x2\x2\x696\x698\x5\x102\x82\x2\x697\x696\x3\x2\x2"+
		"\x2\x698\x69B\x3\x2\x2\x2\x699\x697\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2"+
		"\x69A\x69F\x3\x2\x2\x2\x69B\x699\x3\x2\x2\x2\x69C\x69E\x5\xFA~\x2\x69D"+
		"\x69C\x3\x2\x2\x2\x69E\x6A1\x3\x2\x2\x2\x69F\x69D\x3\x2\x2\x2\x69F\x6A0"+
		"\x3\x2\x2\x2\x6A0\x6A3\x3\x2\x2\x2\x6A1\x69F\x3\x2\x2\x2\x6A2\x6A4\x5"+
		"\x106\x84\x2\x6A3\x6A2\x3\x2\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6A6\x3"+
		"\x2\x2\x2\x6A5\x6A7\x5\xF0y\x2\x6A6\x6A5\x3\x2\x2\x2\x6A6\x6A7\x3\x2\x2"+
		"\x2\x6A7\x6AF\x3\x2\x2\x2\x6A8\x6A9\a]\x2\x2\x6A9\x6AA\a\x8D\x2\x2\x6AA"+
		"\x6AC\x5\x114\x8B\x2\x6AB\x6AD\x5\x18\r\x2\x6AC\x6AB\x3\x2\x2\x2\x6AC"+
		"\x6AD\x3\x2\x2\x2\x6AD\x6AF\x3\x2\x2\x2\x6AE\x685\x3\x2\x2\x2\x6AE\x6A8"+
		"\x3\x2\x2\x2\x6AF\xD3\x3\x2\x2\x2\x6B0\x6B1\x5\x13C\x9F\x2\x6B1\x6B5\x5"+
		"\x138\x9D\x2\x6B2\x6B6\x5\x38\x1D\x2\x6B3\x6B6\aZ\x2\x2\x6B4\x6B6\as\x2"+
		"\x2\x6B5\x6B2\x3\x2\x2\x2\x6B5\x6B3\x3\x2\x2\x2\x6B5\x6B4\x3\x2\x2\x2"+
		"\x6B6\x6CE\x3\x2\x2\x2\x6B7\x6B8\x5v<\x2\x6B8\x6BC\x5\x138\x9D\x2\x6B9"+
		"\x6BA\x5\x13C\x9F\x2\x6BA\x6BB\a\xAC\x2\x2\x6BB\x6BD\x3\x2\x2\x2\x6BC"+
		"\x6B9\x3\x2\x2\x2\x6BC\x6BD\x3\x2\x2\x2\x6BD\x6BE\x3\x2\x2\x2\x6BE\x6BF"+
		"\x5\x38\x1D\x2\x6BF\x6CE\x3\x2\x2\x2\x6C0\x6C1\x5\x13C\x9F\x2\x6C1\x6C2"+
		"\a\xB8\x2\x2\x6C2\x6CB\x5l\x37\x2\x6C3\x6C4\a\xAC\x2\x2\x6C4\x6CC\x5\x38"+
		"\x1D\x2\x6C5\x6C6\a\xA8\x2\x2\x6C6\x6CC\a\xA9\x2\x2\x6C7\x6C8\a\xA8\x2"+
		"\x2\x6C8\x6C9\x5\xD8m\x2\x6C9\x6CA\a\xA9\x2\x2\x6CA\x6CC\x3\x2\x2\x2\x6CB"+
		"\x6C3\x3\x2\x2\x2\x6CB\x6C5\x3\x2\x2\x2\x6CB\x6C7\x3\x2\x2\x2\x6CC\x6CE"+
		"\x3\x2\x2\x2\x6CD\x6B0\x3\x2\x2\x2\x6CD\x6B7\x3\x2\x2\x2\x6CD\x6C0\x3"+
		"\x2\x2\x2\x6CE\xD5\x3\x2\x2\x2\x6CF\x6D3\x5\x38\x1D\x2\x6D0\x6D3\x5t;"+
		"\x2\x6D1\x6D3\x5`\x31\x2\x6D2\x6CF\x3\x2\x2\x2\x6D2\x6D0\x3\x2\x2\x2\x6D2"+
		"\x6D1\x3\x2\x2\x2\x6D3\xD7\x3\x2\x2\x2\x6D4\x6D9\x5\xD6l\x2\x6D5\x6D6"+
		"\a\xB9\x2\x2\x6D6\x6D8\x5\xD6l\x2\x6D7\x6D5\x3\x2\x2\x2\x6D8\x6DB\x3\x2"+
		"\x2\x2\x6D9\x6D7\x3\x2\x2\x2\x6D9\x6DA\x3\x2\x2\x2\x6DA\xD9\x3\x2\x2\x2"+
		"\x6DB\x6D9\x3\x2\x2\x2\x6DC\x6DD\a\x9D\x2\x2\x6DD\x6E2\x5\x38\x1D\x2\x6DE"+
		"\x6DF\a\xB9\x2\x2\x6DF\x6E1\x5\x38\x1D\x2\x6E0\x6DE\x3\x2\x2\x2\x6E1\x6E4"+
		"\x3\x2\x2\x2\x6E2\x6E0\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6EE\x3"+
		"\x2\x2\x2\x6E4\x6E2\x3\x2\x2\x2\x6E5\x6E6\al\x2\x2\x6E6\x6EB\x5\x38\x1D"+
		"\x2\x6E7\x6E8\a\xB9\x2\x2\x6E8\x6EA\x5\x38\x1D\x2\x6E9\x6E7\x3\x2\x2\x2"+
		"\x6EA\x6ED\x3\x2\x2\x2\x6EB\x6E9\x3\x2\x2\x2\x6EB\x6EC\x3\x2\x2\x2\x6EC"+
		"\x6EF\x3\x2\x2\x2\x6ED\x6EB\x3\x2\x2\x2\x6EE\x6E5\x3\x2\x2\x2\x6EE\x6EF"+
		"\x3\x2\x2\x2\x6EF\xDB\x3\x2\x2\x2\x6F0\x6F8\x5\xDEp\x2\x6F1\x6F3\a\x44"+
		"\x2\x2\x6F2\x6F4\a\x45\x2\x2\x6F3\x6F2\x3\x2\x2\x2\x6F3\x6F4\x3\x2\x2"+
		"\x2\x6F4\x6F5\x3\x2\x2\x2\x6F5\x6F7\x5\xDEp\x2\x6F6\x6F1\x3\x2\x2\x2\x6F7"+
		"\x6FA\x3\x2\x2\x2\x6F8\x6F6\x3\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\x704"+
		"\x3\x2\x2\x2\x6FA\x6F8\x3\x2\x2\x2\x6FB\x700\x5\xDEp\x2\x6FC\x6FD\t\t"+
		"\x2\x2\x6FD\x6FF\x5\xDEp\x2\x6FE\x6FC\x3\x2\x2\x2\x6FF\x702\x3\x2\x2\x2"+
		"\x700\x6FE\x3\x2\x2\x2\x700\x701\x3\x2\x2\x2\x701\x704\x3\x2\x2\x2\x702"+
		"\x700\x3\x2\x2\x2\x703\x6F0\x3\x2\x2\x2\x703\x6FB\x3\x2\x2\x2\x704\xDD"+
		"\x3\x2\x2\x2\x705\x707\a\\\x2\x2\x706\x708\x5\xE8u\x2\x707\x706\x3\x2"+
		"\x2\x2\x707\x708\x3\x2\x2\x2\x708\x709\x3\x2\x2\x2\x709\x70B\x5\xECw\x2"+
		"\x70A\x70C\x5\xF6|\x2\x70B\x70A\x3\x2\x2\x2\x70B\x70C\x3\x2\x2\x2\x70C"+
		"\x70E\x3\x2\x2\x2\x70D\x70F\x5\xF8}\x2\x70E\x70D\x3\x2\x2\x2\x70E\x70F"+
		"\x3\x2\x2\x2\x70F\x711\x3\x2\x2\x2\x710\x712\x5\xE0q\x2\x711\x710\x3\x2"+
		"\x2\x2\x711\x712\x3\x2\x2\x2\x712\x716\x3\x2\x2\x2\x713\x715\x5\x102\x82"+
		"\x2\x714\x713\x3\x2\x2\x2\x715\x718\x3\x2\x2\x2\x716\x714\x3\x2\x2\x2"+
		"\x716\x717\x3\x2\x2\x2\x717\x71C\x3\x2\x2\x2\x718\x716\x3\x2\x2\x2\x719"+
		"\x71B\x5\xFA~\x2\x71A\x719\x3\x2\x2\x2\x71B\x71E\x3\x2\x2\x2\x71C\x71A"+
		"\x3\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\x720\x3\x2\x2\x2\x71E\x71C\x3"+
		"\x2\x2\x2\x71F\x721\x5\x106\x84\x2\x720\x71F\x3\x2\x2\x2\x720\x721\x3"+
		"\x2\x2\x2\x721\x723\x3\x2\x2\x2\x722\x724\x5\xFC\x7F\x2\x723\x722\x3\x2"+
		"\x2\x2\x723\x724\x3\x2\x2\x2\x724\x726\x3\x2\x2\x2\x725\x727\x5\x100\x81"+
		"\x2\x726\x725\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2\x727\x729\x3\x2\x2\x2"+
		"\x728\x72A\x5\x108\x85\x2\x729\x728\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2"+
		"\x72A\x72C\x3\x2\x2\x2\x72B\x72D\x5\xF0y\x2\x72C\x72B\x3\x2\x2\x2\x72C"+
		"\x72D\x3\x2\x2\x2\x72D\x72F\x3\x2\x2\x2\x72E\x730\x5\xE6t\x2\x72F\x72E"+
		"\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x736\x3\x2\x2\x2\x731\x732\a\xA8"+
		"\x2\x2\x732\x733\x5\xDCo\x2\x733\x734\a\xA9\x2\x2\x734\x736\x3\x2\x2\x2"+
		"\x735\x705\x3\x2\x2\x2\x735\x731\x3\x2\x2\x2\x736\xDF\x3\x2\x2\x2\x737"+
		"\x738\aT\x2\x2\x738\x739\a\xA8\x2\x2\x739\x73A\x5\xE2r\x2\x73A\x73C\a"+
		"\xA9\x2\x2\x73B\x73D\x5n\x38\x2\x73C\x73B\x3\x2\x2\x2\x73C\x73D\x3\x2"+
		"\x2\x2\x73D\xE1\x3\x2\x2\x2\x73E\x743\x5\xE4s\x2\x73F\x740\a\xB9\x2\x2"+
		"\x740\x742\x5\xE4s\x2\x741\x73F\x3\x2\x2\x2\x742\x745\x3\x2\x2\x2\x743"+
		"\x741\x3\x2\x2\x2\x743\x744\x3\x2\x2\x2\x744\xE3\x3\x2\x2\x2\x745\x743"+
		"\x3\x2\x2\x2\x746\x747\x5\x140\xA1\x2\x747\x74A\x5`\x31\x2\x748\x74B\x5"+
		"\x66\x34\x2\x749\x74B\x5\x122\x92\x2\x74A\x748\x3\x2\x2\x2\x74A\x749\x3"+
		"\x2\x2\x2\x74A\x74B\x3\x2\x2\x2\x74B\xE5\x3\x2\x2\x2\x74C\x74D\aU\x2\x2"+
		"\x74D\x757\a\x93\x2\x2\x74E\x758\a\x95\x2\x2\x74F\x758\a\x94\x2\x2\x750"+
		"\x758\a\x96\x2\x2\x751\x752\a\x97\x2\x2\x752\x754\a\xA8\x2\x2\x753\x755"+
		"\x5\xD8m\x2\x754\x753\x3\x2\x2\x2\x754\x755\x3\x2\x2\x2\x755\x756\x3\x2"+
		"\x2\x2\x756\x758\a\xA9\x2\x2\x757\x74E\x3\x2\x2\x2\x757\x74F\x3\x2\x2"+
		"\x2\x757\x750\x3\x2\x2\x2\x757\x751\x3\x2\x2\x2\x758\xE7\x3\x2\x2\x2\x759"+
		"\x75B\a\x39\x2\x2\x75A\x759\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x75C"+
		"\x3\x2\x2\x2\x75C\x766\a<\x2\x2\x75D\x75F\x5j\x36\x2\x75E\x760\a\a\x2"+
		"\x2\x75F\x75E\x3\x2\x2\x2\x75F\x760\x3\x2\x2\x2\x760\x767\x3\x2\x2\x2"+
		"\x761\x767\x5v<\x2\x762\x763\a\xA8\x2\x2\x763\x764\x5v<\x2\x764\x765\a"+
		"\xA9\x2\x2\x765\x767\x3\x2\x2\x2\x766\x75D\x3\x2\x2\x2\x766\x761\x3\x2"+
		"\x2\x2\x766\x762\x3\x2\x2\x2\x767\xE9\x3\x2\x2\x2\x768\x769\x5v<\x2\x769"+
		"\x76A\t\n\x2\x2\x76A\x76B\x5\x38\x1D\x2\x76B\xEB\x3\x2\x2\x2\x76C\x771"+
		"\x5\xEEx\x2\x76D\x76E\a\xB9\x2\x2\x76E\x770\x5\xEEx\x2\x76F\x76D\x3\x2"+
		"\x2\x2\x770\x773\x3\x2\x2\x2\x771\x76F\x3\x2\x2\x2\x771\x772\x3\x2\x2"+
		"\x2\x772\xED\x3\x2\x2\x2\x773\x771\x3\x2\x2\x2\x774\x776\a\x39\x2\x2\x775"+
		"\x774\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776\x786\x3\x2\x2\x2\x777\x779"+
		"\x5\x38\x1D\x2\x778\x77A\x5\xF4{\x2\x779\x778\x3\x2\x2\x2\x779\x77A\x3"+
		"\x2\x2\x2\x77A\x77F\x3\x2\x2\x2\x77B\x77D\aS\x2\x2\x77C\x77B\x3\x2\x2"+
		"\x2\x77C\x77D\x3\x2\x2\x2\x77D\x77E\x3\x2\x2\x2\x77E\x780\x5\x142\xA2"+
		"\x2\x77F\x77C\x3\x2\x2\x2\x77F\x780\x3\x2\x2\x2\x780\x787\x3\x2\x2\x2"+
		"\x781\x782\x5n\x38\x2\x782\x783\a\xB8\x2\x2\x783\x784\a\xB0\x2\x2\x784"+
		"\x787\x3\x2\x2\x2\x785\x787\a\xB0\x2\x2\x786\x777\x3\x2\x2\x2\x786\x781"+
		"\x3\x2\x2\x2\x786\x785\x3\x2\x2\x2\x787\x796\x3\x2\x2\x2\x788\x789\x5"+
		"v<\x2\x789\x78A\t\n\x2\x2\x78A\x78F\x5\x38\x1D\x2\x78B\x78D\aS\x2\x2\x78C"+
		"\x78B\x3\x2\x2\x2\x78C\x78D\x3\x2\x2\x2\x78D\x78E\x3\x2\x2\x2\x78E\x790"+
		"\x5\x142\xA2\x2\x78F\x78C\x3\x2\x2\x2\x78F\x790\x3\x2\x2\x2\x790\x796"+
		"\x3\x2\x2\x2\x791\x792\x5\x13C\x9F\x2\x792\x793\a\xAC\x2\x2\x793\x794"+
		"\x5\x38\x1D\x2\x794\x796\x3\x2\x2\x2\x795\x775\x3\x2\x2\x2\x795\x788\x3"+
		"\x2\x2\x2\x795\x791\x3\x2\x2\x2\x796\xEF\x3\x2\x2\x2\x797\x798\a\x64\x2"+
		"\x2\x798\x799\a\xA8\x2\x2\x799\x79E\x5\xF2z\x2\x79A\x79B\a\xB9\x2\x2\x79B"+
		"\x79D\x5\xF2z\x2\x79C\x79A\x3\x2\x2\x2\x79D\x7A0\x3\x2\x2\x2\x79E\x79C"+
		"\x3\x2\x2\x2\x79E\x79F\x3\x2\x2\x2\x79F\x7A1\x3\x2\x2\x2\x7A0\x79E\x3"+
		"\x2\x2\x2\x7A1\x7A2\a\xA9\x2\x2\x7A2\xF1\x3\x2\x2\x2\x7A3\x7A5\a\xCB\x2"+
		"\x2\x7A4\x7A6\x5\x66\x34\x2\x7A5\x7A4\x3\x2\x2\x2\x7A5\x7A6\x3\x2\x2\x2"+
		"\x7A6\x7B1\x3\x2\x2\x2\x7A7\x7A8\a\xA5\x2\x2\x7A8\x7A9\aU\x2\x2\x7A9\x7AA"+
		"\a\xA8\x2\x2\x7AA\x7AB\x5v<\x2\x7AB\x7AC\a\xAC\x2\x2\x7AC\x7AD\x5\x66"+
		"\x34\x2\x7AD\x7AE\x3\x2\x2\x2\x7AE\x7AF\a\xA9\x2\x2\x7AF\x7B1\x3\x2\x2"+
		"\x2\x7B0\x7A3\x3\x2\x2\x2\x7B0\x7A7\x3\x2\x2\x2\x7B1\xF3\x3\x2\x2\x2\x7B2"+
		"\x7B3\a@\x2\x2\x7B3\x7C8\a\xA8\x2\x2\x7B4\x7B5\a\x1A\x2\x2\x7B5\x7B6\a"+
		"l\x2\x2\x7B6\x7BB\x5\x38\x1D\x2\x7B7\x7B8\a\xB9\x2\x2\x7B8\x7BA\x5\x38"+
		"\x1D\x2\x7B9\x7B7\x3\x2\x2\x2\x7BA\x7BD\x3\x2\x2\x2\x7BB\x7B9\x3\x2\x2"+
		"\x2\x7BB\x7BC\x3\x2\x2\x2\x7BC\x7C9\x3\x2\x2\x2\x7BD\x7BB\x3\x2\x2\x2"+
		"\x7BE\x7BF\ak\x2\x2\x7BF\x7C0\al\x2\x2\x7C0\x7C5\x5\x10A\x86\x2\x7C1\x7C2"+
		"\a\xB9\x2\x2\x7C2\x7C4\x5\x10A\x86\x2\x7C3\x7C1\x3\x2\x2\x2\x7C4\x7C7"+
		"\x3\x2\x2\x2\x7C5\x7C3\x3\x2\x2\x2\x7C5\x7C6\x3\x2\x2\x2\x7C6\x7C9\x3"+
		"\x2\x2\x2\x7C7\x7C5\x3\x2\x2\x2\x7C8\x7B4\x3\x2\x2\x2\x7C8\x7BE\x3\x2"+
		"\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7C8\x3\x2\x2\x2\x7CA\x7CB\x3\x2\x2"+
		"\x2\x7CB\x7CC\x3\x2\x2\x2\x7CC\x7CD\a\xA9\x2\x2\x7CD\xF5\x3\x2\x2\x2\x7CE"+
		"\x7CF\an\x2\x2\x7CF\x7D0\x5\x114\x8B\x2\x7D0\xF7\x3\x2\x2\x2\x7D1\x7D2"+
		"\a\x61\x2\x2\x7D2\x7D7\x5\x118\x8D\x2\x7D3\x7D4\a\xB9\x2\x2\x7D4\x7D6"+
		"\x5\x118\x8D\x2\x7D5\x7D3\x3\x2\x2\x2\x7D6\x7D9\x3\x2\x2\x2\x7D7\x7D5"+
		"\x3\x2\x2\x2\x7D7\x7D8\x3\x2\x2\x2\x7D8\xF9\x3\x2\x2\x2\x7D9\x7D7\x3\x2"+
		"\x2\x2\x7DA\x7DB\a\xB9\x2\x2\x7DB\x7DD\x5\x118\x8D\x2\x7DC\x7DA\x3\x2"+
		"\x2\x2\x7DD\x7DE\x3\x2\x2\x2\x7DE\x7DC\x3\x2\x2\x2\x7DE\x7DF\x3\x2\x2"+
		"\x2\x7DF\xFB\x3\x2\x2\x2\x7E0\x7E1\ai\x2\x2\x7E1\x7E2\al\x2\x2\x7E2\x7E7"+
		"\x5\xFE\x80\x2\x7E3\x7E4\a\xB9\x2\x2\x7E4\x7E6\x5\xFE\x80\x2\x7E5\x7E3"+
		"\x3\x2\x2\x2\x7E6\x7E9\x3\x2\x2\x2\x7E7\x7E5\x3\x2\x2\x2\x7E7\x7E8\x3"+
		"\x2\x2\x2\x7E8\xFD\x3\x2\x2\x2\x7E9\x7E7\x3\x2\x2\x2\x7EA\x7ED\x5\x13E"+
		"\xA0\x2\x7EB\x7ED\x5\x38\x1D\x2\x7EC\x7EA\x3\x2\x2\x2\x7EC\x7EB\x3\x2"+
		"\x2\x2\x7ED\xFF\x3\x2\x2\x2\x7EE\x7EF\aj\x2\x2\x7EF\x7F0\x5\x34\x1B\x2"+
		"\x7F0\x101\x3\x2\x2\x2\x7F1\x7F3\x5\x104\x83\x2\x7F2\x7F1\x3\x2\x2\x2"+
		"\x7F2\x7F3\x3\x2\x2\x2\x7F3\x7F4\x3\x2\x2\x2\x7F4\x7F5\a\x62\x2\x2\x7F5"+
		"\x7FA\x5\x118\x8D\x2\x7F6\x7F7\ag\x2\x2\x7F7\x7F9\x5\x34\x1B\x2\x7F8\x7F6"+
		"\x3\x2\x2\x2\x7F9\x7FC\x3\x2\x2\x2\x7FA\x7F8\x3\x2\x2\x2\x7FA\x7FB\x3"+
		"\x2\x2\x2\x7FB\x803\x3\x2\x2\x2\x7FC\x7FA\x3\x2\x2\x2\x7FD\x7FF\x5\x104"+
		"\x83\x2\x7FE\x7FD\x3\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x800\x3\x2\x2"+
		"\x2\x800\x801\a\x46\x2\x2\x801\x803\x5\x118\x8D\x2\x802\x7F2\x3\x2\x2"+
		"\x2\x802\x7FE\x3\x2\x2\x2\x803\x103\x3\x2\x2\x2\x804\x811\a\"\x2\x2\x805"+
		"\x811\a#\x2\x2\x806\x811\a%\x2\x2\x807\x811\a&\x2\x2\x808\x811\a$\x2\x2"+
		"\x809\x811\a\'\x2\x2\x80A\x80B\a\'\x2\x2\x80B\x811\a%\x2\x2\x80C\x80D"+
		"\a\"\x2\x2\x80D\x811\a%\x2\x2\x80E\x80F\a#\x2\x2\x80F\x811\a%\x2\x2\x810"+
		"\x804\x3\x2\x2\x2\x810\x805\x3\x2\x2\x2\x810\x806\x3\x2\x2\x2\x810\x807"+
		"\x3\x2\x2\x2\x810\x808\x3\x2\x2\x2\x810\x809\x3\x2\x2\x2\x810\x80A\x3"+
		"\x2\x2\x2\x810\x80C\x3\x2\x2\x2\x810\x80E\x3\x2\x2\x2\x811\x105\x3\x2"+
		"\x2\x2\x812\x813\a`\x2\x2\x813\x814\x5\x34\x1B\x2\x814\x107\x3\x2\x2\x2"+
		"\x815\x816\ak\x2\x2\x816\x817\al\x2\x2\x817\x81C\x5\x10A\x86\x2\x818\x819"+
		"\a\xB9\x2\x2\x819\x81B\x5\x10A\x86\x2\x81A\x818\x3\x2\x2\x2\x81B\x81E"+
		"\x3\x2\x2\x2\x81C\x81A\x3\x2\x2\x2\x81C\x81D\x3\x2\x2\x2\x81D\x109\x3"+
		"\x2\x2\x2\x81E\x81C\x3\x2\x2\x2\x81F\x822\x5\x13E\xA0\x2\x820\x822\x5"+
		"\x38\x1D\x2\x821\x81F\x3\x2\x2\x2\x821\x820\x3\x2\x2\x2\x822\x824\x3\x2"+
		"\x2\x2\x823\x825\t\x4\x2\x2\x824\x823\x3\x2\x2\x2\x824\x825\x3\x2\x2\x2"+
		"\x825\x10B\x3\x2\x2\x2\x826\x828\a\x8F\x2\x2\x827\x829\an\x2\x2\x828\x827"+
		"\x3\x2\x2\x2\x828\x829\x3\x2\x2\x2\x829\x82A\x3\x2\x2\x2\x82A\x82B\x5"+
		"\x114\x8B\x2\x82B\x82C\a\x8E\x2\x2\x82C\x82D\x5\x11A\x8E\x2\x82D\x82E"+
		"\ag\x2\x2\x82E\x84F\x5\x34\x1B\x2\x82F\x830\a=\x2\x2\x830\x833\a\x90\x2"+
		"\x2\x831\x832\a\x89\x2\x2\x832\x834\x5\x34\x1B\x2\x833\x831\x3\x2\x2\x2"+
		"\x833\x834\x3\x2\x2\x2\x834\x835\x3\x2\x2\x2\x835\x836\a>\x2\x2\x836\x850"+
		"\x5\x10E\x88\x2\x837\x838\a=\x2\x2\x838\x839\ar\x2\x2\x839\x83C\a\x90"+
		"\x2\x2\x83A\x83B\al\x2\x2\x83B\x83D\a\x91\x2\x2\x83C\x83A\x3\x2\x2\x2"+
		"\x83C\x83D\x3\x2\x2\x2\x83D\x840\x3\x2\x2\x2\x83E\x83F\a\x89\x2\x2\x83F"+
		"\x841\x5\x34\x1B\x2\x840\x83E\x3\x2\x2\x2\x840\x841\x3\x2\x2\x2\x841\x842"+
		"\x3\x2\x2\x2\x842\x843\a>\x2\x2\x843\x850\x5\x110\x89\x2\x844\x845\a="+
		"\x2\x2\x845\x846\ar\x2\x2\x846\x847\a\x90\x2\x2\x847\x848\al\x2\x2\x848"+
		"\x84B\a\x92\x2\x2\x849\x84A\a\x89\x2\x2\x84A\x84C\x5\x34\x1B\x2\x84B\x849"+
		"\x3\x2\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2\x84D\x84E\a>"+
		"\x2\x2\x84E\x850\x5\x10E\x88\x2\x84F\x82F\x3\x2\x2\x2\x84F\x837\x3\x2"+
		"\x2\x2\x84F\x844\x3\x2\x2\x2\x850\x851\x3\x2\x2\x2\x851\x84F\x3\x2\x2"+
		"\x2\x851\x852\x3\x2\x2\x2\x852\x858\x3\x2\x2\x2\x853\x854\av\x2\x2\x854"+
		"\x855\x5\xECw\x2\x855\x856\an\x2\x2\x856\x857\x5\x112\x8A\x2\x857\x859"+
		"\x3\x2\x2\x2\x858\x853\x3\x2\x2\x2\x858\x859\x3\x2\x2\x2\x859\x10D\x3"+
		"\x2\x2\x2\x85A\x85B\a]\x2\x2\x85B\x85C\a\x65\x2\x2\x85C\x861\x5\xD4k\x2"+
		"\x85D\x85E\a\xB9\x2\x2\x85E\x860\x5\xD4k\x2\x85F\x85D\x3\x2\x2\x2\x860"+
		"\x863\x3\x2\x2\x2\x861\x85F\x3\x2\x2\x2\x861\x862\x3\x2\x2\x2\x862\x866"+
		"\x3\x2\x2\x2\x863\x861\x3\x2\x2\x2\x864\x866\a_\x2\x2\x865\x85A\x3\x2"+
		"\x2\x2\x865\x864\x3\x2\x2\x2\x866\x10F\x3\x2\x2\x2\x867\x86C\a^\x2\x2"+
		"\x868\x869\a\xA8\x2\x2\x869\x86A\x5p\x39\x2\x86A\x86B\a\xA9\x2\x2\x86B"+
		"\x86D\x3\x2\x2\x2\x86C\x868\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D\x86E"+
		"\x3\x2\x2\x2\x86E\x86F\ao\x2\x2\x86F\x874\x5\xB0Y\x2\x870\x871\a\xB9\x2"+
		"\x2\x871\x873\x5\xB0Y\x2\x872\x870\x3\x2\x2\x2\x873\x876\x3\x2\x2\x2\x874"+
		"\x872\x3\x2\x2\x2\x874\x875\x3\x2\x2\x2\x875\x111\x3\x2\x2\x2\x876\x874"+
		"\x3\x2\x2\x2\x877\x879\x5\x114\x8B\x2\x878\x87A\x5\x116\x8C\x2\x879\x878"+
		"\x3\x2\x2\x2\x879\x87A\x3\x2\x2\x2\x87A\x886\x3\x2\x2\x2\x87B\x87D\x5"+
		"\x114\x8B\x2\x87C\x87E\x5\x116\x8C\x2\x87D\x87C\x3\x2\x2\x2\x87D\x87E"+
		"\x3\x2\x2\x2\x87E\x883\x3\x2\x2\x2\x87F\x881\aS\x2\x2\x880\x87F\x3\x2"+
		"\x2\x2\x880\x881\x3\x2\x2\x2\x881\x882\x3\x2\x2\x2\x882\x884\x5\x11E\x90"+
		"\x2\x883\x880\x3\x2\x2\x2\x883\x884\x3\x2\x2\x2\x884\x886\x3\x2\x2\x2"+
		"\x885\x877\x3\x2\x2\x2\x885\x87B\x3\x2\x2\x2\x886\x113\x3\x2\x2\x2\x887"+
		"\x88B\x5n\x38\x2\x888\x88B\x5v<\x2\x889\x88B\x5t;\x2\x88A\x887\x3\x2\x2"+
		"\x2\x88A\x888\x3\x2\x2\x2\x88A\x889\x3\x2\x2\x2\x88B\x890\x3\x2\x2\x2"+
		"\x88C\x88E\aS\x2\x2\x88D\x88C\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E\x88F"+
		"\x3\x2\x2\x2\x88F\x891\x5\x11E\x90\x2\x890\x88D\x3\x2\x2\x2\x890\x891"+
		"\x3\x2\x2\x2\x891\x115\x3\x2\x2\x2\x892\x893\aT\x2\x2\x893\x894\a\xA8"+
		"\x2\x2\x894\x895\a\xCB\x2\x2\x895\x899\a\xA9\x2\x2\x896\x897\aT\x2\x2"+
		"\x897\x899\a\xCB\x2\x2\x898\x892\x3\x2\x2\x2\x898\x896\x3\x2\x2\x2\x899"+
		"\x117\x3\x2\x2\x2\x89A\x89C\x5\x11A\x8E\x2\x89B\x89D\x5\x11C\x8F\x2\x89C"+
		"\x89B\x3\x2\x2\x2\x89C\x89D\x3\x2\x2\x2\x89D\x119\x3\x2\x2\x2\x89E\x8B7"+
		"\x5n\x38\x2\x89F\x8A2\x5v<\x2\x8A0\x8A1\a\xB8\x2\x2\x8A1\x8A3\x5\x122"+
		"\x92\x2\x8A2\x8A0\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2\x8A3\x8B7\x3\x2\x2"+
		"\x2\x8A4\x8A7\x5t;\x2\x8A5\x8A6\a\xB8\x2\x2\x8A6\x8A8\x5\x122\x92\x2\x8A7"+
		"\x8A5\x3\x2\x2\x2\x8A7\x8A8\x3\x2\x2\x2\x8A8\x8B7\x3\x2\x2\x2\x8A9\x8AA"+
		"\a\xA8\x2\x2\x8AA\x8AB\x5\xDCo\x2\x8AB\x8AC\a\xA9\x2\x2\x8AC\x8B7\x3\x2"+
		"\x2\x2\x8AD\x8B7\x5\x124\x93\x2\x8AE\x8B4\x5\x122\x92\x2\x8AF\x8B0\aT"+
		"\x2\x2\x8B0\x8B1\a\xA8\x2\x2\x8B1\x8B2\x5\xE2r\x2\x8B2\x8B3\a\xA9\x2\x2"+
		"\x8B3\x8B5\x3\x2\x2\x2\x8B4\x8AF\x3\x2\x2\x2\x8B4\x8B5\x3\x2\x2\x2\x8B5"+
		"\x8B7\x3\x2\x2\x2\x8B6\x89E\x3\x2\x2\x2\x8B6\x89F\x3\x2\x2\x2\x8B6\x8A4"+
		"\x3\x2\x2\x2\x8B6\x8A9\x3\x2\x2\x2\x8B6\x8AD\x3\x2\x2\x2\x8B6\x8AE\x3"+
		"\x2\x2\x2\x8B7\x8BC\x3\x2\x2\x2\x8B8\x8BA\aS\x2\x2\x8B9\x8B8\x3\x2\x2"+
		"\x2\x8B9\x8BA\x3\x2\x2\x2\x8BA\x8BB\x3\x2\x2\x2\x8BB\x8BD\x5\x11E\x90"+
		"\x2\x8BC\x8B9\x3\x2\x2\x2\x8BC\x8BD\x3\x2\x2\x2\x8BD\x11B\x3\x2\x2\x2"+
		"\x8BE\x8BF\aT\x2\x2\x8BF\x8C0\a\xA8\x2\x2\x8C0\x8C1\a\xCB\x2\x2\x8C1\x8C6"+
		"\a\xA9\x2\x2\x8C2\x8C3\a\xA8\x2\x2\x8C3\x8C4\a\xCB\x2\x2\x8C4\x8C6\a\xA9"+
		"\x2\x2\x8C5\x8BE\x3\x2\x2\x2\x8C5\x8C2\x3\x2\x2\x2\x8C6\x11D\x3\x2\x2"+
		"\x2\x8C7\x8CA\x5l\x37\x2\x8C8\x8CA\a\xCA\x2\x2\x8C9\x8C7\x3\x2\x2\x2\x8C9"+
		"\x8C8\x3\x2\x2\x2\x8CA\x11F\x3\x2\x2\x2\x8CB\x8CE\x5n\x38\x2\x8CC\x8CE"+
		"\x5\x156\xAC\x2\x8CD\x8CB\x3\x2\x2\x2\x8CD\x8CC\x3\x2\x2\x2\x8CE\x121"+
		"\x3\x2\x2\x2\x8CF\x8D0\x5\x120\x91\x2\x8D0\x8D2\a\xA8\x2\x2\x8D1\x8D3"+
		"\x5\xD8m\x2\x8D2\x8D1\x3\x2\x2\x2\x8D2\x8D3\x3\x2\x2\x2\x8D3\x8D4\x3\x2"+
		"\x2\x2\x8D4\x8D5\a\xA9\x2\x2\x8D5\x123\x3\x2\x2\x2\x8D6\x8DF\am\x2\x2"+
		"\x8D7\x8D9\x5n\x38\x2\x8D8\x8DA\x5\x126\x94\x2\x8D9\x8D8\x3\x2\x2\x2\x8D9"+
		"\x8DA\x3\x2\x2\x2\x8DA\x8E0\x3\x2\x2\x2\x8DB\x8DC\a\xA8\x2\x2\x8DC\x8DD"+
		"\x5\x38\x1D\x2\x8DD\x8DE\a\xA9\x2\x2\x8DE\x8E0\x3\x2\x2\x2\x8DF\x8D7\x3"+
		"\x2\x2\x2\x8DF\x8DB\x3\x2\x2\x2\x8E0\x8E2\x3\x2\x2\x2\x8E1\x8E3\x5\x18"+
		"\r\x2\x8E2\x8E1\x3\x2\x2\x2\x8E2\x8E3\x3\x2\x2\x2\x8E3\x125\x3\x2\x2\x2"+
		"\x8E4\x8E9\x5\x128\x95\x2\x8E5\x8E6\a\xB9\x2\x2\x8E6\x8E8\x5\x128\x95"+
		"\x2\x8E7\x8E5\x3\x2\x2\x2\x8E8\x8EB\x3\x2\x2\x2\x8E9\x8E7\x3\x2\x2\x2"+
		"\x8E9\x8EA\x3\x2\x2\x2\x8EA\x127\x3\x2\x2\x2\x8EB\x8E9\x3\x2\x2\x2\x8EC"+
		"\x8ED\x5v<\x2\x8ED\x8EF\a\xAC\x2\x2\x8EE\x8F0\x5\x38\x1D\x2\x8EF\x8EE"+
		"\x3\x2\x2\x2\x8EF\x8F0\x3\x2\x2\x2\x8F0\x8F6\x3\x2\x2\x2\x8F1\x8F3\x5"+
		"\x38\x1D\x2\x8F2\x8F4\t\a\x2\x2\x8F3\x8F2\x3\x2\x2\x2\x8F3\x8F4\x3\x2"+
		"\x2\x2\x8F4\x8F6\x3\x2\x2\x2\x8F5\x8EC\x3\x2\x2\x2\x8F5\x8F1\x3\x2\x2"+
		"\x2\x8F6\x129\x3\x2\x2\x2\x8F7\x8FA\a\xA8\x2\x2\x8F8\x8FB\x5j\x36\x2\x8F9"+
		"\x8FB\a;\x2\x2\x8FA\x8F8\x3\x2\x2\x2\x8FA\x8F9\x3\x2\x2\x2\x8FB\x8FC\x3"+
		"\x2\x2\x2\x8FC\x8FD\a\xA9\x2\x2\x8FD\x12B\x3\x2\x2\x2\x8FE\x900\t\v\x2"+
		"\x2\x8FF\x901\x5\x12A\x96\x2\x900\x8FF\x3\x2\x2\x2\x900\x901\x3\x2\x2"+
		"\x2\x901\x908\x3\x2\x2\x2\x902\x903\t\v\x2\x2\x903\x904\a[\x2\x2\x904"+
		"\x908\x5\x12A\x96\x2\x905\x906\t\f\x2\x2\x906\x908\x5\x12A\x96\x2\x907"+
		"\x8FE\x3\x2\x2\x2\x907\x902\x3\x2\x2\x2\x907\x905\x3\x2\x2\x2\x908\x12D"+
		"\x3\x2\x2\x2\x909\x911\t\r\x2\x2\x90A\x90B\a\xA8\x2\x2\x90B\x90E\a\xCC"+
		"\x2\x2\x90C\x90D\a\xB9\x2\x2\x90D\x90F\a\xCC\x2\x2\x90E\x90C\x3\x2\x2"+
		"\x2\x90E\x90F\x3\x2\x2\x2\x90F\x910\x3\x2\x2\x2\x910\x912\a\xA9\x2\x2"+
		"\x911\x90A\x3\x2\x2\x2\x911\x912\x3\x2\x2\x2\x912\x915\x3\x2\x2\x2\x913"+
		"\x915\a\x86\x2\x2\x914\x909\x3\x2\x2\x2\x914\x913\x3\x2\x2\x2\x915\x12F"+
		"\x3\x2\x2\x2\x916\x917\t\xE\x2\x2\x917\x131\x3\x2\x2\x2\x918\x91A\x5\x130"+
		"\x99\x2\x919\x918\x3\x2\x2\x2\x919\x91A\x3\x2\x2\x2\x91A\x91B\x3\x2\x2"+
		"\x2\x91B\x91C\x5\x134\x9B\x2\x91C\x133\x3\x2\x2\x2\x91D\x926\a\x87\x2"+
		"\x2\x91E\x91F\a\xA8\x2\x2\x91F\x922\x5j\x36\x2\x920\x921\a\xB9\x2\x2\x921"+
		"\x923\x5j\x36\x2\x922\x920\x3\x2\x2\x2\x922\x923\x3\x2\x2\x2\x923\x924"+
		"\x3\x2\x2\x2\x924\x925\a\xA9\x2\x2\x925\x927\x3\x2\x2\x2\x926\x91E\x3"+
		"\x2\x2\x2\x926\x927\x3\x2\x2\x2\x927\x135\x3\x2\x2\x2\x928\x929\a\xB8"+
		"\x2\x2\x929\x92A\x5l\x37\x2\x92A\x137\x3\x2\x2\x2\x92B\x92C\t\n\x2\x2"+
		"\x92C\x139\x3\x2\x2\x2\x92D\x932\x5\x13C\x9F\x2\x92E\x92F\a\xB9\x2\x2"+
		"\x92F\x931\x5\x13C\x9F\x2\x930\x92E\x3\x2\x2\x2\x931\x934\x3\x2\x2\x2"+
		"\x932\x930\x3\x2\x2\x2\x932\x933\x3\x2\x2\x2\x933\x13B\x3\x2\x2\x2\x934"+
		"\x932\x3\x2\x2\x2\x935\x93F\x5n\x38\x2\x936\x937\x5n\x38\x2\x937\x938"+
		"\a\xB8\x2\x2\x938\x939\x5\x156\xAC\x2\x939\x93F\x3\x2\x2\x2\x93A\x93B"+
		"\x5t;\x2\x93B\x93C\a\xB8\x2\x2\x93C\x93D\x5l\x37\x2\x93D\x93F\x3\x2\x2"+
		"\x2\x93E\x935\x3\x2\x2\x2\x93E\x936\x3\x2\x2\x2\x93E\x93A\x3\x2\x2\x2"+
		"\x93F\x13D\x3\x2\x2\x2\x940\x943\x5j\x36\x2\x941\x943\x5n\x38\x2\x942"+
		"\x940\x3\x2\x2\x2\x942\x941\x3\x2\x2\x2\x943\x13F\x3\x2\x2\x2\x944\x945"+
		"\x5l\x37\x2\x945\x141\x3\x2\x2\x2\x946\x949\x5l\x37\x2\x947\x949\a\xCA"+
		"\x2\x2\x948\x946\x3\x2\x2\x2\x948\x947\x3\x2\x2\x2\x949\x143\x3\x2\x2"+
		"\x2\x94A\x94D\x5n\x38\x2\x94B\x94D\x5v<\x2\x94C\x94A\x3\x2\x2\x2\x94C"+
		"\x94B\x3\x2\x2\x2\x94D\x145\x3\x2\x2\x2\x94E\x953\x5\x148\xA5\x2\x94F"+
		"\x953\x5\x14A\xA6\x2\x950\x953\x5\x14C\xA7\x2\x951\x953\x5\x14E\xA8\x2"+
		"\x952\x94E\x3\x2\x2\x2\x952\x94F\x3\x2\x2\x2\x952\x950\x3\x2\x2\x2\x952"+
		"\x951\x3\x2\x2\x2\x953\x147\x3\x2\x2\x2\x954\x955\a*\x2\x2\x955\x956\x5"+
		"\x144\xA3\x2\x956\x149\x3\x2\x2\x2\x957\x958\a+\x2\x2\x958\x959\x5\x144"+
		"\xA3\x2\x959\x14B\x3\x2\x2\x2\x95A\x96A\a)\x2\x2\x95B\x96B\a\x30\x2\x2"+
		"\x95C\x96B\a/\x2\x2\x95D\x96B\a-\x2\x2\x95E\x96B\a.\x2\x2\x95F\x962\a"+
		"\x31\x2\x2\x960\x963\x5j\x36\x2\x961\x963\x5v<\x2\x962\x960\x3\x2\x2\x2"+
		"\x962\x961\x3\x2\x2\x2\x963\x96B\x3\x2\x2\x2\x964\x967\a\x32\x2\x2\x965"+
		"\x968\x5j\x36\x2\x966\x968\x5v<\x2\x967\x965\x3\x2\x2\x2\x967\x966\x3"+
		"\x2\x2\x2\x968\x96B\x3\x2\x2\x2\x969\x96B\x5n\x38\x2\x96A\x95B\x3\x2\x2"+
		"\x2\x96A\x95C\x3\x2\x2\x2\x96A\x95D\x3\x2\x2\x2\x96A\x95E\x3\x2\x2\x2"+
		"\x96A\x95F\x3\x2\x2\x2\x96A\x964\x3\x2\x2\x2\x96A\x969\x3\x2\x2\x2\x96B"+
		"\x96E\x3\x2\x2\x2\x96C\x96D\a\x61\x2\x2\x96D\x96F\x5\x144\xA3\x2\x96E"+
		"\x96C\x3\x2\x2\x2\x96E\x96F\x3\x2\x2\x2\x96F\x970\x3\x2\x2\x2\x970\x971"+
		"\an\x2\x2\x971\x976\x5v<\x2\x972\x973\a\xB9\x2\x2\x973\x975\x5v<\x2\x974"+
		"\x972\x3\x2\x2\x2\x975\x978\x3\x2\x2\x2\x976\x974\x3\x2\x2\x2\x976\x977"+
		"\x3\x2\x2\x2\x977\x14D\x3\x2\x2\x2\x978\x976\x3\x2\x2\x2\x979\x97A\a,"+
		"\x2\x2\x97A\x97B\x5\x144\xA3\x2\x97B\x14F\x3\x2\x2\x2\x97C\x97D\a\xCA"+
		"\x2\x2\x97D\x151\x3\x2\x2\x2\x97E\x97F\a\x36\x2\x2\x97F\x980\a\xCB\x2"+
		"\x2\x980\x153\x3\x2\x2\x2\x981\x982\t\xF\x2\x2\x982\x155\x3\x2\x2\x2\x983"+
		"\x984\t\x10\x2\x2\x984\x157\x3\x2\x2\x2\x14A\x161\x16A\x170\x177\x17D"+
		"\x185\x18B\x18F\x1A3\x1AE\x1B8\x1BE\x1DA\x1E3\x1EA\x1EF\x1F5\x1FB\x1FE"+
		"\x203\x20B\x20D\x211\x214\x219\x221\x224\x227\x22A\x23B\x242\x247\x25A"+
		"\x25D\x26B\x26E\x271\x274\x27B\x27F\x290\x29B\x2A6\x2A9\x2B2\x2B5\x2BE"+
		"\x2C2\x2CF\x2D1\x2DD\x2DF\x2EB\x2EE\x2F0\x2FB\x306\x315\x317\x33B\x33D"+
		"\x349\x34B\x35A\x35C\x364\x369\x377\x380\x384\x386\x38C\x38F\x399\x3A1"+
		"\x3A8\x3AC\x3C3\x3D5\x3DA\x3E6\x3EB\x3EF\x3F2\x3F9\x3FF\x404\x40A\x40F"+
		"\x413\x41A\x420\x424\x429\x42D\x433\x438\x43E\x441\x44B\x455\x458\x45C"+
		"\x460\x463\x466\x469\x46C\x472\x47C\x483\x48C\x490\x493\x4A2\x4B9\x4BD"+
		"\x4C1\x4C4\x4C8\x4CC\x4CF\x4D4\x4D8\x4DF\x4EF\x4F5\x4F9\x4FB\x50B\x516"+
		"\x51A\x51F\x522\x527\x52B\x52E\x532\x538\x53B\x540\x544\x547\x549\x54C"+
		"\x553\x557\x55E\x56C\x576\x57F\x583\x587\x58B\x591\x59B\x59D\x5A5\x5AC"+
		"\x5B4\x5C1\x5C8\x5D0\x5D2\x5D6\x5DA\x5E1\x5E4\x5E8\x5EC\x5F3\x5FB\x603"+
		"\x605\x608\x60B\x610\x612\x619\x61B\x61E\x621\x624\x629\x62B\x62D\x634"+
		"\x639\x642\x648\x64A\x652\x65D\x662\x666\x66D\x67A\x683\x687\x690\x694"+
		"\x699\x69F\x6A3\x6A6\x6AC\x6AE\x6B5\x6BC\x6CB\x6CD\x6D2\x6D9\x6E2\x6EB"+
		"\x6EE\x6F3\x6F8\x700\x703\x707\x70B\x70E\x711\x716\x71C\x720\x723\x726"+
		"\x729\x72C\x72F\x735\x73C\x743\x74A\x754\x757\x75A\x75F\x766\x771\x775"+
		"\x779\x77C\x77F\x786\x78C\x78F\x795\x79E\x7A5\x7B0\x7BB\x7C5\x7C8\x7CA"+
		"\x7D7\x7DE\x7E7\x7EC\x7F2\x7FA\x7FE\x802\x810\x81C\x821\x824\x828\x833"+
		"\x83C\x840\x84B\x84F\x851\x858\x861\x865\x86C\x874\x879\x87D\x880\x883"+
		"\x885\x88A\x88D\x890\x898\x89C\x8A2\x8A7\x8B4\x8B6\x8B9\x8BC\x8C5\x8C9"+
		"\x8CD\x8D2\x8D9\x8DF\x8E2\x8E9\x8EF\x8F3\x8F5\x8FA\x900\x907\x90E\x911"+
		"\x914\x919\x922\x926\x932\x93E\x942\x948\x94C\x952\x962\x967\x96A\x96E"+
		"\x976";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace tsql2pgsql.grammar
