//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\src\tsql2pgsql\grammar\TSQL.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace tsql2pgsql.grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class TSQLParser : Parser {
	public const int
		T__10=1, T__9=2, T__8=3, T__7=4, T__6=5, T__5=6, T__4=7, T__3=8, T__2=9, 
		T__1=10, T__0=11, READONLY=12, TRY=13, CATCH=14, TRANSACTION=15, COMMIT=16, 
		ROLLBACK=17, RAISE_ERROR=18, PRINT=19, CLUSTERED=20, NONCLUSTERED=21, 
		TABLE=22, PROCEDURE=23, PARTITION=24, INDEX=25, DATABASE=26, CONSTRAINT=27, 
		FOREIGN=28, PRIMARY=29, KEY=30, REFERENCES=31, LEFT=32, RIGHT=33, CROSS=34, 
		OUTER=35, INNER=36, FULL=37, CURSOR=38, FETCH=39, OPEN=40, CLOSE=41, DEALLOCATE=42, 
		FIRST=43, LAST=44, PRIOR=45, NEXT=46, ABSOLUTE=47, RELATIVE=48, CASE=49, 
		CAST=50, CONVERT=51, COLLATE=52, COUNT=53, COUNT_BIG=54, DISTINCT=55, 
		UNIQUE=56, MAX=57, TOP=58, WHEN=59, THEN=60, SWITCH=61, OVER=62, INCLUDE=63, 
		INTERSECT=64, EXCEPT=65, UNION=66, ALL=67, APPLY=68, IF=69, ELSE=70, WHILE=71, 
		GOTO=72, CONTINUE=73, BREAK=74, TRUNCATE=75, ADD=76, REMOVE=77, ALTER=78, 
		CREATE=79, DROP=80, AS=81, WITH=82, FOR=83, REPLICATION=84, BEGIN=85, 
		END=86, EXISTS=87, DEFAULT=88, VARYING=89, SELECT=90, UPDATE=91, INSERT=92, 
		DELETE=93, WHERE=94, FROM=95, JOIN=96, DECLARE=97, OPTION=98, SET=99, 
		TO=100, ON=101, OFF=102, GROUP=103, HAVING=104, ORDER=105, BY=106, EXECUTE=107, 
		INTO=108, VALUES=109, IS=110, IN=111, NOT=112, NULL=113, BETWEEN=114, 
		RETURN=115, OUTPUT=116, OUT=117, LIKE=118, ESCAPE=119, OF=120, DECIMAL=121, 
		NUMERIC=122, VARCHAR=123, NVARCHAR=124, CHAR=125, CHARACTER=126, NCHAR=127, 
		INT=128, TINYINT=129, SMALLINT=130, BIGINT=131, FLOAT=132, IDENTITY=133, 
		LOG=134, AND=135, OR=136, ASC=137, DESC=138, STATISTICS=139, USING=140, 
		MERGE=141, MATCHED=142, TARGET=143, SOURCE=144, XML=145, RAW=146, AUTO=147, 
		EXPLICIT=148, PATH=149, ENABLE=150, DISABLE=151, TRIGGER=152, WAITFOR=153, 
		DELAY=154, COMPUTE=155, LEVEL=156, ISOLATION=157, SPLIT=158, RANGE=159, 
		FUNCTION=160, SCHEME=161, USED=162, OPTIMIZE=163, ROWCOUNT=164, LT=165, 
		LTE=166, GT=167, GTE=168, GT_LT=169, EQUAL_EQUAL=170, NOT_EQUAL=171, ADD_ASSIGN=172, 
		SUB_ASSIGN=173, MUL_ASSIGN=174, DIV_ASSIGN=175, AND_ASSIGN=176, OR_ASSIGN=177, 
		XOR_ASSIGN=178, MOD_ASSIGN=179, HASH=180, LPAREN=181, RPAREN=182, LBRACKET=183, 
		RBRACKET=184, EQUALS=185, AT=186, SEMICOLON=187, COLON=188, STAR=189, 
		SLASH=190, AMPERSAND=191, PIPE=192, PERCENT=193, CARET=194, PLUS=195, 
		MINUS=196, DOT=197, COMMA=198, FloatingPointLiteral=199, StringLiteral=200, 
		Identifier=201, IntegerLiteral=202, WS=203, COMMENT=204, LINE_COMMENT=205;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'dbcc'", "'||'", "'&&'", "'percent'", "'repeatable'", "'snapshot'", 
		"'checkpoint'", "'read'", "'committed'", "'serializable'", "'uncommitted'", 
		"'readonly'", "'try'", "'catch'", "TRANSACTION", "'commit'", "'rollback'", 
		"'raiserror'", "'print'", "'clustered'", "'nonclustered'", "'table'", 
		"PROCEDURE", "'partition'", "'index'", "'database'", "'constraint'", "FOREIGN", 
		"PRIMARY", "'key'", "'references'", "'left'", "'right'", "'cross'", "'outer'", 
		"'inner'", "'full'", "'cursor'", "'fetch'", "'open'", "'close'", "'deallocate'", 
		"'first'", "'last'", "'prior'", "'next'", "'absolute'", "'relative'", 
		"'case'", "'cast'", "'convert'", "'collate'", "'count'", "'count_big'", 
		"'distinct'", "'unique'", "'max'", "'top'", "'when'", "'then'", "'switch'", 
		"'over'", "'include'", "'intersect'", "'except'", "'union'", "'all'", 
		"'apply'", "'if'", "'else'", "'while'", "'goto'", "'continue'", "'break'", 
		"'truncate'", "'add'", "'remove'", "'alter'", "'create'", "'drop'", "'as'", 
		"'with'", "'for'", "'replication'", "'begin'", "'end'", "'exists'", "'default'", 
		"'varying'", "'select'", "'update'", "'insert'", "'delete'", "'where'", 
		"'from'", "'join'", "'declare'", "'option'", "'set'", "'to'", "'on'", 
		"'off'", "'group'", "'having'", "'order'", "'by'", "EXECUTE", "'into'", 
		"'values'", "'is'", "'in'", "'not'", "'null'", "'between'", "'return'", 
		"'output'", "'out'", "'like'", "'escape'", "'of'", "DECIMAL", "NUMERIC", 
		"VARCHAR", "NVARCHAR", "CHAR", "CHARACTER", "NCHAR", "INT", "TINYINT", 
		"SMALLINT", "BIGINT", "FLOAT", "IDENTITY", "'log'", "'and'", "'or'", "'asc'", 
		"'desc'", "'statistics'", "'using'", "'merge'", "'matched'", "'target'", 
		"'source'", "'xml'", "'raw'", "'auto'", "'explicit'", "'path'", "'enable'", 
		"'disable'", "'trigger'", "'waitfor'", "'delay'", "'compute'", "'level'", 
		"'isolation'", "'split'", "'range'", "'function'", "'scheme'", "'used'", 
		"'optimize'", "'rowcount'", "'<'", "'<='", "'>'", "'>='", "'<>'", "'=='", 
		"'!='", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
		"'#'", "'('", "')'", "'['", "']'", "'='", "'@'", "';'", "':'", "'*'", 
		"'/'", "'&'", "'|'", "'%'", "'^'", "'+'", "'-'", "'.'", "','", "FloatingPointLiteral", 
		"StringLiteral", "Identifier", "IntegerLiteral", "WS", "COMMENT", "LINE_COMMENT"
	};
	public const int
		RULE_compileUnit = 0, RULE_dropTable = 1, RULE_alterTable = 2, RULE_alterTableSwitchPartition = 3, 
		RULE_alterTableDropConstraint = 4, RULE_alterTableAddConstraint = 5, RULE_partitionIdent = 6, 
		RULE_alterTableTrigger = 7, RULE_alterIndex = 8, RULE_alterPartitionScheme = 9, 
		RULE_alterPartitionFunction = 10, RULE_basicOptionList = 11, RULE_basicOption = 12, 
		RULE_createTable = 13, RULE_dropIndex = 14, RULE_createIndex = 15, RULE_createIndexIncludeList = 16, 
		RULE_createIndexPartition = 17, RULE_orderedIndexColumnList = 18, RULE_orderedIndexColumn = 19, 
		RULE_createStatistics = 20, RULE_dropProcedure = 21, RULE_createProcedure = 22, 
		RULE_truncateTable = 23, RULE_obscureCommands = 24, RULE_predicateList = 25, 
		RULE_primary = 26, RULE_expression = 27, RULE_existsExpression = 28, RULE_castExpression = 29, 
		RULE_caseExpression = 30, RULE_countExpression = 31, RULE_convertExpression = 32, 
		RULE_conditionalExpression = 33, RULE_conditionalOrExpression = 34, RULE_conditionalAndExpression = 35, 
		RULE_inclusiveOrExpression = 36, RULE_exclusiveOrExpression = 37, RULE_andExpression = 38, 
		RULE_equalityExpression = 39, RULE_relationalExpression = 40, RULE_additiveExpression = 41, 
		RULE_multiplicativeExpression = 42, RULE_unaryExpression = 43, RULE_unaryExpressionNotPlusMinus = 44, 
		RULE_postfixExpression = 45, RULE_likeTestExpression = 46, RULE_minSelectElement = 47, 
		RULE_expressionSet = 48, RULE_caseWhen = 49, RULE_caseElse = 50, RULE_subSelectExpression = 51, 
		RULE_type = 52, RULE_typeInBracket = 53, RULE_expressionInRest = 54, RULE_literalValue = 55, 
		RULE_stringValue = 56, RULE_integerValue = 57, RULE_qualifiedNamePart = 58, 
		RULE_qualifiedName = 59, RULE_qualifiedNameList = 60, RULE_tempIndex = 61, 
		RULE_tempTable = 62, RULE_variable = 63, RULE_procedureBody = 64, RULE_procedureParameters = 65, 
		RULE_procedureParameter = 66, RULE_procedureParameterInitialValue = 67, 
		RULE_procedureParameterName = 68, RULE_procedureOptions = 69, RULE_statementList = 70, 
		RULE_statement = 71, RULE_ddl = 72, RULE_dml = 73, RULE_commitTransaction = 74, 
		RULE_rollbackTransaction = 75, RULE_printExpression = 76, RULE_returnExpression = 77, 
		RULE_ifStatement = 78, RULE_whileStatement = 79, RULE_waitFor = 80, RULE_raiseError = 81, 
		RULE_tryBlock = 82, RULE_transactionBlock = 83, RULE_deleteTop = 84, RULE_deleteStatement = 85, 
		RULE_deleteFromClause = 86, RULE_deleteFromClauseLoose = 87, RULE_deleteOutput = 88, 
		RULE_commonTableExpression = 89, RULE_commonTableExpressionAtom = 90, 
		RULE_insertStatement = 91, RULE_insertPreamble = 92, RULE_insertOutputClause = 93, 
		RULE_insertDataSource = 94, RULE_insertValueList = 95, RULE_insertValue = 96, 
		RULE_declareStatement = 97, RULE_variableDeclaration = 98, RULE_variableDeclarationAssignment = 99, 
		RULE_columnList = 100, RULE_columnDefinitionList = 101, RULE_columnDefinition = 102, 
		RULE_tableDeclarationOptions = 103, RULE_tableDeclarationOption = 104, 
		RULE_partitionName = 105, RULE_setStatement = 106, RULE_setSessionOther = 107, 
		RULE_setSessionParameter = 108, RULE_setVariableAssignment = 109, RULE_setVariableToCursor = 110, 
		RULE_transactionIsolationLevel = 111, RULE_updateTop = 112, RULE_updateStatement = 113, 
		RULE_updateStatementSetClauseRest = 114, RULE_argument = 115, RULE_argumentList = 116, 
		RULE_computeStatement = 117, RULE_selectStatement = 118, RULE_selectStatementPart = 119, 
		RULE_xmlWithOption = 120, RULE_xmlDefinitionList = 121, RULE_xmlDefinition = 122, 
		RULE_forXmlClause = 123, RULE_selectTopLimit = 124, RULE_selectVariableAssignment = 125, 
		RULE_selectList = 126, RULE_selectListElement = 127, RULE_dmlOptions = 128, 
		RULE_dmlOption = 129, RULE_overClause = 130, RULE_intoClause = 131, RULE_fromClause = 132, 
		RULE_moreInnerJoin = 133, RULE_groupByClause = 134, RULE_groupByElement = 135, 
		RULE_havingClause = 136, RULE_joinOrApply = 137, RULE_joinType = 138, 
		RULE_whereClause = 139, RULE_orderByClause = 140, RULE_orderByElement = 141, 
		RULE_mergeStatement = 142, RULE_mergeMatched = 143, RULE_mergeNotMatched = 144, 
		RULE_tableTargetWithOptions = 145, RULE_tableTarget = 146, RULE_tableTargetOptions = 147, 
		RULE_tableSourceWithOptions = 148, RULE_tableSource = 149, RULE_tableSourceOptions = 150, 
		RULE_tableAlias = 151, RULE_functionName = 152, RULE_functionCall = 153, 
		RULE_executeStatement = 154, RULE_executeArgumentList = 155, RULE_executeArgument = 156, 
		RULE_embeddedParameterList = 157, RULE_embeddedParameter = 158, RULE_characterStringTypeLength = 159, 
		RULE_characterStringType = 160, RULE_numericType = 161, RULE_integerType = 162, 
		RULE_identityType = 163, RULE_identitySpec = 164, RULE_propertyOrField = 165, 
		RULE_assignmentOperator = 166, RULE_qualifiedColumnNameList = 167, RULE_qualifiedColumnName = 168, 
		RULE_columnIndexOrName = 169, RULE_columnName = 170, RULE_columnAlias = 171, 
		RULE_cursorId = 172, RULE_cursorStatement = 173, RULE_cursorOpen = 174, 
		RULE_cursorClose = 175, RULE_cursorFetch = 176, RULE_cursorDeallocate = 177, 
		RULE_stringExpression = 178, RULE_collate = 179, RULE_clusterType = 180, 
		RULE_escapedKeyword = 181, RULE_keyword = 182;
	public static readonly string[] ruleNames = {
		"compileUnit", "dropTable", "alterTable", "alterTableSwitchPartition", 
		"alterTableDropConstraint", "alterTableAddConstraint", "partitionIdent", 
		"alterTableTrigger", "alterIndex", "alterPartitionScheme", "alterPartitionFunction", 
		"basicOptionList", "basicOption", "createTable", "dropIndex", "createIndex", 
		"createIndexIncludeList", "createIndexPartition", "orderedIndexColumnList", 
		"orderedIndexColumn", "createStatistics", "dropProcedure", "createProcedure", 
		"truncateTable", "obscureCommands", "predicateList", "primary", "expression", 
		"existsExpression", "castExpression", "caseExpression", "countExpression", 
		"convertExpression", "conditionalExpression", "conditionalOrExpression", 
		"conditionalAndExpression", "inclusiveOrExpression", "exclusiveOrExpression", 
		"andExpression", "equalityExpression", "relationalExpression", "additiveExpression", 
		"multiplicativeExpression", "unaryExpression", "unaryExpressionNotPlusMinus", 
		"postfixExpression", "likeTestExpression", "minSelectElement", "expressionSet", 
		"caseWhen", "caseElse", "subSelectExpression", "type", "typeInBracket", 
		"expressionInRest", "literalValue", "stringValue", "integerValue", "qualifiedNamePart", 
		"qualifiedName", "qualifiedNameList", "tempIndex", "tempTable", "variable", 
		"procedureBody", "procedureParameters", "procedureParameter", "procedureParameterInitialValue", 
		"procedureParameterName", "procedureOptions", "statementList", "statement", 
		"ddl", "dml", "commitTransaction", "rollbackTransaction", "printExpression", 
		"returnExpression", "ifStatement", "whileStatement", "waitFor", "raiseError", 
		"tryBlock", "transactionBlock", "deleteTop", "deleteStatement", "deleteFromClause", 
		"deleteFromClauseLoose", "deleteOutput", "commonTableExpression", "commonTableExpressionAtom", 
		"insertStatement", "insertPreamble", "insertOutputClause", "insertDataSource", 
		"insertValueList", "insertValue", "declareStatement", "variableDeclaration", 
		"variableDeclarationAssignment", "columnList", "columnDefinitionList", 
		"columnDefinition", "tableDeclarationOptions", "tableDeclarationOption", 
		"partitionName", "setStatement", "setSessionOther", "setSessionParameter", 
		"setVariableAssignment", "setVariableToCursor", "transactionIsolationLevel", 
		"updateTop", "updateStatement", "updateStatementSetClauseRest", "argument", 
		"argumentList", "computeStatement", "selectStatement", "selectStatementPart", 
		"xmlWithOption", "xmlDefinitionList", "xmlDefinition", "forXmlClause", 
		"selectTopLimit", "selectVariableAssignment", "selectList", "selectListElement", 
		"dmlOptions", "dmlOption", "overClause", "intoClause", "fromClause", "moreInnerJoin", 
		"groupByClause", "groupByElement", "havingClause", "joinOrApply", "joinType", 
		"whereClause", "orderByClause", "orderByElement", "mergeStatement", "mergeMatched", 
		"mergeNotMatched", "tableTargetWithOptions", "tableTarget", "tableTargetOptions", 
		"tableSourceWithOptions", "tableSource", "tableSourceOptions", "tableAlias", 
		"functionName", "functionCall", "executeStatement", "executeArgumentList", 
		"executeArgument", "embeddedParameterList", "embeddedParameter", "characterStringTypeLength", 
		"characterStringType", "numericType", "integerType", "identityType", "identitySpec", 
		"propertyOrField", "assignmentOperator", "qualifiedColumnNameList", "qualifiedColumnName", 
		"columnIndexOrName", "columnName", "columnAlias", "cursorId", "cursorStatement", 
		"cursorOpen", "cursorClose", "cursorFetch", "cursorDeallocate", "stringExpression", 
		"collate", "clusterType", "escapedKeyword", "keyword"
	};

	public override string GrammarFileName { get { return "TSQL.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TSQLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TSQLParser.Eof, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; statementList();
			State = 367; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_dropTable);
		try {
			State = 375;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369; Match(DROP);
				State = 370; Match(TABLE);
				State = 371; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 372; Match(DROP);
				State = 373; Match(TABLE);
				State = 374; tempTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public AlterTableAddConstraintContext alterTableAddConstraint() {
			return GetRuleContext<AlterTableAddConstraintContext>(0);
		}
		public AlterTableSwitchPartitionContext alterTableSwitchPartition() {
			return GetRuleContext<AlterTableSwitchPartitionContext>(0);
		}
		public AlterTableDropConstraintContext alterTableDropConstraint() {
			return GetRuleContext<AlterTableDropConstraintContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public AlterTableTriggerContext alterTableTrigger() {
			return GetRuleContext<AlterTableTriggerContext>(0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_alterTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(ALTER);
			State = 378; Match(TABLE);
			State = 379; tableTargetWithOptions();
			State = 384;
			switch (_input.La(1)) {
			case SWITCH:
				{
				State = 380; alterTableSwitchPartition();
				}
				break;
			case ADD:
				{
				State = 381; alterTableAddConstraint();
				}
				break;
			case DROP:
				{
				State = 382; alterTableDropConstraint();
				}
				break;
			case ENABLE:
			case DISABLE:
				{
				State = 383; alterTableTrigger();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableSwitchPartitionContext : ParserRuleContext {
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSQLParser.PARTITION, i);
		}
		public IntegerValueContext integerValue(int i) {
			return GetRuleContext<IntegerValueContext>(i);
		}
		public ITerminalNode SWITCH() { return GetToken(TSQLParser.SWITCH, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSQLParser.PARTITION); }
		public ITerminalNode TO() { return GetToken(TSQLParser.TO, 0); }
		public IntegerValueContext[] integerValue() {
			return GetRuleContexts<IntegerValueContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public PartitionNameContext partitionName() {
			return GetRuleContext<PartitionNameContext>(0);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public AlterTableSwitchPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableSwitchPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableSwitchPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableSwitchPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableSwitchPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableSwitchPartitionContext alterTableSwitchPartition() {
		AlterTableSwitchPartitionContext _localctx = new AlterTableSwitchPartitionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_alterTableSwitchPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(SWITCH);
			State = 387; Match(PARTITION);
			State = 390;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 388; integerValue();
				}
				break;
			case AT:
				{
				State = 389; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 392; Match(TO);
			State = 393; partitionName();
			State = 394; Match(PARTITION);
			State = 397;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 395; integerValue();
				}
				break;
			case AT:
				{
				State = 396; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableDropConstraintContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public AlterTableDropConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableDropConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableDropConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableDropConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableDropConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableDropConstraintContext alterTableDropConstraint() {
		AlterTableDropConstraintContext _localctx = new AlterTableDropConstraintContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_alterTableDropConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(DROP);
			State = 400; Match(CONSTRAINT);
			State = 401; qualifiedName();
			State = 403;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 402; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableAddConstraintContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ColumnListContext[] columnList() {
			return GetRuleContexts<ColumnListContext>();
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode[] RPAREN() { return GetTokens(TSQLParser.RPAREN); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ColumnListContext columnList(int i) {
			return GetRuleContext<ColumnListContext>(i);
		}
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(TSQLParser.RPAREN, i);
		}
		public ITerminalNode[] LPAREN() { return GetTokens(TSQLParser.LPAREN); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSQLParser.ADD, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSQLParser.REFERENCES, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSQLParser.FOREIGN, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(TSQLParser.LPAREN, i);
		}
		public AlterTableAddConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableAddConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableAddConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableAddConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableAddConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableAddConstraintContext alterTableAddConstraint() {
		AlterTableAddConstraintContext _localctx = new AlterTableAddConstraintContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_alterTableAddConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; Match(ADD);
			State = 406; Match(CONSTRAINT);
			State = 407; qualifiedName();
			State = 441;
			switch (_input.La(1)) {
			case PRIMARY:
				{
				{
				State = 408; Match(PRIMARY);
				State = 409; Match(KEY);
				State = 411;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 410; clusterType();
					}
				}

				}
				State = 413; Match(LPAREN);
				State = 414; orderedIndexColumnList();
				State = 415; Match(RPAREN);
				State = 417;
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 416; basicOptionList();
					}
					break;
				}
				State = 421;
				_la = _input.La(1);
				if (_la==ON) {
					{
					State = 419; Match(ON);
					State = 420; partitionIdent();
					}
				}

				}
				break;
			case DEFAULT:
				{
				State = 423; Match(DEFAULT);
				State = 424; Match(LPAREN);
				State = 425; literalValue();
				State = 426; Match(RPAREN);
				State = 427; Match(FOR);
				State = 428; qualifiedName();
				}
				break;
			case FOREIGN:
				{
				State = 430; Match(FOREIGN);
				State = 431; Match(KEY);
				State = 432; Match(LPAREN);
				State = 433; columnList();
				State = 434; Match(RPAREN);
				State = 435; Match(REFERENCES);
				State = 436; tableSource();
				State = 437; Match(LPAREN);
				State = 438; columnList();
				State = 439; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionIdentContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public PartitionIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPartitionIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPartitionIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionIdentContext partitionIdent() {
		PartitionIdentContext _localctx = new PartitionIdentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_partitionIdent);
		try {
			State = 452;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443; Match(PRIMARY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 444; Match(LBRACKET);
				State = 445; Match(PRIMARY);
				State = 446; Match(RBRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 447; qualifiedName();
				State = 448; Match(LPAREN);
				State = 449; columnList();
				State = 450; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableTriggerContext : ParserRuleContext {
		public ITerminalNode DISABLE() { return GetToken(TSQLParser.DISABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode ENABLE() { return GetToken(TSQLParser.ENABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSQLParser.TRIGGER, 0); }
		public AlterTableTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableTriggerContext alterTableTrigger() {
		AlterTableTriggerContext _localctx = new AlterTableTriggerContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_alterTableTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_la = _input.La(1);
			if ( !(_la==ENABLE || _la==DISABLE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 455; Match(TRIGGER);
			State = 456; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterIndexContext : ParserRuleContext {
		public QualifiedNameContext Index;
		public QualifiedNameContext Table;
		public QualifiedNameContext Operation;
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSQLParser.ALL, 0); }
		public AlterIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterIndexContext alterIndex() {
		AlterIndexContext _localctx = new AlterIndexContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_alterIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(ALTER);
			State = 459; Match(INDEX);
			State = 462;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				{
				State = 460; _localctx.Index = qualifiedName();
				}
				break;
			case ALL:
				{
				State = 461; Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 464; Match(ON);
			{
			State = 465; _localctx.Table = qualifiedName();
			}
			{
			State = 466; _localctx.Operation = qualifiedName();
			}
			State = 468;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 467; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionSchemeContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode USED() { return GetToken(TSQLParser.USED, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSQLParser.SCHEME, 0); }
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public AlterPartitionSchemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartitionScheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterPartitionScheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterPartitionScheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartitionScheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionSchemeContext alterPartitionScheme() {
		AlterPartitionSchemeContext _localctx = new AlterPartitionSchemeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_alterPartitionScheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470; Match(ALTER);
			State = 471; Match(PARTITION);
			State = 472; Match(SCHEME);
			State = 473; qualifiedName();
			State = 474; Match(NEXT);
			State = 475; Match(USED);
			State = 476; partitionIdent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionFunctionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(TSQLParser.FUNCTION, 0); }
		public ITerminalNode RANGE() { return GetToken(TSQLParser.RANGE, 0); }
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSQLParser.SPLIT, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AlterPartitionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartitionFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterPartitionFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterPartitionFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartitionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionFunctionContext alterPartitionFunction() {
		AlterPartitionFunctionContext _localctx = new AlterPartitionFunctionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_alterPartitionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478; Match(ALTER);
			State = 479; Match(PARTITION);
			State = 480; Match(FUNCTION);
			State = 481; functionName();
			State = 482; Match(LPAREN);
			State = 483; Match(RPAREN);
			State = 496;
			switch (_input.La(1)) {
			case MERGE:
				{
				State = 484; Match(MERGE);
				State = 485; Match(RANGE);
				State = 486; Match(LPAREN);
				State = 487; variable();
				State = 488; Match(RPAREN);
				}
				break;
			case SPLIT:
				{
				State = 490; Match(SPLIT);
				State = 491; Match(RANGE);
				State = 492; Match(LPAREN);
				State = 493; variable();
				State = 494; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicOptionListContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public BasicOptionContext[] basicOption() {
			return GetRuleContexts<BasicOptionContext>();
		}
		public BasicOptionContext basicOption(int i) {
			return GetRuleContext<BasicOptionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public BasicOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicOptionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterBasicOptionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitBasicOptionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicOptionListContext basicOptionList() {
		BasicOptionListContext _localctx = new BasicOptionListContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_basicOptionList);
		int _la;
		try {
			State = 512;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 498; Match(WITH);
				State = 499; Match(LPAREN);
				State = 500; basicOption();
				State = 505;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 501; Match(COMMA);
					State = 502; basicOption();
					}
					}
					State = 507;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 508; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510; Match(WITH);
				State = 511; basicOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicOptionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public BasicOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterBasicOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitBasicOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicOptionContext basicOption() {
		BasicOptionContext _localctx = new BasicOptionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_basicOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514; Match(Identifier);
			State = 517;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 515; Match(EQUALS);
				State = 516;
				_la = _input.La(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public TableDeclarationOptionsContext tableDeclarationOptions() {
			return GetRuleContext<TableDeclarationOptionsContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ColumnDefinitionListContext columnDefinitionList() {
			return GetRuleContext<ColumnDefinitionListContext>(0);
		}
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; Match(CREATE);
			State = 520; Match(TABLE);
			State = 523;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 521; qualifiedName();
				}
				break;

			case 2:
				{
				State = 522; tempTable();
				}
				break;
			}
			State = 525; Match(LPAREN);
			State = 526; columnDefinitionList();
			State = 529;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 527; Match(COMMA);
				State = 528; tableDeclarationOptions();
				}
				break;
			}
			State = 532;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 531; Match(COMMA);
				}
			}

			State = 534; Match(RPAREN);
			State = 537;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 535; Match(ON);
				State = 536; partitionIdent();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_dropIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539; Match(DROP);
			State = 540; Match(INDEX);
			State = 541; qualifiedName();
			State = 547;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 542; Match(ON);
				State = 543; tableTarget();
				State = 545;
				switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					State = 544; basicOptionList();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public CreateIndexPartitionContext createIndexPartition() {
			return GetRuleContext<CreateIndexPartitionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public CreateIndexIncludeListContext createIndexIncludeList() {
			return GetRuleContext<CreateIndexIncludeListContext>(0);
		}
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public TempIndexContext tempIndex() {
			return GetRuleContext<TempIndexContext>(0);
		}
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_createIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; Match(CREATE);
			State = 551;
			_la = _input.La(1);
			if (_la==UNIQUE) {
				{
				State = 550; Match(UNIQUE);
				}
			}

			State = 554;
			_la = _input.La(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 553; clusterType();
				}
			}

			State = 556; Match(INDEX);
			State = 559;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				{
				State = 557; qualifiedName();
				}
				break;
			case HASH:
				{
				State = 558; tempIndex();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 561; Match(ON);
			State = 562; tableTarget();
			State = 563; Match(LPAREN);
			State = 564; orderedIndexColumnList();
			State = 565; Match(RPAREN);
			State = 567;
			_la = _input.La(1);
			if (_la==INCLUDE) {
				{
				State = 566; createIndexIncludeList();
				}
			}

			State = 570;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 569; whereClause();
				}
			}

			State = 573;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 572; basicOptionList();
				}
				break;
			}
			State = 576;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 575; createIndexPartition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexIncludeListContext : ParserRuleContext {
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSQLParser.INCLUDE, 0); }
		public CreateIndexIncludeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexIncludeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndexIncludeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndexIncludeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexIncludeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexIncludeListContext createIndexIncludeList() {
		CreateIndexIncludeListContext _localctx = new CreateIndexIncludeListContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_createIndexIncludeList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 578; Match(INCLUDE);
			State = 579; Match(LPAREN);
			State = 580; columnList();
			State = 581; Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexPartitionContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public CreateIndexPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndexPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndexPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexPartitionContext createIndexPartition() {
		CreateIndexPartitionContext _localctx = new CreateIndexPartitionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_createIndexPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; Match(ON);
			State = 593;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 584; qualifiedName();
				State = 585; Match(LPAREN);
				State = 586; columnList();
				State = 587; Match(RPAREN);
				}
				break;

			case 2:
				{
				State = 589; Match(LBRACKET);
				State = 590; Match(PRIMARY);
				State = 591; Match(RBRACKET);
				}
				break;

			case 3:
				{
				State = 592; Match(PRIMARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedIndexColumnListContext : ParserRuleContext {
		public OrderedIndexColumnContext orderedIndexColumn(int i) {
			return GetRuleContext<OrderedIndexColumnContext>(i);
		}
		public OrderedIndexColumnContext[] orderedIndexColumn() {
			return GetRuleContexts<OrderedIndexColumnContext>();
		}
		public OrderedIndexColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedIndexColumnList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderedIndexColumnList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderedIndexColumnList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedIndexColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedIndexColumnListContext orderedIndexColumnList() {
		OrderedIndexColumnListContext _localctx = new OrderedIndexColumnListContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_orderedIndexColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595; orderedIndexColumn();
			State = 600;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 596; Match(COMMA);
				State = 597; orderedIndexColumn();
				}
				}
				State = 602;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedIndexColumnContext : ParserRuleContext {
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public OrderedIndexColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedIndexColumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderedIndexColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderedIndexColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedIndexColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedIndexColumnContext orderedIndexColumn() {
		OrderedIndexColumnContext _localctx = new OrderedIndexColumnContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_orderedIndexColumn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603; columnName();
			State = 605;
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 604;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateStatisticsContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public CreateStatisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createStatistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateStatistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateStatistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateStatistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateStatisticsContext createStatistics() {
		CreateStatisticsContext _localctx = new CreateStatisticsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_createStatistics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607; Match(CREATE);
			State = 608; Match(STATISTICS);
			State = 609; qualifiedName();
			State = 610; Match(ON);
			State = 611; tableTarget();
			State = 612; Match(LPAREN);
			State = 613; qualifiedColumnNameList();
			State = 614; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616; Match(DROP);
			State = 617; Match(PROCEDURE);
			State = 618; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		public ProcedureOptionsContext procedureOptions() {
			return GetRuleContext<ProcedureOptionsContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public ProcedureBodyContext procedureBody() {
			return GetRuleContext<ProcedureBodyContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ProcedureParametersContext procedureParameters() {
			return GetRuleContext<ProcedureParametersContext>(0);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_createProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620; Match(CREATE);
			State = 621; Match(PROCEDURE);
			State = 622; qualifiedName();
			State = 624;
			_la = _input.La(1);
			if (_la==LPAREN || _la==AT) {
				{
				State = 623; procedureParameters();
				}
			}

			State = 627;
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 626; procedureOptions();
				}
			}

			State = 629; Match(AS);
			State = 630; procedureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode TRUNCATE() { return GetToken(TSQLParser.TRUNCATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTruncateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTruncateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableContext truncateTable() {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_truncateTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; Match(TRUNCATE);
			State = 633; Match(TABLE);
			State = 634; tableTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObscureCommandsContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObscureCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obscureCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterObscureCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitObscureCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObscureCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObscureCommandsContext obscureCommands() {
		ObscureCommandsContext _localctx = new ObscureCommandsContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_obscureCommands);
		int _la;
		try {
			State = 650;
			switch (_input.La(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 636; Match(T__10);
				State = 637; Match(Identifier);
				State = 644;
				switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					State = 638; expression();
					}
					break;

				case 2:
					{
					State = 639; Match(LPAREN);
					State = 641;
					_la = _input.La(1);
					if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
						{
						State = 640; argumentList();
						}
					}

					State = 643; Match(RPAREN);
					}
					break;
				}
				State = 647;
				switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					State = 646; basicOptionList();
					}
					break;
				}
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 649; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateListContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PredicateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPredicateList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPredicateList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateListContext predicateList() {
		PredicateListContext _localctx = new PredicateListContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_predicateList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public SubSelectExpressionContext subSelectExpression() {
			return GetRuleContext<SubSelectExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ExistsExpressionContext existsExpression() {
			return GetRuleContext<ExistsExpressionContext>(0);
		}
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public CountExpressionContext countExpression() {
			return GetRuleContext<CountExpressionContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ConvertExpressionContext convertExpression() {
			return GetRuleContext<ConvertExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_primary);
		try {
			State = 674;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 654; literalValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 655; variable();
				State = 657;
				switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					State = 656; collate();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 659; convertExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 660; functionCall();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 661; castExpression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 662; countExpression();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 663; existsExpression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 664; caseExpression();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 665; Match(LPAREN);
				State = 666; expression();
				State = 667; Match(RPAREN);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 669; subSelectExpression();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 670; qualifiedColumnName();
				State = 672;
				switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					State = 671; collate();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_expression);
		try {
			State = 678;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 676; primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 677; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistsExpressionContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(TSQLParser.EXISTS, 0); }
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExistsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExistsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExistsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExistsExpressionContext existsExpression() {
		ExistsExpressionContext _localctx = new ExistsExpressionContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_existsExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 680; Match(NOT);
				}
			}

			State = 683; Match(EXISTS);
			State = 684; Match(LPAREN);
			State = 685; selectStatement();
			State = 686; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CAST() { return GetToken(TSQLParser.CAST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_castExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688; Match(CAST);
			State = 689; Match(LPAREN);
			State = 690; expression();
			State = 691; Match(AS);
			State = 692; type();
			State = 693; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseExpressionContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(TSQLParser.CASE, 0); }
		public CaseWhenContext[] caseWhen() {
			return GetRuleContexts<CaseWhenContext>();
		}
		public CaseWhenContext caseWhen(int i) {
			return GetRuleContext<CaseWhenContext>(i);
		}
		public CaseElseContext caseElse() {
			return GetRuleContext<CaseElseContext>(0);
		}
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCaseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCaseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseExpressionContext caseExpression() {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_caseExpression);
		int _la;
		try {
			State = 718;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 695; Match(CASE);
				State = 697;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 696; caseWhen();
					}
					}
					State = 699;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WHEN );
				State = 702;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 701; caseElse();
					}
				}

				State = 704; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 706; Match(CASE);
				State = 707; expression();
				State = 709;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 708; caseWhen();
					}
					}
					State = 711;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WHEN );
				State = 714;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 713; caseElse();
					}
				}

				State = 716; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountExpressionContext : ParserRuleContext {
		public ITerminalNode COUNT() { return GetToken(TSQLParser.COUNT, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSQLParser.COUNT_BIG, 0); }
		public MinSelectElementContext minSelectElement() {
			return GetRuleContext<MinSelectElementContext>(0);
		}
		public CountExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCountExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCountExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountExpressionContext countExpression() {
		CountExpressionContext _localctx = new CountExpressionContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_countExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			_la = _input.La(1);
			if ( !(_la==COUNT || _la==COUNT_BIG) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 727;
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 721; minSelectElement();
				}
				break;

			case 2:
				{
				State = 722; Match(LPAREN);
				State = 723; Match(DISTINCT);
				State = 724; minSelectElement();
				State = 725; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConvertExpressionContext : ParserRuleContext {
		public IntegerValueContext Style;
		public ITerminalNode CONVERT() { return GetToken(TSQLParser.CONVERT, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConvertExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convertExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConvertExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConvertExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConvertExpressionContext convertExpression() {
		ConvertExpressionContext _localctx = new ConvertExpressionContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_convertExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; Match(CONVERT);
			State = 730; Match(LPAREN);
			State = 731; type();
			State = 732; Match(COMMA);
			State = 733; expression();
			State = 736;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 734; Match(COMMA);
				State = 735; _localctx.Style = integerValue();
				}
			}

			State = 738; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740; conditionalOrExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ITerminalNode OR() { return GetToken(TSQLParser.OR, 0); }
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(_ctx, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 743; conditionalAndExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 753;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 751;
					switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
					case 1:
						{
						_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
						State = 745;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 746; Match(OR);
						State = 747; conditionalAndExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
						State = 748;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 749; Match(T__9);
						State = 750; conditionalAndExpression(0);
						}
						break;
					}
					} 
				}
				State = 755;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 757; inclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 767;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 765;
					switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
					case 1:
						{
						_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
						State = 759;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 760; Match(AND);
						State = 761; inclusiveOrExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
						State = 762;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 763; Match(T__8);
						State = 764; inclusiveOrExpression(0);
						}
						break;
					}
					} 
				}
				State = 769;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode IS() { return GetToken(TSQLParser.IS, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(_ctx, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_inclusiveOrExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 771; exclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 784;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 782;
					switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
					case 1:
						{
						_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
						State = 773;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 774; Match(PIPE);
						State = 775; exclusiveOrExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
						State = 776;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 777; Match(IS);
						State = 779;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 778; Match(NOT);
							}
						}

						State = 781; Match(NULL);
						}
						break;
					}
					} 
				}
				State = 786;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(_ctx, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 788; andExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 795;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,57,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 790;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 791; Match(CARET);
					State = 792; andExpression(0);
					}
					} 
				}
				State = 797;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,57,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(_ctx, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 799; equalityExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 806;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 801;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 802; Match(AMPERSAND);
					State = 803; equalityExpression(0);
					}
					} 
				}
				State = 808;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(_ctx, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 810; relationalExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 823;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 821;
					switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 812;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 813; Match(EQUALS);
						State = 814; relationalExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 815;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 816; Match(EQUAL_EQUAL);
						State = 817; relationalExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 818;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 819; Match(NOT_EQUAL);
						State = 820; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 825;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public LikeTestExpressionContext likeTestExpression() {
			return GetRuleContext<LikeTestExpressionContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(_ctx, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 827; additiveExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 861;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,62,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 859;
					switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 829;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 830; Match(LT);
						State = 831; additiveExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 832;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 833; Match(GT);
						State = 834; additiveExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 835;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 836; Match(LTE);
						State = 837; additiveExpression(0);
						}
						break;

					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 838;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 839; Match(LT);
						State = 840; Match(EQUALS);
						State = 841; additiveExpression(0);
						}
						break;

					case 5:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 842;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 843; Match(GTE);
						State = 844; additiveExpression(0);
						}
						break;

					case 6:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 845;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 846; Match(GT);
						State = 847; Match(EQUALS);
						State = 848; additiveExpression(0);
						}
						break;

					case 7:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 849;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 850; Match(GT_LT);
						State = 851; additiveExpression(0);
						}
						break;

					case 8:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 852;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 853; Match(LIKE);
						State = 854; likeTestExpression();
						}
						break;

					case 9:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 855;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 856; Match(NOT);
						State = 857; Match(LIKE);
						State = 858; likeTestExpression();
						}
						break;
					}
					} 
				}
				State = 863;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,62,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 865; multiplicativeExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 875;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 873;
					switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 867;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 868; Match(PLUS);
						State = 869; multiplicativeExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 870;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 871; Match(MINUS);
						State = 872; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 877;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 879; unaryExpression();
			}
			_ctx.stop = _input.Lt(-1);
			State = 892;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,66,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 890;
					switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 881;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 882; Match(STAR);
						State = 883; unaryExpression();
						}
						break;

					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 884;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 885; Match(SLASH);
						State = 886; unaryExpression();
						}
						break;

					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 887;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 888; Match(PERCENT);
						State = 889; unaryExpression();
						}
						break;
					}
					} 
				}
				State = 894;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,66,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_unaryExpression);
		try {
			State = 900;
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 895; Match(PLUS);
				State = 896; unaryExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 897; Match(MINUS);
				State = 898; unaryExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 899; unaryExpressionNotPlusMinus();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionNotPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 905;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 902; postfixExpression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 903; Match(NOT);
				State = 904; unaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(TSQLParser.BETWEEN, 0); }
		public ExpressionSetContext expressionSet() {
			return GetRuleContext<ExpressionSetContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public LikeTestExpressionContext likeTestExpression() {
			return GetRuleContext<LikeTestExpressionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode IN() { return GetToken(TSQLParser.IN, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(_ctx, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 908; primary();
			}
			_ctx.stop = _input.Lt(-1);
			State = 934;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,72,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 932;
					switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 910;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 911; Match(IN);
						State = 912; expressionSet();
						}
						break;

					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 913;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 914; Match(NOT);
						State = 915; Match(IN);
						State = 916; expressionSet();
						}
						break;

					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 917;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 919;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 918; Match(NOT);
							}
						}

						State = 921; Match(BETWEEN);
						State = 922; expression();
						State = 923; Match(AND);
						State = 924; expression();
						}
						break;

					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 926;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 928;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 927; Match(NOT);
							}
						}

						State = 930; Match(LIKE);
						State = 931; likeTestExpression();
						}
						break;
					}
					} 
				}
				State = 936;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,72,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LikeTestExpressionContext : ParserRuleContext {
		public ITerminalNode ESCAPE() { return GetToken(TSQLParser.ESCAPE, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public LikeTestExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeTestExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterLikeTestExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitLikeTestExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeTestExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeTestExpressionContext likeTestExpression() {
		LikeTestExpressionContext _localctx = new LikeTestExpressionContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_likeTestExpression);
		try {
			State = 943;
			switch (_input.La(1)) {
			case AT:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 937; stringValue();
				State = 940;
				switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					State = 938; Match(ESCAPE);
					State = 939; Match(StringLiteral);
					}
					break;
				}
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 942; functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinSelectElementContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public MinSelectElementContext minSelectElement() {
			return GetRuleContext<MinSelectElementContext>(0);
		}
		public MinSelectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minSelectElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMinSelectElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMinSelectElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinSelectElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinSelectElementContext minSelectElement() {
		MinSelectElementContext _localctx = new MinSelectElementContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_minSelectElement);
		try {
			State = 953;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 945; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 946; qualifiedColumnName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 947; literalValue();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 948; functionCall();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 949; Match(LPAREN);
				State = 950; minSelectElement();
				State = 951; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSetContext : ParserRuleContext {
		public SubSelectExpressionContext subSelectExpression() {
			return GetRuleContext<SubSelectExpressionContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpressionSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpressionSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSetContext expressionSet() {
		ExpressionSetContext _localctx = new ExpressionSetContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_expressionSet);
		int _la;
		try {
			State = 972;
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 955; Match(LPAREN);
				State = 956; expression();
				State = 961;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 957; Match(COMMA);
					State = 958; expression();
					}
					}
					State = 963;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 964; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 966; variable();
				State = 968;
				switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
				case 1:
					{
					State = 967; collate();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 970; functionCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 971; subSelectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseWhenContext : ParserRuleContext {
		public ITerminalNode THEN() { return GetToken(TSQLParser.THEN, 0); }
		public ITerminalNode WHEN() { return GetToken(TSQLParser.WHEN, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public CaseWhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseWhen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCaseWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCaseWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseWhenContext caseWhen() {
		CaseWhenContext _localctx = new CaseWhenContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_caseWhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974; Match(WHEN);
			State = 975; expression();
			State = 976; Match(THEN);
			State = 977; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseElseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCaseElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCaseElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseElseContext caseElse() {
		CaseElseContext _localctx = new CaseElseContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_caseElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979; Match(ELSE);
			State = 980; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubSelectExpressionContext : ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public SubSelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subSelectExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSubSelectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSubSelectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubSelectExpressionContext subSelectExpression() {
		SubSelectExpressionContext _localctx = new SubSelectExpressionContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_subSelectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982; Match(LPAREN);
			State = 983; selectStatement();
			State = 984; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public IdentityTypeContext identityType() {
			return GetRuleContext<IdentityTypeContext>(0);
		}
		public TypeInBracketContext typeInBracket() {
			return GetRuleContext<TypeInBracketContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public CharacterStringTypeContext characterStringType() {
			return GetRuleContext<CharacterStringTypeContext>(0);
		}
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_type);
		try {
			State = 994;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 986; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 987; characterStringType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 988; numericType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 989; identityType();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 990; integerType();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 991; Match(XML);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 992; Match(CURSOR);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 993; typeInBracket();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInBracketContext : ParserRuleContext {
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeInBracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInBracket; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTypeInBracket(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTypeInBracket(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInBracket(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInBracketContext typeInBracket() {
		TypeInBracketContext _localctx = new TypeInBracketContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_typeInBracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996; Match(LBRACKET);
			State = 997; type();
			State = 998; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionInRestContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionInRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionInRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpressionInRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpressionInRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionInRestContext expressionInRest() {
		ExpressionInRestContext _localctx = new ExpressionInRestContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_expressionInRest);
		int _la;
		try {
			State = 1017;
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1000; Match(LPAREN);
				State = 1001; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1002; Match(LPAREN);
				State = 1003; selectStatement();
				State = 1004; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1006; Match(LPAREN);
				State = 1007; expression();
				State = 1012;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1008; Match(COMMA);
					State = 1009; expression();
					}
					}
					State = 1014;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1015; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		public LiteralValueContext literalValue(int i) {
			return GetRuleContext<LiteralValueContext>(i);
		}
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public LiteralValueContext[] literalValue() {
			return GetRuleContexts<LiteralValueContext>();
		}
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode FloatingPointLiteral() { return GetToken(TSQLParser.FloatingPointLiteral, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_literalValue);
		int _la;
		try {
			State = 1034;
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1019; Match(StringLiteral);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1020; integerValue();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1021; Match(FloatingPointLiteral);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1022; Match(NULL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1023; Match(LPAREN);
				State = 1024; literalValue();
				State = 1029;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1025; Match(COMMA);
					State = 1026; literalValue();
					}
					}
					State = 1031;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1032; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_stringValue);
		try {
			State = 1038;
			switch (_input.La(1)) {
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1036; Match(StringLiteral);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1037; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerValueContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(TSQLParser.IntegerLiteral, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public IntegerValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntegerValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntegerValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerValueContext integerValue() {
		IntegerValueContext _localctx = new IntegerValueContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_integerValue);
		int _la;
		try {
			State = 1048;
			switch (_input.La(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1041;
				_la = _input.La(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 1040;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
				}

				State = 1043; Match(IntegerLiteral);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1044; Match(LPAREN);
				State = 1045; integerValue();
				State = 1046; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNamePartContext : ParserRuleContext {
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public QualifiedNamePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNamePart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedNamePart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedNamePart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNamePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNamePartContext qualifiedNamePart() {
		QualifiedNamePartContext _localctx = new QualifiedNamePartContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_qualifiedNamePart);
		int _la;
		try {
			State = 1059;
			switch (_input.La(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1050; Match(LBRACKET);
				State = 1052;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1051; keyword();
					}
					}
					State = 1054;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << READONLY) | (1L << TRY) | (1L << CATCH) | (1L << TRANSACTION) | (1L << COMMIT) | (1L << ROLLBACK) | (1L << RAISE_ERROR) | (1L << PRINT) | (1L << CLUSTERED) | (1L << NONCLUSTERED) | (1L << TABLE) | (1L << PROCEDURE) | (1L << PARTITION) | (1L << INDEX) | (1L << DATABASE) | (1L << CONSTRAINT) | (1L << FOREIGN) | (1L << PRIMARY) | (1L << KEY) | (1L << REFERENCES) | (1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL) | (1L << CURSOR) | (1L << FETCH) | (1L << OPEN) | (1L << CLOSE) | (1L << DEALLOCATE) | (1L << FIRST) | (1L << LAST) | (1L << PRIOR) | (1L << NEXT) | (1L << ABSOLUTE) | (1L << RELATIVE) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << COLLATE) | (1L << COUNT) | (1L << COUNT_BIG) | (1L << DISTINCT) | (1L << UNIQUE) | (1L << MAX) | (1L << TOP) | (1L << WHEN) | (1L << THEN) | (1L << SWITCH) | (1L << OVER) | (1L << INCLUDE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTERSECT - 64)) | (1L << (EXCEPT - 64)) | (1L << (UNION - 64)) | (1L << (ALL - 64)) | (1L << (APPLY - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (WHILE - 64)) | (1L << (GOTO - 64)) | (1L << (CONTINUE - 64)) | (1L << (BREAK - 64)) | (1L << (TRUNCATE - 64)) | (1L << (ADD - 64)) | (1L << (REMOVE - 64)) | (1L << (ALTER - 64)) | (1L << (CREATE - 64)) | (1L << (DROP - 64)) | (1L << (AS - 64)) | (1L << (WITH - 64)) | (1L << (FOR - 64)) | (1L << (REPLICATION - 64)) | (1L << (BEGIN - 64)) | (1L << (END - 64)) | (1L << (EXISTS - 64)) | (1L << (DEFAULT - 64)) | (1L << (VARYING - 64)) | (1L << (SELECT - 64)) | (1L << (UPDATE - 64)) | (1L << (INSERT - 64)) | (1L << (DELETE - 64)) | (1L << (WHERE - 64)) | (1L << (FROM - 64)) | (1L << (JOIN - 64)) | (1L << (DECLARE - 64)) | (1L << (OPTION - 64)) | (1L << (SET - 64)) | (1L << (TO - 64)) | (1L << (ON - 64)) | (1L << (OFF - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (EXECUTE - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (IS - 64)) | (1L << (IN - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (BETWEEN - 64)) | (1L << (RETURN - 64)) | (1L << (OUTPUT - 64)) | (1L << (OUT - 64)) | (1L << (LIKE - 64)) | (1L << (ESCAPE - 64)) | (1L << (OF - 64)) | (1L << (DECIMAL - 64)) | (1L << (NUMERIC - 64)) | (1L << (VARCHAR - 64)) | (1L << (NVARCHAR - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (NCHAR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT - 128)) | (1L << (IDENTITY - 128)) | (1L << (LOG - 128)) | (1L << (AND - 128)) | (1L << (OR - 128)) | (1L << (ASC - 128)) | (1L << (DESC - 128)) | (1L << (STATISTICS - 128)) | (1L << (USING - 128)) | (1L << (MERGE - 128)) | (1L << (MATCHED - 128)) | (1L << (TARGET - 128)) | (1L << (SOURCE - 128)) | (1L << (XML - 128)) | (1L << (RAW - 128)) | (1L << (AUTO - 128)) | (1L << (EXPLICIT - 128)) | (1L << (PATH - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (TRIGGER - 128)) | (1L << (WAITFOR - 128)) | (1L << (DELAY - 128)) | (1L << (COMPUTE - 128)) | (1L << (LEVEL - 128)) | (1L << (ISOLATION - 128)) | (1L << (SPLIT - 128)) | (1L << (RANGE - 128)) | (1L << (FUNCTION - 128)) | (1L << (SCHEME - 128)) | (1L << (USED - 128)) | (1L << (OPTIMIZE - 128)) | (1L << (ROWCOUNT - 128)))) != 0) );
				State = 1056; Match(RBRACKET);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1058; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public QualifiedNamePartContext[] qualifiedNamePart() {
			return GetRuleContexts<QualifiedNamePartContext>();
		}
		public QualifiedNamePartContext qualifiedNamePart(int i) {
			return GetRuleContext<QualifiedNamePartContext>(i);
		}
		public EscapedKeywordContext escapedKeyword() {
			return GetRuleContext<EscapedKeywordContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_qualifiedName);
		int _la;
		try {
			int _alt;
			State = 1074;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1061; qualifiedNamePart();
				State = 1070;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1063;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 1062; Match(DOT);
							}
							}
							State = 1065;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==DOT );
						State = 1067; qualifiedNamePart();
						}
						} 
					}
					State = 1072;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1073; escapedKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1076; qualifiedName();
			State = 1081;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1077; Match(COMMA);
				State = 1078; qualifiedName();
				}
				}
				State = 1083;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempIndexContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode HASH(int i) {
			return GetToken(TSQLParser.HASH, i);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode[] HASH() { return GetTokens(TSQLParser.HASH); }
		public TempIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTempIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTempIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempIndexContext tempIndex() {
		TempIndexContext _localctx = new TempIndexContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_tempIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1085;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1084; Match(HASH);
				}
				}
				State = 1087;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==HASH );
			State = 1091;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				{
				State = 1089; qualifiedNamePart();
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
				{
				State = 1090; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempTableContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSQLParser.DOT, 0); }
		public ITerminalNode HASH(int i) {
			return GetToken(TSQLParser.HASH, i);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode[] HASH() { return GetTokens(TSQLParser.HASH); }
		public TempTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTempTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTempTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempTableContext tempTable() {
		TempTableContext _localctx = new TempTableContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_tempTable);
		int _la;
		try {
			State = 1106;
			switch (_input.La(1)) {
			case HASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1094;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1093; Match(HASH);
					}
					}
					State = 1096;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==HASH );
				State = 1100;
				switch (_input.La(1)) {
				case LBRACKET:
				case Identifier:
					{
					State = 1098; qualifiedNamePart();
					}
					break;
				case READONLY:
				case TRY:
				case CATCH:
				case TRANSACTION:
				case COMMIT:
				case ROLLBACK:
				case RAISE_ERROR:
				case PRINT:
				case CLUSTERED:
				case NONCLUSTERED:
				case TABLE:
				case PROCEDURE:
				case PARTITION:
				case INDEX:
				case DATABASE:
				case CONSTRAINT:
				case FOREIGN:
				case PRIMARY:
				case KEY:
				case REFERENCES:
				case LEFT:
				case RIGHT:
				case CROSS:
				case OUTER:
				case INNER:
				case FULL:
				case CURSOR:
				case FETCH:
				case OPEN:
				case CLOSE:
				case DEALLOCATE:
				case FIRST:
				case LAST:
				case PRIOR:
				case NEXT:
				case ABSOLUTE:
				case RELATIVE:
				case CASE:
				case CAST:
				case CONVERT:
				case COLLATE:
				case COUNT:
				case COUNT_BIG:
				case DISTINCT:
				case UNIQUE:
				case MAX:
				case TOP:
				case WHEN:
				case THEN:
				case SWITCH:
				case OVER:
				case INCLUDE:
				case INTERSECT:
				case EXCEPT:
				case UNION:
				case ALL:
				case APPLY:
				case IF:
				case ELSE:
				case WHILE:
				case GOTO:
				case CONTINUE:
				case BREAK:
				case TRUNCATE:
				case ADD:
				case REMOVE:
				case ALTER:
				case CREATE:
				case DROP:
				case AS:
				case WITH:
				case FOR:
				case REPLICATION:
				case BEGIN:
				case END:
				case EXISTS:
				case DEFAULT:
				case VARYING:
				case SELECT:
				case UPDATE:
				case INSERT:
				case DELETE:
				case WHERE:
				case FROM:
				case JOIN:
				case DECLARE:
				case OPTION:
				case SET:
				case TO:
				case ON:
				case OFF:
				case GROUP:
				case HAVING:
				case ORDER:
				case BY:
				case EXECUTE:
				case INTO:
				case VALUES:
				case IS:
				case IN:
				case NOT:
				case NULL:
				case BETWEEN:
				case RETURN:
				case OUTPUT:
				case OUT:
				case LIKE:
				case ESCAPE:
				case OF:
				case DECIMAL:
				case NUMERIC:
				case VARCHAR:
				case NVARCHAR:
				case CHAR:
				case CHARACTER:
				case NCHAR:
				case INT:
				case TINYINT:
				case SMALLINT:
				case BIGINT:
				case FLOAT:
				case IDENTITY:
				case LOG:
				case AND:
				case OR:
				case ASC:
				case DESC:
				case STATISTICS:
				case USING:
				case MERGE:
				case MATCHED:
				case TARGET:
				case SOURCE:
				case XML:
				case RAW:
				case AUTO:
				case EXPLICIT:
				case PATH:
				case ENABLE:
				case DISABLE:
				case TRIGGER:
				case WAITFOR:
				case DELAY:
				case COMPUTE:
				case LEVEL:
				case ISOLATION:
				case SPLIT:
				case RANGE:
				case FUNCTION:
				case SCHEME:
				case USED:
				case OPTIMIZE:
				case ROWCOUNT:
					{
					State = 1099; keyword();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1102; qualifiedName();
				State = 1103; Match(DOT);
				State = 1104; tempTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode[] AT() { return GetTokens(TSQLParser.AT); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode AT(int i) {
			return GetToken(TSQLParser.AT, i);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_variable);
		int _la;
		try {
			State = 1120;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1109;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1108; Match(AT);
					}
					}
					State = 1111;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==AT );
				State = 1113; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1115;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1114; Match(AT);
					}
					}
					State = 1117;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==AT );
				State = 1119; keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureBodyContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ProcedureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureBodyContext procedureBody() {
		ProcedureBodyContext _localctx = new ProcedureBodyContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_procedureBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1122; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParametersContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		public ProcedureParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParametersContext procedureParameters() {
		ProcedureParametersContext _localctx = new ProcedureParametersContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_procedureParameters);
		int _la;
		try {
			State = 1144;
			switch (_input.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1124; Match(LPAREN);
				State = 1133;
				_la = _input.La(1);
				if (_la==AT) {
					{
					State = 1125; procedureParameter();
					State = 1130;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1126; Match(COMMA);
						State = 1127; procedureParameter();
						}
						}
						State = 1132;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1135; Match(RPAREN);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1136; procedureParameter();
				State = 1141;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1137; Match(COMMA);
					State = 1138; procedureParameter();
					}
					}
					State = 1143;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ITerminalNode READONLY() { return GetToken(TSQLParser.READONLY, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ProcedureParameterNameContext procedureParameterName() {
			return GetRuleContext<ProcedureParameterNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ProcedureParameterInitialValueContext procedureParameterInitialValue() {
			return GetRuleContext<ProcedureParameterInitialValueContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146; procedureParameterName();
			State = 1148;
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1147; Match(AS);
				}
			}

			State = 1150; type();
			{
			State = 1152;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 1151; Match(NOT);
				}
			}

			State = 1155;
			_la = _input.La(1);
			if (_la==NULL) {
				{
				State = 1154; Match(NULL);
				}
			}

			}
			State = 1158;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 1157; procedureParameterInitialValue();
				}
			}

			State = 1161;
			_la = _input.La(1);
			if (_la==READONLY) {
				{
				State = 1160; Match(READONLY);
				}
			}

			State = 1164;
			_la = _input.La(1);
			if (_la==OUTPUT || _la==OUT) {
				{
				State = 1163;
				_la = _input.La(1);
				if ( !(_la==OUTPUT || _la==OUT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterInitialValueContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ProcedureParameterInitialValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterInitialValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameterInitialValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameterInitialValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameterInitialValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterInitialValueContext procedureParameterInitialValue() {
		ProcedureParameterInitialValueContext _localctx = new ProcedureParameterInitialValueContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_procedureParameterInitialValue);
		try {
			State = 1170;
			switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1166; Match(EQUALS);
				State = 1167; literalValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1168; Match(EQUALS);
				State = 1169; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterNameContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ProcedureParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameterName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameterName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterNameContext procedureParameterName() {
		ProcedureParameterNameContext _localctx = new ProcedureParameterNameContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_procedureParameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1172; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureOptionsContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(TSQLParser.Identifier); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode Identifier(int i) {
			return GetToken(TSQLParser.Identifier, i);
		}
		public ProcedureOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureOptionsContext procedureOptions() {
		ProcedureOptionsContext _localctx = new ProcedureOptionsContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_procedureOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1174; Match(WITH);
			State = 1175; Match(Identifier);
			State = 1180;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1176; Match(COMMA);
				State = 1177; Match(Identifier);
				}
				}
				State = 1182;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183; statement();
			State = 1187;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,113,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1184; statement();
					}
					} 
				}
				State = 1189;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,113,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(TSQLParser.SEMICOLON, 0); }
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public DdlContext ddl() {
			return GetRuleContext<DdlContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_statement);
		try {
			State = 1203;
			switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1190; Match(BEGIN);
				State = 1191; statementList();
				State = 1192; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1194; ddl();
				State = 1196;
				switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
				case 1:
					{
					State = 1195; Match(SEMICOLON);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1198; dml();
				State = 1200;
				switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					State = 1199; Match(SEMICOLON);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1202; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlContext : ParserRuleContext {
		public ObscureCommandsContext obscureCommands() {
			return GetRuleContext<ObscureCommandsContext>(0);
		}
		public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		public AlterIndexContext alterIndex() {
			return GetRuleContext<AlterIndexContext>(0);
		}
		public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		public CreateStatisticsContext createStatistics() {
			return GetRuleContext<CreateStatisticsContext>(0);
		}
		public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		public TruncateTableContext truncateTable() {
			return GetRuleContext<TruncateTableContext>(0);
		}
		public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		public AlterPartitionFunctionContext alterPartitionFunction() {
			return GetRuleContext<AlterPartitionFunctionContext>(0);
		}
		public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		public AlterPartitionSchemeContext alterPartitionScheme() {
			return GetRuleContext<AlterPartitionSchemeContext>(0);
		}
		public DdlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDdl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDdl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdlContext ddl() {
		DdlContext _localctx = new DdlContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_ddl);
		try {
			State = 1218;
			switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1205; createProcedure();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1206; createTable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1207; createIndex();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1208; createStatistics();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1209; dropProcedure();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1210; dropTable();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1211; dropIndex();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1212; truncateTable();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1213; alterTable();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1214; alterIndex();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1215; alterPartitionFunction();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1216; alterPartitionScheme();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1217; obscureCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlContext : ParserRuleContext {
		public ReturnExpressionContext returnExpression() {
			return GetRuleContext<ReturnExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(TSQLParser.BREAK, 0); }
		public DeclareStatementContext declareStatement() {
			return GetRuleContext<DeclareStatementContext>(0);
		}
		public MergeStatementContext mergeStatement() {
			return GetRuleContext<MergeStatementContext>(0);
		}
		public TryBlockContext tryBlock() {
			return GetRuleContext<TryBlockContext>(0);
		}
		public TransactionBlockContext transactionBlock() {
			return GetRuleContext<TransactionBlockContext>(0);
		}
		public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		public CommitTransactionContext commitTransaction() {
			return GetRuleContext<CommitTransactionContext>(0);
		}
		public PrintExpressionContext printExpression() {
			return GetRuleContext<PrintExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TSQLParser.COLON, 0); }
		public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public ComputeStatementContext computeStatement() {
			return GetRuleContext<ComputeStatementContext>(0);
		}
		public RollbackTransactionContext rollbackTransaction() {
			return GetRuleContext<RollbackTransactionContext>(0);
		}
		public CommonTableExpressionContext commonTableExpression() {
			return GetRuleContext<CommonTableExpressionContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WaitForContext waitFor() {
			return GetRuleContext<WaitForContext>(0);
		}
		public ITerminalNode CONTINUE() { return GetToken(TSQLParser.CONTINUE, 0); }
		public CursorStatementContext cursorStatement() {
			return GetRuleContext<CursorStatementContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(TSQLParser.GOTO, 0); }
		public RaiseErrorContext raiseError() {
			return GetRuleContext<RaiseErrorContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDml(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlContext dml() {
		DmlContext _localctx = new DmlContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_dml);
		try {
			State = 1255;
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1220; selectStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1221; insertStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1222; deleteStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1223; updateStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1224; executeStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1225; mergeStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1226; computeStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1227; setStatement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1228; declareStatement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1229; tryBlock();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1230; transactionBlock();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1231; raiseError();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1232; waitFor();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1233; commonTableExpression();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1234; cursorStatement();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1235; printExpression();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1236; ifStatement();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1237; whileStatement();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1238; Match(BREAK);
				State = 1240;
				switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					State = 1239; qualifiedName();
					}
					break;
				}
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1242; Match(CONTINUE);
				State = 1244;
				switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					State = 1243; qualifiedName();
					}
					break;
				}
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1246; commitTransaction();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1247; Match(GOTO);
				State = 1249;
				switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					State = 1248; qualifiedName();
					}
					break;
				}
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1251; rollbackTransaction();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1252; returnExpression();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1253; Match(Identifier);
				State = 1254; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommitTransactionContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSQLParser.COMMIT, 0); }
		public CommitTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commitTransaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCommitTransaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCommitTransaction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommitTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommitTransactionContext commitTransaction() {
		CommitTransactionContext _localctx = new CommitTransactionContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_commitTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257; Match(COMMIT);
			State = 1259;
			_la = _input.La(1);
			if (_la==TRANSACTION) {
				{
				State = 1258; Match(TRANSACTION);
				}
			}

			State = 1262;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1261; qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackTransactionContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSQLParser.ROLLBACK, 0); }
		public RollbackTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackTransaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterRollbackTransaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitRollbackTransaction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackTransactionContext rollbackTransaction() {
		RollbackTransactionContext _localctx = new RollbackTransactionContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_rollbackTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1264; Match(ROLLBACK);
			State = 1266;
			_la = _input.La(1);
			if (_la==TRANSACTION) {
				{
				State = 1265; Match(TRANSACTION);
				}
			}

			State = 1269;
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				State = 1268; qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintExpressionContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(TSQLParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPrintExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPrintExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintExpressionContext printExpression() {
		PrintExpressionContext _localctx = new PrintExpressionContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_printExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271; Match(PRINT);
			State = 1272; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExpressionContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TSQLParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterReturnExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitReturnExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExpressionContext returnExpression() {
		ReturnExpressionContext _localctx = new ReturnExpressionContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_returnExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1274; Match(RETURN);
			State = 1276;
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				State = 1275; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(TSQLParser.IF, 0); }
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278; Match(IF);
			State = 1279; predicateList();
			State = 1280; statement();
			State = 1283;
			switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				State = 1281; Match(ELSE);
				State = 1282; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(TSQLParser.WHILE, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1285; Match(WHILE);
			State = 1286; predicateList();
			State = 1287; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitForContext : ParserRuleContext {
		public ITerminalNode WAITFOR() { return GetToken(TSQLParser.WAITFOR, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public ITerminalNode DELAY() { return GetToken(TSQLParser.DELAY, 0); }
		public WaitForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitFor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWaitFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWaitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitForContext waitFor() {
		WaitForContext _localctx = new WaitForContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_waitFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289; Match(WAITFOR);
			State = 1290; Match(DELAY);
			State = 1291; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseErrorContext : ParserRuleContext {
		public ITerminalNode LOG() { return GetToken(TSQLParser.LOG, 0); }
		public ITerminalNode RAISE_ERROR() { return GetToken(TSQLParser.RAISE_ERROR, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public RaiseErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseError; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterRaiseError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitRaiseError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseErrorContext raiseError() {
		RaiseErrorContext _localctx = new RaiseErrorContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_raiseError);
		try {
			int _alt;
			State = 1311;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1293; Match(RAISE_ERROR);
				State = 1294; Match(LPAREN);
				State = 1295; argumentList();
				State = 1296; Match(RPAREN);
				State = 1299;
				switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					State = 1297; Match(WITH);
					State = 1298; Match(LOG);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1301; Match(RAISE_ERROR);
				State = 1303;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1302; argument();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1305;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,129,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1309;
				switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					State = 1307; Match(WITH);
					State = 1308; Match(LOG);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryBlockContext : ParserRuleContext {
		public ITerminalNode[] TRY() { return GetTokens(TSQLParser.TRY); }
		public ITerminalNode END(int i) {
			return GetToken(TSQLParser.END, i);
		}
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public ITerminalNode[] CATCH() { return GetTokens(TSQLParser.CATCH); }
		public ITerminalNode[] BEGIN() { return GetTokens(TSQLParser.BEGIN); }
		public ITerminalNode[] END() { return GetTokens(TSQLParser.END); }
		public ITerminalNode CATCH(int i) {
			return GetToken(TSQLParser.CATCH, i);
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public ITerminalNode BEGIN(int i) {
			return GetToken(TSQLParser.BEGIN, i);
		}
		public ITerminalNode TRY(int i) {
			return GetToken(TSQLParser.TRY, i);
		}
		public TryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTryBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTryBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryBlockContext tryBlock() {
		TryBlockContext _localctx = new TryBlockContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_tryBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1313; Match(BEGIN);
			State = 1314; Match(TRY);
			State = 1315; statementList();
			State = 1316; Match(END);
			State = 1317; Match(TRY);
			State = 1318; Match(BEGIN);
			State = 1319; Match(CATCH);
			State = 1320; statementList();
			State = 1321; Match(END);
			State = 1322; Match(CATCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionBlockContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public TransactionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTransactionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTransactionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionBlockContext transactionBlock() {
		TransactionBlockContext _localctx = new TransactionBlockContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_transactionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324; Match(BEGIN);
			State = 1325; Match(TRANSACTION);
			State = 1327;
			switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				State = 1326; qualifiedName();
				}
				break;
			}
			State = 1329; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteTopContext : ParserRuleContext {
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DeleteTopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteTop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteTop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteTop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteTopContext deleteTop() {
		DeleteTopContext _localctx = new DeleteTopContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_deleteTop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1331; Match(TOP);
			State = 1338;
			switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				State = 1332; integerValue();
				}
				break;

			case 2:
				{
				State = 1333; variable();
				}
				break;

			case 3:
				{
				State = 1334; Match(LPAREN);
				State = 1335; variable();
				State = 1336; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		public DeleteFromClauseContext[] deleteFromClause() {
			return GetRuleContexts<DeleteFromClauseContext>();
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public DeleteFromClauseLooseContext[] deleteFromClauseLoose() {
			return GetRuleContexts<DeleteFromClauseLooseContext>();
		}
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public DeleteFromClauseContext deleteFromClause(int i) {
			return GetRuleContext<DeleteFromClauseContext>(i);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public DeleteOutputContext deleteOutput() {
			return GetRuleContext<DeleteOutputContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public DeleteFromClauseLooseContext deleteFromClauseLoose(int i) {
			return GetRuleContext<DeleteFromClauseLooseContext>(i);
		}
		public DeleteTopContext deleteTop() {
			return GetRuleContext<DeleteTopContext>(0);
		}
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			State = 1389;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1340; Match(DELETE);
				State = 1342;
				_la = _input.La(1);
				if (_la==TOP) {
					{
					State = 1341; deleteTop();
					}
				}

				State = 1345;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1344; deleteFromClause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1347;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,135,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1350;
				_la = _input.La(1);
				if (_la==OUTPUT) {
					{
					State = 1349; deleteOutput();
					}
				}

				State = 1355;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1352; joinOrApply();
					}
					}
					State = 1357;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1359;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1358; whereClause();
					}
				}

				State = 1362;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1361; dmlOptions();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1364; Match(DELETE);
				State = 1366;
				_la = _input.La(1);
				if (_la==TOP) {
					{
					State = 1365; deleteTop();
					}
				}

				State = 1368; tableTarget();
				State = 1370;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1369; deleteFromClauseLoose();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1372;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,141,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1375;
				_la = _input.La(1);
				if (_la==OUTPUT) {
					{
					State = 1374; deleteOutput();
					}
				}

				State = 1380;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1377; joinOrApply();
					}
					}
					State = 1382;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1384;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1383; whereClause();
					}
				}

				State = 1387;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1386; dmlOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFromClauseContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public DeleteFromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFromClauseContext deleteFromClause() {
		DeleteFromClauseContext _localctx = new DeleteFromClauseContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_deleteFromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1392;
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 1391; Match(FROM);
				}
			}

			State = 1394; tableTargetWithOptions();
			State = 1399;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1395; Match(COMMA);
				State = 1396; tableSourceWithOptions();
				}
				}
				State = 1401;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFromClauseLooseContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public DeleteFromClauseLooseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFromClauseLoose; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteFromClauseLoose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteFromClauseLoose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteFromClauseLoose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFromClauseLooseContext deleteFromClauseLoose() {
		DeleteFromClauseLooseContext _localctx = new DeleteFromClauseLooseContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_deleteFromClauseLoose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1403;
			switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				State = 1402; Match(FROM);
				}
				break;
			}
			State = 1405; tableSourceWithOptions();
			State = 1410;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1406; Match(COMMA);
				State = 1407; tableSourceWithOptions();
				}
				}
				State = 1412;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteOutputContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public DeleteOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteOutputContext deleteOutput() {
		DeleteOutputContext _localctx = new DeleteOutputContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_deleteOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413; Match(OUTPUT);
			State = 1414; qualifiedColumnNameList();
			State = 1415; Match(INTO);
			State = 1416; tableTargetWithOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public CommonTableExpressionAtomContext commonTableExpressionAtom(int i) {
			return GetRuleContext<CommonTableExpressionAtomContext>(i);
		}
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public CommonTableExpressionAtomContext[] commonTableExpressionAtom() {
			return GetRuleContexts<CommonTableExpressionAtomContext>();
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCommonTableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCommonTableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionContext commonTableExpression() {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_commonTableExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418; Match(WITH);
			State = 1419; commonTableExpressionAtom();
			State = 1424;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1420; Match(COMMA);
				State = 1421; commonTableExpressionAtom();
				}
				}
				State = 1426;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1427; dml();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionAtomContext : ParserRuleContext {
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(TSQLParser.RPAREN, i);
		}
		public ITerminalNode[] LPAREN() { return GetTokens(TSQLParser.LPAREN); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(TSQLParser.RPAREN); }
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(TSQLParser.LPAREN, i);
		}
		public CommonTableExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpressionAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCommonTableExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCommonTableExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionAtomContext commonTableExpressionAtom() {
		CommonTableExpressionAtomContext _localctx = new CommonTableExpressionAtomContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_commonTableExpressionAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1429; qualifiedName();
			State = 1434;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1430; Match(LPAREN);
				State = 1431; columnList();
				State = 1432; Match(RPAREN);
				}
			}

			State = 1436; Match(AS);
			State = 1437; Match(LPAREN);
			State = 1438; dml();
			State = 1439; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public InsertDataSourceContext insertDataSource() {
			return GetRuleContext<InsertDataSourceContext>(0);
		}
		public InsertPreambleContext insertPreamble() {
			return GetRuleContext<InsertPreambleContext>(0);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public InsertOutputClauseContext insertOutputClause() {
			return GetRuleContext<InsertOutputClauseContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441; insertPreamble();
			State = 1443;
			switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				State = 1442; insertOutputClause();
				}
				break;
			}
			State = 1445; insertDataSource();
			State = 1447;
			_la = _input.La(1);
			if (_la==OPTION) {
				{
				State = 1446; dmlOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertPreambleContext : ParserRuleContext {
		public TableTargetOptionsContext tableTargetOptions() {
			return GetRuleContext<TableTargetOptionsContext>(0);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public InsertPreambleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertPreamble; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertPreamble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertPreamble(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertPreamble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertPreambleContext insertPreamble() {
		InsertPreambleContext _localctx = new InsertPreambleContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_insertPreamble);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449; Match(INSERT);
			State = 1451;
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 1450; Match(INTO);
				}
			}

			State = 1453; tableTarget();
			State = 1455;
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				State = 1454; tableTargetOptions();
				}
				break;
			}
			State = 1461;
			switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				State = 1457; Match(LPAREN);
				State = 1458; qualifiedNameList();
				State = 1459; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertOutputClauseContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public InsertOutputClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertOutputClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertOutputClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertOutputClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertOutputClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertOutputClauseContext insertOutputClause() {
		InsertOutputClauseContext _localctx = new InsertOutputClauseContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_insertOutputClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1463; Match(OUTPUT);
			State = 1464; selectList();
			State = 1473;
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1465; Match(INTO);
				State = 1466; tableTarget();
				State = 1471;
				switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					State = 1467; Match(LPAREN);
					State = 1468; qualifiedColumnNameList();
					State = 1469; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertDataSourceContext : ParserRuleContext {
		public InsertValueListContext insertValueList(int i) {
			return GetRuleContext<InsertValueListContext>(i);
		}
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public InsertValueListContext[] insertValueList() {
			return GetRuleContexts<InsertValueListContext>();
		}
		public InsertDataSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertDataSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertDataSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertDataSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertDataSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertDataSourceContext insertDataSource() {
		InsertDataSourceContext _localctx = new InsertDataSourceContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_insertDataSource);
		int _la;
		try {
			State = 1488;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1475; Match(VALUES);
				State = 1476; insertValueList();
				State = 1481;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1477; Match(COMMA);
					State = 1478; insertValueList();
					}
					}
					State = 1483;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1484; Match(DEFAULT);
				State = 1485; Match(VALUES);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1486; selectStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1487; tableSource();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValueListContext : ParserRuleContext {
		public InsertValueContext[] insertValue() {
			return GetRuleContexts<InsertValueContext>();
		}
		public InsertValueContext insertValue(int i) {
			return GetRuleContext<InsertValueContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public InsertValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValueListContext insertValueList() {
		InsertValueListContext _localctx = new InsertValueListContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_insertValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490; Match(LPAREN);
			State = 1491; insertValue();
			State = 1496;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1492; Match(COMMA);
				State = 1493; insertValue();
				}
				}
				State = 1498;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1499; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InsertValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValueContext insertValue() {
		InsertValueContext _localctx = new InsertValueContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_insertValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1501; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStatementContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(TSQLParser.DECLARE, 0); }
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode OF() { return GetToken(TSQLParser.OF, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSQLParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSQLParser.FOR, i);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeclareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeclareStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeclareStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStatementContext declareStatement() {
		DeclareStatementContext _localctx = new DeclareStatementContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_declareStatement);
		int _la;
		try {
			State = 1526;
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1503; Match(DECLARE);
				State = 1504; variableDeclaration();
				State = 1509;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1505; Match(COMMA);
					State = 1506; variableDeclaration();
					}
					}
					State = 1511;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1512; Match(DECLARE);
				State = 1513; qualifiedName();
				State = 1514; Match(CURSOR);
				State = 1516;
				_la = _input.La(1);
				if (_la==Identifier) {
					{
					State = 1515; Match(Identifier);
					}
				}

				State = 1518; Match(FOR);
				State = 1519; selectStatement();
				State = 1524;
				_la = _input.La(1);
				if (_la==FOR) {
					{
					State = 1520; Match(FOR);
					State = 1521; Match(UPDATE);
					State = 1522; Match(OF);
					State = 1523; tableTarget();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public TableDeclarationOptionsContext tableDeclarationOptions() {
			return GetRuleContext<TableDeclarationOptionsContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ColumnDefinitionListContext columnDefinitionList() {
			return GetRuleContext<ColumnDefinitionListContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1528; variable();
			State = 1548;
			switch (_input.La(1)) {
			case CURSOR:
			case AS:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case XML:
			case LBRACKET:
			case Identifier:
				{
				State = 1530;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 1529; Match(AS);
					}
				}

				State = 1532; type();
				State = 1534;
				_la = _input.La(1);
				if (_la==EQUALS) {
					{
					State = 1533; variableDeclarationAssignment();
					}
				}

				}
				break;
			case TABLE:
				{
				State = 1536; Match(TABLE);
				State = 1537; Match(LPAREN);
				State = 1538; columnDefinitionList();
				State = 1541;
				switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
				case 1:
					{
					State = 1539; Match(COMMA);
					State = 1540; tableDeclarationOptions();
					}
					break;
				}
				State = 1544;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1543; Match(COMMA);
					}
				}

				State = 1546; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
		VariableDeclarationAssignmentContext _localctx = new VariableDeclarationAssignmentContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_variableDeclarationAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1550; Match(EQUALS);
			State = 1551; expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnListContext : ParserRuleContext {
		public ColumnNameContext[] columnName() {
			return GetRuleContexts<ColumnNameContext>();
		}
		public ColumnNameContext columnName(int i) {
			return GetRuleContext<ColumnNameContext>(i);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnListContext columnList() {
		ColumnListContext _localctx = new ColumnListContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_columnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553; columnName();
			State = 1558;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1554; Match(COMMA);
				State = 1555; columnName();
				}
				}
				State = 1560;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionListContext : ParserRuleContext {
		public ColumnDefinitionContext[] columnDefinition() {
			return GetRuleContexts<ColumnDefinitionContext>();
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return GetRuleContext<ColumnDefinitionContext>(i);
		}
		public ColumnDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinitionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnDefinitionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnDefinitionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionListContext columnDefinitionList() {
		ColumnDefinitionListContext _localctx = new ColumnDefinitionListContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_columnDefinitionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1561; columnDefinition();
			State = 1566;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,173,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1562; Match(COMMA);
					State = 1563; columnDefinition();
					}
					} 
				}
				State = 1568;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,173,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public IdentitySpecContext identitySpec() {
			return GetRuleContext<IdentitySpecContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_columnDefinition);
		int _la;
		try {
			State = 1616;
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1569; columnName();
				State = 1570; type();
				State = 1576;
				_la = _input.La(1);
				if (_la==PRIMARY) {
					{
					State = 1571; Match(PRIMARY);
					State = 1572; Match(KEY);
					State = 1574;
					_la = _input.La(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						State = 1573; clusterType();
						}
					}

					}
				}

				State = 1579;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 1578; Match(NOT);
					}
				}

				State = 1582;
				_la = _input.La(1);
				if (_la==NULL) {
					{
					State = 1581; Match(NULL);
					}
				}

				State = 1589;
				_la = _input.La(1);
				if (_la==DEFAULT) {
					{
					State = 1584; Match(DEFAULT);
					State = 1587;
					switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
					case 1:
						{
						State = 1585; literalValue();
						}
						break;

					case 2:
						{
						State = 1586; functionCall();
						}
						break;
					}
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1591; columnName();
				State = 1592; integerType();
				State = 1598;
				_la = _input.La(1);
				if (_la==PRIMARY) {
					{
					State = 1593; Match(PRIMARY);
					State = 1594; Match(KEY);
					State = 1596;
					_la = _input.La(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						State = 1595; clusterType();
						}
					}

					}
				}

				State = 1601;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 1600; Match(NOT);
					}
				}

				State = 1604;
				_la = _input.La(1);
				if (_la==NULL) {
					{
					State = 1603; Match(NULL);
					}
				}

				State = 1607;
				_la = _input.La(1);
				if (_la==IDENTITY) {
					{
					State = 1606; identitySpec();
					}
				}

				State = 1614;
				_la = _input.La(1);
				if (_la==DEFAULT) {
					{
					State = 1609; Match(DEFAULT);
					State = 1612;
					switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
					case 1:
						{
						State = 1610; literalValue();
						}
						break;

					case 2:
						{
						State = 1611; functionCall();
						}
						break;
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeclarationOptionsContext : ParserRuleContext {
		public TableDeclarationOptionContext[] tableDeclarationOption() {
			return GetRuleContexts<TableDeclarationOptionContext>();
		}
		public TableDeclarationOptionContext tableDeclarationOption(int i) {
			return GetRuleContext<TableDeclarationOptionContext>(i);
		}
		public TableDeclarationOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeclarationOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableDeclarationOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableDeclarationOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeclarationOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeclarationOptionsContext tableDeclarationOptions() {
		TableDeclarationOptionsContext _localctx = new TableDeclarationOptionsContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_tableDeclarationOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618; tableDeclarationOption();
			State = 1623;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,188,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1619; Match(COMMA);
					State = 1620; tableDeclarationOption();
					}
					} 
				}
				State = 1625;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,188,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeclarationOptionContext : ParserRuleContext {
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public TableDeclarationOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeclarationOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableDeclarationOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableDeclarationOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeclarationOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeclarationOptionContext tableDeclarationOption() {
		TableDeclarationOptionContext _localctx = new TableDeclarationOptionContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_tableDeclarationOption);
		int _la;
		try {
			State = 1645;
			switch (_input.La(1)) {
			case UNIQUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1626; Match(UNIQUE);
				State = 1628;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1627; clusterType();
					}
				}

				State = 1630; Match(LPAREN);
				State = 1631; columnList();
				State = 1632; Match(RPAREN);
				}
				break;
			case PRIMARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1634; Match(PRIMARY);
				State = 1635; Match(KEY);
				State = 1637;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1636; clusterType();
					}
				}

				State = 1639; Match(LPAREN);
				State = 1640; orderedIndexColumnList();
				State = 1641; Match(RPAREN);
				State = 1643;
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 1642; basicOptionList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionNameContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PartitionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPartitionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPartitionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionNameContext partitionName() {
		PartitionNameContext _localctx = new PartitionNameContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_partitionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1647; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public SetVariableToCursorContext setVariableToCursor() {
			return GetRuleContext<SetVariableToCursorContext>(0);
		}
		public SetVariableAssignmentContext setVariableAssignment() {
			return GetRuleContext<SetVariableAssignmentContext>(0);
		}
		public SetSessionOtherContext setSessionOther() {
			return GetRuleContext<SetSessionOtherContext>(0);
		}
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_setStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1649; Match(SET);
			State = 1653;
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				State = 1650; setVariableAssignment();
				}
				break;

			case 2:
				{
				State = 1651; setVariableToCursor();
				}
				break;

			case 3:
				{
				State = 1652; setSessionOther();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSessionOtherContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TransactionIsolationLevelContext transactionIsolationLevel() {
			return GetRuleContext<TransactionIsolationLevelContext>(0);
		}
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSQLParser.ROWCOUNT, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSQLParser.LEVEL, 0); }
		public SetSessionParameterContext[] setSessionParameter() {
			return GetRuleContexts<SetSessionParameterContext>();
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSQLParser.ISOLATION, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public SetSessionParameterContext setSessionParameter(int i) {
			return GetRuleContext<SetSessionParameterContext>(i);
		}
		public SetSessionOtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSessionOther; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetSessionOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetSessionOther(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSessionOther(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetSessionOtherContext setSessionOther() {
		SetSessionOtherContext _localctx = new SetSessionOtherContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_setSessionOther);
		int _la;
		try {
			State = 1669;
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1655; Match(ROWCOUNT);
				State = 1656; integerValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1657; Match(TRANSACTION);
				State = 1658; Match(ISOLATION);
				State = 1659; Match(LEVEL);
				State = 1660; transactionIsolationLevel();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1662;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1661; setSessionParameter();
					}
					}
					State = 1664;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LBRACKET || _la==Identifier );
				State = 1666;
				_la = _input.La(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1668; setSessionParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSessionParameterContext : ParserRuleContext {
		public QualifiedNamePartContext[] qualifiedNamePart() {
			return GetRuleContexts<QualifiedNamePartContext>();
		}
		public QualifiedNamePartContext qualifiedNamePart(int i) {
			return GetRuleContext<QualifiedNamePartContext>(i);
		}
		public SetSessionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSessionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetSessionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetSessionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSessionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetSessionParameterContext setSessionParameter() {
		SetSessionParameterContext _localctx = new SetSessionParameterContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_setSessionParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1671; qualifiedNamePart();
			State = 1680;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 1673;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1672; Match(DOT);
					}
					}
					State = 1675;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==DOT );
				State = 1677; qualifiedNamePart();
				}
				}
				State = 1682;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableAssignmentContext : ParserRuleContext {
		public PropertyOrFieldContext propertyOrField() {
			return GetRuleContext<PropertyOrFieldContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SetVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariableAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetVariableAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetVariableAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableAssignmentContext setVariableAssignment() {
		SetVariableAssignmentContext _localctx = new SetVariableAssignmentContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_setVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1683; variable();
			State = 1685;
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 1684; propertyOrField();
				}
			}

			State = 1687; assignmentOperator();
			State = 1688; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableToCursorContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(TSQLParser.EQUALS, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public PropertyOrFieldContext propertyOrField() {
			return GetRuleContext<PropertyOrFieldContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SetVariableToCursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariableToCursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetVariableToCursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetVariableToCursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariableToCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableToCursorContext setVariableToCursor() {
		SetVariableToCursorContext _localctx = new SetVariableToCursorContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_setVariableToCursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1690; variable();
			State = 1692;
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 1691; propertyOrField();
				}
			}

			State = 1694; Match(EQUALS);
			State = 1695; Match(CURSOR);
			State = 1696; Match(FOR);
			State = 1697; selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionIsolationLevelContext : ParserRuleContext {
		public TransactionIsolationLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionIsolationLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTransactionIsolationLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTransactionIsolationLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionIsolationLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionIsolationLevelContext transactionIsolationLevel() {
		TransactionIsolationLevelContext _localctx = new TransactionIsolationLevelContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_transactionIsolationLevel);
		int _la;
		try {
			State = 1705;
			switch (_input.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1699; Match(T__3);
				State = 1700;
				_la = _input.La(1);
				if ( !(_la==T__2 || _la==T__0) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1701; Match(T__6);
				State = 1702; Match(T__3);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1703; Match(T__5);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1704; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateTopContext : ParserRuleContext {
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public UpdateTopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateTop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateTop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateTop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateTopContext updateTop() {
		UpdateTopContext _localctx = new UpdateTopContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_updateTop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1707; Match(TOP);
			State = 1714;
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				State = 1708; integerValue();
				}
				break;

			case 2:
				{
				State = 1709; variable();
				}
				break;

			case 3:
				{
				State = 1710; Match(LPAREN);
				State = 1711; variable();
				State = 1712; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		public UpdateStatementSetClauseRestContext updateStatementSetClauseRest(int i) {
			return GetRuleContext<UpdateStatementSetClauseRestContext>(i);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public MoreInnerJoinContext moreInnerJoin(int i) {
			return GetRuleContext<MoreInnerJoinContext>(i);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public UpdateTopContext updateTop() {
			return GetRuleContext<UpdateTopContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public MoreInnerJoinContext[] moreInnerJoin() {
			return GetRuleContexts<MoreInnerJoinContext>();
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public UpdateStatementSetClauseRestContext[] updateStatementSetClauseRest() {
			return GetRuleContexts<UpdateStatementSetClauseRestContext>();
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_updateStatement);
		int _la;
		try {
			int _alt;
			State = 1757;
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1716; Match(UPDATE);
				State = 1718;
				_la = _input.La(1);
				if (_la==TOP) {
					{
					State = 1717; updateTop();
					}
				}

				State = 1720; tableTargetWithOptions();
				State = 1721; Match(SET);
				State = 1722; updateStatementSetClauseRest();
				State = 1727;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,203,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1723; Match(COMMA);
						State = 1724; updateStatementSetClauseRest();
						}
						} 
					}
					State = 1729;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,203,_ctx);
				}
				State = 1731;
				_la = _input.La(1);
				if (_la==FROM) {
					{
					State = 1730; fromClause();
					}
				}

				State = 1736;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1733; joinOrApply();
					}
					}
					State = 1738;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1742;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1739; moreInnerJoin();
					}
					}
					State = 1744;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1746;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1745; whereClause();
					}
				}

				State = 1749;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1748; dmlOptions();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1751; Match(UPDATE);
				State = 1752; Match(STATISTICS);
				State = 1753; tableTarget();
				State = 1755;
				switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
				case 1:
					{
					State = 1754; basicOptionList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementSetClauseRestContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(TSQLParser.EQUALS, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public UpdateStatementSetClauseRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatementSetClauseRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateStatementSetClauseRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateStatementSetClauseRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatementSetClauseRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementSetClauseRestContext updateStatementSetClauseRest() {
		UpdateStatementSetClauseRestContext _localctx = new UpdateStatementSetClauseRestContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_updateStatementSetClauseRest);
		try {
			State = 1788;
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1759; qualifiedColumnName();
				State = 1760; assignmentOperator();
				State = 1764;
				switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					State = 1761; expression();
					}
					break;

				case 2:
					{
					State = 1762; Match(DEFAULT);
					}
					break;

				case 3:
					{
					State = 1763; Match(NULL);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1766; variable();
				State = 1767; assignmentOperator();
				State = 1771;
				switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					State = 1768; qualifiedColumnName();
					State = 1769; Match(EQUALS);
					}
					break;
				}
				State = 1773; expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1775; qualifiedColumnName();
				State = 1776; Match(DOT);
				State = 1777; qualifiedNamePart();
				State = 1786;
				switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
				case 1:
					{
					State = 1778; Match(EQUALS);
					State = 1779; expression();
					}
					break;

				case 2:
					{
					State = 1780; Match(LPAREN);
					State = 1781; Match(RPAREN);
					}
					break;

				case 3:
					{
					State = 1782; Match(LPAREN);
					State = 1783; argumentList();
					State = 1784; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_argument);
		try {
			State = 1793;
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1790; expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1791; tempTable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1792; type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1795; argument();
			State = 1800;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1796; Match(COMMA);
				State = 1797; argument();
				}
				}
				State = 1802;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputeStatementContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMPUTE() { return GetToken(TSQLParser.COMPUTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public ComputeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterComputeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitComputeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputeStatementContext computeStatement() {
		ComputeStatementContext _localctx = new ComputeStatementContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_computeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1803; Match(COMPUTE);
			State = 1804; expression();
			State = 1809;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1805; Match(COMMA);
				State = 1806; expression();
				}
				}
				State = 1811;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1821;
			_la = _input.La(1);
			if (_la==BY) {
				{
				State = 1812; Match(BY);
				State = 1813; expression();
				State = 1818;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1814; Match(COMMA);
					State = 1815; expression();
					}
					}
					State = 1820;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public ITerminalNode[] UNION() { return GetTokens(TSQLParser.UNION); }
		public ITerminalNode INTERSECT(int i) {
			return GetToken(TSQLParser.INTERSECT, i);
		}
		public ITerminalNode[] INTERSECT() { return GetTokens(TSQLParser.INTERSECT); }
		public ITerminalNode UNION(int i) {
			return GetToken(TSQLParser.UNION, i);
		}
		public ITerminalNode EXCEPT(int i) {
			return GetToken(TSQLParser.EXCEPT, i);
		}
		public ITerminalNode ALL(int i) {
			return GetToken(TSQLParser.ALL, i);
		}
		public SelectStatementPartContext[] selectStatementPart() {
			return GetRuleContexts<SelectStatementPartContext>();
		}
		public SelectStatementPartContext selectStatementPart(int i) {
			return GetRuleContext<SelectStatementPartContext>(i);
		}
		public ITerminalNode[] EXCEPT() { return GetTokens(TSQLParser.EXCEPT); }
		public ITerminalNode[] ALL() { return GetTokens(TSQLParser.ALL); }
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_selectStatement);
		int _la;
		try {
			State = 1842;
			switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1823; selectStatementPart();
				State = 1831;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==UNION) {
					{
					{
					State = 1824; Match(UNION);
					State = 1826;
					_la = _input.La(1);
					if (_la==ALL) {
						{
						State = 1825; Match(ALL);
						}
					}

					State = 1828; selectStatementPart();
					}
					}
					State = 1833;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1834; selectStatementPart();
				State = 1839;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==INTERSECT || _la==EXCEPT) {
					{
					{
					State = 1835;
					_la = _input.La(1);
					if ( !(_la==INTERSECT || _la==EXCEPT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 1836; selectStatementPart();
					}
					}
					State = 1841;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementPartContext : ParserRuleContext {
		public MoreInnerJoinContext moreInnerJoin(int i) {
			return GetRuleContext<MoreInnerJoinContext>(i);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public MoreInnerJoinContext[] moreInnerJoin() {
			return GetRuleContexts<MoreInnerJoinContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public ForXmlClauseContext forXmlClause() {
			return GetRuleContext<ForXmlClauseContext>(0);
		}
		public SelectTopLimitContext selectTopLimit() {
			return GetRuleContext<SelectTopLimitContext>(0);
		}
		public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ITerminalNode SELECT() { return GetToken(TSQLParser.SELECT, 0); }
		public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public XmlWithOptionContext xmlWithOption() {
			return GetRuleContext<XmlWithOptionContext>(0);
		}
		public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public SelectStatementPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatementPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectStatementPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectStatementPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatementPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementPartContext selectStatementPart() {
		SelectStatementPartContext _localctx = new SelectStatementPartContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_selectStatementPart);
		int _la;
		try {
			State = 1892;
			switch (_input.La(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1844; Match(SELECT);
				State = 1846;
				switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					State = 1845; selectTopLimit();
					}
					break;
				}
				State = 1848; selectList();
				State = 1850;
				_la = _input.La(1);
				if (_la==INTO) {
					{
					State = 1849; intoClause();
					}
				}

				State = 1853;
				_la = _input.La(1);
				if (_la==FROM) {
					{
					State = 1852; fromClause();
					}
				}

				State = 1856;
				switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					State = 1855; xmlWithOption();
					}
					break;
				}
				State = 1861;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1858; joinOrApply();
					}
					}
					State = 1863;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1867;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1864; moreInnerJoin();
					}
					}
					State = 1869;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1871;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1870; whereClause();
					}
				}

				State = 1874;
				_la = _input.La(1);
				if (_la==GROUP) {
					{
					State = 1873; groupByClause();
					}
				}

				State = 1877;
				_la = _input.La(1);
				if (_la==HAVING) {
					{
					State = 1876; havingClause();
					}
				}

				State = 1880;
				_la = _input.La(1);
				if (_la==ORDER) {
					{
					State = 1879; orderByClause();
					}
				}

				State = 1883;
				switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
				case 1:
					{
					State = 1882; dmlOptions();
					}
					break;
				}
				State = 1886;
				switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
				case 1:
					{
					State = 1885; forXmlClause();
					}
					break;
				}
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1888; Match(LPAREN);
				State = 1889; selectStatement();
				State = 1890; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlWithOptionContext : ParserRuleContext {
		public QualifiedNameContext Alias;
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public XmlDefinitionListContext xmlDefinitionList() {
			return GetRuleContext<XmlDefinitionListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public XmlWithOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlWithOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlWithOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlWithOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlWithOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlWithOptionContext xmlWithOption() {
		XmlWithOptionContext _localctx = new XmlWithOptionContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_xmlWithOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894; Match(WITH);
			State = 1895; Match(LPAREN);
			State = 1896; xmlDefinitionList();
			State = 1897; Match(RPAREN);
			State = 1899;
			switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
			case 1:
				{
				State = 1898; _localctx.Alias = qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlDefinitionListContext : ParserRuleContext {
		public XmlDefinitionContext xmlDefinition(int i) {
			return GetRuleContext<XmlDefinitionContext>(i);
		}
		public XmlDefinitionContext[] xmlDefinition() {
			return GetRuleContexts<XmlDefinitionContext>();
		}
		public XmlDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlDefinitionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlDefinitionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlDefinitionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlDefinitionListContext xmlDefinitionList() {
		XmlDefinitionListContext _localctx = new XmlDefinitionListContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_xmlDefinitionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1901; xmlDefinition();
			State = 1906;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1902; Match(COMMA);
				State = 1903; xmlDefinition();
				}
				}
				State = 1908;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlDefinitionContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public XmlDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlDefinitionContext xmlDefinition() {
		XmlDefinitionContext _localctx = new XmlDefinitionContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_xmlDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1909; columnName();
			State = 1910; type();
			State = 1913;
			switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				State = 1911; literalValue();
				}
				break;

			case 2:
				{
				State = 1912; functionCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForXmlClauseContext : ParserRuleContext {
		public ITerminalNode PATH() { return GetToken(TSQLParser.PATH, 0); }
		public ITerminalNode RAW() { return GetToken(TSQLParser.RAW, 0); }
		public ITerminalNode AUTO() { return GetToken(TSQLParser.AUTO, 0); }
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSQLParser.EXPLICIT, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public ForXmlClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forXmlClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterForXmlClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitForXmlClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForXmlClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForXmlClauseContext forXmlClause() {
		ForXmlClauseContext _localctx = new ForXmlClauseContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_forXmlClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1915; Match(FOR);
			State = 1916; Match(XML);
			State = 1926;
			switch (_input.La(1)) {
			case AUTO:
				{
				State = 1917; Match(AUTO);
				}
				break;
			case RAW:
				{
				State = 1918; Match(RAW);
				}
				break;
			case EXPLICIT:
				{
				State = 1919; Match(EXPLICIT);
				}
				break;
			case PATH:
				{
				State = 1920; Match(PATH);
				State = 1921; Match(LPAREN);
				State = 1923;
				_la = _input.La(1);
				if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
					{
					State = 1922; argumentList();
					}
				}

				State = 1925; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTopLimitContext : ParserRuleContext {
		public IToken PERCENT;
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SelectTopLimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTopLimit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectTopLimit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectTopLimit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTopLimit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTopLimitContext selectTopLimit() {
		SelectTopLimitContext _localctx = new SelectTopLimitContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_selectTopLimit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1929;
			_la = _input.La(1);
			if (_la==DISTINCT) {
				{
				State = 1928; Match(DISTINCT);
				}
			}

			State = 1931; Match(TOP);
			State = 1941;
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				State = 1932; integerValue();
				State = 1934;
				_la = _input.La(1);
				if (_la==T__7) {
					{
					State = 1933; _localctx.PERCENT = Match(T__7);
					}
				}

				}
				break;

			case 2:
				{
				State = 1936; variable();
				}
				break;

			case 3:
				{
				State = 1937; Match(LPAREN);
				State = 1938; variable();
				State = 1939; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectVariableAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SelectVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectVariableAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectVariableAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectVariableAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectVariableAssignmentContext selectVariableAssignment() {
		SelectVariableAssignmentContext _localctx = new SelectVariableAssignmentContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_selectVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1943; variable();
			State = 1944;
			_la = _input.La(1);
			if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (ADD_ASSIGN - 172)) | (1L << (SUB_ASSIGN - 172)) | (1L << (MUL_ASSIGN - 172)) | (1L << (DIV_ASSIGN - 172)) | (1L << (AND_ASSIGN - 172)) | (1L << (OR_ASSIGN - 172)) | (1L << (XOR_ASSIGN - 172)) | (1L << (MOD_ASSIGN - 172)) | (1L << (EQUALS - 172)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1945; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		public SelectListElementContext[] selectListElement() {
			return GetRuleContexts<SelectListElementContext>();
		}
		public SelectListElementContext selectListElement(int i) {
			return GetRuleContext<SelectListElementContext>(i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_selectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1947; selectListElement();
			State = 1952;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,245,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1948; Match(COMMA);
					State = 1949; selectListElement();
					}
					} 
				}
				State = 1954;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,245,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListElementContext : ParserRuleContext {
		public IToken op;
		public ITerminalNode DOT() { return GetToken(TSQLParser.DOT, 0); }
		public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ColumnAliasContext columnAlias() {
			return GetRuleContext<ColumnAliasContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(TSQLParser.STAR, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public SelectListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListElementContext selectListElement() {
		SelectListElementContext _localctx = new SelectListElementContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_selectListElement);
		int _la;
		try {
			State = 1988;
			switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1955; variable();
				State = 1956;
				_localctx.op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (ADD_ASSIGN - 172)) | (1L << (SUB_ASSIGN - 172)) | (1L << (MUL_ASSIGN - 172)) | (1L << (DIV_ASSIGN - 172)) | (1L << (AND_ASSIGN - 172)) | (1L << (OR_ASSIGN - 172)) | (1L << (XOR_ASSIGN - 172)) | (1L << (MOD_ASSIGN - 172)) | (1L << (EQUALS - 172)))) != 0)) ) {
					_localctx.op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 1957; expression();
				State = 1962;
				switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					State = 1959;
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1958; Match(AS);
						}
					}

					State = 1961; columnAlias();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1964; qualifiedColumnName();
				{
				State = 1965; Match(EQUALS);
				}
				State = 1966; expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1969;
				switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					State = 1968; Match(DISTINCT);
					}
					break;
				}
				State = 1986;
				switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					State = 1971; expression();
					State = 1973;
					switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
					case 1:
						{
						State = 1972; overClause();
						}
						break;
					}
					State = 1979;
					switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
					case 1:
						{
						State = 1976;
						_la = _input.La(1);
						if (_la==AS) {
							{
							State = 1975; Match(AS);
							}
						}

						State = 1978; columnAlias();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 1981; qualifiedName();
					State = 1982; Match(DOT);
					State = 1983; Match(STAR);
					}
					break;

				case 3:
					{
					State = 1985; Match(STAR);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlOptionsContext : ParserRuleContext {
		public DmlOptionContext dmlOption(int i) {
			return GetRuleContext<DmlOptionContext>(i);
		}
		public DmlOptionContext[] dmlOption() {
			return GetRuleContexts<DmlOptionContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode OPTION() { return GetToken(TSQLParser.OPTION, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public DmlOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDmlOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDmlOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlOptionsContext dmlOptions() {
		DmlOptionsContext _localctx = new DmlOptionsContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_dmlOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990; Match(OPTION);
			State = 1991; Match(LPAREN);
			State = 1992; dmlOption();
			State = 1997;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1993; Match(COMMA);
				State = 1994; dmlOption();
				}
				}
				State = 1999;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2000; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlOptionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSQLParser.OPTIMIZE, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DmlOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDmlOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDmlOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlOptionContext dmlOption() {
		DmlOptionContext _localctx = new DmlOptionContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_dmlOption);
		int _la;
		try {
			State = 2015;
			switch (_input.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2002; Match(Identifier);
				State = 2004;
				_la = _input.La(1);
				if (_la==NULL || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (LPAREN - 181)) | (1L << (PLUS - 181)) | (1L << (MINUS - 181)) | (1L << (FloatingPointLiteral - 181)) | (1L << (StringLiteral - 181)) | (1L << (IntegerLiteral - 181)))) != 0)) {
					{
					State = 2003; literalValue();
					}
				}

				}
				break;
			case OPTIMIZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2006; Match(OPTIMIZE);
				State = 2007; Match(FOR);
				State = 2008; Match(LPAREN);
				{
				State = 2009; variable();
				State = 2010; Match(EQUALS);
				State = 2011; literalValue();
				}
				State = 2013; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverClauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(TSQLParser.OVER, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSQLParser.PARTITION); }
		public ITerminalNode ORDER(int i) {
			return GetToken(TSQLParser.ORDER, i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSQLParser.PARTITION, i);
		}
		public OrderByElementContext[] orderByElement() {
			return GetRuleContexts<OrderByElementContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode[] ORDER() { return GetTokens(TSQLParser.ORDER); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public OrderByElementContext orderByElement(int i) {
			return GetRuleContext<OrderByElementContext>(i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSQLParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSQLParser.BY, i);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOverClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOverClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverClauseContext overClause() {
		OverClauseContext _localctx = new OverClauseContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_overClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017; Match(OVER);
			State = 2018; Match(LPAREN);
			State = 2039;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 2039;
				switch (_input.La(1)) {
				case PARTITION:
					{
					State = 2019; Match(PARTITION);
					State = 2020; Match(BY);
					State = 2021; expression();
					State = 2026;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2022; Match(COMMA);
						State = 2023; expression();
						}
						}
						State = 2028;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				case ORDER:
					{
					State = 2029; Match(ORDER);
					State = 2030; Match(BY);
					State = 2031; orderByElement();
					State = 2036;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2032; Match(COMMA);
						State = 2033; orderByElement();
						}
						}
						State = 2038;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2041;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PARTITION || _la==ORDER );
			State = 2043; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntoClauseContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public IntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntoClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntoClauseContext intoClause() {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_intoClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2045; Match(INTO);
			State = 2046; tableTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_fromClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2048; Match(FROM);
			State = 2049; tableSourceWithOptions();
			State = 2054;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,261,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2050; Match(COMMA);
					State = 2051; tableSourceWithOptions();
					}
					} 
				}
				State = 2056;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,261,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreInnerJoinContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public MoreInnerJoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreInnerJoin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMoreInnerJoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMoreInnerJoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreInnerJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreInnerJoinContext moreInnerJoin() {
		MoreInnerJoinContext _localctx = new MoreInnerJoinContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_moreInnerJoin);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2059;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2057; Match(COMMA);
					State = 2058; tableSourceWithOptions();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2061;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,262,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		public GroupByElementContext[] groupByElement() {
			return GetRuleContexts<GroupByElementContext>();
		}
		public ITerminalNode GROUP() { return GetToken(TSQLParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public GroupByElementContext groupByElement(int i) {
			return GetRuleContext<GroupByElementContext>(i);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_groupByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2063; Match(GROUP);
			State = 2064; Match(BY);
			State = 2065; groupByElement();
			State = 2070;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2066; Match(COMMA);
				State = 2067; groupByElement();
				}
				}
				State = 2072;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByElementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColumnIndexOrNameContext columnIndexOrName() {
			return GetRuleContext<ColumnIndexOrNameContext>(0);
		}
		public GroupByElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterGroupByElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitGroupByElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByElementContext groupByElement() {
		GroupByElementContext _localctx = new GroupByElementContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_groupByElement);
		try {
			State = 2075;
			switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2073; columnIndexOrName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2074; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public ITerminalNode HAVING() { return GetToken(TSQLParser.HAVING, 0); }
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2077; Match(HAVING);
			State = 2078; predicateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinOrApplyContext : ParserRuleContext {
		public PredicateListContext[] predicateList() {
			return GetRuleContexts<PredicateListContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions() {
			return GetRuleContext<TableSourceWithOptionsContext>(0);
		}
		public ITerminalNode[] ON() { return GetTokens(TSQLParser.ON); }
		public PredicateListContext predicateList(int i) {
			return GetRuleContext<PredicateListContext>(i);
		}
		public ITerminalNode ON(int i) {
			return GetToken(TSQLParser.ON, i);
		}
		public ITerminalNode APPLY() { return GetToken(TSQLParser.APPLY, 0); }
		public JoinTypeContext joinType() {
			return GetRuleContext<JoinTypeContext>(0);
		}
		public ITerminalNode JOIN() { return GetToken(TSQLParser.JOIN, 0); }
		public JoinOrApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinOrApply; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterJoinOrApply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitJoinOrApply(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinOrApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinOrApplyContext joinOrApply() {
		JoinOrApplyContext _localctx = new JoinOrApplyContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_joinOrApply);
		int _la;
		try {
			State = 2097;
			switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2081;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0)) {
					{
					State = 2080; joinType();
					}
				}

				State = 2083; Match(JOIN);
				State = 2084; tableSourceWithOptions();
				State = 2089;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ON) {
					{
					{
					State = 2085; Match(ON);
					State = 2086; predicateList();
					}
					}
					State = 2091;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2093;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0)) {
					{
					State = 2092; joinType();
					}
				}

				State = 2095; Match(APPLY);
				State = 2096; tableSourceWithOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinTypeContext : ParserRuleContext {
		public ITerminalNode LEFT() { return GetToken(TSQLParser.LEFT, 0); }
		public ITerminalNode OUTER() { return GetToken(TSQLParser.OUTER, 0); }
		public ITerminalNode INNER() { return GetToken(TSQLParser.INNER, 0); }
		public ITerminalNode CROSS() { return GetToken(TSQLParser.CROSS, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSQLParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(TSQLParser.FULL, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterJoinType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitJoinType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinTypeContext joinType() {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_joinType);
		try {
			State = 2111;
			switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2099; Match(LEFT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2100; Match(RIGHT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2101; Match(OUTER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2102; Match(INNER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2103; Match(CROSS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2104; Match(FULL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2105; Match(FULL);
				State = 2106; Match(OUTER);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2107; Match(LEFT);
				State = 2108; Match(OUTER);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2109; Match(RIGHT);
				State = 2110; Match(OUTER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSQLParser.WHERE, 0); }
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2113; Match(WHERE);
			State = 2114; predicateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		public OrderByElementContext[] orderByElement() {
			return GetRuleContexts<OrderByElementContext>();
		}
		public ITerminalNode ORDER() { return GetToken(TSQLParser.ORDER, 0); }
		public OrderByElementContext orderByElement(int i) {
			return GetRuleContext<OrderByElementContext>(i);
		}
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_orderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2116; Match(ORDER);
			State = 2117; Match(BY);
			State = 2118; orderByElement();
			State = 2123;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2119; Match(COMMA);
				State = 2120; orderByElement();
				}
				}
				State = 2125;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByElementContext : ParserRuleContext {
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColumnIndexOrNameContext columnIndexOrName() {
			return GetRuleContext<ColumnIndexOrNameContext>(0);
		}
		public OrderByElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderByElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderByElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByElementContext orderByElement() {
		OrderByElementContext _localctx = new OrderByElementContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_orderByElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2128;
			switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				State = 2126; columnIndexOrName();
				}
				break;

			case 2:
				{
				State = 2127; expression();
				}
				break;
			}
			State = 2131;
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 2130;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeStatementContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSQLParser.TARGET, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSQLParser.NOT); }
		public MergeNotMatchedContext mergeNotMatched(int i) {
			return GetRuleContext<MergeNotMatchedContext>(i);
		}
		public ITerminalNode[] SOURCE() { return GetTokens(TSQLParser.SOURCE); }
		public PredicateListContext predicateList(int i) {
			return GetRuleContext<PredicateListContext>(i);
		}
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode INTO(int i) {
			return GetToken(TSQLParser.INTO, i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSQLParser.AND); }
		public ITerminalNode[] TARGET() { return GetTokens(TSQLParser.TARGET); }
		public ITerminalNode[] BY() { return GetTokens(TSQLParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSQLParser.BY, i);
		}
		public PredicateListContext[] predicateList() {
			return GetRuleContexts<PredicateListContext>();
		}
		public ITerminalNode MATCHED(int i) {
			return GetToken(TSQLParser.MATCHED, i);
		}
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode AND(int i) {
			return GetToken(TSQLParser.AND, i);
		}
		public ITerminalNode[] THEN() { return GetTokens(TSQLParser.THEN); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSQLParser.USING, 0); }
		public MergeMatchedContext[] mergeMatched() {
			return GetRuleContexts<MergeMatchedContext>();
		}
		public ITerminalNode[] INTO() { return GetTokens(TSQLParser.INTO); }
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public ITerminalNode[] MATCHED() { return GetTokens(TSQLParser.MATCHED); }
		public ITerminalNode[] WHEN() { return GetTokens(TSQLParser.WHEN); }
		public ITerminalNode SOURCE(int i) {
			return GetToken(TSQLParser.SOURCE, i);
		}
		public MergeNotMatchedContext[] mergeNotMatched() {
			return GetRuleContexts<MergeNotMatchedContext>();
		}
		public MergeMatchedContext mergeMatched(int i) {
			return GetRuleContext<MergeMatchedContext>(i);
		}
		public ITerminalNode NOT(int i) {
			return GetToken(TSQLParser.NOT, i);
		}
		public ITerminalNode WHEN(int i) {
			return GetToken(TSQLParser.WHEN, i);
		}
		public ITerminalNode THEN(int i) {
			return GetToken(TSQLParser.THEN, i);
		}
		public MergeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeStatementContext mergeStatement() {
		MergeStatementContext _localctx = new MergeStatementContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_mergeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2133; Match(MERGE);
			State = 2135;
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 2134; Match(INTO);
				}
			}

			State = 2137; tableTarget();
			State = 2138; Match(USING);
			State = 2139; tableSource();
			State = 2140; Match(ON);
			State = 2141; predicateList();
			State = 2174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 2174;
				switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					State = 2142; Match(WHEN);
					State = 2143; Match(MATCHED);
					State = 2146;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2144; Match(AND);
						State = 2145; predicateList();
						}
					}

					State = 2148; Match(THEN);
					State = 2149; mergeMatched();
					}
					break;

				case 2:
					{
					State = 2150; Match(WHEN);
					State = 2151; Match(NOT);
					State = 2152; Match(MATCHED);
					State = 2155;
					_la = _input.La(1);
					if (_la==BY) {
						{
						State = 2153; Match(BY);
						State = 2154; Match(TARGET);
						}
					}

					State = 2159;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2157; Match(AND);
						State = 2158; predicateList();
						}
					}

					State = 2161; Match(THEN);
					State = 2162; mergeNotMatched();
					}
					break;

				case 3:
					{
					State = 2163; Match(WHEN);
					State = 2164; Match(NOT);
					State = 2165; Match(MATCHED);
					State = 2166; Match(BY);
					State = 2167; Match(SOURCE);
					State = 2170;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2168; Match(AND);
						State = 2169; predicateList();
						}
					}

					State = 2172; Match(THEN);
					State = 2173; mergeMatched();
					}
					break;
				}
				}
				State = 2176;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==WHEN );
			State = 2183;
			_la = _input.La(1);
			if (_la==OUTPUT) {
				{
				State = 2178; Match(OUTPUT);
				State = 2179; selectList();
				State = 2180; Match(INTO);
				State = 2181; tableTargetWithOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeMatchedContext : ParserRuleContext {
		public UpdateStatementSetClauseRestContext updateStatementSetClauseRest(int i) {
			return GetRuleContext<UpdateStatementSetClauseRestContext>(i);
		}
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public UpdateStatementSetClauseRestContext[] updateStatementSetClauseRest() {
			return GetRuleContexts<UpdateStatementSetClauseRestContext>();
		}
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public MergeMatchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeMatched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeMatched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeMatched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeMatched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeMatchedContext mergeMatched() {
		MergeMatchedContext _localctx = new MergeMatchedContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_mergeMatched);
		int _la;
		try {
			State = 2196;
			switch (_input.La(1)) {
			case UPDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2185; Match(UPDATE);
				State = 2186; Match(SET);
				State = 2187; updateStatementSetClauseRest();
				State = 2192;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2188; Match(COMMA);
					State = 2189; updateStatementSetClauseRest();
					}
					}
					State = 2194;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2195; Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeNotMatchedContext : ParserRuleContext {
		public InsertValueListContext insertValueList(int i) {
			return GetRuleContext<InsertValueListContext>(i);
		}
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public InsertValueListContext[] insertValueList() {
			return GetRuleContexts<InsertValueListContext>();
		}
		public MergeNotMatchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeNotMatched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeNotMatched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeNotMatched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeNotMatched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeNotMatchedContext mergeNotMatched() {
		MergeNotMatchedContext _localctx = new MergeNotMatchedContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_mergeNotMatched);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2198; Match(INSERT);
			State = 2203;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 2199; Match(LPAREN);
				State = 2200; qualifiedNameList();
				State = 2201; Match(RPAREN);
				}
			}

			State = 2205; Match(VALUES);
			State = 2206; insertValueList();
			State = 2211;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2207; Match(COMMA);
				State = 2208; insertValueList();
				}
				}
				State = 2213;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetWithOptionsContext : ParserRuleContext {
		public TableTargetOptionsContext tableTargetOptions() {
			return GetRuleContext<TableTargetOptionsContext>(0);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public TableTargetWithOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTargetWithOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTargetWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTargetWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTargetWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetWithOptionsContext tableTargetWithOptions() {
		TableTargetWithOptionsContext _localctx = new TableTargetWithOptionsContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_tableTargetWithOptions);
		int _la;
		try {
			State = 2228;
			switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2214; tableTarget();
				State = 2216;
				switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					State = 2215; tableTargetOptions();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2218; tableTarget();
				State = 2220;
				switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					State = 2219; tableTargetOptions();
					}
					break;
				}
				State = 2226;
				switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					State = 2223;
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 2222; Match(AS);
						}
					}

					State = 2225; tableAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public TableTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetContext tableTarget() {
		TableTargetContext _localctx = new TableTargetContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_tableTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2233;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				State = 2230; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2231; variable();
				}
				break;

			case 3:
				{
				State = 2232; tempTable();
				}
				break;
			}
			State = 2239;
			switch ( Interpreter.AdaptivePredict(_input,292,_ctx) ) {
			case 1:
				{
				State = 2236;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2235; Match(AS);
					}
				}

				State = 2238; tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetOptionsContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public TableTargetOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTargetOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTargetOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTargetOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTargetOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetOptionsContext tableTargetOptions() {
		TableTargetOptionsContext _localctx = new TableTargetOptionsContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_tableTargetOptions);
		try {
			State = 2247;
			switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2241; Match(WITH);
				State = 2242; Match(LPAREN);
				State = 2243; Match(Identifier);
				State = 2244; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2245; Match(WITH);
				State = 2246; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceWithOptionsContext : ParserRuleContext {
		public TableSourceOptionsContext tableSourceOptions() {
			return GetRuleContext<TableSourceOptionsContext>(0);
		}
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public TableSourceWithOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceWithOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSourceWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSourceWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceWithOptionsContext tableSourceWithOptions() {
		TableSourceWithOptionsContext _localctx = new TableSourceWithOptionsContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_tableSourceWithOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2249; tableSource();
			State = 2251;
			switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				State = 2250; tableSourceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public XmlDefinitionListContext xmlDefinitionList() {
			return GetRuleContext<XmlDefinitionListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_tableSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2277;
			switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				State = 2253; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2254; variable();
				State = 2257;
				_la = _input.La(1);
				if (_la==DOT) {
					{
					State = 2255; Match(DOT);
					State = 2256; functionCall();
					}
				}

				}
				break;

			case 3:
				{
				State = 2259; tempTable();
				State = 2262;
				_la = _input.La(1);
				if (_la==DOT) {
					{
					State = 2260; Match(DOT);
					State = 2261; functionCall();
					}
				}

				}
				break;

			case 4:
				{
				State = 2264; Match(LPAREN);
				State = 2265; selectStatement();
				State = 2266; Match(RPAREN);
				}
				break;

			case 5:
				{
				State = 2268; executeStatement();
				}
				break;

			case 6:
				{
				State = 2269; functionCall();
				State = 2275;
				switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					State = 2270; Match(WITH);
					State = 2271; Match(LPAREN);
					State = 2272; xmlDefinitionList();
					State = 2273; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			State = 2283;
			switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				State = 2280;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2279; Match(AS);
					}
				}

				State = 2282; tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceOptionsContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public TableSourceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSourceOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSourceOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceOptionsContext tableSourceOptions() {
		TableSourceOptionsContext _localctx = new TableSourceOptionsContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_tableSourceOptions);
		try {
			State = 2292;
			switch (_input.La(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2285; Match(WITH);
				State = 2286; Match(LPAREN);
				State = 2287; Match(Identifier);
				State = 2288; Match(RPAREN);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2289; Match(LPAREN);
				State = 2290; Match(Identifier);
				State = 2291; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasContext tableAlias() {
		TableAliasContext _localctx = new TableAliasContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_tableAlias);
		try {
			State = 2296;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2294; qualifiedNamePart();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2295; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2300;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				{
				State = 2298; qualifiedName();
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
				{
				State = 2299; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302; functionName();
			State = 2303; Match(LPAREN);
			State = 2305;
			_la = _input.La(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
				{
				State = 2304; argumentList();
				}
			}

			State = 2307; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ExecuteArgumentListContext executeArgumentList() {
			return GetRuleContext<ExecuteArgumentListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ITerminalNode EXECUTE() { return GetToken(TSQLParser.EXECUTE, 0); }
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_executeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2309; Match(EXECUTE);
			State = 2318;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				{
				State = 2310; qualifiedName();
				State = 2312;
				switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					State = 2311; executeArgumentList();
					}
					break;
				}
				}
				break;
			case LPAREN:
				{
				State = 2314; Match(LPAREN);
				State = 2315; expression();
				State = 2316; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2321;
			switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				State = 2320; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteArgumentListContext : ParserRuleContext {
		public ExecuteArgumentContext executeArgument(int i) {
			return GetRuleContext<ExecuteArgumentContext>(i);
		}
		public ExecuteArgumentContext[] executeArgument() {
			return GetRuleContexts<ExecuteArgumentContext>();
		}
		public ExecuteArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteArgumentListContext executeArgumentList() {
		ExecuteArgumentListContext _localctx = new ExecuteArgumentListContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_executeArgumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2323; executeArgument();
			State = 2328;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,308,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2324; Match(COMMA);
					State = 2325; executeArgument();
					}
					} 
				}
				State = 2330;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,308,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteArgumentContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(TSQLParser.EQUALS, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ExecuteArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteArgumentContext executeArgument() {
		ExecuteArgumentContext _localctx = new ExecuteArgumentContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_executeArgument);
		int _la;
		try {
			State = 2340;
			switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2331; variable();
				State = 2332; Match(EQUALS);
				State = 2334;
				switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					State = 2333; expression();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2336; expression();
				State = 2338;
				switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					State = 2337;
					_la = _input.La(1);
					if ( !(_la==OUTPUT || _la==OUT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedParameterListContext : ParserRuleContext {
		public EmbeddedParameterContext[] embeddedParameter() {
			return GetRuleContexts<EmbeddedParameterContext>();
		}
		public EmbeddedParameterContext embeddedParameter(int i) {
			return GetRuleContext<EmbeddedParameterContext>(i);
		}
		public EmbeddedParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterEmbeddedParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitEmbeddedParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedParameterListContext embeddedParameterList() {
		EmbeddedParameterListContext _localctx = new EmbeddedParameterListContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_embeddedParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2342; embeddedParameter();
			State = 2347;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2343; Match(COMMA);
				State = 2344; embeddedParameter();
				}
				}
				State = 2349;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedParameterContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public EmbeddedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterEmbeddedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitEmbeddedParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedParameterContext embeddedParameter() {
		EmbeddedParameterContext _localctx = new EmbeddedParameterContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_embeddedParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2350; variable();
			State = 2351; type();
			State = 2353;
			_la = _input.La(1);
			if (_la==OUTPUT || _la==OUT) {
				{
				State = 2352;
				_la = _input.La(1);
				if ( !(_la==OUTPUT || _la==OUT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterStringTypeLengthContext : ParserRuleContext {
		public ITerminalNode MAX() { return GetToken(TSQLParser.MAX, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public CharacterStringTypeLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterStringTypeLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCharacterStringTypeLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCharacterStringTypeLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterStringTypeLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterStringTypeLengthContext characterStringTypeLength() {
		CharacterStringTypeLengthContext _localctx = new CharacterStringTypeLengthContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_characterStringTypeLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2355; Match(LPAREN);
			State = 2358;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 2356; integerValue();
				}
				break;
			case MAX:
				{
				State = 2357; Match(MAX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2360; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterStringTypeContext : ParserRuleContext {
		public ITerminalNode NVARCHAR() { return GetToken(TSQLParser.NVARCHAR, 0); }
		public ITerminalNode VARYING() { return GetToken(TSQLParser.VARYING, 0); }
		public ITerminalNode CHARACTER() { return GetToken(TSQLParser.CHARACTER, 0); }
		public ITerminalNode CHAR() { return GetToken(TSQLParser.CHAR, 0); }
		public CharacterStringTypeLengthContext characterStringTypeLength() {
			return GetRuleContext<CharacterStringTypeLengthContext>(0);
		}
		public ITerminalNode NCHAR() { return GetToken(TSQLParser.NCHAR, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSQLParser.VARCHAR, 0); }
		public CharacterStringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterStringType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCharacterStringType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCharacterStringType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterStringType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterStringTypeContext characterStringType() {
		CharacterStringTypeContext _localctx = new CharacterStringTypeContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_characterStringType);
		int _la;
		try {
			State = 2371;
			switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2362;
				_la = _input.La(1);
				if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (CHAR - 125)) | (1L << (CHARACTER - 125)) | (1L << (NCHAR - 125)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2364;
				switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					State = 2363; characterStringTypeLength();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2366;
				_la = _input.La(1);
				if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (CHAR - 125)) | (1L << (CHARACTER - 125)) | (1L << (NCHAR - 125)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2367; Match(VARYING);
				State = 2368; characterStringTypeLength();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2369;
				_la = _input.La(1);
				if ( !(_la==VARCHAR || _la==NVARCHAR) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2370; characterStringTypeLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public IToken Scale;
		public IToken Precision;
		public ITerminalNode DECIMAL() { return GetToken(TSQLParser.DECIMAL, 0); }
		public ITerminalNode NUMERIC() { return GetToken(TSQLParser.NUMERIC, 0); }
		public ITerminalNode[] IntegerLiteral() { return GetTokens(TSQLParser.IntegerLiteral); }
		public ITerminalNode IntegerLiteral(int i) {
			return GetToken(TSQLParser.IntegerLiteral, i);
		}
		public ITerminalNode FLOAT() { return GetToken(TSQLParser.FLOAT, 0); }
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_numericType);
		int _la;
		try {
			State = 2384;
			switch (_input.La(1)) {
			case DECIMAL:
			case NUMERIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2373;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==NUMERIC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2381;
				switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					State = 2374; Match(LPAREN);
					State = 2375; _localctx.Scale = Match(IntegerLiteral);
					State = 2378;
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 2376; Match(COMMA);
						State = 2377; _localctx.Precision = Match(IntegerLiteral);
						}
					}

					State = 2380; Match(RPAREN);
					}
					break;
				}
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2383; Match(FLOAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		public ITerminalNode SMALLINT() { return GetToken(TSQLParser.SMALLINT, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSQLParser.BIGINT, 0); }
		public ITerminalNode INT() { return GetToken(TSQLParser.INT, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSQLParser.TINYINT, 0); }
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_integerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2386;
			_la = _input.La(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentityTypeContext : ParserRuleContext {
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public IdentitySpecContext identitySpec() {
			return GetRuleContext<IdentitySpecContext>(0);
		}
		public IdentityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identityType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIdentityType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIdentityType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityTypeContext identityType() {
		IdentityTypeContext _localctx = new IdentityTypeContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_identityType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389;
			_la = _input.La(1);
			if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)))) != 0)) {
				{
				State = 2388; integerType();
				}
			}

			State = 2391; identitySpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentitySpecContext : ParserRuleContext {
		public IntegerValueContext Seed;
		public IntegerValueContext Increment;
		public IntegerValueContext integerValue(int i) {
			return GetRuleContext<IntegerValueContext>(i);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSQLParser.IDENTITY, 0); }
		public IntegerValueContext[] integerValue() {
			return GetRuleContexts<IntegerValueContext>();
		}
		public IdentitySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identitySpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIdentitySpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIdentitySpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentitySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentitySpecContext identitySpec() {
		IdentitySpecContext _localctx = new IdentitySpecContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_identitySpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2393; Match(IDENTITY);
			State = 2402;
			switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				State = 2394; Match(LPAREN);
				State = 2395; _localctx.Seed = integerValue();
				State = 2398;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 2396; Match(COMMA);
					State = 2397; _localctx.Increment = integerValue();
					}
				}

				State = 2400; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyOrFieldContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public PropertyOrFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyOrField; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPropertyOrField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPropertyOrField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyOrField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyOrFieldContext propertyOrField() {
		PropertyOrFieldContext _localctx = new PropertyOrFieldContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_propertyOrField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2404; Match(DOT);
			State = 2405; qualifiedNamePart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2407;
			_la = _input.La(1);
			if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (ADD_ASSIGN - 172)) | (1L << (SUB_ASSIGN - 172)) | (1L << (MUL_ASSIGN - 172)) | (1L << (DIV_ASSIGN - 172)) | (1L << (AND_ASSIGN - 172)) | (1L << (OR_ASSIGN - 172)) | (1L << (XOR_ASSIGN - 172)) | (1L << (MOD_ASSIGN - 172)) | (1L << (EQUALS - 172)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedColumnNameListContext : ParserRuleContext {
		public QualifiedColumnNameContext qualifiedColumnName(int i) {
			return GetRuleContext<QualifiedColumnNameContext>(i);
		}
		public QualifiedColumnNameContext[] qualifiedColumnName() {
			return GetRuleContexts<QualifiedColumnNameContext>();
		}
		public QualifiedColumnNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedColumnNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedColumnNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedColumnNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedColumnNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedColumnNameListContext qualifiedColumnNameList() {
		QualifiedColumnNameListContext _localctx = new QualifiedColumnNameListContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_qualifiedColumnNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2409; qualifiedColumnName();
			State = 2414;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2410; Match(COMMA);
				State = 2411; qualifiedColumnName();
				}
				}
				State = 2416;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedColumnNameContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public QualifiedColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedColumnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedColumnNameContext qualifiedColumnName() {
		QualifiedColumnNameContext _localctx = new QualifiedColumnNameContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_qualifiedColumnName);
		try {
			State = 2426;
			switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2417; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2418; qualifiedName();
				State = 2419; Match(DOT);
				State = 2420; keyword();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2422; tempTable();
				State = 2423; Match(DOT);
				State = 2424; qualifiedNamePart();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnIndexOrNameContext : ParserRuleContext {
		public IntegerValueContext ColumnIndex;
		public QualifiedNameContext ColumnName;
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ColumnIndexOrNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnIndexOrName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnIndexOrName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnIndexOrName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnIndexOrName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnIndexOrNameContext columnIndexOrName() {
		ColumnIndexOrNameContext _localctx = new ColumnIndexOrNameContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_columnIndexOrName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2430;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 2428; _localctx.ColumnIndex = integerValue();
				}
				break;
			case LBRACKET:
			case Identifier:
				{
				State = 2429; _localctx.ColumnName = qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_columnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2432; qualifiedNamePart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAliasContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public ColumnAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAliasContext columnAlias() {
		ColumnAliasContext _localctx = new ColumnAliasContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_columnAlias);
		try {
			State = 2436;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2434; qualifiedNamePart();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2435; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorIdContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CursorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorIdContext cursorId() {
		CursorIdContext _localctx = new CursorIdContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_cursorId);
		try {
			State = 2440;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2438; qualifiedName();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2439; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorStatementContext : ParserRuleContext {
		public CursorFetchContext cursorFetch() {
			return GetRuleContext<CursorFetchContext>(0);
		}
		public CursorDeallocateContext cursorDeallocate() {
			return GetRuleContext<CursorDeallocateContext>(0);
		}
		public CursorCloseContext cursorClose() {
			return GetRuleContext<CursorCloseContext>(0);
		}
		public CursorOpenContext cursorOpen() {
			return GetRuleContext<CursorOpenContext>(0);
		}
		public CursorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorStatementContext cursorStatement() {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_cursorStatement);
		try {
			State = 2446;
			switch (_input.La(1)) {
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2442; cursorOpen();
				}
				break;
			case CLOSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2443; cursorClose();
				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2444; cursorFetch();
				}
				break;
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2445; cursorDeallocate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorOpenContext : ParserRuleContext {
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(TSQLParser.OPEN, 0); }
		public CursorOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorOpen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorOpen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorOpen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorOpen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorOpenContext cursorOpen() {
		CursorOpenContext _localctx = new CursorOpenContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_cursorOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2448; Match(OPEN);
			State = 2449; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorCloseContext : ParserRuleContext {
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(TSQLParser.CLOSE, 0); }
		public CursorCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorClose; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorClose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorClose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorClose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorCloseContext cursorClose() {
		CursorCloseContext _localctx = new CursorCloseContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_cursorClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2451; Match(CLOSE);
			State = 2452; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorFetchContext : ParserRuleContext {
		public ITerminalNode ABSOLUTE() { return GetToken(TSQLParser.ABSOLUTE, 0); }
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public ITerminalNode FIRST() { return GetToken(TSQLParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(TSQLParser.LAST, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode FETCH() { return GetToken(TSQLParser.FETCH, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode RELATIVE() { return GetToken(TSQLParser.RELATIVE, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public ITerminalNode PRIOR() { return GetToken(TSQLParser.PRIOR, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorFetch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorFetch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorFetchContext cursorFetch() {
		CursorFetchContext _localctx = new CursorFetchContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_cursorFetch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2454; Match(FETCH);
			State = 2470;
			switch (_input.La(1)) {
			case NEXT:
				{
				State = 2455; Match(NEXT);
				}
				break;
			case PRIOR:
				{
				State = 2456; Match(PRIOR);
				}
				break;
			case FIRST:
				{
				State = 2457; Match(FIRST);
				}
				break;
			case LAST:
				{
				State = 2458; Match(LAST);
				}
				break;
			case ABSOLUTE:
				{
				State = 2459; Match(ABSOLUTE);
				State = 2462;
				switch (_input.La(1)) {
				case LPAREN:
				case PLUS:
				case MINUS:
				case IntegerLiteral:
					{
					State = 2460; integerValue();
					}
					break;
				case AT:
					{
					State = 2461; variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RELATIVE:
				{
				State = 2464; Match(RELATIVE);
				State = 2467;
				switch (_input.La(1)) {
				case LPAREN:
				case PLUS:
				case MINUS:
				case IntegerLiteral:
					{
					State = 2465; integerValue();
					}
					break;
				case AT:
					{
					State = 2466; variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LBRACKET:
			case Identifier:
				{
				State = 2469; qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2474;
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 2472; Match(FROM);
				State = 2473; cursorId();
				}
			}

			State = 2476; Match(INTO);
			State = 2477; variable();
			State = 2482;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2478; Match(COMMA);
				State = 2479; variable();
				}
				}
				State = 2484;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorDeallocateContext : ParserRuleContext {
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode DEALLOCATE() { return GetToken(TSQLParser.DEALLOCATE, 0); }
		public CursorDeallocateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorDeallocate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorDeallocate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorDeallocate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorDeallocate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorDeallocateContext cursorDeallocate() {
		CursorDeallocateContext _localctx = new CursorDeallocateContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_cursorDeallocate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2485; Match(DEALLOCATE);
			State = 2486; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpressionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public StringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpressionContext stringExpression() {
		StringExpressionContext _localctx = new StringExpressionContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_stringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2488; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollateContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSQLParser.COLLATE, 0); }
		public CollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollateContext collate() {
		CollateContext _localctx = new CollateContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2490; Match(COLLATE);
			State = 2491; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusterTypeContext : ParserRuleContext {
		public ITerminalNode NONCLUSTERED() { return GetToken(TSQLParser.NONCLUSTERED, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSQLParser.CLUSTERED, 0); }
		public ClusterTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clusterType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterClusterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitClusterType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClusterType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusterTypeContext clusterType() {
		ClusterTypeContext _localctx = new ClusterTypeContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_clusterType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2493;
			_la = _input.La(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedKeywordContext : ParserRuleContext {
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public EscapedKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterEscapedKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitEscapedKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapedKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapedKeywordContext escapedKeyword() {
		EscapedKeywordContext _localctx = new EscapedKeywordContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_escapedKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2495; Match(LBRACKET);
			State = 2496; keyword();
			State = 2497; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(TSQLParser.CASE, 0); }
		public ITerminalNode LOG() { return GetToken(TSQLParser.LOG, 0); }
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSQLParser.DECIMAL, 0); }
		public ITerminalNode IF() { return GetToken(TSQLParser.IF, 0); }
		public ITerminalNode READONLY() { return GetToken(TSQLParser.READONLY, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSQLParser.OPTIMIZE, 0); }
		public ITerminalNode FIRST() { return GetToken(TSQLParser.FIRST, 0); }
		public ITerminalNode COMPUTE() { return GetToken(TSQLParser.COMPUTE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSQLParser.EXECUTE, 0); }
		public ITerminalNode TRY() { return GetToken(TSQLParser.TRY, 0); }
		public ITerminalNode OF() { return GetToken(TSQLParser.OF, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSQLParser.ROWCOUNT, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public ITerminalNode FETCH() { return GetToken(TSQLParser.FETCH, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSQLParser.RELATIVE, 0); }
		public ITerminalNode USED() { return GetToken(TSQLParser.USED, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSQLParser.PRIOR, 0); }
		public ITerminalNode OVER() { return GetToken(TSQLParser.OVER, 0); }
		public ITerminalNode BETWEEN() { return GetToken(TSQLParser.BETWEEN, 0); }
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public ITerminalNode GROUP() { return GetToken(TSQLParser.GROUP, 0); }
		public ITerminalNode OR() { return GetToken(TSQLParser.OR, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSQLParser.VARCHAR, 0); }
		public ITerminalNode IN() { return GetToken(TSQLParser.IN, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSQLParser.FLOAT, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSQLParser.CLUSTERED, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode MATCHED() { return GetToken(TSQLParser.MATCHED, 0); }
		public ITerminalNode ORDER() { return GetToken(TSQLParser.ORDER, 0); }
		public ITerminalNode WHEN() { return GetToken(TSQLParser.WHEN, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSQLParser.REFERENCES, 0); }
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public ITerminalNode RAW() { return GetToken(TSQLParser.RAW, 0); }
		public ITerminalNode EXCEPT() { return GetToken(TSQLParser.EXCEPT, 0); }
		public ITerminalNode INT() { return GetToken(TSQLParser.INT, 0); }
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSQLParser.COMMIT, 0); }
		public ITerminalNode FULL() { return GetToken(TSQLParser.FULL, 0); }
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSQLParser.SOURCE, 0); }
		public ITerminalNode PATH() { return GetToken(TSQLParser.PATH, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public ITerminalNode CROSS() { return GetToken(TSQLParser.CROSS, 0); }
		public ITerminalNode OPTION() { return GetToken(TSQLParser.OPTION, 0); }
		public ITerminalNode CHARACTER() { return GetToken(TSQLParser.CHARACTER, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public ITerminalNode CHAR() { return GetToken(TSQLParser.CHAR, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ITerminalNode NCHAR() { return GetToken(TSQLParser.NCHAR, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(TSQLParser.DEALLOCATE, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public ITerminalNode LEFT() { return GetToken(TSQLParser.LEFT, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(TSQLParser.ABSOLUTE, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSQLParser.NVARCHAR, 0); }
		public ITerminalNode DECLARE() { return GetToken(TSQLParser.DECLARE, 0); }
		public ITerminalNode VARYING() { return GetToken(TSQLParser.VARYING, 0); }
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode WHILE() { return GetToken(TSQLParser.WHILE, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSQLParser.EXPLICIT, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSQLParser.NONCLUSTERED, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSQLParser.EXISTS, 0); }
		public ITerminalNode ESCAPE() { return GetToken(TSQLParser.ESCAPE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSQLParser.FUNCTION, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(TSQLParser.TRUNCATE, 0); }
		public ITerminalNode INNER() { return GetToken(TSQLParser.INNER, 0); }
		public ITerminalNode GOTO() { return GetToken(TSQLParser.GOTO, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public ITerminalNode SELECT() { return GetToken(TSQLParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public ITerminalNode COUNT() { return GetToken(TSQLParser.COUNT, 0); }
		public ITerminalNode UNION() { return GetToken(TSQLParser.UNION, 0); }
		public ITerminalNode WAITFOR() { return GetToken(TSQLParser.WAITFOR, 0); }
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public ITerminalNode SWITCH() { return GetToken(TSQLParser.SWITCH, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSQLParser.DISABLE, 0); }
		public ITerminalNode CATCH() { return GetToken(TSQLParser.CATCH, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSQLParser.RIGHT, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSQLParser.INCLUDE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public ITerminalNode RETURN() { return GetToken(TSQLParser.RETURN, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSQLParser.ISOLATION, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSQLParser.FOREIGN, 0); }
		public ITerminalNode CAST() { return GetToken(TSQLParser.CAST, 0); }
		public ITerminalNode JOIN() { return GetToken(TSQLParser.JOIN, 0); }
		public ITerminalNode RAISE_ERROR() { return GetToken(TSQLParser.RAISE_ERROR, 0); }
		public ITerminalNode PRINT() { return GetToken(TSQLParser.PRINT, 0); }
		public ITerminalNode RANGE() { return GetToken(TSQLParser.RANGE, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSQLParser.BIGINT, 0); }
		public ITerminalNode OUTER() { return GetToken(TSQLParser.OUTER, 0); }
		public ITerminalNode THEN() { return GetToken(TSQLParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSQLParser.DATABASE, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSQLParser.COLLATE, 0); }
		public ITerminalNode USING() { return GetToken(TSQLParser.USING, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSQLParser.COUNT_BIG, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSQLParser.TRIGGER, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSQLParser.REPLICATION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSQLParser.SCHEME, 0); }
		public ITerminalNode IS() { return GetToken(TSQLParser.IS, 0); }
		public ITerminalNode CONVERT() { return GetToken(TSQLParser.CONVERT, 0); }
		public ITerminalNode NUMERIC() { return GetToken(TSQLParser.NUMERIC, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TSQLParser.CONTINUE, 0); }
		public ITerminalNode AUTO() { return GetToken(TSQLParser.AUTO, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSQLParser.SPLIT, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSQLParser.IDENTITY, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSQLParser.ROLLBACK, 0); }
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode BREAK() { return GetToken(TSQLParser.BREAK, 0); }
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSQLParser.LEVEL, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode DELAY() { return GetToken(TSQLParser.DELAY, 0); }
		public ITerminalNode TO() { return GetToken(TSQLParser.TO, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSQLParser.TINYINT, 0); }
		public ITerminalNode ALL() { return GetToken(TSQLParser.ALL, 0); }
		public ITerminalNode OPEN() { return GetToken(TSQLParser.OPEN, 0); }
		public ITerminalNode INTERSECT() { return GetToken(TSQLParser.INTERSECT, 0); }
		public ITerminalNode MAX() { return GetToken(TSQLParser.MAX, 0); }
		public ITerminalNode CLOSE() { return GetToken(TSQLParser.CLOSE, 0); }
		public ITerminalNode ADD() { return GetToken(TSQLParser.ADD, 0); }
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSQLParser.REMOVE, 0); }
		public ITerminalNode APPLY() { return GetToken(TSQLParser.APPLY, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public ITerminalNode HAVING() { return GetToken(TSQLParser.HAVING, 0); }
		public ITerminalNode TARGET() { return GetToken(TSQLParser.TARGET, 0); }
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSQLParser.SMALLINT, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSQLParser.ENABLE, 0); }
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public ITerminalNode LAST() { return GetToken(TSQLParser.LAST, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public ITerminalNode WHERE() { return GetToken(TSQLParser.WHERE, 0); }
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << READONLY) | (1L << TRY) | (1L << CATCH) | (1L << TRANSACTION) | (1L << COMMIT) | (1L << ROLLBACK) | (1L << RAISE_ERROR) | (1L << PRINT) | (1L << CLUSTERED) | (1L << NONCLUSTERED) | (1L << TABLE) | (1L << PROCEDURE) | (1L << PARTITION) | (1L << INDEX) | (1L << DATABASE) | (1L << CONSTRAINT) | (1L << FOREIGN) | (1L << PRIMARY) | (1L << KEY) | (1L << REFERENCES) | (1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL) | (1L << CURSOR) | (1L << FETCH) | (1L << OPEN) | (1L << CLOSE) | (1L << DEALLOCATE) | (1L << FIRST) | (1L << LAST) | (1L << PRIOR) | (1L << NEXT) | (1L << ABSOLUTE) | (1L << RELATIVE) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << COLLATE) | (1L << COUNT) | (1L << COUNT_BIG) | (1L << DISTINCT) | (1L << UNIQUE) | (1L << MAX) | (1L << TOP) | (1L << WHEN) | (1L << THEN) | (1L << SWITCH) | (1L << OVER) | (1L << INCLUDE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTERSECT - 64)) | (1L << (EXCEPT - 64)) | (1L << (UNION - 64)) | (1L << (ALL - 64)) | (1L << (APPLY - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (WHILE - 64)) | (1L << (GOTO - 64)) | (1L << (CONTINUE - 64)) | (1L << (BREAK - 64)) | (1L << (TRUNCATE - 64)) | (1L << (ADD - 64)) | (1L << (REMOVE - 64)) | (1L << (ALTER - 64)) | (1L << (CREATE - 64)) | (1L << (DROP - 64)) | (1L << (AS - 64)) | (1L << (WITH - 64)) | (1L << (FOR - 64)) | (1L << (REPLICATION - 64)) | (1L << (BEGIN - 64)) | (1L << (END - 64)) | (1L << (EXISTS - 64)) | (1L << (DEFAULT - 64)) | (1L << (VARYING - 64)) | (1L << (SELECT - 64)) | (1L << (UPDATE - 64)) | (1L << (INSERT - 64)) | (1L << (DELETE - 64)) | (1L << (WHERE - 64)) | (1L << (FROM - 64)) | (1L << (JOIN - 64)) | (1L << (DECLARE - 64)) | (1L << (OPTION - 64)) | (1L << (SET - 64)) | (1L << (TO - 64)) | (1L << (ON - 64)) | (1L << (OFF - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (EXECUTE - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (IS - 64)) | (1L << (IN - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (BETWEEN - 64)) | (1L << (RETURN - 64)) | (1L << (OUTPUT - 64)) | (1L << (OUT - 64)) | (1L << (LIKE - 64)) | (1L << (ESCAPE - 64)) | (1L << (OF - 64)) | (1L << (DECIMAL - 64)) | (1L << (NUMERIC - 64)) | (1L << (VARCHAR - 64)) | (1L << (NVARCHAR - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (NCHAR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT - 128)) | (1L << (IDENTITY - 128)) | (1L << (LOG - 128)) | (1L << (AND - 128)) | (1L << (OR - 128)) | (1L << (ASC - 128)) | (1L << (DESC - 128)) | (1L << (STATISTICS - 128)) | (1L << (USING - 128)) | (1L << (MERGE - 128)) | (1L << (MATCHED - 128)) | (1L << (TARGET - 128)) | (1L << (SOURCE - 128)) | (1L << (XML - 128)) | (1L << (RAW - 128)) | (1L << (AUTO - 128)) | (1L << (EXPLICIT - 128)) | (1L << (PATH - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (TRIGGER - 128)) | (1L << (WAITFOR - 128)) | (1L << (DELAY - 128)) | (1L << (COMPUTE - 128)) | (1L << (LEVEL - 128)) | (1L << (ISOLATION - 128)) | (1L << (SPLIT - 128)) | (1L << (RANGE - 128)) | (1L << (FUNCTION - 128)) | (1L << (SCHEME - 128)) | (1L << (USED - 128)) | (1L << (OPTIMIZE - 128)) | (1L << (ROWCOUNT - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 34: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);

		case 35: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);

		case 36: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);

		case 37: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);

		case 38: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);

		case 39: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);

		case 40: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);

		case 41: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);

		case 42: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);

		case 45: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(_ctx, 2);

		case 21: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 2);

		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(_ctx, 4);

		case 17: return Precpred(_ctx, 3);

		case 18: return Precpred(_ctx, 2);

		case 19: return Precpred(_ctx, 1);

		case 11: return Precpred(_ctx, 9);

		case 12: return Precpred(_ctx, 8);

		case 13: return Precpred(_ctx, 7);

		case 14: return Precpred(_ctx, 6);

		case 15: return Precpred(_ctx, 5);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(_ctx, 3);

		case 9: return Precpred(_ctx, 2);

		case 10: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(_ctx, 3);

		case 23: return Precpred(_ctx, 2);

		case 24: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(_ctx, 4);

		case 26: return Precpred(_ctx, 3);

		case 27: return Precpred(_ctx, 2);

		case 28: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xCF\x9C8\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x3\x2"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x17A\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x183\n\x4\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x5\x5\x189\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x190\n\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x5\x6\x196\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5"+
		"\a\x19E\n\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1A4\n\a\x3\a\x3\a\x5\a\x1A8\n\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x5\a\x1BC\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x5\b\x1C7\n\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x5\n"+
		"\x1D1\n\n\x3\n\x3\n\x3\n\x3\n\x5\n\x1D7\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1F3\n\f\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\a\r\x1FA\n\r\f\r\xE\r\x1FD\v\r\x3\r\x3\r\x3\r\x3\r\x5\r\x203\n\r\x3"+
		"\xE\x3\xE\x3\xE\x5\xE\x208\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x20E\n\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x214\n\xF\x3\xF\x5\xF\x217\n\xF\x3\xF\x3"+
		"\xF\x3\xF\x5\xF\x21C\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5"+
		"\x10\x224\n\x10\x5\x10\x226\n\x10\x3\x11\x3\x11\x5\x11\x22A\n\x11\x3\x11"+
		"\x5\x11\x22D\n\x11\x3\x11\x3\x11\x3\x11\x5\x11\x232\n\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x23A\n\x11\x3\x11\x5\x11\x23D\n\x11"+
		"\x3\x11\x5\x11\x240\n\x11\x3\x11\x5\x11\x243\n\x11\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x5\x13\x254\n\x13\x3\x14\x3\x14\x3\x14\a\x14\x259\n\x14"+
		"\f\x14\xE\x14\x25C\v\x14\x3\x15\x3\x15\x5\x15\x260\n\x15\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x273\n\x18\x3\x18\x5\x18\x276"+
		"\n\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x284\n\x1A\x3\x1A\x5\x1A\x287\n\x1A\x3\x1A"+
		"\x5\x1A\x28A\n\x1A\x3\x1A\x5\x1A\x28D\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x5\x1C\x294\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2A3\n\x1C\x5\x1C"+
		"\x2A5\n\x1C\x3\x1D\x3\x1D\x5\x1D\x2A9\n\x1D\x3\x1E\x5\x1E\x2AC\n\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3 \x3 \x6 \x2BC\n \r \xE \x2BD\x3 \x5 \x2C1\n \x3 \x3 \x3"+
		" \x3 \x3 \x6 \x2C8\n \r \xE \x2C9\x3 \x5 \x2CD\n \x3 \x3 \x5 \x2D1\n "+
		"\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x2DA\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x5\"\x2E3\n\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$"+
		"\x3$\a$\x2F2\n$\f$\xE$\x2F5\v$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\a%"+
		"\x300\n%\f%\xE%\x303\v%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x30E\n"+
		"&\x3&\a&\x311\n&\f&\xE&\x314\v&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\a\'\x31C"+
		"\n\'\f\'\xE\'\x31F\v\'\x3(\x3(\x3(\x3(\x3(\x3(\a(\x327\n(\f(\xE(\x32A"+
		"\v(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\a)\x338\n)\f)\xE)"+
		"\x33B\v)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\a*\x35E\n*\f*\xE*\x361\v*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\a+\x36C"+
		"\n+\f+\xE+\x36F\v+\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\a,"+
		"\x37D\n,\f,\xE,\x380\v,\x3-\x3-\x3-\x3-\x3-\x5-\x387\n-\x3.\x3.\x3.\x5"+
		".\x38C\n.\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x39A\n/"+
		"\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x3A3\n/\x3/\x3/\a/\x3A7\n/\f/\xE/\x3AA"+
		"\v/\x3\x30\x3\x30\x3\x30\x5\x30\x3AF\n\x30\x3\x30\x5\x30\x3B2\n\x30\x3"+
		"\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x3BC\n\x31"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x3C2\n\x32\f\x32\xE\x32\x3C5\v\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x3CB\n\x32\x3\x32\x3\x32\x5\x32\x3CF"+
		"\n\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\x5\x36\x3E5\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\a\x38\x3F5\n\x38"+
		"\f\x38\xE\x38\x3F8\v\x38\x3\x38\x3\x38\x5\x38\x3FC\n\x38\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\a\x39\x406\n\x39\f\x39\xE\x39"+
		"\x409\v\x39\x3\x39\x3\x39\x5\x39\x40D\n\x39\x3:\x3:\x5:\x411\n:\x3;\x5"+
		";\x414\n;\x3;\x3;\x3;\x3;\x3;\x5;\x41B\n;\x3<\x3<\x6<\x41F\n<\r<\xE<\x420"+
		"\x3<\x3<\x3<\x5<\x426\n<\x3=\x3=\x6=\x42A\n=\r=\xE=\x42B\x3=\a=\x42F\n"+
		"=\f=\xE=\x432\v=\x3=\x5=\x435\n=\x3>\x3>\x3>\a>\x43A\n>\f>\xE>\x43D\v"+
		">\x3?\x6?\x440\n?\r?\xE?\x441\x3?\x3?\x5?\x446\n?\x3@\x6@\x449\n@\r@\xE"+
		"@\x44A\x3@\x3@\x5@\x44F\n@\x3@\x3@\x3@\x3@\x5@\x455\n@\x3\x41\x6\x41\x458"+
		"\n\x41\r\x41\xE\x41\x459\x3\x41\x3\x41\x6\x41\x45E\n\x41\r\x41\xE\x41"+
		"\x45F\x3\x41\x5\x41\x463\n\x41\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43"+
		"\a\x43\x46B\n\x43\f\x43\xE\x43\x46E\v\x43\x5\x43\x470\n\x43\x3\x43\x3"+
		"\x43\x3\x43\x3\x43\a\x43\x476\n\x43\f\x43\xE\x43\x479\v\x43\x5\x43\x47B"+
		"\n\x43\x3\x44\x3\x44\x5\x44\x47F\n\x44\x3\x44\x3\x44\x5\x44\x483\n\x44"+
		"\x3\x44\x5\x44\x486\n\x44\x3\x44\x5\x44\x489\n\x44\x3\x44\x5\x44\x48C"+
		"\n\x44\x3\x44\x5\x44\x48F\n\x44\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x495"+
		"\n\x45\x3\x46\x3\x46\x3G\x3G\x3G\x3G\aG\x49D\nG\fG\xEG\x4A0\vG\x3H\x3"+
		"H\aH\x4A4\nH\fH\xEH\x4A7\vH\x3I\x3I\x3I\x3I\x3I\x3I\x5I\x4AF\nI\x3I\x3"+
		"I\x5I\x4B3\nI\x3I\x5I\x4B6\nI\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J"+
		"\x3J\x3J\x3J\x5J\x4C5\nJ\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3"+
		"K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x5K\x4DB\nK\x3K\x3K\x5K\x4DF\nK\x3K"+
		"\x3K\x3K\x5K\x4E4\nK\x3K\x3K\x3K\x3K\x5K\x4EA\nK\x3L\x3L\x5L\x4EE\nL\x3"+
		"L\x5L\x4F1\nL\x3M\x3M\x5M\x4F5\nM\x3M\x5M\x4F8\nM\x3N\x3N\x3N\x3O\x3O"+
		"\x5O\x4FF\nO\x3P\x3P\x3P\x3P\x3P\x5P\x506\nP\x3Q\x3Q\x3Q\x3Q\x3R\x3R\x3"+
		"R\x3R\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x516\nS\x3S\x3S\x6S\x51A\nS\rS\xES\x51B"+
		"\x3S\x3S\x5S\x520\nS\x5S\x522\nS\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3"+
		"T\x3T\x3U\x3U\x3U\x5U\x532\nU\x3U\x3U\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x5V"+
		"\x53D\nV\x3W\x3W\x5W\x541\nW\x3W\x6W\x544\nW\rW\xEW\x545\x3W\x5W\x549"+
		"\nW\x3W\aW\x54C\nW\fW\xEW\x54F\vW\x3W\x5W\x552\nW\x3W\x5W\x555\nW\x3W"+
		"\x3W\x5W\x559\nW\x3W\x3W\x6W\x55D\nW\rW\xEW\x55E\x3W\x5W\x562\nW\x3W\a"+
		"W\x565\nW\fW\xEW\x568\vW\x3W\x5W\x56B\nW\x3W\x5W\x56E\nW\x5W\x570\nW\x3"+
		"X\x5X\x573\nX\x3X\x3X\x3X\aX\x578\nX\fX\xEX\x57B\vX\x3Y\x5Y\x57E\nY\x3"+
		"Y\x3Y\x3Y\aY\x583\nY\fY\xEY\x586\vY\x3Z\x3Z\x3Z\x3Z\x3Z\x3[\x3[\x3[\x3"+
		"[\a[\x591\n[\f[\xE[\x594\v[\x3[\x3[\x3\\\x3\\\x3\\\x3\\\x3\\\x5\\\x59D"+
		"\n\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3]\x3]\x5]\x5A6\n]\x3]\x3]\x5]\x5AA\n]"+
		"\x3^\x3^\x5^\x5AE\n^\x3^\x3^\x5^\x5B2\n^\x3^\x3^\x3^\x3^\x5^\x5B8\n^\x3"+
		"_\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x5_\x5C2\n_\x5_\x5C4\n_\x3`\x3`\x3`\x3`"+
		"\a`\x5CA\n`\f`\xE`\x5CD\v`\x3`\x3`\x3`\x3`\x5`\x5D3\n`\x3\x61\x3\x61\x3"+
		"\x61\x3\x61\a\x61\x5D9\n\x61\f\x61\xE\x61\x5DC\v\x61\x3\x61\x3\x61\x3"+
		"\x62\x3\x62\x3\x63\x3\x63\x3\x63\x3\x63\a\x63\x5E6\n\x63\f\x63\xE\x63"+
		"\x5E9\v\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x5EF\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x5F7\n\x63\x5\x63\x5F9\n\x63\x3\x64"+
		"\x3\x64\x5\x64\x5FD\n\x64\x3\x64\x3\x64\x5\x64\x601\n\x64\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x3\x64\x5\x64\x608\n\x64\x3\x64\x5\x64\x60B\n\x64\x3\x64"+
		"\x3\x64\x5\x64\x60F\n\x64\x3\x65\x3\x65\x3\x65\x3\x66\x3\x66\x3\x66\a"+
		"\x66\x617\n\x66\f\x66\xE\x66\x61A\v\x66\x3g\x3g\x3g\ag\x61F\ng\fg\xEg"+
		"\x622\vg\x3h\x3h\x3h\x3h\x3h\x5h\x629\nh\x5h\x62B\nh\x3h\x5h\x62E\nh\x3"+
		"h\x5h\x631\nh\x3h\x3h\x3h\x5h\x636\nh\x5h\x638\nh\x3h\x3h\x3h\x3h\x3h"+
		"\x5h\x63F\nh\x5h\x641\nh\x3h\x5h\x644\nh\x3h\x5h\x647\nh\x3h\x5h\x64A"+
		"\nh\x3h\x3h\x3h\x5h\x64F\nh\x5h\x651\nh\x5h\x653\nh\x3i\x3i\x3i\ai\x658"+
		"\ni\fi\xEi\x65B\vi\x3j\x3j\x5j\x65F\nj\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x5"+
		"j\x668\nj\x3j\x3j\x3j\x3j\x5j\x66E\nj\x5j\x670\nj\x3k\x3k\x3l\x3l\x3l"+
		"\x3l\x5l\x678\nl\x3m\x3m\x3m\x3m\x3m\x3m\x3m\x6m\x681\nm\rm\xEm\x682\x3"+
		"m\x3m\x3m\x5m\x688\nm\x3n\x3n\x6n\x68C\nn\rn\xEn\x68D\x3n\an\x691\nn\f"+
		"n\xEn\x694\vn\x3o\x3o\x5o\x698\no\x3o\x3o\x3o\x3p\x3p\x5p\x69F\np\x3p"+
		"\x3p\x3p\x3p\x3p\x3q\x3q\x3q\x3q\x3q\x3q\x5q\x6AC\nq\x3r\x3r\x3r\x3r\x3"+
		"r\x3r\x3r\x5r\x6B5\nr\x3s\x3s\x5s\x6B9\ns\x3s\x3s\x3s\x3s\x3s\as\x6C0"+
		"\ns\fs\xEs\x6C3\vs\x3s\x5s\x6C6\ns\x3s\as\x6C9\ns\fs\xEs\x6CC\vs\x3s\a"+
		"s\x6CF\ns\fs\xEs\x6D2\vs\x3s\x5s\x6D5\ns\x3s\x5s\x6D8\ns\x3s\x3s\x3s\x3"+
		"s\x5s\x6DE\ns\x5s\x6E0\ns\x3t\x3t\x3t\x3t\x3t\x5t\x6E7\nt\x3t\x3t\x3t"+
		"\x3t\x3t\x5t\x6EE\nt\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3t\x3"+
		"t\x5t\x6FD\nt\x5t\x6FF\nt\x3u\x3u\x3u\x5u\x704\nu\x3v\x3v\x3v\av\x709"+
		"\nv\fv\xEv\x70C\vv\x3w\x3w\x3w\x3w\aw\x712\nw\fw\xEw\x715\vw\x3w\x3w\x3"+
		"w\x3w\aw\x71B\nw\fw\xEw\x71E\vw\x5w\x720\nw\x3x\x3x\x3x\x5x\x725\nx\x3"+
		"x\ax\x728\nx\fx\xEx\x72B\vx\x3x\x3x\x3x\ax\x730\nx\fx\xEx\x733\vx\x5x"+
		"\x735\nx\x3y\x3y\x5y\x739\ny\x3y\x3y\x5y\x73D\ny\x3y\x5y\x740\ny\x3y\x5"+
		"y\x743\ny\x3y\ay\x746\ny\fy\xEy\x749\vy\x3y\ay\x74C\ny\fy\xEy\x74F\vy"+
		"\x3y\x5y\x752\ny\x3y\x5y\x755\ny\x3y\x5y\x758\ny\x3y\x5y\x75B\ny\x3y\x5"+
		"y\x75E\ny\x3y\x5y\x761\ny\x3y\x3y\x3y\x3y\x5y\x767\ny\x3z\x3z\x3z\x3z"+
		"\x3z\x5z\x76E\nz\x3{\x3{\x3{\a{\x773\n{\f{\xE{\x776\v{\x3|\x3|\x3|\x3"+
		"|\x5|\x77C\n|\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x3}\x5}\x786\n}\x3}\x5}\x789"+
		"\n}\x3~\x5~\x78C\n~\x3~\x3~\x3~\x5~\x791\n~\x3~\x3~\x3~\x3~\x3~\x5~\x798"+
		"\n~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\a\x80\x7A1\n\x80"+
		"\f\x80\xE\x80\x7A4\v\x80\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\x7AA\n\x81"+
		"\x3\x81\x5\x81\x7AD\n\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\x7B4"+
		"\n\x81\x3\x81\x3\x81\x5\x81\x7B8\n\x81\x3\x81\x5\x81\x7BB\n\x81\x3\x81"+
		"\x5\x81\x7BE\n\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\x7C5\n\x81"+
		"\x5\x81\x7C7\n\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\a\x82\x7CE\n\x82"+
		"\f\x82\xE\x82\x7D1\v\x82\x3\x82\x3\x82\x3\x83\x3\x83\x5\x83\x7D7\n\x83"+
		"\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x5\x83"+
		"\x7E2\n\x83\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\a\x84\x7EB"+
		"\n\x84\f\x84\xE\x84\x7EE\v\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\a\x84"+
		"\x7F5\n\x84\f\x84\xE\x84\x7F8\v\x84\x6\x84\x7FA\n\x84\r\x84\xE\x84\x7FB"+
		"\x3\x84\x3\x84\x3\x85\x3\x85\x3\x85\x3\x86\x3\x86\x3\x86\x3\x86\a\x86"+
		"\x807\n\x86\f\x86\xE\x86\x80A\v\x86\x3\x87\x3\x87\x6\x87\x80E\n\x87\r"+
		"\x87\xE\x87\x80F\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88\a\x88\x817\n\x88\f"+
		"\x88\xE\x88\x81A\v\x88\x3\x89\x3\x89\x5\x89\x81E\n\x89\x3\x8A\x3\x8A\x3"+
		"\x8A\x3\x8B\x5\x8B\x824\n\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\a\x8B\x82A\n"+
		"\x8B\f\x8B\xE\x8B\x82D\v\x8B\x3\x8B\x5\x8B\x830\n\x8B\x3\x8B\x3\x8B\x5"+
		"\x8B\x834\n\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C"+
		"\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\x842\n\x8C\x3\x8D\x3\x8D\x3\x8D\x3"+
		"\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\a\x8E\x84C\n\x8E\f\x8E\xE\x8E\x84F\v"+
		"\x8E\x3\x8F\x3\x8F\x5\x8F\x853\n\x8F\x3\x8F\x5\x8F\x856\n\x8F\x3\x90\x3"+
		"\x90\x5\x90\x85A\n\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90"+
		"\x3\x90\x3\x90\x5\x90\x865\n\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3"+
		"\x90\x3\x90\x5\x90\x86E\n\x90\x3\x90\x3\x90\x5\x90\x872\n\x90\x3\x90\x3"+
		"\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x5\x90\x87D\n\x90"+
		"\x3\x90\x3\x90\x6\x90\x881\n\x90\r\x90\xE\x90\x882\x3\x90\x3\x90\x3\x90"+
		"\x3\x90\x3\x90\x5\x90\x88A\n\x90\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\a"+
		"\x91\x891\n\x91\f\x91\xE\x91\x894\v\x91\x3\x91\x5\x91\x897\n\x91\x3\x92"+
		"\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\x89E\n\x92\x3\x92\x3\x92\x3\x92\x3"+
		"\x92\a\x92\x8A4\n\x92\f\x92\xE\x92\x8A7\v\x92\x3\x93\x3\x93\x5\x93\x8AB"+
		"\n\x93\x3\x93\x3\x93\x5\x93\x8AF\n\x93\x3\x93\x5\x93\x8B2\n\x93\x3\x93"+
		"\x5\x93\x8B5\n\x93\x5\x93\x8B7\n\x93\x3\x94\x3\x94\x3\x94\x5\x94\x8BC"+
		"\n\x94\x3\x94\x5\x94\x8BF\n\x94\x3\x94\x5\x94\x8C2\n\x94\x3\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\x8CA\n\x95\x3\x96\x3\x96\x5\x96\x8CE"+
		"\n\x96\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97\x8D4\n\x97\x3\x97\x3\x97\x3"+
		"\x97\x5\x97\x8D9\n\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97"+
		"\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97\x8E6\n\x97\x5\x97\x8E8\n\x97\x3\x97"+
		"\x5\x97\x8EB\n\x97\x3\x97\x5\x97\x8EE\n\x97\x3\x98\x3\x98\x3\x98\x3\x98"+
		"\x3\x98\x3\x98\x3\x98\x5\x98\x8F7\n\x98\x3\x99\x3\x99\x5\x99\x8FB\n\x99"+
		"\x3\x9A\x3\x9A\x5\x9A\x8FF\n\x9A\x3\x9B\x3\x9B\x3\x9B\x5\x9B\x904\n\x9B"+
		"\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3\x9C\x5\x9C\x90B\n\x9C\x3\x9C\x3\x9C\x3"+
		"\x9C\x3\x9C\x5\x9C\x911\n\x9C\x3\x9C\x5\x9C\x914\n\x9C\x3\x9D\x3\x9D\x3"+
		"\x9D\a\x9D\x919\n\x9D\f\x9D\xE\x9D\x91C\v\x9D\x3\x9E\x3\x9E\x3\x9E\x5"+
		"\x9E\x921\n\x9E\x3\x9E\x3\x9E\x5\x9E\x925\n\x9E\x5\x9E\x927\n\x9E\x3\x9F"+
		"\x3\x9F\x3\x9F\a\x9F\x92C\n\x9F\f\x9F\xE\x9F\x92F\v\x9F\x3\xA0\x3\xA0"+
		"\x3\xA0\x5\xA0\x934\n\xA0\x3\xA1\x3\xA1\x3\xA1\x5\xA1\x939\n\xA1\x3\xA1"+
		"\x3\xA1\x3\xA2\x3\xA2\x5\xA2\x93F\n\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3"+
		"\xA2\x5\xA2\x946\n\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\x94D"+
		"\n\xA3\x3\xA3\x5\xA3\x950\n\xA3\x3\xA3\x5\xA3\x953\n\xA3\x3\xA4\x3\xA4"+
		"\x3\xA5\x5\xA5\x958\n\xA5\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3"+
		"\xA6\x5\xA6\x961\n\xA6\x3\xA6\x3\xA6\x5\xA6\x965\n\xA6\x3\xA7\x3\xA7\x3"+
		"\xA7\x3\xA8\x3\xA8\x3\xA9\x3\xA9\x3\xA9\a\xA9\x96F\n\xA9\f\xA9\xE\xA9"+
		"\x972\v\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3"+
		"\xAA\x5\xAA\x97D\n\xAA\x3\xAB\x3\xAB\x5\xAB\x981\n\xAB\x3\xAC\x3\xAC\x3"+
		"\xAD\x3\xAD\x5\xAD\x987\n\xAD\x3\xAE\x3\xAE\x5\xAE\x98B\n\xAE\x3\xAF\x3"+
		"\xAF\x3\xAF\x3\xAF\x5\xAF\x991\n\xAF\x3\xB0\x3\xB0\x3\xB0\x3\xB1\x3\xB1"+
		"\x3\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x5\xB2"+
		"\x9A1\n\xB2\x3\xB2\x3\xB2\x3\xB2\x5\xB2\x9A6\n\xB2\x3\xB2\x5\xB2\x9A9"+
		"\n\xB2\x3\xB2\x3\xB2\x5\xB2\x9AD\n\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\a\xB2"+
		"\x9B3\n\xB2\f\xB2\xE\xB2\x9B6\v\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB4\x3\xB4"+
		"\x3\xB5\x3\xB5\x3\xB5\x3\xB6\x3\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB8"+
		"\x3\xB8\x3\xB8\x2\x2\f\x46HJLNPRTV\\\xB9\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f"+
		"\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z"+
		"\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2"+
		"x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E"+
		"\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2"+
		"\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6"+
		"\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA"+
		"\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE"+
		"\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2"+
		"\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2"+
		"\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A"+
		"\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C"+
		"\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E"+
		"\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x2"+
		"\x11\x3\x2\x98\x99\x3\x2gh\x3\x2\x8B\x8C\x3\x2\x37\x38\x3\x2\xC5\xC6\x3"+
		"\x2vw\x4\x2\v\v\r\r\x3\x2\x42\x43\x4\x2\xAE\xB5\xBB\xBB\x3\x2\x7F\x81"+
		"\x3\x2}~\x3\x2{|\x3\x2\x82\x85\x3\x2\x16\x17\x3\x2\xE\xA6\xAD4\x2\x170"+
		"\x3\x2\x2\x2\x4\x179\x3\x2\x2\x2\x6\x17B\x3\x2\x2\x2\b\x184\x3\x2\x2\x2"+
		"\n\x191\x3\x2\x2\x2\f\x197\x3\x2\x2\x2\xE\x1C6\x3\x2\x2\x2\x10\x1C8\x3"+
		"\x2\x2\x2\x12\x1CC\x3\x2\x2\x2\x14\x1D8\x3\x2\x2\x2\x16\x1E0\x3\x2\x2"+
		"\x2\x18\x202\x3\x2\x2\x2\x1A\x204\x3\x2\x2\x2\x1C\x209\x3\x2\x2\x2\x1E"+
		"\x21D\x3\x2\x2\x2 \x227\x3\x2\x2\x2\"\x244\x3\x2\x2\x2$\x249\x3\x2\x2"+
		"\x2&\x255\x3\x2\x2\x2(\x25D\x3\x2\x2\x2*\x261\x3\x2\x2\x2,\x26A\x3\x2"+
		"\x2\x2.\x26E\x3\x2\x2\x2\x30\x27A\x3\x2\x2\x2\x32\x28C\x3\x2\x2\x2\x34"+
		"\x28E\x3\x2\x2\x2\x36\x2A4\x3\x2\x2\x2\x38\x2A8\x3\x2\x2\x2:\x2AB\x3\x2"+
		"\x2\x2<\x2B2\x3\x2\x2\x2>\x2D0\x3\x2\x2\x2@\x2D2\x3\x2\x2\x2\x42\x2DB"+
		"\x3\x2\x2\x2\x44\x2E6\x3\x2\x2\x2\x46\x2E8\x3\x2\x2\x2H\x2F6\x3\x2\x2"+
		"\x2J\x304\x3\x2\x2\x2L\x315\x3\x2\x2\x2N\x320\x3\x2\x2\x2P\x32B\x3\x2"+
		"\x2\x2R\x33C\x3\x2\x2\x2T\x362\x3\x2\x2\x2V\x370\x3\x2\x2\x2X\x386\x3"+
		"\x2\x2\x2Z\x38B\x3\x2\x2\x2\\\x38D\x3\x2\x2\x2^\x3B1\x3\x2\x2\x2`\x3BB"+
		"\x3\x2\x2\x2\x62\x3CE\x3\x2\x2\x2\x64\x3D0\x3\x2\x2\x2\x66\x3D5\x3\x2"+
		"\x2\x2h\x3D8\x3\x2\x2\x2j\x3E4\x3\x2\x2\x2l\x3E6\x3\x2\x2\x2n\x3FB\x3"+
		"\x2\x2\x2p\x40C\x3\x2\x2\x2r\x410\x3\x2\x2\x2t\x41A\x3\x2\x2\x2v\x425"+
		"\x3\x2\x2\x2x\x434\x3\x2\x2\x2z\x436\x3\x2\x2\x2|\x43F\x3\x2\x2\x2~\x454"+
		"\x3\x2\x2\x2\x80\x462\x3\x2\x2\x2\x82\x464\x3\x2\x2\x2\x84\x47A\x3\x2"+
		"\x2\x2\x86\x47C\x3\x2\x2\x2\x88\x494\x3\x2\x2\x2\x8A\x496\x3\x2\x2\x2"+
		"\x8C\x498\x3\x2\x2\x2\x8E\x4A1\x3\x2\x2\x2\x90\x4B5\x3\x2\x2\x2\x92\x4C4"+
		"\x3\x2\x2\x2\x94\x4E9\x3\x2\x2\x2\x96\x4EB\x3\x2\x2\x2\x98\x4F2\x3\x2"+
		"\x2\x2\x9A\x4F9\x3\x2\x2\x2\x9C\x4FC\x3\x2\x2\x2\x9E\x500\x3\x2\x2\x2"+
		"\xA0\x507\x3\x2\x2\x2\xA2\x50B\x3\x2\x2\x2\xA4\x521\x3\x2\x2\x2\xA6\x523"+
		"\x3\x2\x2\x2\xA8\x52E\x3\x2\x2\x2\xAA\x535\x3\x2\x2\x2\xAC\x56F\x3\x2"+
		"\x2\x2\xAE\x572\x3\x2\x2\x2\xB0\x57D\x3\x2\x2\x2\xB2\x587\x3\x2\x2\x2"+
		"\xB4\x58C\x3\x2\x2\x2\xB6\x597\x3\x2\x2\x2\xB8\x5A3\x3\x2\x2\x2\xBA\x5AB"+
		"\x3\x2\x2\x2\xBC\x5B9\x3\x2\x2\x2\xBE\x5D2\x3\x2\x2\x2\xC0\x5D4\x3\x2"+
		"\x2\x2\xC2\x5DF\x3\x2\x2\x2\xC4\x5F8\x3\x2\x2\x2\xC6\x5FA\x3\x2\x2\x2"+
		"\xC8\x610\x3\x2\x2\x2\xCA\x613\x3\x2\x2\x2\xCC\x61B\x3\x2\x2\x2\xCE\x652"+
		"\x3\x2\x2\x2\xD0\x654\x3\x2\x2\x2\xD2\x66F\x3\x2\x2\x2\xD4\x671\x3\x2"+
		"\x2\x2\xD6\x673\x3\x2\x2\x2\xD8\x687\x3\x2\x2\x2\xDA\x689\x3\x2\x2\x2"+
		"\xDC\x695\x3\x2\x2\x2\xDE\x69C\x3\x2\x2\x2\xE0\x6AB\x3\x2\x2\x2\xE2\x6AD"+
		"\x3\x2\x2\x2\xE4\x6DF\x3\x2\x2\x2\xE6\x6FE\x3\x2\x2\x2\xE8\x703\x3\x2"+
		"\x2\x2\xEA\x705\x3\x2\x2\x2\xEC\x70D\x3\x2\x2\x2\xEE\x734\x3\x2\x2\x2"+
		"\xF0\x766\x3\x2\x2\x2\xF2\x768\x3\x2\x2\x2\xF4\x76F\x3\x2\x2\x2\xF6\x777"+
		"\x3\x2\x2\x2\xF8\x77D\x3\x2\x2\x2\xFA\x78B\x3\x2\x2\x2\xFC\x799\x3\x2"+
		"\x2\x2\xFE\x79D\x3\x2\x2\x2\x100\x7C6\x3\x2\x2\x2\x102\x7C8\x3\x2\x2\x2"+
		"\x104\x7E1\x3\x2\x2\x2\x106\x7E3\x3\x2\x2\x2\x108\x7FF\x3\x2\x2\x2\x10A"+
		"\x802\x3\x2\x2\x2\x10C\x80D\x3\x2\x2\x2\x10E\x811\x3\x2\x2\x2\x110\x81D"+
		"\x3\x2\x2\x2\x112\x81F\x3\x2\x2\x2\x114\x833\x3\x2\x2\x2\x116\x841\x3"+
		"\x2\x2\x2\x118\x843\x3\x2\x2\x2\x11A\x846\x3\x2\x2\x2\x11C\x852\x3\x2"+
		"\x2\x2\x11E\x857\x3\x2\x2\x2\x120\x896\x3\x2\x2\x2\x122\x898\x3\x2\x2"+
		"\x2\x124\x8B6\x3\x2\x2\x2\x126\x8BB\x3\x2\x2\x2\x128\x8C9\x3\x2\x2\x2"+
		"\x12A\x8CB\x3\x2\x2\x2\x12C\x8E7\x3\x2\x2\x2\x12E\x8F6\x3\x2\x2\x2\x130"+
		"\x8FA\x3\x2\x2\x2\x132\x8FE\x3\x2\x2\x2\x134\x900\x3\x2\x2\x2\x136\x907"+
		"\x3\x2\x2\x2\x138\x915\x3\x2\x2\x2\x13A\x926\x3\x2\x2\x2\x13C\x928\x3"+
		"\x2\x2\x2\x13E\x930\x3\x2\x2\x2\x140\x935\x3\x2\x2\x2\x142\x945\x3\x2"+
		"\x2\x2\x144\x952\x3\x2\x2\x2\x146\x954\x3\x2\x2\x2\x148\x957\x3\x2\x2"+
		"\x2\x14A\x95B\x3\x2\x2\x2\x14C\x966\x3\x2\x2\x2\x14E\x969\x3\x2\x2\x2"+
		"\x150\x96B\x3\x2\x2\x2\x152\x97C\x3\x2\x2\x2\x154\x980\x3\x2\x2\x2\x156"+
		"\x982\x3\x2\x2\x2\x158\x986\x3\x2\x2\x2\x15A\x98A\x3\x2\x2\x2\x15C\x990"+
		"\x3\x2\x2\x2\x15E\x992\x3\x2\x2\x2\x160\x995\x3\x2\x2\x2\x162\x998\x3"+
		"\x2\x2\x2\x164\x9B7\x3\x2\x2\x2\x166\x9BA\x3\x2\x2\x2\x168\x9BC\x3\x2"+
		"\x2\x2\x16A\x9BF\x3\x2\x2\x2\x16C\x9C1\x3\x2\x2\x2\x16E\x9C5\x3\x2\x2"+
		"\x2\x170\x171\x5\x8EH\x2\x171\x172\a\x2\x2\x3\x172\x3\x3\x2\x2\x2\x173"+
		"\x174\aR\x2\x2\x174\x175\a\x18\x2\x2\x175\x17A\x5x=\x2\x176\x177\aR\x2"+
		"\x2\x177\x178\a\x18\x2\x2\x178\x17A\x5~@\x2\x179\x173\x3\x2\x2\x2\x179"+
		"\x176\x3\x2\x2\x2\x17A\x5\x3\x2\x2\x2\x17B\x17C\aP\x2\x2\x17C\x17D\a\x18"+
		"\x2\x2\x17D\x182\x5\x124\x93\x2\x17E\x183\x5\b\x5\x2\x17F\x183\x5\f\a"+
		"\x2\x180\x183\x5\n\x6\x2\x181\x183\x5\x10\t\x2\x182\x17E\x3\x2\x2\x2\x182"+
		"\x17F\x3\x2\x2\x2\x182\x180\x3\x2\x2\x2\x182\x181\x3\x2\x2\x2\x183\a\x3"+
		"\x2\x2\x2\x184\x185\a?\x2\x2\x185\x188\a\x1A\x2\x2\x186\x189\x5t;\x2\x187"+
		"\x189\x5\x80\x41\x2\x188\x186\x3\x2\x2\x2\x188\x187\x3\x2\x2\x2\x189\x18A"+
		"\x3\x2\x2\x2\x18A\x18B\a\x66\x2\x2\x18B\x18C\x5\xD4k\x2\x18C\x18F\a\x1A"+
		"\x2\x2\x18D\x190\x5t;\x2\x18E\x190\x5\x80\x41\x2\x18F\x18D\x3\x2\x2\x2"+
		"\x18F\x18E\x3\x2\x2\x2\x190\t\x3\x2\x2\x2\x191\x192\aR\x2\x2\x192\x193"+
		"\a\x1D\x2\x2\x193\x195\x5x=\x2\x194\x196\x5\x18\r\x2\x195\x194\x3\x2\x2"+
		"\x2\x195\x196\x3\x2\x2\x2\x196\v\x3\x2\x2\x2\x197\x198\aN\x2\x2\x198\x199"+
		"\a\x1D\x2\x2\x199\x1BB\x5x=\x2\x19A\x19B\a\x1F\x2\x2\x19B\x19D\a \x2\x2"+
		"\x19C\x19E\x5\x16A\xB6\x2\x19D\x19C\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2"+
		"\x19E\x19F\x3\x2\x2\x2\x19F\x1A0\a\xB7\x2\x2\x1A0\x1A1\x5&\x14\x2\x1A1"+
		"\x1A3\a\xB8\x2\x2\x1A2\x1A4\x5\x18\r\x2\x1A3\x1A2\x3\x2\x2\x2\x1A3\x1A4"+
		"\x3\x2\x2\x2\x1A4\x1A7\x3\x2\x2\x2\x1A5\x1A6\ag\x2\x2\x1A6\x1A8\x5\xE"+
		"\b\x2\x1A7\x1A5\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1BC\x3\x2\x2\x2"+
		"\x1A9\x1AA\aZ\x2\x2\x1AA\x1AB\a\xB7\x2\x2\x1AB\x1AC\x5p\x39\x2\x1AC\x1AD"+
		"\a\xB8\x2\x2\x1AD\x1AE\aU\x2\x2\x1AE\x1AF\x5x=\x2\x1AF\x1BC\x3\x2\x2\x2"+
		"\x1B0\x1B1\a\x1E\x2\x2\x1B1\x1B2\a \x2\x2\x1B2\x1B3\a\xB7\x2\x2\x1B3\x1B4"+
		"\x5\xCA\x66\x2\x1B4\x1B5\a\xB8\x2\x2\x1B5\x1B6\a!\x2\x2\x1B6\x1B7\x5\x12C"+
		"\x97\x2\x1B7\x1B8\a\xB7\x2\x2\x1B8\x1B9\x5\xCA\x66\x2\x1B9\x1BA\a\xB8"+
		"\x2\x2\x1BA\x1BC\x3\x2\x2\x2\x1BB\x19A\x3\x2\x2\x2\x1BB\x1A9\x3\x2\x2"+
		"\x2\x1BB\x1B0\x3\x2\x2\x2\x1BC\r\x3\x2\x2\x2\x1BD\x1C7\a\x1F\x2\x2\x1BE"+
		"\x1BF\a\xB9\x2\x2\x1BF\x1C0\a\x1F\x2\x2\x1C0\x1C7\a\xBA\x2\x2\x1C1\x1C2"+
		"\x5x=\x2\x1C2\x1C3\a\xB7\x2\x2\x1C3\x1C4\x5\xCA\x66\x2\x1C4\x1C5\a\xB8"+
		"\x2\x2\x1C5\x1C7\x3\x2\x2\x2\x1C6\x1BD\x3\x2\x2\x2\x1C6\x1BE\x3\x2\x2"+
		"\x2\x1C6\x1C1\x3\x2\x2\x2\x1C7\xF\x3\x2\x2\x2\x1C8\x1C9\t\x2\x2\x2\x1C9"+
		"\x1CA\a\x9A\x2\x2\x1CA\x1CB\x5x=\x2\x1CB\x11\x3\x2\x2\x2\x1CC\x1CD\aP"+
		"\x2\x2\x1CD\x1D0\a\x1B\x2\x2\x1CE\x1D1\x5x=\x2\x1CF\x1D1\a\x45\x2\x2\x1D0"+
		"\x1CE\x3\x2\x2\x2\x1D0\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1D3"+
		"\ag\x2\x2\x1D3\x1D4\x5x=\x2\x1D4\x1D6\x5x=\x2\x1D5\x1D7\x5\x18\r\x2\x1D6"+
		"\x1D5\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x13\x3\x2\x2\x2\x1D8\x1D9"+
		"\aP\x2\x2\x1D9\x1DA\a\x1A\x2\x2\x1DA\x1DB\a\xA3\x2\x2\x1DB\x1DC\x5x=\x2"+
		"\x1DC\x1DD\a\x30\x2\x2\x1DD\x1DE\a\xA4\x2\x2\x1DE\x1DF\x5\xE\b\x2\x1DF"+
		"\x15\x3\x2\x2\x2\x1E0\x1E1\aP\x2\x2\x1E1\x1E2\a\x1A\x2\x2\x1E2\x1E3\a"+
		"\xA2\x2\x2\x1E3\x1E4\x5\x132\x9A\x2\x1E4\x1E5\a\xB7\x2\x2\x1E5\x1F2\a"+
		"\xB8\x2\x2\x1E6\x1E7\a\x8F\x2\x2\x1E7\x1E8\a\xA1\x2\x2\x1E8\x1E9\a\xB7"+
		"\x2\x2\x1E9\x1EA\x5\x80\x41\x2\x1EA\x1EB\a\xB8\x2\x2\x1EB\x1F3\x3\x2\x2"+
		"\x2\x1EC\x1ED\a\xA0\x2\x2\x1ED\x1EE\a\xA1\x2\x2\x1EE\x1EF\a\xB7\x2\x2"+
		"\x1EF\x1F0\x5\x80\x41\x2\x1F0\x1F1\a\xB8\x2\x2\x1F1\x1F3\x3\x2\x2\x2\x1F2"+
		"\x1E6\x3\x2\x2\x2\x1F2\x1EC\x3\x2\x2\x2\x1F3\x17\x3\x2\x2\x2\x1F4\x1F5"+
		"\aT\x2\x2\x1F5\x1F6\a\xB7\x2\x2\x1F6\x1FB\x5\x1A\xE\x2\x1F7\x1F8\a\xC8"+
		"\x2\x2\x1F8\x1FA\x5\x1A\xE\x2\x1F9\x1F7\x3\x2\x2\x2\x1FA\x1FD\x3\x2\x2"+
		"\x2\x1FB\x1F9\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FE\x3\x2\x2\x2"+
		"\x1FD\x1FB\x3\x2\x2\x2\x1FE\x1FF\a\xB8\x2\x2\x1FF\x203\x3\x2\x2\x2\x200"+
		"\x201\aT\x2\x2\x201\x203\x5\x1A\xE\x2\x202\x1F4\x3\x2\x2\x2\x202\x200"+
		"\x3\x2\x2\x2\x203\x19\x3\x2\x2\x2\x204\x207\a\xCB\x2\x2\x205\x206\a\xBB"+
		"\x2\x2\x206\x208\t\x3\x2\x2\x207\x205\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2"+
		"\x208\x1B\x3\x2\x2\x2\x209\x20A\aQ\x2\x2\x20A\x20D\a\x18\x2\x2\x20B\x20E"+
		"\x5x=\x2\x20C\x20E\x5~@\x2\x20D\x20B\x3\x2\x2\x2\x20D\x20C\x3\x2\x2\x2"+
		"\x20E\x20F\x3\x2\x2\x2\x20F\x210\a\xB7\x2\x2\x210\x213\x5\xCCg\x2\x211"+
		"\x212\a\xC8\x2\x2\x212\x214\x5\xD0i\x2\x213\x211\x3\x2\x2\x2\x213\x214"+
		"\x3\x2\x2\x2\x214\x216\x3\x2\x2\x2\x215\x217\a\xC8\x2\x2\x216\x215\x3"+
		"\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218\x21B\a\xB8"+
		"\x2\x2\x219\x21A\ag\x2\x2\x21A\x21C\x5\xE\b\x2\x21B\x219\x3\x2\x2\x2\x21B"+
		"\x21C\x3\x2\x2\x2\x21C\x1D\x3\x2\x2\x2\x21D\x21E\aR\x2\x2\x21E\x21F\a"+
		"\x1B\x2\x2\x21F\x225\x5x=\x2\x220\x221\ag\x2\x2\x221\x223\x5\x126\x94"+
		"\x2\x222\x224\x5\x18\r\x2\x223\x222\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2"+
		"\x224\x226\x3\x2\x2\x2\x225\x220\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226"+
		"\x1F\x3\x2\x2\x2\x227\x229\aQ\x2\x2\x228\x22A\a:\x2\x2\x229\x228\x3\x2"+
		"\x2\x2\x229\x22A\x3\x2\x2\x2\x22A\x22C\x3\x2\x2\x2\x22B\x22D\x5\x16A\xB6"+
		"\x2\x22C\x22B\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2"+
		"\x22E\x231\a\x1B\x2\x2\x22F\x232\x5x=\x2\x230\x232\x5|?\x2\x231\x22F\x3"+
		"\x2\x2\x2\x231\x230\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x234\ag\x2"+
		"\x2\x234\x235\x5\x126\x94\x2\x235\x236\a\xB7\x2\x2\x236\x237\x5&\x14\x2"+
		"\x237\x239\a\xB8\x2\x2\x238\x23A\x5\"\x12\x2\x239\x238\x3\x2\x2\x2\x239"+
		"\x23A\x3\x2\x2\x2\x23A\x23C\x3\x2\x2\x2\x23B\x23D\x5\x118\x8D\x2\x23C"+
		"\x23B\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23D\x23F\x3\x2\x2\x2\x23E\x240"+
		"\x5\x18\r\x2\x23F\x23E\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x242\x3"+
		"\x2\x2\x2\x241\x243\x5$\x13\x2\x242\x241\x3\x2\x2\x2\x242\x243\x3\x2\x2"+
		"\x2\x243!\x3\x2\x2\x2\x244\x245\a\x41\x2\x2\x245\x246\a\xB7\x2\x2\x246"+
		"\x247\x5\xCA\x66\x2\x247\x248\a\xB8\x2\x2\x248#\x3\x2\x2\x2\x249\x253"+
		"\ag\x2\x2\x24A\x24B\x5x=\x2\x24B\x24C\a\xB7\x2\x2\x24C\x24D\x5\xCA\x66"+
		"\x2\x24D\x24E\a\xB8\x2\x2\x24E\x254\x3\x2\x2\x2\x24F\x250\a\xB9\x2\x2"+
		"\x250\x251\a\x1F\x2\x2\x251\x254\a\xBA\x2\x2\x252\x254\a\x1F\x2\x2\x253"+
		"\x24A\x3\x2\x2\x2\x253\x24F\x3\x2\x2\x2\x253\x252\x3\x2\x2\x2\x254%\x3"+
		"\x2\x2\x2\x255\x25A\x5(\x15\x2\x256\x257\a\xC8\x2\x2\x257\x259\x5(\x15"+
		"\x2\x258\x256\x3\x2\x2\x2\x259\x25C\x3\x2\x2\x2\x25A\x258\x3\x2\x2\x2"+
		"\x25A\x25B\x3\x2\x2\x2\x25B\'\x3\x2\x2\x2\x25C\x25A\x3\x2\x2\x2\x25D\x25F"+
		"\x5\x156\xAC\x2\x25E\x260\t\x4\x2\x2\x25F\x25E\x3\x2\x2\x2\x25F\x260\x3"+
		"\x2\x2\x2\x260)\x3\x2\x2\x2\x261\x262\aQ\x2\x2\x262\x263\a\x8D\x2\x2\x263"+
		"\x264\x5x=\x2\x264\x265\ag\x2\x2\x265\x266\x5\x126\x94\x2\x266\x267\a"+
		"\xB7\x2\x2\x267\x268\x5\x150\xA9\x2\x268\x269\a\xB8\x2\x2\x269+\x3\x2"+
		"\x2\x2\x26A\x26B\aR\x2\x2\x26B\x26C\a\x19\x2\x2\x26C\x26D\x5x=\x2\x26D"+
		"-\x3\x2\x2\x2\x26E\x26F\aQ\x2\x2\x26F\x270\a\x19\x2\x2\x270\x272\x5x="+
		"\x2\x271\x273\x5\x84\x43\x2\x272\x271\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2"+
		"\x273\x275\x3\x2\x2\x2\x274\x276\x5\x8CG\x2\x275\x274\x3\x2\x2\x2\x275"+
		"\x276\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277\x278\aS\x2\x2\x278\x279\x5"+
		"\x82\x42\x2\x279/\x3\x2\x2\x2\x27A\x27B\aM\x2\x2\x27B\x27C\a\x18\x2\x2"+
		"\x27C\x27D\x5\x126\x94\x2\x27D\x31\x3\x2\x2\x2\x27E\x27F\a\x3\x2\x2\x27F"+
		"\x286\a\xCB\x2\x2\x280\x287\x5\x38\x1D\x2\x281\x283\a\xB7\x2\x2\x282\x284"+
		"\x5\xEAv\x2\x283\x282\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x285\x3\x2"+
		"\x2\x2\x285\x287\a\xB8\x2\x2\x286\x280\x3\x2\x2\x2\x286\x281\x3\x2\x2"+
		"\x2\x287\x289\x3\x2\x2\x2\x288\x28A\x5\x18\r\x2\x289\x288\x3\x2\x2\x2"+
		"\x289\x28A\x3\x2\x2\x2\x28A\x28D\x3\x2\x2\x2\x28B\x28D\a\t\x2\x2\x28C"+
		"\x27E\x3\x2\x2\x2\x28C\x28B\x3\x2\x2\x2\x28D\x33\x3\x2\x2\x2\x28E\x28F"+
		"\x5\x38\x1D\x2\x28F\x35\x3\x2\x2\x2\x290\x2A5\x5p\x39\x2\x291\x293\x5"+
		"\x80\x41\x2\x292\x294\x5\x168\xB5\x2\x293\x292\x3\x2\x2\x2\x293\x294\x3"+
		"\x2\x2\x2\x294\x2A5\x3\x2\x2\x2\x295\x2A5\x5\x42\"\x2\x296\x2A5\x5\x134"+
		"\x9B\x2\x297\x2A5\x5<\x1F\x2\x298\x2A5\x5@!\x2\x299\x2A5\x5:\x1E\x2\x29A"+
		"\x2A5\x5> \x2\x29B\x29C\a\xB7\x2\x2\x29C\x29D\x5\x38\x1D\x2\x29D\x29E"+
		"\a\xB8\x2\x2\x29E\x2A5\x3\x2\x2\x2\x29F\x2A5\x5h\x35\x2\x2A0\x2A2\x5\x152"+
		"\xAA\x2\x2A1\x2A3\x5\x168\xB5\x2\x2A2\x2A1\x3\x2\x2\x2\x2A2\x2A3\x3\x2"+
		"\x2\x2\x2A3\x2A5\x3\x2\x2\x2\x2A4\x290\x3\x2\x2\x2\x2A4\x291\x3\x2\x2"+
		"\x2\x2A4\x295\x3\x2\x2\x2\x2A4\x296\x3\x2\x2\x2\x2A4\x297\x3\x2\x2\x2"+
		"\x2A4\x298\x3\x2\x2\x2\x2A4\x299\x3\x2\x2\x2\x2A4\x29A\x3\x2\x2\x2\x2A4"+
		"\x29B\x3\x2\x2\x2\x2A4\x29F\x3\x2\x2\x2\x2A4\x2A0\x3\x2\x2\x2\x2A5\x37"+
		"\x3\x2\x2\x2\x2A6\x2A9\x5\x36\x1C\x2\x2A7\x2A9\x5\x44#\x2\x2A8\x2A6\x3"+
		"\x2\x2\x2\x2A8\x2A7\x3\x2\x2\x2\x2A9\x39\x3\x2\x2\x2\x2AA\x2AC\ar\x2\x2"+
		"\x2AB\x2AA\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2\x2AD"+
		"\x2AE\aY\x2\x2\x2AE\x2AF\a\xB7\x2\x2\x2AF\x2B0\x5\xEEx\x2\x2B0\x2B1\a"+
		"\xB8\x2\x2\x2B1;\x3\x2\x2\x2\x2B2\x2B3\a\x34\x2\x2\x2B3\x2B4\a\xB7\x2"+
		"\x2\x2B4\x2B5\x5\x38\x1D\x2\x2B5\x2B6\aS\x2\x2\x2B6\x2B7\x5j\x36\x2\x2B7"+
		"\x2B8\a\xB8\x2\x2\x2B8=\x3\x2\x2\x2\x2B9\x2BB\a\x33\x2\x2\x2BA\x2BC\x5"+
		"\x64\x33\x2\x2BB\x2BA\x3\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2BB\x3\x2"+
		"\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2C0\x3\x2\x2\x2\x2BF\x2C1\x5\x66\x34"+
		"\x2\x2C0\x2BF\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2"+
		"\x2C2\x2C3\aX\x2\x2\x2C3\x2D1\x3\x2\x2\x2\x2C4\x2C5\a\x33\x2\x2\x2C5\x2C7"+
		"\x5\x38\x1D\x2\x2C6\x2C8\x5\x64\x33\x2\x2C7\x2C6\x3\x2\x2\x2\x2C8\x2C9"+
		"\x3\x2\x2\x2\x2C9\x2C7\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2CC\x3"+
		"\x2\x2\x2\x2CB\x2CD\x5\x66\x34\x2\x2CC\x2CB\x3\x2\x2\x2\x2CC\x2CD\x3\x2"+
		"\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2CF\aX\x2\x2\x2CF\x2D1\x3\x2\x2\x2"+
		"\x2D0\x2B9\x3\x2\x2\x2\x2D0\x2C4\x3\x2\x2\x2\x2D1?\x3\x2\x2\x2\x2D2\x2D9"+
		"\t\x5\x2\x2\x2D3\x2DA\x5`\x31\x2\x2D4\x2D5\a\xB7\x2\x2\x2D5\x2D6\a\x39"+
		"\x2\x2\x2D6\x2D7\x5`\x31\x2\x2D7\x2D8\a\xB8\x2\x2\x2D8\x2DA\x3\x2\x2\x2"+
		"\x2D9\x2D3\x3\x2\x2\x2\x2D9\x2D4\x3\x2\x2\x2\x2DA\x41\x3\x2\x2\x2\x2DB"+
		"\x2DC\a\x35\x2\x2\x2DC\x2DD\a\xB7\x2\x2\x2DD\x2DE\x5j\x36\x2\x2DE\x2DF"+
		"\a\xC8\x2\x2\x2DF\x2E2\x5\x38\x1D\x2\x2E0\x2E1\a\xC8\x2\x2\x2E1\x2E3\x5"+
		"t;\x2\x2E2\x2E0\x3\x2\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2"+
		"\x2E4\x2E5\a\xB8\x2\x2\x2E5\x43\x3\x2\x2\x2\x2E6\x2E7\x5\x46$\x2\x2E7"+
		"\x45\x3\x2\x2\x2\x2E8\x2E9\b$\x1\x2\x2E9\x2EA\x5H%\x2\x2EA\x2F3\x3\x2"+
		"\x2\x2\x2EB\x2EC\f\x4\x2\x2\x2EC\x2ED\a\x8A\x2\x2\x2ED\x2F2\x5H%\x2\x2EE"+
		"\x2EF\f\x3\x2\x2\x2EF\x2F0\a\x4\x2\x2\x2F0\x2F2\x5H%\x2\x2F1\x2EB\x3\x2"+
		"\x2\x2\x2F1\x2EE\x3\x2\x2\x2\x2F2\x2F5\x3\x2\x2\x2\x2F3\x2F1\x3\x2\x2"+
		"\x2\x2F3\x2F4\x3\x2\x2\x2\x2F4G\x3\x2\x2\x2\x2F5\x2F3\x3\x2\x2\x2\x2F6"+
		"\x2F7\b%\x1\x2\x2F7\x2F8\x5J&\x2\x2F8\x301\x3\x2\x2\x2\x2F9\x2FA\f\x4"+
		"\x2\x2\x2FA\x2FB\a\x89\x2\x2\x2FB\x300\x5J&\x2\x2FC\x2FD\f\x3\x2\x2\x2FD"+
		"\x2FE\a\x5\x2\x2\x2FE\x300\x5J&\x2\x2FF\x2F9\x3\x2\x2\x2\x2FF\x2FC\x3"+
		"\x2\x2\x2\x300\x303\x3\x2\x2\x2\x301\x2FF\x3\x2\x2\x2\x301\x302\x3\x2"+
		"\x2\x2\x302I\x3\x2\x2\x2\x303\x301\x3\x2\x2\x2\x304\x305\b&\x1\x2\x305"+
		"\x306\x5L\'\x2\x306\x312\x3\x2\x2\x2\x307\x308\f\x4\x2\x2\x308\x309\a"+
		"\xC2\x2\x2\x309\x311\x5L\'\x2\x30A\x30B\f\x3\x2\x2\x30B\x30D\ap\x2\x2"+
		"\x30C\x30E\ar\x2\x2\x30D\x30C\x3\x2\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x30F"+
		"\x3\x2\x2\x2\x30F\x311\as\x2\x2\x310\x307\x3\x2\x2\x2\x310\x30A\x3\x2"+
		"\x2\x2\x311\x314\x3\x2\x2\x2\x312\x310\x3\x2\x2\x2\x312\x313\x3\x2\x2"+
		"\x2\x313K\x3\x2\x2\x2\x314\x312\x3\x2\x2\x2\x315\x316\b\'\x1\x2\x316\x317"+
		"\x5N(\x2\x317\x31D\x3\x2\x2\x2\x318\x319\f\x3\x2\x2\x319\x31A\a\xC4\x2"+
		"\x2\x31A\x31C\x5N(\x2\x31B\x318\x3\x2\x2\x2\x31C\x31F\x3\x2\x2\x2\x31D"+
		"\x31B\x3\x2\x2\x2\x31D\x31E\x3\x2\x2\x2\x31EM\x3\x2\x2\x2\x31F\x31D\x3"+
		"\x2\x2\x2\x320\x321\b(\x1\x2\x321\x322\x5P)\x2\x322\x328\x3\x2\x2\x2\x323"+
		"\x324\f\x3\x2\x2\x324\x325\a\xC1\x2\x2\x325\x327\x5P)\x2\x326\x323\x3"+
		"\x2\x2\x2\x327\x32A\x3\x2\x2\x2\x328\x326\x3\x2\x2\x2\x328\x329\x3\x2"+
		"\x2\x2\x329O\x3\x2\x2\x2\x32A\x328\x3\x2\x2\x2\x32B\x32C\b)\x1\x2\x32C"+
		"\x32D\x5R*\x2\x32D\x339\x3\x2\x2\x2\x32E\x32F\f\x5\x2\x2\x32F\x330\a\xBB"+
		"\x2\x2\x330\x338\x5R*\x2\x331\x332\f\x4\x2\x2\x332\x333\a\xAC\x2\x2\x333"+
		"\x338\x5R*\x2\x334\x335\f\x3\x2\x2\x335\x336\a\xAD\x2\x2\x336\x338\x5"+
		"R*\x2\x337\x32E\x3\x2\x2\x2\x337\x331\x3\x2\x2\x2\x337\x334\x3\x2\x2\x2"+
		"\x338\x33B\x3\x2\x2\x2\x339\x337\x3\x2\x2\x2\x339\x33A\x3\x2\x2\x2\x33A"+
		"Q\x3\x2\x2\x2\x33B\x339\x3\x2\x2\x2\x33C\x33D\b*\x1\x2\x33D\x33E\x5T+"+
		"\x2\x33E\x35F\x3\x2\x2\x2\x33F\x340\f\v\x2\x2\x340\x341\a\xA7\x2\x2\x341"+
		"\x35E\x5T+\x2\x342\x343\f\n\x2\x2\x343\x344\a\xA9\x2\x2\x344\x35E\x5T"+
		"+\x2\x345\x346\f\t\x2\x2\x346\x347\a\xA8\x2\x2\x347\x35E\x5T+\x2\x348"+
		"\x349\f\b\x2\x2\x349\x34A\a\xA7\x2\x2\x34A\x34B\a\xBB\x2\x2\x34B\x35E"+
		"\x5T+\x2\x34C\x34D\f\a\x2\x2\x34D\x34E\a\xAA\x2\x2\x34E\x35E\x5T+\x2\x34F"+
		"\x350\f\x6\x2\x2\x350\x351\a\xA9\x2\x2\x351\x352\a\xBB\x2\x2\x352\x35E"+
		"\x5T+\x2\x353\x354\f\x5\x2\x2\x354\x355\a\xAB\x2\x2\x355\x35E\x5T+\x2"+
		"\x356\x357\f\x4\x2\x2\x357\x358\ax\x2\x2\x358\x35E\x5^\x30\x2\x359\x35A"+
		"\f\x3\x2\x2\x35A\x35B\ar\x2\x2\x35B\x35C\ax\x2\x2\x35C\x35E\x5^\x30\x2"+
		"\x35D\x33F\x3\x2\x2\x2\x35D\x342\x3\x2\x2\x2\x35D\x345\x3\x2\x2\x2\x35D"+
		"\x348\x3\x2\x2\x2\x35D\x34C\x3\x2\x2\x2\x35D\x34F\x3\x2\x2\x2\x35D\x353"+
		"\x3\x2\x2\x2\x35D\x356\x3\x2\x2\x2\x35D\x359\x3\x2\x2\x2\x35E\x361\x3"+
		"\x2\x2\x2\x35F\x35D\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360S\x3\x2\x2\x2"+
		"\x361\x35F\x3\x2\x2\x2\x362\x363\b+\x1\x2\x363\x364\x5V,\x2\x364\x36D"+
		"\x3\x2\x2\x2\x365\x366\f\x4\x2\x2\x366\x367\a\xC5\x2\x2\x367\x36C\x5V"+
		",\x2\x368\x369\f\x3\x2\x2\x369\x36A\a\xC6\x2\x2\x36A\x36C\x5V,\x2\x36B"+
		"\x365\x3\x2\x2\x2\x36B\x368\x3\x2\x2\x2\x36C\x36F\x3\x2\x2\x2\x36D\x36B"+
		"\x3\x2\x2\x2\x36D\x36E\x3\x2\x2\x2\x36EU\x3\x2\x2\x2\x36F\x36D\x3\x2\x2"+
		"\x2\x370\x371\b,\x1\x2\x371\x372\x5X-\x2\x372\x37E\x3\x2\x2\x2\x373\x374"+
		"\f\x5\x2\x2\x374\x375\a\xBF\x2\x2\x375\x37D\x5X-\x2\x376\x377\f\x4\x2"+
		"\x2\x377\x378\a\xC0\x2\x2\x378\x37D\x5X-\x2\x379\x37A\f\x3\x2\x2\x37A"+
		"\x37B\a\xC3\x2\x2\x37B\x37D\x5X-\x2\x37C\x373\x3\x2\x2\x2\x37C\x376\x3"+
		"\x2\x2\x2\x37C\x379\x3\x2\x2\x2\x37D\x380\x3\x2\x2\x2\x37E\x37C\x3\x2"+
		"\x2\x2\x37E\x37F\x3\x2\x2\x2\x37FW\x3\x2\x2\x2\x380\x37E\x3\x2\x2\x2\x381"+
		"\x382\a\xC5\x2\x2\x382\x387\x5X-\x2\x383\x384\a\xC6\x2\x2\x384\x387\x5"+
		"X-\x2\x385\x387\x5Z.\x2\x386\x381\x3\x2\x2\x2\x386\x383\x3\x2\x2\x2\x386"+
		"\x385\x3\x2\x2\x2\x387Y\x3\x2\x2\x2\x388\x38C\x5\\/\x2\x389\x38A\ar\x2"+
		"\x2\x38A\x38C\x5X-\x2\x38B\x388\x3\x2\x2\x2\x38B\x389\x3\x2\x2\x2\x38C"+
		"[\x3\x2\x2\x2\x38D\x38E\b/\x1\x2\x38E\x38F\x5\x36\x1C\x2\x38F\x3A8\x3"+
		"\x2\x2\x2\x390\x391\f\x6\x2\x2\x391\x392\aq\x2\x2\x392\x3A7\x5\x62\x32"+
		"\x2\x393\x394\f\x5\x2\x2\x394\x395\ar\x2\x2\x395\x396\aq\x2\x2\x396\x3A7"+
		"\x5\x62\x32\x2\x397\x399\f\x4\x2\x2\x398\x39A\ar\x2\x2\x399\x398\x3\x2"+
		"\x2\x2\x399\x39A\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39C\at\x2\x2"+
		"\x39C\x39D\x5\x38\x1D\x2\x39D\x39E\a\x89\x2\x2\x39E\x39F\x5\x38\x1D\x2"+
		"\x39F\x3A7\x3\x2\x2\x2\x3A0\x3A2\f\x3\x2\x2\x3A1\x3A3\ar\x2\x2\x3A2\x3A1"+
		"\x3\x2\x2\x2\x3A2\x3A3\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2\x2\x3A4\x3A5\ax"+
		"\x2\x2\x3A5\x3A7\x5^\x30\x2\x3A6\x390\x3\x2\x2\x2\x3A6\x393\x3\x2\x2\x2"+
		"\x3A6\x397\x3\x2\x2\x2\x3A6\x3A0\x3\x2\x2\x2\x3A7\x3AA\x3\x2\x2\x2\x3A8"+
		"\x3A6\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9]\x3\x2\x2\x2\x3AA\x3A8\x3"+
		"\x2\x2\x2\x3AB\x3AE\x5r:\x2\x3AC\x3AD\ay\x2\x2\x3AD\x3AF\a\xCA\x2\x2\x3AE"+
		"\x3AC\x3\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AF\x3B2\x3\x2\x2\x2\x3B0\x3B2"+
		"\x5\x134\x9B\x2\x3B1\x3AB\x3\x2\x2\x2\x3B1\x3B0\x3\x2\x2\x2\x3B2_\x3\x2"+
		"\x2\x2\x3B3\x3BC\a\xBF\x2\x2\x3B4\x3BC\x5\x152\xAA\x2\x3B5\x3BC\x5p\x39"+
		"\x2\x3B6\x3BC\x5\x134\x9B\x2\x3B7\x3B8\a\xB7\x2\x2\x3B8\x3B9\x5`\x31\x2"+
		"\x3B9\x3BA\a\xB8\x2\x2\x3BA\x3BC\x3\x2\x2\x2\x3BB\x3B3\x3\x2\x2\x2\x3BB"+
		"\x3B4\x3\x2\x2\x2\x3BB\x3B5\x3\x2\x2\x2\x3BB\x3B6\x3\x2\x2\x2\x3BB\x3B7"+
		"\x3\x2\x2\x2\x3BC\x61\x3\x2\x2\x2\x3BD\x3BE\a\xB7\x2\x2\x3BE\x3C3\x5\x38"+
		"\x1D\x2\x3BF\x3C0\a\xC8\x2\x2\x3C0\x3C2\x5\x38\x1D\x2\x3C1\x3BF\x3\x2"+
		"\x2\x2\x3C2\x3C5\x3\x2\x2\x2\x3C3\x3C1\x3\x2\x2\x2\x3C3\x3C4\x3\x2\x2"+
		"\x2\x3C4\x3C6\x3\x2\x2\x2\x3C5\x3C3\x3\x2\x2\x2\x3C6\x3C7\a\xB8\x2\x2"+
		"\x3C7\x3CF\x3\x2\x2\x2\x3C8\x3CA\x5\x80\x41\x2\x3C9\x3CB\x5\x168\xB5\x2"+
		"\x3CA\x3C9\x3\x2\x2\x2\x3CA\x3CB\x3\x2\x2\x2\x3CB\x3CF\x3\x2\x2\x2\x3CC"+
		"\x3CF\x5\x134\x9B\x2\x3CD\x3CF\x5h\x35\x2\x3CE\x3BD\x3\x2\x2\x2\x3CE\x3C8"+
		"\x3\x2\x2\x2\x3CE\x3CC\x3\x2\x2\x2\x3CE\x3CD\x3\x2\x2\x2\x3CF\x63\x3\x2"+
		"\x2\x2\x3D0\x3D1\a=\x2\x2\x3D1\x3D2\x5\x38\x1D\x2\x3D2\x3D3\a>\x2\x2\x3D3"+
		"\x3D4\x5\x38\x1D\x2\x3D4\x65\x3\x2\x2\x2\x3D5\x3D6\aH\x2\x2\x3D6\x3D7"+
		"\x5\x38\x1D\x2\x3D7g\x3\x2\x2\x2\x3D8\x3D9\a\xB7\x2\x2\x3D9\x3DA\x5\xEE"+
		"x\x2\x3DA\x3DB\a\xB8\x2\x2\x3DBi\x3\x2\x2\x2\x3DC\x3E5\x5x=\x2\x3DD\x3E5"+
		"\x5\x142\xA2\x2\x3DE\x3E5\x5\x144\xA3\x2\x3DF\x3E5\x5\x148\xA5\x2\x3E0"+
		"\x3E5\x5\x146\xA4\x2\x3E1\x3E5\a\x93\x2\x2\x3E2\x3E5\a(\x2\x2\x3E3\x3E5"+
		"\x5l\x37\x2\x3E4\x3DC\x3\x2\x2\x2\x3E4\x3DD\x3\x2\x2\x2\x3E4\x3DE\x3\x2"+
		"\x2\x2\x3E4\x3DF\x3\x2\x2\x2\x3E4\x3E0\x3\x2\x2\x2\x3E4\x3E1\x3\x2\x2"+
		"\x2\x3E4\x3E2\x3\x2\x2\x2\x3E4\x3E3\x3\x2\x2\x2\x3E5k\x3\x2\x2\x2\x3E6"+
		"\x3E7\a\xB9\x2\x2\x3E7\x3E8\x5j\x36\x2\x3E8\x3E9\a\xBA\x2\x2\x3E9m\x3"+
		"\x2\x2\x2\x3EA\x3EB\a\xB7\x2\x2\x3EB\x3FC\a\xB8\x2\x2\x3EC\x3ED\a\xB7"+
		"\x2\x2\x3ED\x3EE\x5\xEEx\x2\x3EE\x3EF\a\xB8\x2\x2\x3EF\x3FC\x3\x2\x2\x2"+
		"\x3F0\x3F1\a\xB7\x2\x2\x3F1\x3F6\x5\x38\x1D\x2\x3F2\x3F3\a\xC8\x2\x2\x3F3"+
		"\x3F5\x5\x38\x1D\x2\x3F4\x3F2\x3\x2\x2\x2\x3F5\x3F8\x3\x2\x2\x2\x3F6\x3F4"+
		"\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3F9\x3\x2\x2\x2\x3F8\x3F6\x3"+
		"\x2\x2\x2\x3F9\x3FA\a\xB8\x2\x2\x3FA\x3FC\x3\x2\x2\x2\x3FB\x3EA\x3\x2"+
		"\x2\x2\x3FB\x3EC\x3\x2\x2\x2\x3FB\x3F0\x3\x2\x2\x2\x3FCo\x3\x2\x2\x2\x3FD"+
		"\x40D\a\xCA\x2\x2\x3FE\x40D\x5t;\x2\x3FF\x40D\a\xC9\x2\x2\x400\x40D\a"+
		"s\x2\x2\x401\x402\a\xB7\x2\x2\x402\x407\x5p\x39\x2\x403\x404\a\xC8\x2"+
		"\x2\x404\x406\x5p\x39\x2\x405\x403\x3\x2\x2\x2\x406\x409\x3\x2\x2\x2\x407"+
		"\x405\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x40A\x3\x2\x2\x2\x409\x407"+
		"\x3\x2\x2\x2\x40A\x40B\a\xB8\x2\x2\x40B\x40D\x3\x2\x2\x2\x40C\x3FD\x3"+
		"\x2\x2\x2\x40C\x3FE\x3\x2\x2\x2\x40C\x3FF\x3\x2\x2\x2\x40C\x400\x3\x2"+
		"\x2\x2\x40C\x401\x3\x2\x2\x2\x40Dq\x3\x2\x2\x2\x40E\x411\a\xCA\x2\x2\x40F"+
		"\x411\x5\x80\x41\x2\x410\x40E\x3\x2\x2\x2\x410\x40F\x3\x2\x2\x2\x411s"+
		"\x3\x2\x2\x2\x412\x414\t\x6\x2\x2\x413\x412\x3\x2\x2\x2\x413\x414\x3\x2"+
		"\x2\x2\x414\x415\x3\x2\x2\x2\x415\x41B\a\xCC\x2\x2\x416\x417\a\xB7\x2"+
		"\x2\x417\x418\x5t;\x2\x418\x419\a\xB8\x2\x2\x419\x41B\x3\x2\x2\x2\x41A"+
		"\x413\x3\x2\x2\x2\x41A\x416\x3\x2\x2\x2\x41Bu\x3\x2\x2\x2\x41C\x41E\a"+
		"\xB9\x2\x2\x41D\x41F\x5\x16E\xB8\x2\x41E\x41D\x3\x2\x2\x2\x41F\x420\x3"+
		"\x2\x2\x2\x420\x41E\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x422\x3\x2"+
		"\x2\x2\x422\x423\a\xBA\x2\x2\x423\x426\x3\x2\x2\x2\x424\x426\a\xCB\x2"+
		"\x2\x425\x41C\x3\x2\x2\x2\x425\x424\x3\x2\x2\x2\x426w\x3\x2\x2\x2\x427"+
		"\x430\x5v<\x2\x428\x42A\a\xC7\x2\x2\x429\x428\x3\x2\x2\x2\x42A\x42B\x3"+
		"\x2\x2\x2\x42B\x429\x3\x2\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C\x42D\x3\x2"+
		"\x2\x2\x42D\x42F\x5v<\x2\x42E\x429\x3\x2\x2\x2\x42F\x432\x3\x2\x2\x2\x430"+
		"\x42E\x3\x2\x2\x2\x430\x431\x3\x2\x2\x2\x431\x435\x3\x2\x2\x2\x432\x430"+
		"\x3\x2\x2\x2\x433\x435\x5\x16C\xB7\x2\x434\x427\x3\x2\x2\x2\x434\x433"+
		"\x3\x2\x2\x2\x435y\x3\x2\x2\x2\x436\x43B\x5x=\x2\x437\x438\a\xC8\x2\x2"+
		"\x438\x43A\x5x=\x2\x439\x437\x3\x2\x2\x2\x43A\x43D\x3\x2\x2\x2\x43B\x439"+
		"\x3\x2\x2\x2\x43B\x43C\x3\x2\x2\x2\x43C{\x3\x2\x2\x2\x43D\x43B\x3\x2\x2"+
		"\x2\x43E\x440\a\xB6\x2\x2\x43F\x43E\x3\x2\x2\x2\x440\x441\x3\x2\x2\x2"+
		"\x441\x43F\x3\x2\x2\x2\x441\x442\x3\x2\x2\x2\x442\x445\x3\x2\x2\x2\x443"+
		"\x446\x5v<\x2\x444\x446\x5\x16E\xB8\x2\x445\x443\x3\x2\x2\x2\x445\x444"+
		"\x3\x2\x2\x2\x446}\x3\x2\x2\x2\x447\x449\a\xB6\x2\x2\x448\x447\x3\x2\x2"+
		"\x2\x449\x44A\x3\x2\x2\x2\x44A\x448\x3\x2\x2\x2\x44A\x44B\x3\x2\x2\x2"+
		"\x44B\x44E\x3\x2\x2\x2\x44C\x44F\x5v<\x2\x44D\x44F\x5\x16E\xB8\x2\x44E"+
		"\x44C\x3\x2\x2\x2\x44E\x44D\x3\x2\x2\x2\x44F\x455\x3\x2\x2\x2\x450\x451"+
		"\x5x=\x2\x451\x452\a\xC7\x2\x2\x452\x453\x5~@\x2\x453\x455\x3\x2\x2\x2"+
		"\x454\x448\x3\x2\x2\x2\x454\x450\x3\x2\x2\x2\x455\x7F\x3\x2\x2\x2\x456"+
		"\x458\a\xBC\x2\x2\x457\x456\x3\x2\x2\x2\x458\x459\x3\x2\x2\x2\x459\x457"+
		"\x3\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45A\x45B\x3\x2\x2\x2\x45B\x463\a\xCB"+
		"\x2\x2\x45C\x45E\a\xBC\x2\x2\x45D\x45C\x3\x2\x2\x2\x45E\x45F\x3\x2\x2"+
		"\x2\x45F\x45D\x3\x2\x2\x2\x45F\x460\x3\x2\x2\x2\x460\x461\x3\x2\x2\x2"+
		"\x461\x463\x5\x16E\xB8\x2\x462\x457\x3\x2\x2\x2\x462\x45D\x3\x2\x2\x2"+
		"\x463\x81\x3\x2\x2\x2\x464\x465\x5\x8EH\x2\x465\x83\x3\x2\x2\x2\x466\x46F"+
		"\a\xB7\x2\x2\x467\x46C\x5\x86\x44\x2\x468\x469\a\xC8\x2\x2\x469\x46B\x5"+
		"\x86\x44\x2\x46A\x468\x3\x2\x2\x2\x46B\x46E\x3\x2\x2\x2\x46C\x46A\x3\x2"+
		"\x2\x2\x46C\x46D\x3\x2\x2\x2\x46D\x470\x3\x2\x2\x2\x46E\x46C\x3\x2\x2"+
		"\x2\x46F\x467\x3\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2"+
		"\x471\x47B\a\xB8\x2\x2\x472\x477\x5\x86\x44\x2\x473\x474\a\xC8\x2\x2\x474"+
		"\x476\x5\x86\x44\x2\x475\x473\x3\x2\x2\x2\x476\x479\x3\x2\x2\x2\x477\x475"+
		"\x3\x2\x2\x2\x477\x478\x3\x2\x2\x2\x478\x47B\x3\x2\x2\x2\x479\x477\x3"+
		"\x2\x2\x2\x47A\x466\x3\x2\x2\x2\x47A\x472\x3\x2\x2\x2\x47B\x85\x3\x2\x2"+
		"\x2\x47C\x47E\x5\x8A\x46\x2\x47D\x47F\aS\x2\x2\x47E\x47D\x3\x2\x2\x2\x47E"+
		"\x47F\x3\x2\x2\x2\x47F\x480\x3\x2\x2\x2\x480\x482\x5j\x36\x2\x481\x483"+
		"\ar\x2\x2\x482\x481\x3\x2\x2\x2\x482\x483\x3\x2\x2\x2\x483\x485\x3\x2"+
		"\x2\x2\x484\x486\as\x2\x2\x485\x484\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2"+
		"\x486\x488\x3\x2\x2\x2\x487\x489\x5\x88\x45\x2\x488\x487\x3\x2\x2\x2\x488"+
		"\x489\x3\x2\x2\x2\x489\x48B\x3\x2\x2\x2\x48A\x48C\a\xE\x2\x2\x48B\x48A"+
		"\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x48E\x3\x2\x2\x2\x48D\x48F\t\a"+
		"\x2\x2\x48E\x48D\x3\x2\x2\x2\x48E\x48F\x3\x2\x2\x2\x48F\x87\x3\x2\x2\x2"+
		"\x490\x491\a\xBB\x2\x2\x491\x495\x5p\x39\x2\x492\x493\a\xBB\x2\x2\x493"+
		"\x495\as\x2\x2\x494\x490\x3\x2\x2\x2\x494\x492\x3\x2\x2\x2\x495\x89\x3"+
		"\x2\x2\x2\x496\x497\x5\x80\x41\x2\x497\x8B\x3\x2\x2\x2\x498\x499\aT\x2"+
		"\x2\x499\x49E\a\xCB\x2\x2\x49A\x49B\a\xC8\x2\x2\x49B\x49D\a\xCB\x2\x2"+
		"\x49C\x49A\x3\x2\x2\x2\x49D\x4A0\x3\x2\x2\x2\x49E\x49C\x3\x2\x2\x2\x49E"+
		"\x49F\x3\x2\x2\x2\x49F\x8D\x3\x2\x2\x2\x4A0\x49E\x3\x2\x2\x2\x4A1\x4A5"+
		"\x5\x90I\x2\x4A2\x4A4\x5\x90I\x2\x4A3\x4A2\x3\x2\x2\x2\x4A4\x4A7\x3\x2"+
		"\x2\x2\x4A5\x4A3\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x8F\x3\x2\x2\x2"+
		"\x4A7\x4A5\x3\x2\x2\x2\x4A8\x4A9\aW\x2\x2\x4A9\x4AA\x5\x8EH\x2\x4AA\x4AB"+
		"\aX\x2\x2\x4AB\x4B6\x3\x2\x2\x2\x4AC\x4AE\x5\x92J\x2\x4AD\x4AF\a\xBD\x2"+
		"\x2\x4AE\x4AD\x3\x2\x2\x2\x4AE\x4AF\x3\x2\x2\x2\x4AF\x4B6\x3\x2\x2\x2"+
		"\x4B0\x4B2\x5\x94K\x2\x4B1\x4B3\a\xBD\x2\x2\x4B2\x4B1\x3\x2\x2\x2\x4B2"+
		"\x4B3\x3\x2\x2\x2\x4B3\x4B6\x3\x2\x2\x2\x4B4\x4B6\a\xBD\x2\x2\x4B5\x4A8"+
		"\x3\x2\x2\x2\x4B5\x4AC\x3\x2\x2\x2\x4B5\x4B0\x3\x2\x2\x2\x4B5\x4B4\x3"+
		"\x2\x2\x2\x4B6\x91\x3\x2\x2\x2\x4B7\x4C5\x5.\x18\x2\x4B8\x4C5\x5\x1C\xF"+
		"\x2\x4B9\x4C5\x5 \x11\x2\x4BA\x4C5\x5*\x16\x2\x4BB\x4C5\x5,\x17\x2\x4BC"+
		"\x4C5\x5\x4\x3\x2\x4BD\x4C5\x5\x1E\x10\x2\x4BE\x4C5\x5\x30\x19\x2\x4BF"+
		"\x4C5\x5\x6\x4\x2\x4C0\x4C5\x5\x12\n\x2\x4C1\x4C5\x5\x16\f\x2\x4C2\x4C5"+
		"\x5\x14\v\x2\x4C3\x4C5\x5\x32\x1A\x2\x4C4\x4B7\x3\x2\x2\x2\x4C4\x4B8\x3"+
		"\x2\x2\x2\x4C4\x4B9\x3\x2\x2\x2\x4C4\x4BA\x3\x2\x2\x2\x4C4\x4BB\x3\x2"+
		"\x2\x2\x4C4\x4BC\x3\x2\x2\x2\x4C4\x4BD\x3\x2\x2\x2\x4C4\x4BE\x3\x2\x2"+
		"\x2\x4C4\x4BF\x3\x2\x2\x2\x4C4\x4C0\x3\x2\x2\x2\x4C4\x4C1\x3\x2\x2\x2"+
		"\x4C4\x4C2\x3\x2\x2\x2\x4C4\x4C3\x3\x2\x2\x2\x4C5\x93\x3\x2\x2\x2\x4C6"+
		"\x4EA\x5\xEEx\x2\x4C7\x4EA\x5\xB8]\x2\x4C8\x4EA\x5\xACW\x2\x4C9\x4EA\x5"+
		"\xE4s\x2\x4CA\x4EA\x5\x136\x9C\x2\x4CB\x4EA\x5\x11E\x90\x2\x4CC\x4EA\x5"+
		"\xECw\x2\x4CD\x4EA\x5\xD6l\x2\x4CE\x4EA\x5\xC4\x63\x2\x4CF\x4EA\x5\xA6"+
		"T\x2\x4D0\x4EA\x5\xA8U\x2\x4D1\x4EA\x5\xA4S\x2\x4D2\x4EA\x5\xA2R\x2\x4D3"+
		"\x4EA\x5\xB4[\x2\x4D4\x4EA\x5\x15C\xAF\x2\x4D5\x4EA\x5\x9AN\x2\x4D6\x4EA"+
		"\x5\x9EP\x2\x4D7\x4EA\x5\xA0Q\x2\x4D8\x4DA\aL\x2\x2\x4D9\x4DB\x5x=\x2"+
		"\x4DA\x4D9\x3\x2\x2\x2\x4DA\x4DB\x3\x2\x2\x2\x4DB\x4EA\x3\x2\x2\x2\x4DC"+
		"\x4DE\aK\x2\x2\x4DD\x4DF\x5x=\x2\x4DE\x4DD\x3\x2\x2\x2\x4DE\x4DF\x3\x2"+
		"\x2\x2\x4DF\x4EA\x3\x2\x2\x2\x4E0\x4EA\x5\x96L\x2\x4E1\x4E3\aJ\x2\x2\x4E2"+
		"\x4E4\x5x=\x2\x4E3\x4E2\x3\x2\x2\x2\x4E3\x4E4\x3\x2\x2\x2\x4E4\x4EA\x3"+
		"\x2\x2\x2\x4E5\x4EA\x5\x98M\x2\x4E6\x4EA\x5\x9CO\x2\x4E7\x4E8\a\xCB\x2"+
		"\x2\x4E8\x4EA\a\xBE\x2\x2\x4E9\x4C6\x3\x2\x2\x2\x4E9\x4C7\x3\x2\x2\x2"+
		"\x4E9\x4C8\x3\x2\x2\x2\x4E9\x4C9\x3\x2\x2\x2\x4E9\x4CA\x3\x2\x2\x2\x4E9"+
		"\x4CB\x3\x2\x2\x2\x4E9\x4CC\x3\x2\x2\x2\x4E9\x4CD\x3\x2\x2\x2\x4E9\x4CE"+
		"\x3\x2\x2\x2\x4E9\x4CF\x3\x2\x2\x2\x4E9\x4D0\x3\x2\x2\x2\x4E9\x4D1\x3"+
		"\x2\x2\x2\x4E9\x4D2\x3\x2\x2\x2\x4E9\x4D3\x3\x2\x2\x2\x4E9\x4D4\x3\x2"+
		"\x2\x2\x4E9\x4D5\x3\x2\x2\x2\x4E9\x4D6\x3\x2\x2\x2\x4E9\x4D7\x3\x2\x2"+
		"\x2\x4E9\x4D8\x3\x2\x2\x2\x4E9\x4DC\x3\x2\x2\x2\x4E9\x4E0\x3\x2\x2\x2"+
		"\x4E9\x4E1\x3\x2\x2\x2\x4E9\x4E5\x3\x2\x2\x2\x4E9\x4E6\x3\x2\x2\x2\x4E9"+
		"\x4E7\x3\x2\x2\x2\x4EA\x95\x3\x2\x2\x2\x4EB\x4ED\a\x12\x2\x2\x4EC\x4EE"+
		"\a\x11\x2\x2\x4ED\x4EC\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2\x2\x4EE\x4F0\x3"+
		"\x2\x2\x2\x4EF\x4F1\x5x=\x2\x4F0\x4EF\x3\x2\x2\x2\x4F0\x4F1\x3\x2\x2\x2"+
		"\x4F1\x97\x3\x2\x2\x2\x4F2\x4F4\a\x13\x2\x2\x4F3\x4F5\a\x11\x2\x2\x4F4"+
		"\x4F3\x3\x2\x2\x2\x4F4\x4F5\x3\x2\x2\x2\x4F5\x4F7\x3\x2\x2\x2\x4F6\x4F8"+
		"\x5x=\x2\x4F7\x4F6\x3\x2\x2\x2\x4F7\x4F8\x3\x2\x2\x2\x4F8\x99\x3\x2\x2"+
		"\x2\x4F9\x4FA\a\x15\x2\x2\x4FA\x4FB\x5\x38\x1D\x2\x4FB\x9B\x3\x2\x2\x2"+
		"\x4FC\x4FE\au\x2\x2\x4FD\x4FF\x5\x38\x1D\x2\x4FE\x4FD\x3\x2\x2\x2\x4FE"+
		"\x4FF\x3\x2\x2\x2\x4FF\x9D\x3\x2\x2\x2\x500\x501\aG\x2\x2\x501\x502\x5"+
		"\x34\x1B\x2\x502\x505\x5\x90I\x2\x503\x504\aH\x2\x2\x504\x506\x5\x90I"+
		"\x2\x505\x503\x3\x2\x2\x2\x505\x506\x3\x2\x2\x2\x506\x9F\x3\x2\x2\x2\x507"+
		"\x508\aI\x2\x2\x508\x509\x5\x34\x1B\x2\x509\x50A\x5\x90I\x2\x50A\xA1\x3"+
		"\x2\x2\x2\x50B\x50C\a\x9B\x2\x2\x50C\x50D\a\x9C\x2\x2\x50D\x50E\a\xCA"+
		"\x2\x2\x50E\xA3\x3\x2\x2\x2\x50F\x510\a\x14\x2\x2\x510\x511\a\xB7\x2\x2"+
		"\x511\x512\x5\xEAv\x2\x512\x515\a\xB8\x2\x2\x513\x514\aT\x2\x2\x514\x516"+
		"\a\x88\x2\x2\x515\x513\x3\x2\x2\x2\x515\x516\x3\x2\x2\x2\x516\x522\x3"+
		"\x2\x2\x2\x517\x519\a\x14\x2\x2\x518\x51A\x5\xE8u\x2\x519\x518\x3\x2\x2"+
		"\x2\x51A\x51B\x3\x2\x2\x2\x51B\x519\x3\x2\x2\x2\x51B\x51C\x3\x2\x2\x2"+
		"\x51C\x51F\x3\x2\x2\x2\x51D\x51E\aT\x2\x2\x51E\x520\a\x88\x2\x2\x51F\x51D"+
		"\x3\x2\x2\x2\x51F\x520\x3\x2\x2\x2\x520\x522\x3\x2\x2\x2\x521\x50F\x3"+
		"\x2\x2\x2\x521\x517\x3\x2\x2\x2\x522\xA5\x3\x2\x2\x2\x523\x524\aW\x2\x2"+
		"\x524\x525\a\xF\x2\x2\x525\x526\x5\x8EH\x2\x526\x527\aX\x2\x2\x527\x528"+
		"\a\xF\x2\x2\x528\x529\aW\x2\x2\x529\x52A\a\x10\x2\x2\x52A\x52B\x5\x8E"+
		"H\x2\x52B\x52C\aX\x2\x2\x52C\x52D\a\x10\x2\x2\x52D\xA7\x3\x2\x2\x2\x52E"+
		"\x52F\aW\x2\x2\x52F\x531\a\x11\x2\x2\x530\x532\x5x=\x2\x531\x530\x3\x2"+
		"\x2\x2\x531\x532\x3\x2\x2\x2\x532\x533\x3\x2\x2\x2\x533\x534\x5\x8EH\x2"+
		"\x534\xA9\x3\x2\x2\x2\x535\x53C\a<\x2\x2\x536\x53D\x5t;\x2\x537\x53D\x5"+
		"\x80\x41\x2\x538\x539\a\xB7\x2\x2\x539\x53A\x5\x80\x41\x2\x53A\x53B\a"+
		"\xB8\x2\x2\x53B\x53D\x3\x2\x2\x2\x53C\x536\x3\x2\x2\x2\x53C\x537\x3\x2"+
		"\x2\x2\x53C\x538\x3\x2\x2\x2\x53D\xAB\x3\x2\x2\x2\x53E\x540\a_\x2\x2\x53F"+
		"\x541\x5\xAAV\x2\x540\x53F\x3\x2\x2\x2\x540\x541\x3\x2\x2\x2\x541\x543"+
		"\x3\x2\x2\x2\x542\x544\x5\xAEX\x2\x543\x542\x3\x2\x2\x2\x544\x545\x3\x2"+
		"\x2\x2\x545\x543\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x548\x3\x2\x2"+
		"\x2\x547\x549\x5\xB2Z\x2\x548\x547\x3\x2\x2\x2\x548\x549\x3\x2\x2\x2\x549"+
		"\x54D\x3\x2\x2\x2\x54A\x54C\x5\x114\x8B\x2\x54B\x54A\x3\x2\x2\x2\x54C"+
		"\x54F\x3\x2\x2\x2\x54D\x54B\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x551"+
		"\x3\x2\x2\x2\x54F\x54D\x3\x2\x2\x2\x550\x552\x5\x118\x8D\x2\x551\x550"+
		"\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552\x554\x3\x2\x2\x2\x553\x555\x5"+
		"\x102\x82\x2\x554\x553\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2\x555\x570\x3"+
		"\x2\x2\x2\x556\x558\a_\x2\x2\x557\x559\x5\xAAV\x2\x558\x557\x3\x2\x2\x2"+
		"\x558\x559\x3\x2\x2\x2\x559\x55A\x3\x2\x2\x2\x55A\x55C\x5\x126\x94\x2"+
		"\x55B\x55D\x5\xB0Y\x2\x55C\x55B\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E"+
		"\x55C\x3\x2\x2\x2\x55E\x55F\x3\x2\x2\x2\x55F\x561\x3\x2\x2\x2\x560\x562"+
		"\x5\xB2Z\x2\x561\x560\x3\x2\x2\x2\x561\x562\x3\x2\x2\x2\x562\x566\x3\x2"+
		"\x2\x2\x563\x565\x5\x114\x8B\x2\x564\x563\x3\x2\x2\x2\x565\x568\x3\x2"+
		"\x2\x2\x566\x564\x3\x2\x2\x2\x566\x567\x3\x2\x2\x2\x567\x56A\x3\x2\x2"+
		"\x2\x568\x566\x3\x2\x2\x2\x569\x56B\x5\x118\x8D\x2\x56A\x569\x3\x2\x2"+
		"\x2\x56A\x56B\x3\x2\x2\x2\x56B\x56D\x3\x2\x2\x2\x56C\x56E\x5\x102\x82"+
		"\x2\x56D\x56C\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E\x570\x3\x2\x2\x2"+
		"\x56F\x53E\x3\x2\x2\x2\x56F\x556\x3\x2\x2\x2\x570\xAD\x3\x2\x2\x2\x571"+
		"\x573\a\x61\x2\x2\x572\x571\x3\x2\x2\x2\x572\x573\x3\x2\x2\x2\x573\x574"+
		"\x3\x2\x2\x2\x574\x579\x5\x124\x93\x2\x575\x576\a\xC8\x2\x2\x576\x578"+
		"\x5\x12A\x96\x2\x577\x575\x3\x2\x2\x2\x578\x57B\x3\x2\x2\x2\x579\x577"+
		"\x3\x2\x2\x2\x579\x57A\x3\x2\x2\x2\x57A\xAF\x3\x2\x2\x2\x57B\x579\x3\x2"+
		"\x2\x2\x57C\x57E\a\x61\x2\x2\x57D\x57C\x3\x2\x2\x2\x57D\x57E\x3\x2\x2"+
		"\x2\x57E\x57F\x3\x2\x2\x2\x57F\x584\x5\x12A\x96\x2\x580\x581\a\xC8\x2"+
		"\x2\x581\x583\x5\x12A\x96\x2\x582\x580\x3\x2\x2\x2\x583\x586\x3\x2\x2"+
		"\x2\x584\x582\x3\x2\x2\x2\x584\x585\x3\x2\x2\x2\x585\xB1\x3\x2\x2\x2\x586"+
		"\x584\x3\x2\x2\x2\x587\x588\av\x2\x2\x588\x589\x5\x150\xA9\x2\x589\x58A"+
		"\an\x2\x2\x58A\x58B\x5\x124\x93\x2\x58B\xB3\x3\x2\x2\x2\x58C\x58D\aT\x2"+
		"\x2\x58D\x592\x5\xB6\\\x2\x58E\x58F\a\xC8\x2\x2\x58F\x591\x5\xB6\\\x2"+
		"\x590\x58E\x3\x2\x2\x2\x591\x594\x3\x2\x2\x2\x592\x590\x3\x2\x2\x2\x592"+
		"\x593\x3\x2\x2\x2\x593\x595\x3\x2\x2\x2\x594\x592\x3\x2\x2\x2\x595\x596"+
		"\x5\x94K\x2\x596\xB5\x3\x2\x2\x2\x597\x59C\x5x=\x2\x598\x599\a\xB7\x2"+
		"\x2\x599\x59A\x5\xCA\x66\x2\x59A\x59B\a\xB8\x2\x2\x59B\x59D\x3\x2\x2\x2"+
		"\x59C\x598\x3\x2\x2\x2\x59C\x59D\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E"+
		"\x59F\aS\x2\x2\x59F\x5A0\a\xB7\x2\x2\x5A0\x5A1\x5\x94K\x2\x5A1\x5A2\a"+
		"\xB8\x2\x2\x5A2\xB7\x3\x2\x2\x2\x5A3\x5A5\x5\xBA^\x2\x5A4\x5A6\x5\xBC"+
		"_\x2\x5A5\x5A4\x3\x2\x2\x2\x5A5\x5A6\x3\x2\x2\x2\x5A6\x5A7\x3\x2\x2\x2"+
		"\x5A7\x5A9\x5\xBE`\x2\x5A8\x5AA\x5\x102\x82\x2\x5A9\x5A8\x3\x2\x2\x2\x5A9"+
		"\x5AA\x3\x2\x2\x2\x5AA\xB9\x3\x2\x2\x2\x5AB\x5AD\a^\x2\x2\x5AC\x5AE\a"+
		"n\x2\x2\x5AD\x5AC\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2"+
		"\x2\x5AF\x5B1\x5\x126\x94\x2\x5B0\x5B2\x5\x128\x95\x2\x5B1\x5B0\x3\x2"+
		"\x2\x2\x5B1\x5B2\x3\x2\x2\x2\x5B2\x5B7\x3\x2\x2\x2\x5B3\x5B4\a\xB7\x2"+
		"\x2\x5B4\x5B5\x5z>\x2\x5B5\x5B6\a\xB8\x2\x2\x5B6\x5B8\x3\x2\x2\x2\x5B7"+
		"\x5B3\x3\x2\x2\x2\x5B7\x5B8\x3\x2\x2\x2\x5B8\xBB\x3\x2\x2\x2\x5B9\x5BA"+
		"\av\x2\x2\x5BA\x5C3\x5\xFE\x80\x2\x5BB\x5BC\an\x2\x2\x5BC\x5C1\x5\x126"+
		"\x94\x2\x5BD\x5BE\a\xB7\x2\x2\x5BE\x5BF\x5\x150\xA9\x2\x5BF\x5C0\a\xB8"+
		"\x2\x2\x5C0\x5C2\x3\x2\x2\x2\x5C1\x5BD\x3\x2\x2\x2\x5C1\x5C2\x3\x2\x2"+
		"\x2\x5C2\x5C4\x3\x2\x2\x2\x5C3\x5BB\x3\x2\x2\x2\x5C3\x5C4\x3\x2\x2\x2"+
		"\x5C4\xBD\x3\x2\x2\x2\x5C5\x5C6\ao\x2\x2\x5C6\x5CB\x5\xC0\x61\x2\x5C7"+
		"\x5C8\a\xC8\x2\x2\x5C8\x5CA\x5\xC0\x61\x2\x5C9\x5C7\x3\x2\x2\x2\x5CA\x5CD"+
		"\x3\x2\x2\x2\x5CB\x5C9\x3\x2\x2\x2\x5CB\x5CC\x3\x2\x2\x2\x5CC\x5D3\x3"+
		"\x2\x2\x2\x5CD\x5CB\x3\x2\x2\x2\x5CE\x5CF\aZ\x2\x2\x5CF\x5D3\ao\x2\x2"+
		"\x5D0\x5D3\x5\xEEx\x2\x5D1\x5D3\x5\x12C\x97\x2\x5D2\x5C5\x3\x2\x2\x2\x5D2"+
		"\x5CE\x3\x2\x2\x2\x5D2\x5D0\x3\x2\x2\x2\x5D2\x5D1\x3\x2\x2\x2\x5D3\xBF"+
		"\x3\x2\x2\x2\x5D4\x5D5\a\xB7\x2\x2\x5D5\x5DA\x5\xC2\x62\x2\x5D6\x5D7\a"+
		"\xC8\x2\x2\x5D7\x5D9\x5\xC2\x62\x2\x5D8\x5D6\x3\x2\x2\x2\x5D9\x5DC\x3"+
		"\x2\x2\x2\x5DA\x5D8\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DD\x3\x2"+
		"\x2\x2\x5DC\x5DA\x3\x2\x2\x2\x5DD\x5DE\a\xB8\x2\x2\x5DE\xC1\x3\x2\x2\x2"+
		"\x5DF\x5E0\x5\x38\x1D\x2\x5E0\xC3\x3\x2\x2\x2\x5E1\x5E2\a\x63\x2\x2\x5E2"+
		"\x5E7\x5\xC6\x64\x2\x5E3\x5E4\a\xC8\x2\x2\x5E4\x5E6\x5\xC6\x64\x2\x5E5"+
		"\x5E3\x3\x2\x2\x2\x5E6\x5E9\x3\x2\x2\x2\x5E7\x5E5\x3\x2\x2\x2\x5E7\x5E8"+
		"\x3\x2\x2\x2\x5E8\x5F9\x3\x2\x2\x2\x5E9\x5E7\x3\x2\x2\x2\x5EA\x5EB\a\x63"+
		"\x2\x2\x5EB\x5EC\x5x=\x2\x5EC\x5EE\a(\x2\x2\x5ED\x5EF\a\xCB\x2\x2\x5EE"+
		"\x5ED\x3\x2\x2\x2\x5EE\x5EF\x3\x2\x2\x2\x5EF\x5F0\x3\x2\x2\x2\x5F0\x5F1"+
		"\aU\x2\x2\x5F1\x5F6\x5\xEEx\x2\x5F2\x5F3\aU\x2\x2\x5F3\x5F4\a]\x2\x2\x5F4"+
		"\x5F5\az\x2\x2\x5F5\x5F7\x5\x126\x94\x2\x5F6\x5F2\x3\x2\x2\x2\x5F6\x5F7"+
		"\x3\x2\x2\x2\x5F7\x5F9\x3\x2\x2\x2\x5F8\x5E1\x3\x2\x2\x2\x5F8\x5EA\x3"+
		"\x2\x2\x2\x5F9\xC5\x3\x2\x2\x2\x5FA\x60E\x5\x80\x41\x2\x5FB\x5FD\aS\x2"+
		"\x2\x5FC\x5FB\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2\x2\x5FD\x5FE\x3\x2\x2\x2"+
		"\x5FE\x600\x5j\x36\x2\x5FF\x601\x5\xC8\x65\x2\x600\x5FF\x3\x2\x2\x2\x600"+
		"\x601\x3\x2\x2\x2\x601\x60F\x3\x2\x2\x2\x602\x603\a\x18\x2\x2\x603\x604"+
		"\a\xB7\x2\x2\x604\x607\x5\xCCg\x2\x605\x606\a\xC8\x2\x2\x606\x608\x5\xD0"+
		"i\x2\x607\x605\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608\x60A\x3\x2\x2\x2"+
		"\x609\x60B\a\xC8\x2\x2\x60A\x609\x3\x2\x2\x2\x60A\x60B\x3\x2\x2\x2\x60B"+
		"\x60C\x3\x2\x2\x2\x60C\x60D\a\xB8\x2\x2\x60D\x60F\x3\x2\x2\x2\x60E\x5FC"+
		"\x3\x2\x2\x2\x60E\x602\x3\x2\x2\x2\x60F\xC7\x3\x2\x2\x2\x610\x611\a\xBB"+
		"\x2\x2\x611\x612\x5\x38\x1D\x2\x612\xC9\x3\x2\x2\x2\x613\x618\x5\x156"+
		"\xAC\x2\x614\x615\a\xC8\x2\x2\x615\x617\x5\x156\xAC\x2\x616\x614\x3\x2"+
		"\x2\x2\x617\x61A\x3\x2\x2\x2\x618\x616\x3\x2\x2\x2\x618\x619\x3\x2\x2"+
		"\x2\x619\xCB\x3\x2\x2\x2\x61A\x618\x3\x2\x2\x2\x61B\x620\x5\xCEh\x2\x61C"+
		"\x61D\a\xC8\x2\x2\x61D\x61F\x5\xCEh\x2\x61E\x61C\x3\x2\x2\x2\x61F\x622"+
		"\x3\x2\x2\x2\x620\x61E\x3\x2\x2\x2\x620\x621\x3\x2\x2\x2\x621\xCD\x3\x2"+
		"\x2\x2\x622\x620\x3\x2\x2\x2\x623\x624\x5\x156\xAC\x2\x624\x62A\x5j\x36"+
		"\x2\x625\x626\a\x1F\x2\x2\x626\x628\a \x2\x2\x627\x629\x5\x16A\xB6\x2"+
		"\x628\x627\x3\x2\x2\x2\x628\x629\x3\x2\x2\x2\x629\x62B\x3\x2\x2\x2\x62A"+
		"\x625\x3\x2\x2\x2\x62A\x62B\x3\x2\x2\x2\x62B\x62D\x3\x2\x2\x2\x62C\x62E"+
		"\ar\x2\x2\x62D\x62C\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\x630\x3\x2"+
		"\x2\x2\x62F\x631\as\x2\x2\x630\x62F\x3\x2\x2\x2\x630\x631\x3\x2\x2\x2"+
		"\x631\x637\x3\x2\x2\x2\x632\x635\aZ\x2\x2\x633\x636\x5p\x39\x2\x634\x636"+
		"\x5\x134\x9B\x2\x635\x633\x3\x2\x2\x2\x635\x634\x3\x2\x2\x2\x636\x638"+
		"\x3\x2\x2\x2\x637\x632\x3\x2\x2\x2\x637\x638\x3\x2\x2\x2\x638\x653\x3"+
		"\x2\x2\x2\x639\x63A\x5\x156\xAC\x2\x63A\x640\x5\x146\xA4\x2\x63B\x63C"+
		"\a\x1F\x2\x2\x63C\x63E\a \x2\x2\x63D\x63F\x5\x16A\xB6\x2\x63E\x63D\x3"+
		"\x2\x2\x2\x63E\x63F\x3\x2\x2\x2\x63F\x641\x3\x2\x2\x2\x640\x63B\x3\x2"+
		"\x2\x2\x640\x641\x3\x2\x2\x2\x641\x643\x3\x2\x2\x2\x642\x644\ar\x2\x2"+
		"\x643\x642\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x646\x3\x2\x2\x2\x645"+
		"\x647\as\x2\x2\x646\x645\x3\x2\x2\x2\x646\x647\x3\x2\x2\x2\x647\x649\x3"+
		"\x2\x2\x2\x648\x64A\x5\x14A\xA6\x2\x649\x648\x3\x2\x2\x2\x649\x64A\x3"+
		"\x2\x2\x2\x64A\x650\x3\x2\x2\x2\x64B\x64E\aZ\x2\x2\x64C\x64F\x5p\x39\x2"+
		"\x64D\x64F\x5\x134\x9B\x2\x64E\x64C\x3\x2\x2\x2\x64E\x64D\x3\x2\x2\x2"+
		"\x64F\x651\x3\x2\x2\x2\x650\x64B\x3\x2\x2\x2\x650\x651\x3\x2\x2\x2\x651"+
		"\x653\x3\x2\x2\x2\x652\x623\x3\x2\x2\x2\x652\x639\x3\x2\x2\x2\x653\xCF"+
		"\x3\x2\x2\x2\x654\x659\x5\xD2j\x2\x655\x656\a\xC8\x2\x2\x656\x658\x5\xD2"+
		"j\x2\x657\x655\x3\x2\x2\x2\x658\x65B\x3\x2\x2\x2\x659\x657\x3\x2\x2\x2"+
		"\x659\x65A\x3\x2\x2\x2\x65A\xD1\x3\x2\x2\x2\x65B\x659\x3\x2\x2\x2\x65C"+
		"\x65E\a:\x2\x2\x65D\x65F\x5\x16A\xB6\x2\x65E\x65D\x3\x2\x2\x2\x65E\x65F"+
		"\x3\x2\x2\x2\x65F\x660\x3\x2\x2\x2\x660\x661\a\xB7\x2\x2\x661\x662\x5"+
		"\xCA\x66\x2\x662\x663\a\xB8\x2\x2\x663\x670\x3\x2\x2\x2\x664\x665\a\x1F"+
		"\x2\x2\x665\x667\a \x2\x2\x666\x668\x5\x16A\xB6\x2\x667\x666\x3\x2\x2"+
		"\x2\x667\x668\x3\x2\x2\x2\x668\x669\x3\x2\x2\x2\x669\x66A\a\xB7\x2\x2"+
		"\x66A\x66B\x5&\x14\x2\x66B\x66D\a\xB8\x2\x2\x66C\x66E\x5\x18\r\x2\x66D"+
		"\x66C\x3\x2\x2\x2\x66D\x66E\x3\x2\x2\x2\x66E\x670\x3\x2\x2\x2\x66F\x65C"+
		"\x3\x2\x2\x2\x66F\x664\x3\x2\x2\x2\x670\xD3\x3\x2\x2\x2\x671\x672\x5x"+
		"=\x2\x672\xD5\x3\x2\x2\x2\x673\x677\a\x65\x2\x2\x674\x678\x5\xDCo\x2\x675"+
		"\x678\x5\xDEp\x2\x676\x678\x5\xD8m\x2\x677\x674\x3\x2\x2\x2\x677\x675"+
		"\x3\x2\x2\x2\x677\x676\x3\x2\x2\x2\x678\xD7\x3\x2\x2\x2\x679\x67A\a\xA6"+
		"\x2\x2\x67A\x688\x5t;\x2\x67B\x67C\a\x11\x2\x2\x67C\x67D\a\x9F\x2\x2\x67D"+
		"\x67E\a\x9E\x2\x2\x67E\x688\x5\xE0q\x2\x67F\x681\x5\xDAn\x2\x680\x67F"+
		"\x3\x2\x2\x2\x681\x682\x3\x2\x2\x2\x682\x680\x3\x2\x2\x2\x682\x683\x3"+
		"\x2\x2\x2\x683\x684\x3\x2\x2\x2\x684\x685\t\x3\x2\x2\x685\x688\x3\x2\x2"+
		"\x2\x686\x688\x5\xDAn\x2\x687\x679\x3\x2\x2\x2\x687\x67B\x3\x2\x2\x2\x687"+
		"\x680\x3\x2\x2\x2\x687\x686\x3\x2\x2\x2\x688\xD9\x3\x2\x2\x2\x689\x692"+
		"\x5v<\x2\x68A\x68C\a\xC7\x2\x2\x68B\x68A\x3\x2\x2\x2\x68C\x68D\x3\x2\x2"+
		"\x2\x68D\x68B\x3\x2\x2\x2\x68D\x68E\x3\x2\x2\x2\x68E\x68F\x3\x2\x2\x2"+
		"\x68F\x691\x5v<\x2\x690\x68B\x3\x2\x2\x2\x691\x694\x3\x2\x2\x2\x692\x690"+
		"\x3\x2\x2\x2\x692\x693\x3\x2\x2\x2\x693\xDB\x3\x2\x2\x2\x694\x692\x3\x2"+
		"\x2\x2\x695\x697\x5\x80\x41\x2\x696\x698\x5\x14C\xA7\x2\x697\x696\x3\x2"+
		"\x2\x2\x697\x698\x3\x2\x2\x2\x698\x699\x3\x2\x2\x2\x699\x69A\x5\x14E\xA8"+
		"\x2\x69A\x69B\x5\x38\x1D\x2\x69B\xDD\x3\x2\x2\x2\x69C\x69E\x5\x80\x41"+
		"\x2\x69D\x69F\x5\x14C\xA7\x2\x69E\x69D\x3\x2\x2\x2\x69E\x69F\x3\x2\x2"+
		"\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x6A1\a\xBB\x2\x2\x6A1\x6A2\a(\x2\x2\x6A2"+
		"\x6A3\aU\x2\x2\x6A3\x6A4\x5\xEEx\x2\x6A4\xDF\x3\x2\x2\x2\x6A5\x6A6\a\n"+
		"\x2\x2\x6A6\x6AC\t\b\x2\x2\x6A7\x6A8\a\a\x2\x2\x6A8\x6AC\a\n\x2\x2\x6A9"+
		"\x6AC\a\b\x2\x2\x6AA\x6AC\a\f\x2\x2\x6AB\x6A5\x3\x2\x2\x2\x6AB\x6A7\x3"+
		"\x2\x2\x2\x6AB\x6A9\x3\x2\x2\x2\x6AB\x6AA\x3\x2\x2\x2\x6AC\xE1\x3\x2\x2"+
		"\x2\x6AD\x6B4\a<\x2\x2\x6AE\x6B5\x5t;\x2\x6AF\x6B5\x5\x80\x41\x2\x6B0"+
		"\x6B1\a\xB7\x2\x2\x6B1\x6B2\x5\x80\x41\x2\x6B2\x6B3\a\xB8\x2\x2\x6B3\x6B5"+
		"\x3\x2\x2\x2\x6B4\x6AE\x3\x2\x2\x2\x6B4\x6AF\x3\x2\x2\x2\x6B4\x6B0\x3"+
		"\x2\x2\x2\x6B5\xE3\x3\x2\x2\x2\x6B6\x6B8\a]\x2\x2\x6B7\x6B9\x5\xE2r\x2"+
		"\x6B8\x6B7\x3\x2\x2\x2\x6B8\x6B9\x3\x2\x2\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA"+
		"\x6BB\x5\x124\x93\x2\x6BB\x6BC\a\x65\x2\x2\x6BC\x6C1\x5\xE6t\x2\x6BD\x6BE"+
		"\a\xC8\x2\x2\x6BE\x6C0\x5\xE6t\x2\x6BF\x6BD\x3\x2\x2\x2\x6C0\x6C3\x3\x2"+
		"\x2\x2\x6C1\x6BF\x3\x2\x2\x2\x6C1\x6C2\x3\x2\x2\x2\x6C2\x6C5\x3\x2\x2"+
		"\x2\x6C3\x6C1\x3\x2\x2\x2\x6C4\x6C6\x5\x10A\x86\x2\x6C5\x6C4\x3\x2\x2"+
		"\x2\x6C5\x6C6\x3\x2\x2\x2\x6C6\x6CA\x3\x2\x2\x2\x6C7\x6C9\x5\x114\x8B"+
		"\x2\x6C8\x6C7\x3\x2\x2\x2\x6C9\x6CC\x3\x2\x2\x2\x6CA\x6C8\x3\x2\x2\x2"+
		"\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6D0\x3\x2\x2\x2\x6CC\x6CA\x3\x2\x2\x2\x6CD"+
		"\x6CF\x5\x10C\x87\x2\x6CE\x6CD\x3\x2\x2\x2\x6CF\x6D2\x3\x2\x2\x2\x6D0"+
		"\x6CE\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D4\x3\x2\x2\x2\x6D2\x6D0"+
		"\x3\x2\x2\x2\x6D3\x6D5\x5\x118\x8D\x2\x6D4\x6D3\x3\x2\x2\x2\x6D4\x6D5"+
		"\x3\x2\x2\x2\x6D5\x6D7\x3\x2\x2\x2\x6D6\x6D8\x5\x102\x82\x2\x6D7\x6D6"+
		"\x3\x2\x2\x2\x6D7\x6D8\x3\x2\x2\x2\x6D8\x6E0\x3\x2\x2\x2\x6D9\x6DA\a]"+
		"\x2\x2\x6DA\x6DB\a\x8D\x2\x2\x6DB\x6DD\x5\x126\x94\x2\x6DC\x6DE\x5\x18"+
		"\r\x2\x6DD\x6DC\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6E0\x3\x2\x2\x2"+
		"\x6DF\x6B6\x3\x2\x2\x2\x6DF\x6D9\x3\x2\x2\x2\x6E0\xE5\x3\x2\x2\x2\x6E1"+
		"\x6E2\x5\x152\xAA\x2\x6E2\x6E6\x5\x14E\xA8\x2\x6E3\x6E7\x5\x38\x1D\x2"+
		"\x6E4\x6E7\aZ\x2\x2\x6E5\x6E7\as\x2\x2\x6E6\x6E3\x3\x2\x2\x2\x6E6\x6E4"+
		"\x3\x2\x2\x2\x6E6\x6E5\x3\x2\x2\x2\x6E7\x6FF\x3\x2\x2\x2\x6E8\x6E9\x5"+
		"\x80\x41\x2\x6E9\x6ED\x5\x14E\xA8\x2\x6EA\x6EB\x5\x152\xAA\x2\x6EB\x6EC"+
		"\a\xBB\x2\x2\x6EC\x6EE\x3\x2\x2\x2\x6ED\x6EA\x3\x2\x2\x2\x6ED\x6EE\x3"+
		"\x2\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F0\x5\x38\x1D\x2\x6F0\x6FF\x3\x2"+
		"\x2\x2\x6F1\x6F2\x5\x152\xAA\x2\x6F2\x6F3\a\xC7\x2\x2\x6F3\x6FC\x5v<\x2"+
		"\x6F4\x6F5\a\xBB\x2\x2\x6F5\x6FD\x5\x38\x1D\x2\x6F6\x6F7\a\xB7\x2\x2\x6F7"+
		"\x6FD\a\xB8\x2\x2\x6F8\x6F9\a\xB7\x2\x2\x6F9\x6FA\x5\xEAv\x2\x6FA\x6FB"+
		"\a\xB8\x2\x2\x6FB\x6FD\x3\x2\x2\x2\x6FC\x6F4\x3\x2\x2\x2\x6FC\x6F6\x3"+
		"\x2\x2\x2\x6FC\x6F8\x3\x2\x2\x2\x6FD\x6FF\x3\x2\x2\x2\x6FE\x6E1\x3\x2"+
		"\x2\x2\x6FE\x6E8\x3\x2\x2\x2\x6FE\x6F1\x3\x2\x2\x2\x6FF\xE7\x3\x2\x2\x2"+
		"\x700\x704\x5\x38\x1D\x2\x701\x704\x5~@\x2\x702\x704\x5j\x36\x2\x703\x700"+
		"\x3\x2\x2\x2\x703\x701\x3\x2\x2\x2\x703\x702\x3\x2\x2\x2\x704\xE9\x3\x2"+
		"\x2\x2\x705\x70A\x5\xE8u\x2\x706\x707\a\xC8\x2\x2\x707\x709\x5\xE8u\x2"+
		"\x708\x706\x3\x2\x2\x2\x709\x70C\x3\x2\x2\x2\x70A\x708\x3\x2\x2\x2\x70A"+
		"\x70B\x3\x2\x2\x2\x70B\xEB\x3\x2\x2\x2\x70C\x70A\x3\x2\x2\x2\x70D\x70E"+
		"\a\x9D\x2\x2\x70E\x713\x5\x38\x1D\x2\x70F\x710\a\xC8\x2\x2\x710\x712\x5"+
		"\x38\x1D\x2\x711\x70F\x3\x2\x2\x2\x712\x715\x3\x2\x2\x2\x713\x711\x3\x2"+
		"\x2\x2\x713\x714\x3\x2\x2\x2\x714\x71F\x3\x2\x2\x2\x715\x713\x3\x2\x2"+
		"\x2\x716\x717\al\x2\x2\x717\x71C\x5\x38\x1D\x2\x718\x719\a\xC8\x2\x2\x719"+
		"\x71B\x5\x38\x1D\x2\x71A\x718\x3\x2\x2\x2\x71B\x71E\x3\x2\x2\x2\x71C\x71A"+
		"\x3\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\x720\x3\x2\x2\x2\x71E\x71C\x3"+
		"\x2\x2\x2\x71F\x716\x3\x2\x2\x2\x71F\x720\x3\x2\x2\x2\x720\xED\x3\x2\x2"+
		"\x2\x721\x729\x5\xF0y\x2\x722\x724\a\x44\x2\x2\x723\x725\a\x45\x2\x2\x724"+
		"\x723\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2\x725\x726\x3\x2\x2\x2\x726\x728"+
		"\x5\xF0y\x2\x727\x722\x3\x2\x2\x2\x728\x72B\x3\x2\x2\x2\x729\x727\x3\x2"+
		"\x2\x2\x729\x72A\x3\x2\x2\x2\x72A\x735\x3\x2\x2\x2\x72B\x729\x3\x2\x2"+
		"\x2\x72C\x731\x5\xF0y\x2\x72D\x72E\t\t\x2\x2\x72E\x730\x5\xF0y\x2\x72F"+
		"\x72D\x3\x2\x2\x2\x730\x733\x3\x2\x2\x2\x731\x72F\x3\x2\x2\x2\x731\x732"+
		"\x3\x2\x2\x2\x732\x735\x3\x2\x2\x2\x733\x731\x3\x2\x2\x2\x734\x721\x3"+
		"\x2\x2\x2\x734\x72C\x3\x2\x2\x2\x735\xEF\x3\x2\x2\x2\x736\x738\a\\\x2"+
		"\x2\x737\x739\x5\xFA~\x2\x738\x737\x3\x2\x2\x2\x738\x739\x3\x2\x2\x2\x739"+
		"\x73A\x3\x2\x2\x2\x73A\x73C\x5\xFE\x80\x2\x73B\x73D\x5\x108\x85\x2\x73C"+
		"\x73B\x3\x2\x2\x2\x73C\x73D\x3\x2\x2\x2\x73D\x73F\x3\x2\x2\x2\x73E\x740"+
		"\x5\x10A\x86\x2\x73F\x73E\x3\x2\x2\x2\x73F\x740\x3\x2\x2\x2\x740\x742"+
		"\x3\x2\x2\x2\x741\x743\x5\xF2z\x2\x742\x741\x3\x2\x2\x2\x742\x743\x3\x2"+
		"\x2\x2\x743\x747\x3\x2\x2\x2\x744\x746\x5\x114\x8B\x2\x745\x744\x3\x2"+
		"\x2\x2\x746\x749\x3\x2\x2\x2\x747\x745\x3\x2\x2\x2\x747\x748\x3\x2\x2"+
		"\x2\x748\x74D\x3\x2\x2\x2\x749\x747\x3\x2\x2\x2\x74A\x74C\x5\x10C\x87"+
		"\x2\x74B\x74A\x3\x2\x2\x2\x74C\x74F\x3\x2\x2\x2\x74D\x74B\x3\x2\x2\x2"+
		"\x74D\x74E\x3\x2\x2\x2\x74E\x751\x3\x2\x2\x2\x74F\x74D\x3\x2\x2\x2\x750"+
		"\x752\x5\x118\x8D\x2\x751\x750\x3\x2\x2\x2\x751\x752\x3\x2\x2\x2\x752"+
		"\x754\x3\x2\x2\x2\x753\x755\x5\x10E\x88\x2\x754\x753\x3\x2\x2\x2\x754"+
		"\x755\x3\x2\x2\x2\x755\x757\x3\x2\x2\x2\x756\x758\x5\x112\x8A\x2\x757"+
		"\x756\x3\x2\x2\x2\x757\x758\x3\x2\x2\x2\x758\x75A\x3\x2\x2\x2\x759\x75B"+
		"\x5\x11A\x8E\x2\x75A\x759\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x75D"+
		"\x3\x2\x2\x2\x75C\x75E\x5\x102\x82\x2\x75D\x75C\x3\x2\x2\x2\x75D\x75E"+
		"\x3\x2\x2\x2\x75E\x760\x3\x2\x2\x2\x75F\x761\x5\xF8}\x2\x760\x75F\x3\x2"+
		"\x2\x2\x760\x761\x3\x2\x2\x2\x761\x767\x3\x2\x2\x2\x762\x763\a\xB7\x2"+
		"\x2\x763\x764\x5\xEEx\x2\x764\x765\a\xB8\x2\x2\x765\x767\x3\x2\x2\x2\x766"+
		"\x736\x3\x2\x2\x2\x766\x762\x3\x2\x2\x2\x767\xF1\x3\x2\x2\x2\x768\x769"+
		"\aT\x2\x2\x769\x76A\a\xB7\x2\x2\x76A\x76B\x5\xF4{\x2\x76B\x76D\a\xB8\x2"+
		"\x2\x76C\x76E\x5x=\x2\x76D\x76C\x3\x2\x2\x2\x76D\x76E\x3\x2\x2\x2\x76E"+
		"\xF3\x3\x2\x2\x2\x76F\x774\x5\xF6|\x2\x770\x771\a\xC8\x2\x2\x771\x773"+
		"\x5\xF6|\x2\x772\x770\x3\x2\x2\x2\x773\x776\x3\x2\x2\x2\x774\x772\x3\x2"+
		"\x2\x2\x774\x775\x3\x2\x2\x2\x775\xF5\x3\x2\x2\x2\x776\x774\x3\x2\x2\x2"+
		"\x777\x778\x5\x156\xAC\x2\x778\x77B\x5j\x36\x2\x779\x77C\x5p\x39\x2\x77A"+
		"\x77C\x5\x134\x9B\x2\x77B\x779\x3\x2\x2\x2\x77B\x77A\x3\x2\x2\x2\x77B"+
		"\x77C\x3\x2\x2\x2\x77C\xF7\x3\x2\x2\x2\x77D\x77E\aU\x2\x2\x77E\x788\a"+
		"\x93\x2\x2\x77F\x789\a\x95\x2\x2\x780\x789\a\x94\x2\x2\x781\x789\a\x96"+
		"\x2\x2\x782\x783\a\x97\x2\x2\x783\x785\a\xB7\x2\x2\x784\x786\x5\xEAv\x2"+
		"\x785\x784\x3\x2\x2\x2\x785\x786\x3\x2\x2\x2\x786\x787\x3\x2\x2\x2\x787"+
		"\x789\a\xB8\x2\x2\x788\x77F\x3\x2\x2\x2\x788\x780\x3\x2\x2\x2\x788\x781"+
		"\x3\x2\x2\x2\x788\x782\x3\x2\x2\x2\x789\xF9\x3\x2\x2\x2\x78A\x78C\a\x39"+
		"\x2\x2\x78B\x78A\x3\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C\x78D\x3\x2\x2"+
		"\x2\x78D\x797\a<\x2\x2\x78E\x790\x5t;\x2\x78F\x791\a\x6\x2\x2\x790\x78F"+
		"\x3\x2\x2\x2\x790\x791\x3\x2\x2\x2\x791\x798\x3\x2\x2\x2\x792\x798\x5"+
		"\x80\x41\x2\x793\x794\a\xB7\x2\x2\x794\x795\x5\x80\x41\x2\x795\x796\a"+
		"\xB8\x2\x2\x796\x798\x3\x2\x2\x2\x797\x78E\x3\x2\x2\x2\x797\x792\x3\x2"+
		"\x2\x2\x797\x793\x3\x2\x2\x2\x798\xFB\x3\x2\x2\x2\x799\x79A\x5\x80\x41"+
		"\x2\x79A\x79B\t\n\x2\x2\x79B\x79C\x5\x38\x1D\x2\x79C\xFD\x3\x2\x2\x2\x79D"+
		"\x7A2\x5\x100\x81\x2\x79E\x79F\a\xC8\x2\x2\x79F\x7A1\x5\x100\x81\x2\x7A0"+
		"\x79E\x3\x2\x2\x2\x7A1\x7A4\x3\x2\x2\x2\x7A2\x7A0\x3\x2\x2\x2\x7A2\x7A3"+
		"\x3\x2\x2\x2\x7A3\xFF\x3\x2\x2\x2\x7A4\x7A2\x3\x2\x2\x2\x7A5\x7A6\x5\x80"+
		"\x41\x2\x7A6\x7A7\t\n\x2\x2\x7A7\x7AC\x5\x38\x1D\x2\x7A8\x7AA\aS\x2\x2"+
		"\x7A9\x7A8\x3\x2\x2\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AB\x3\x2\x2\x2\x7AB"+
		"\x7AD\x5\x158\xAD\x2\x7AC\x7A9\x3\x2\x2\x2\x7AC\x7AD\x3\x2\x2\x2\x7AD"+
		"\x7C7\x3\x2\x2\x2\x7AE\x7AF\x5\x152\xAA\x2\x7AF\x7B0\a\xBB\x2\x2\x7B0"+
		"\x7B1\x5\x38\x1D\x2\x7B1\x7C7\x3\x2\x2\x2\x7B2\x7B4\a\x39\x2\x2\x7B3\x7B2"+
		"\x3\x2\x2\x2\x7B3\x7B4\x3\x2\x2\x2\x7B4\x7C4\x3\x2\x2\x2\x7B5\x7B7\x5"+
		"\x38\x1D\x2\x7B6\x7B8\x5\x106\x84\x2\x7B7\x7B6\x3\x2\x2\x2\x7B7\x7B8\x3"+
		"\x2\x2\x2\x7B8\x7BD\x3\x2\x2\x2\x7B9\x7BB\aS\x2\x2\x7BA\x7B9\x3\x2\x2"+
		"\x2\x7BA\x7BB\x3\x2\x2\x2\x7BB\x7BC\x3\x2\x2\x2\x7BC\x7BE\x5\x158\xAD"+
		"\x2\x7BD\x7BA\x3\x2\x2\x2\x7BD\x7BE\x3\x2\x2\x2\x7BE\x7C5\x3\x2\x2\x2"+
		"\x7BF\x7C0\x5x=\x2\x7C0\x7C1\a\xC7\x2\x2\x7C1\x7C2\a\xBF\x2\x2\x7C2\x7C5"+
		"\x3\x2\x2\x2\x7C3\x7C5\a\xBF\x2\x2\x7C4\x7B5\x3\x2\x2\x2\x7C4\x7BF\x3"+
		"\x2\x2\x2\x7C4\x7C3\x3\x2\x2\x2\x7C5\x7C7\x3\x2\x2\x2\x7C6\x7A5\x3\x2"+
		"\x2\x2\x7C6\x7AE\x3\x2\x2\x2\x7C6\x7B3\x3\x2\x2\x2\x7C7\x101\x3\x2\x2"+
		"\x2\x7C8\x7C9\a\x64\x2\x2\x7C9\x7CA\a\xB7\x2\x2\x7CA\x7CF\x5\x104\x83"+
		"\x2\x7CB\x7CC\a\xC8\x2\x2\x7CC\x7CE\x5\x104\x83\x2\x7CD\x7CB\x3\x2\x2"+
		"\x2\x7CE\x7D1\x3\x2\x2\x2\x7CF\x7CD\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2"+
		"\x7D0\x7D2\x3\x2\x2\x2\x7D1\x7CF\x3\x2\x2\x2\x7D2\x7D3\a\xB8\x2\x2\x7D3"+
		"\x103\x3\x2\x2\x2\x7D4\x7D6\a\xCB\x2\x2\x7D5\x7D7\x5p\x39\x2\x7D6\x7D5"+
		"\x3\x2\x2\x2\x7D6\x7D7\x3\x2\x2\x2\x7D7\x7E2\x3\x2\x2\x2\x7D8\x7D9\a\xA5"+
		"\x2\x2\x7D9\x7DA\aU\x2\x2\x7DA\x7DB\a\xB7\x2\x2\x7DB\x7DC\x5\x80\x41\x2"+
		"\x7DC\x7DD\a\xBB\x2\x2\x7DD\x7DE\x5p\x39\x2\x7DE\x7DF\x3\x2\x2\x2\x7DF"+
		"\x7E0\a\xB8\x2\x2\x7E0\x7E2\x3\x2\x2\x2\x7E1\x7D4\x3\x2\x2\x2\x7E1\x7D8"+
		"\x3\x2\x2\x2\x7E2\x105\x3\x2\x2\x2\x7E3\x7E4\a@\x2\x2\x7E4\x7F9\a\xB7"+
		"\x2\x2\x7E5\x7E6\a\x1A\x2\x2\x7E6\x7E7\al\x2\x2\x7E7\x7EC\x5\x38\x1D\x2"+
		"\x7E8\x7E9\a\xC8\x2\x2\x7E9\x7EB\x5\x38\x1D\x2\x7EA\x7E8\x3\x2\x2\x2\x7EB"+
		"\x7EE\x3\x2\x2\x2\x7EC\x7EA\x3\x2\x2\x2\x7EC\x7ED\x3\x2\x2\x2\x7ED\x7FA"+
		"\x3\x2\x2\x2\x7EE\x7EC\x3\x2\x2\x2\x7EF\x7F0\ak\x2\x2\x7F0\x7F1\al\x2"+
		"\x2\x7F1\x7F6\x5\x11C\x8F\x2\x7F2\x7F3\a\xC8\x2\x2\x7F3\x7F5\x5\x11C\x8F"+
		"\x2\x7F4\x7F2\x3\x2\x2\x2\x7F5\x7F8\x3\x2\x2\x2\x7F6\x7F4\x3\x2\x2\x2"+
		"\x7F6\x7F7\x3\x2\x2\x2\x7F7\x7FA\x3\x2\x2\x2\x7F8\x7F6\x3\x2\x2\x2\x7F9"+
		"\x7E5\x3\x2\x2\x2\x7F9\x7EF\x3\x2\x2\x2\x7FA\x7FB\x3\x2\x2\x2\x7FB\x7F9"+
		"\x3\x2\x2\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC\x7FD\x3\x2\x2\x2\x7FD\x7FE\a\xB8"+
		"\x2\x2\x7FE\x107\x3\x2\x2\x2\x7FF\x800\an\x2\x2\x800\x801\x5\x126\x94"+
		"\x2\x801\x109\x3\x2\x2\x2\x802\x803\a\x61\x2\x2\x803\x808\x5\x12A\x96"+
		"\x2\x804\x805\a\xC8\x2\x2\x805\x807\x5\x12A\x96\x2\x806\x804\x3\x2\x2"+
		"\x2\x807\x80A\x3\x2\x2\x2\x808\x806\x3\x2\x2\x2\x808\x809\x3\x2\x2\x2"+
		"\x809\x10B\x3\x2\x2\x2\x80A\x808\x3\x2\x2\x2\x80B\x80C\a\xC8\x2\x2\x80C"+
		"\x80E\x5\x12A\x96\x2\x80D\x80B\x3\x2\x2\x2\x80E\x80F\x3\x2\x2\x2\x80F"+
		"\x80D\x3\x2\x2\x2\x80F\x810\x3\x2\x2\x2\x810\x10D\x3\x2\x2\x2\x811\x812"+
		"\ai\x2\x2\x812\x813\al\x2\x2\x813\x818\x5\x110\x89\x2\x814\x815\a\xC8"+
		"\x2\x2\x815\x817\x5\x110\x89\x2\x816\x814\x3\x2\x2\x2\x817\x81A\x3\x2"+
		"\x2\x2\x818\x816\x3\x2\x2\x2\x818\x819\x3\x2\x2\x2\x819\x10F\x3\x2\x2"+
		"\x2\x81A\x818\x3\x2\x2\x2\x81B\x81E\x5\x154\xAB\x2\x81C\x81E\x5\x38\x1D"+
		"\x2\x81D\x81B\x3\x2\x2\x2\x81D\x81C\x3\x2\x2\x2\x81E\x111\x3\x2\x2\x2"+
		"\x81F\x820\aj\x2\x2\x820\x821\x5\x34\x1B\x2\x821\x113\x3\x2\x2\x2\x822"+
		"\x824\x5\x116\x8C\x2\x823\x822\x3\x2\x2\x2\x823\x824\x3\x2\x2\x2\x824"+
		"\x825\x3\x2\x2\x2\x825\x826\a\x62\x2\x2\x826\x82B\x5\x12A\x96\x2\x827"+
		"\x828\ag\x2\x2\x828\x82A\x5\x34\x1B\x2\x829\x827\x3\x2\x2\x2\x82A\x82D"+
		"\x3\x2\x2\x2\x82B\x829\x3\x2\x2\x2\x82B\x82C\x3\x2\x2\x2\x82C\x834\x3"+
		"\x2\x2\x2\x82D\x82B\x3\x2\x2\x2\x82E\x830\x5\x116\x8C\x2\x82F\x82E\x3"+
		"\x2\x2\x2\x82F\x830\x3\x2\x2\x2\x830\x831\x3\x2\x2\x2\x831\x832\a\x46"+
		"\x2\x2\x832\x834\x5\x12A\x96\x2\x833\x823\x3\x2\x2\x2\x833\x82F\x3\x2"+
		"\x2\x2\x834\x115\x3\x2\x2\x2\x835\x842\a\"\x2\x2\x836\x842\a#\x2\x2\x837"+
		"\x842\a%\x2\x2\x838\x842\a&\x2\x2\x839\x842\a$\x2\x2\x83A\x842\a\'\x2"+
		"\x2\x83B\x83C\a\'\x2\x2\x83C\x842\a%\x2\x2\x83D\x83E\a\"\x2\x2\x83E\x842"+
		"\a%\x2\x2\x83F\x840\a#\x2\x2\x840\x842\a%\x2\x2\x841\x835\x3\x2\x2\x2"+
		"\x841\x836\x3\x2\x2\x2\x841\x837\x3\x2\x2\x2\x841\x838\x3\x2\x2\x2\x841"+
		"\x839\x3\x2\x2\x2\x841\x83A\x3\x2\x2\x2\x841\x83B\x3\x2\x2\x2\x841\x83D"+
		"\x3\x2\x2\x2\x841\x83F\x3\x2\x2\x2\x842\x117\x3\x2\x2\x2\x843\x844\a`"+
		"\x2\x2\x844\x845\x5\x34\x1B\x2\x845\x119\x3\x2\x2\x2\x846\x847\ak\x2\x2"+
		"\x847\x848\al\x2\x2\x848\x84D\x5\x11C\x8F\x2\x849\x84A\a\xC8\x2\x2\x84A"+
		"\x84C\x5\x11C\x8F\x2\x84B\x849\x3\x2\x2\x2\x84C\x84F\x3\x2\x2\x2\x84D"+
		"\x84B\x3\x2\x2\x2\x84D\x84E\x3\x2\x2\x2\x84E\x11B\x3\x2\x2\x2\x84F\x84D"+
		"\x3\x2\x2\x2\x850\x853\x5\x154\xAB\x2\x851\x853\x5\x38\x1D\x2\x852\x850"+
		"\x3\x2\x2\x2\x852\x851\x3\x2\x2\x2\x853\x855\x3\x2\x2\x2\x854\x856\t\x4"+
		"\x2\x2\x855\x854\x3\x2\x2\x2\x855\x856\x3\x2\x2\x2\x856\x11D\x3\x2\x2"+
		"\x2\x857\x859\a\x8F\x2\x2\x858\x85A\an\x2\x2\x859\x858\x3\x2\x2\x2\x859"+
		"\x85A\x3\x2\x2\x2\x85A\x85B\x3\x2\x2\x2\x85B\x85C\x5\x126\x94\x2\x85C"+
		"\x85D\a\x8E\x2\x2\x85D\x85E\x5\x12C\x97\x2\x85E\x85F\ag\x2\x2\x85F\x880"+
		"\x5\x34\x1B\x2\x860\x861\a=\x2\x2\x861\x864\a\x90\x2\x2\x862\x863\a\x89"+
		"\x2\x2\x863\x865\x5\x34\x1B\x2\x864\x862\x3\x2\x2\x2\x864\x865\x3\x2\x2"+
		"\x2\x865\x866\x3\x2\x2\x2\x866\x867\a>\x2\x2\x867\x881\x5\x120\x91\x2"+
		"\x868\x869\a=\x2\x2\x869\x86A\ar\x2\x2\x86A\x86D\a\x90\x2\x2\x86B\x86C"+
		"\al\x2\x2\x86C\x86E\a\x91\x2\x2\x86D\x86B\x3\x2\x2\x2\x86D\x86E\x3\x2"+
		"\x2\x2\x86E\x871\x3\x2\x2\x2\x86F\x870\a\x89\x2\x2\x870\x872\x5\x34\x1B"+
		"\x2\x871\x86F\x3\x2\x2\x2\x871\x872\x3\x2\x2\x2\x872\x873\x3\x2\x2\x2"+
		"\x873\x874\a>\x2\x2\x874\x881\x5\x122\x92\x2\x875\x876\a=\x2\x2\x876\x877"+
		"\ar\x2\x2\x877\x878\a\x90\x2\x2\x878\x879\al\x2\x2\x879\x87C\a\x92\x2"+
		"\x2\x87A\x87B\a\x89\x2\x2\x87B\x87D\x5\x34\x1B\x2\x87C\x87A\x3\x2\x2\x2"+
		"\x87C\x87D\x3\x2\x2\x2\x87D\x87E\x3\x2\x2\x2\x87E\x87F\a>\x2\x2\x87F\x881"+
		"\x5\x120\x91\x2\x880\x860\x3\x2\x2\x2\x880\x868\x3\x2\x2\x2\x880\x875"+
		"\x3\x2\x2\x2\x881\x882\x3\x2\x2\x2\x882\x880\x3\x2\x2\x2\x882\x883\x3"+
		"\x2\x2\x2\x883\x889\x3\x2\x2\x2\x884\x885\av\x2\x2\x885\x886\x5\xFE\x80"+
		"\x2\x886\x887\an\x2\x2\x887\x888\x5\x124\x93\x2\x888\x88A\x3\x2\x2\x2"+
		"\x889\x884\x3\x2\x2\x2\x889\x88A\x3\x2\x2\x2\x88A\x11F\x3\x2\x2\x2\x88B"+
		"\x88C\a]\x2\x2\x88C\x88D\a\x65\x2\x2\x88D\x892\x5\xE6t\x2\x88E\x88F\a"+
		"\xC8\x2\x2\x88F\x891\x5\xE6t\x2\x890\x88E\x3\x2\x2\x2\x891\x894\x3\x2"+
		"\x2\x2\x892\x890\x3\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893\x897\x3\x2\x2"+
		"\x2\x894\x892\x3\x2\x2\x2\x895\x897\a_\x2\x2\x896\x88B\x3\x2\x2\x2\x896"+
		"\x895\x3\x2\x2\x2\x897\x121\x3\x2\x2\x2\x898\x89D\a^\x2\x2\x899\x89A\a"+
		"\xB7\x2\x2\x89A\x89B\x5z>\x2\x89B\x89C\a\xB8\x2\x2\x89C\x89E\x3\x2\x2"+
		"\x2\x89D\x899\x3\x2\x2\x2\x89D\x89E\x3\x2\x2\x2\x89E\x89F\x3\x2\x2\x2"+
		"\x89F\x8A0\ao\x2\x2\x8A0\x8A5\x5\xC0\x61\x2\x8A1\x8A2\a\xC8\x2\x2\x8A2"+
		"\x8A4\x5\xC0\x61\x2\x8A3\x8A1\x3\x2\x2\x2\x8A4\x8A7\x3\x2\x2\x2\x8A5\x8A3"+
		"\x3\x2\x2\x2\x8A5\x8A6\x3\x2\x2\x2\x8A6\x123\x3\x2\x2\x2\x8A7\x8A5\x3"+
		"\x2\x2\x2\x8A8\x8AA\x5\x126\x94\x2\x8A9\x8AB\x5\x128\x95\x2\x8AA\x8A9"+
		"\x3\x2\x2\x2\x8AA\x8AB\x3\x2\x2\x2\x8AB\x8B7\x3\x2\x2\x2\x8AC\x8AE\x5"+
		"\x126\x94\x2\x8AD\x8AF\x5\x128\x95\x2\x8AE\x8AD\x3\x2\x2\x2\x8AE\x8AF"+
		"\x3\x2\x2\x2\x8AF\x8B4\x3\x2\x2\x2\x8B0\x8B2\aS\x2\x2\x8B1\x8B0\x3\x2"+
		"\x2\x2\x8B1\x8B2\x3\x2\x2\x2\x8B2\x8B3\x3\x2\x2\x2\x8B3\x8B5\x5\x130\x99"+
		"\x2\x8B4\x8B1\x3\x2\x2\x2\x8B4\x8B5\x3\x2\x2\x2\x8B5\x8B7\x3\x2\x2\x2"+
		"\x8B6\x8A8\x3\x2\x2\x2\x8B6\x8AC\x3\x2\x2\x2\x8B7\x125\x3\x2\x2\x2\x8B8"+
		"\x8BC\x5x=\x2\x8B9\x8BC\x5\x80\x41\x2\x8BA\x8BC\x5~@\x2\x8BB\x8B8\x3\x2"+
		"\x2\x2\x8BB\x8B9\x3\x2\x2\x2\x8BB\x8BA\x3\x2\x2\x2\x8BC\x8C1\x3\x2\x2"+
		"\x2\x8BD\x8BF\aS\x2\x2\x8BE\x8BD\x3\x2\x2\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF"+
		"\x8C0\x3\x2\x2\x2\x8C0\x8C2\x5\x130\x99\x2\x8C1\x8BE\x3\x2\x2\x2\x8C1"+
		"\x8C2\x3\x2\x2\x2\x8C2\x127\x3\x2\x2\x2\x8C3\x8C4\aT\x2\x2\x8C4\x8C5\a"+
		"\xB7\x2\x2\x8C5\x8C6\a\xCB\x2\x2\x8C6\x8CA\a\xB8\x2\x2\x8C7\x8C8\aT\x2"+
		"\x2\x8C8\x8CA\a\xCB\x2\x2\x8C9\x8C3\x3\x2\x2\x2\x8C9\x8C7\x3\x2\x2\x2"+
		"\x8CA\x129\x3\x2\x2\x2\x8CB\x8CD\x5\x12C\x97\x2\x8CC\x8CE\x5\x12E\x98"+
		"\x2\x8CD\x8CC\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x12B\x3\x2\x2\x2"+
		"\x8CF\x8E8\x5x=\x2\x8D0\x8D3\x5\x80\x41\x2\x8D1\x8D2\a\xC7\x2\x2\x8D2"+
		"\x8D4\x5\x134\x9B\x2\x8D3\x8D1\x3\x2\x2\x2\x8D3\x8D4\x3\x2\x2\x2\x8D4"+
		"\x8E8\x3\x2\x2\x2\x8D5\x8D8\x5~@\x2\x8D6\x8D7\a\xC7\x2\x2\x8D7\x8D9\x5"+
		"\x134\x9B\x2\x8D8\x8D6\x3\x2\x2\x2\x8D8\x8D9\x3\x2\x2\x2\x8D9\x8E8\x3"+
		"\x2\x2\x2\x8DA\x8DB\a\xB7\x2\x2\x8DB\x8DC\x5\xEEx\x2\x8DC\x8DD\a\xB8\x2"+
		"\x2\x8DD\x8E8\x3\x2\x2\x2\x8DE\x8E8\x5\x136\x9C\x2\x8DF\x8E5\x5\x134\x9B"+
		"\x2\x8E0\x8E1\aT\x2\x2\x8E1\x8E2\a\xB7\x2\x2\x8E2\x8E3\x5\xF4{\x2\x8E3"+
		"\x8E4\a\xB8\x2\x2\x8E4\x8E6\x3\x2\x2\x2\x8E5\x8E0\x3\x2\x2\x2\x8E5\x8E6"+
		"\x3\x2\x2\x2\x8E6\x8E8\x3\x2\x2\x2\x8E7\x8CF\x3\x2\x2\x2\x8E7\x8D0\x3"+
		"\x2\x2\x2\x8E7\x8D5\x3\x2\x2\x2\x8E7\x8DA\x3\x2\x2\x2\x8E7\x8DE\x3\x2"+
		"\x2\x2\x8E7\x8DF\x3\x2\x2\x2\x8E8\x8ED\x3\x2\x2\x2\x8E9\x8EB\aS\x2\x2"+
		"\x8EA\x8E9\x3\x2\x2\x2\x8EA\x8EB\x3\x2\x2\x2\x8EB\x8EC\x3\x2\x2\x2\x8EC"+
		"\x8EE\x5\x130\x99\x2\x8ED\x8EA\x3\x2\x2\x2\x8ED\x8EE\x3\x2\x2\x2\x8EE"+
		"\x12D\x3\x2\x2\x2\x8EF\x8F0\aT\x2\x2\x8F0\x8F1\a\xB7\x2\x2\x8F1\x8F2\a"+
		"\xCB\x2\x2\x8F2\x8F7\a\xB8\x2\x2\x8F3\x8F4\a\xB7\x2\x2\x8F4\x8F5\a\xCB"+
		"\x2\x2\x8F5\x8F7\a\xB8\x2\x2\x8F6\x8EF\x3\x2\x2\x2\x8F6\x8F3\x3\x2\x2"+
		"\x2\x8F7\x12F\x3\x2\x2\x2\x8F8\x8FB\x5v<\x2\x8F9\x8FB\a\xCA\x2\x2\x8FA"+
		"\x8F8\x3\x2\x2\x2\x8FA\x8F9\x3\x2\x2\x2\x8FB\x131\x3\x2\x2\x2\x8FC\x8FF"+
		"\x5x=\x2\x8FD\x8FF\x5\x16E\xB8\x2\x8FE\x8FC\x3\x2\x2\x2\x8FE\x8FD\x3\x2"+
		"\x2\x2\x8FF\x133\x3\x2\x2\x2\x900\x901\x5\x132\x9A\x2\x901\x903\a\xB7"+
		"\x2\x2\x902\x904\x5\xEAv\x2\x903\x902\x3\x2\x2\x2\x903\x904\x3\x2\x2\x2"+
		"\x904\x905\x3\x2\x2\x2\x905\x906\a\xB8\x2\x2\x906\x135\x3\x2\x2\x2\x907"+
		"\x910\am\x2\x2\x908\x90A\x5x=\x2\x909\x90B\x5\x138\x9D\x2\x90A\x909\x3"+
		"\x2\x2\x2\x90A\x90B\x3\x2\x2\x2\x90B\x911\x3\x2\x2\x2\x90C\x90D\a\xB7"+
		"\x2\x2\x90D\x90E\x5\x38\x1D\x2\x90E\x90F\a\xB8\x2\x2\x90F\x911\x3\x2\x2"+
		"\x2\x910\x908\x3\x2\x2\x2\x910\x90C\x3\x2\x2\x2\x911\x913\x3\x2\x2\x2"+
		"\x912\x914\x5\x18\r\x2\x913\x912\x3\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914"+
		"\x137\x3\x2\x2\x2\x915\x91A\x5\x13A\x9E\x2\x916\x917\a\xC8\x2\x2\x917"+
		"\x919\x5\x13A\x9E\x2\x918\x916\x3\x2\x2\x2\x919\x91C\x3\x2\x2\x2\x91A"+
		"\x918\x3\x2\x2\x2\x91A\x91B\x3\x2\x2\x2\x91B\x139\x3\x2\x2\x2\x91C\x91A"+
		"\x3\x2\x2\x2\x91D\x91E\x5\x80\x41\x2\x91E\x920\a\xBB\x2\x2\x91F\x921\x5"+
		"\x38\x1D\x2\x920\x91F\x3\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921\x927\x3\x2"+
		"\x2\x2\x922\x924\x5\x38\x1D\x2\x923\x925\t\a\x2\x2\x924\x923\x3\x2\x2"+
		"\x2\x924\x925\x3\x2\x2\x2\x925\x927\x3\x2\x2\x2\x926\x91D\x3\x2\x2\x2"+
		"\x926\x922\x3\x2\x2\x2\x927\x13B\x3\x2\x2\x2\x928\x92D\x5\x13E\xA0\x2"+
		"\x929\x92A\a\xC8\x2\x2\x92A\x92C\x5\x13E\xA0\x2\x92B\x929\x3\x2\x2\x2"+
		"\x92C\x92F\x3\x2\x2\x2\x92D\x92B\x3\x2\x2\x2\x92D\x92E\x3\x2\x2\x2\x92E"+
		"\x13D\x3\x2\x2\x2\x92F\x92D\x3\x2\x2\x2\x930\x931\x5\x80\x41\x2\x931\x933"+
		"\x5j\x36\x2\x932\x934\t\a\x2\x2\x933\x932\x3\x2\x2\x2\x933\x934\x3\x2"+
		"\x2\x2\x934\x13F\x3\x2\x2\x2\x935\x938\a\xB7\x2\x2\x936\x939\x5t;\x2\x937"+
		"\x939\a;\x2\x2\x938\x936\x3\x2\x2\x2\x938\x937\x3\x2\x2\x2\x939\x93A\x3"+
		"\x2\x2\x2\x93A\x93B\a\xB8\x2\x2\x93B\x141\x3\x2\x2\x2\x93C\x93E\t\v\x2"+
		"\x2\x93D\x93F\x5\x140\xA1\x2\x93E\x93D\x3\x2\x2\x2\x93E\x93F\x3\x2\x2"+
		"\x2\x93F\x946\x3\x2\x2\x2\x940\x941\t\v\x2\x2\x941\x942\a[\x2\x2\x942"+
		"\x946\x5\x140\xA1\x2\x943\x944\t\f\x2\x2\x944\x946\x5\x140\xA1\x2\x945"+
		"\x93C\x3\x2\x2\x2\x945\x940\x3\x2\x2\x2\x945\x943\x3\x2\x2\x2\x946\x143"+
		"\x3\x2\x2\x2\x947\x94F\t\r\x2\x2\x948\x949\a\xB7\x2\x2\x949\x94C\a\xCC"+
		"\x2\x2\x94A\x94B\a\xC8\x2\x2\x94B\x94D\a\xCC\x2\x2\x94C\x94A\x3\x2\x2"+
		"\x2\x94C\x94D\x3\x2\x2\x2\x94D\x94E\x3\x2\x2\x2\x94E\x950\a\xB8\x2\x2"+
		"\x94F\x948\x3\x2\x2\x2\x94F\x950\x3\x2\x2\x2\x950\x953\x3\x2\x2\x2\x951"+
		"\x953\a\x86\x2\x2\x952\x947\x3\x2\x2\x2\x952\x951\x3\x2\x2\x2\x953\x145"+
		"\x3\x2\x2\x2\x954\x955\t\xE\x2\x2\x955\x147\x3\x2\x2\x2\x956\x958\x5\x146"+
		"\xA4\x2\x957\x956\x3\x2\x2\x2\x957\x958\x3\x2\x2\x2\x958\x959\x3\x2\x2"+
		"\x2\x959\x95A\x5\x14A\xA6\x2\x95A\x149\x3\x2\x2\x2\x95B\x964\a\x87\x2"+
		"\x2\x95C\x95D\a\xB7\x2\x2\x95D\x960\x5t;\x2\x95E\x95F\a\xC8\x2\x2\x95F"+
		"\x961\x5t;\x2\x960\x95E\x3\x2\x2\x2\x960\x961\x3\x2\x2\x2\x961\x962\x3"+
		"\x2\x2\x2\x962\x963\a\xB8\x2\x2\x963\x965\x3\x2\x2\x2\x964\x95C\x3\x2"+
		"\x2\x2\x964\x965\x3\x2\x2\x2\x965\x14B\x3\x2\x2\x2\x966\x967\a\xC7\x2"+
		"\x2\x967\x968\x5v<\x2\x968\x14D\x3\x2\x2\x2\x969\x96A\t\n\x2\x2\x96A\x14F"+
		"\x3\x2\x2\x2\x96B\x970\x5\x152\xAA\x2\x96C\x96D\a\xC8\x2\x2\x96D\x96F"+
		"\x5\x152\xAA\x2\x96E\x96C\x3\x2\x2\x2\x96F\x972\x3\x2\x2\x2\x970\x96E"+
		"\x3\x2\x2\x2\x970\x971\x3\x2\x2\x2\x971\x151\x3\x2\x2\x2\x972\x970\x3"+
		"\x2\x2\x2\x973\x97D\x5x=\x2\x974\x975\x5x=\x2\x975\x976\a\xC7\x2\x2\x976"+
		"\x977\x5\x16E\xB8\x2\x977\x97D\x3\x2\x2\x2\x978\x979\x5~@\x2\x979\x97A"+
		"\a\xC7\x2\x2\x97A\x97B\x5v<\x2\x97B\x97D\x3\x2\x2\x2\x97C\x973\x3\x2\x2"+
		"\x2\x97C\x974\x3\x2\x2\x2\x97C\x978\x3\x2\x2\x2\x97D\x153\x3\x2\x2\x2"+
		"\x97E\x981\x5t;\x2\x97F\x981\x5x=\x2\x980\x97E\x3\x2\x2\x2\x980\x97F\x3"+
		"\x2\x2\x2\x981\x155\x3\x2\x2\x2\x982\x983\x5v<\x2\x983\x157\x3\x2\x2\x2"+
		"\x984\x987\x5v<\x2\x985\x987\a\xCA\x2\x2\x986\x984\x3\x2\x2\x2\x986\x985"+
		"\x3\x2\x2\x2\x987\x159\x3\x2\x2\x2\x988\x98B\x5x=\x2\x989\x98B\x5\x80"+
		"\x41\x2\x98A\x988\x3\x2\x2\x2\x98A\x989\x3\x2\x2\x2\x98B\x15B\x3\x2\x2"+
		"\x2\x98C\x991\x5\x15E\xB0\x2\x98D\x991\x5\x160\xB1\x2\x98E\x991\x5\x162"+
		"\xB2\x2\x98F\x991\x5\x164\xB3\x2\x990\x98C\x3\x2\x2\x2\x990\x98D\x3\x2"+
		"\x2\x2\x990\x98E\x3\x2\x2\x2\x990\x98F\x3\x2\x2\x2\x991\x15D\x3\x2\x2"+
		"\x2\x992\x993\a*\x2\x2\x993\x994\x5\x15A\xAE\x2\x994\x15F\x3\x2\x2\x2"+
		"\x995\x996\a+\x2\x2\x996\x997\x5\x15A\xAE\x2\x997\x161\x3\x2\x2\x2\x998"+
		"\x9A8\a)\x2\x2\x999\x9A9\a\x30\x2\x2\x99A\x9A9\a/\x2\x2\x99B\x9A9\a-\x2"+
		"\x2\x99C\x9A9\a.\x2\x2\x99D\x9A0\a\x31\x2\x2\x99E\x9A1\x5t;\x2\x99F\x9A1"+
		"\x5\x80\x41\x2\x9A0\x99E\x3\x2\x2\x2\x9A0\x99F\x3\x2\x2\x2\x9A1\x9A9\x3"+
		"\x2\x2\x2\x9A2\x9A5\a\x32\x2\x2\x9A3\x9A6\x5t;\x2\x9A4\x9A6\x5\x80\x41"+
		"\x2\x9A5\x9A3\x3\x2\x2\x2\x9A5\x9A4\x3\x2\x2\x2\x9A6\x9A9\x3\x2\x2\x2"+
		"\x9A7\x9A9\x5x=\x2\x9A8\x999\x3\x2\x2\x2\x9A8\x99A\x3\x2\x2\x2\x9A8\x99B"+
		"\x3\x2\x2\x2\x9A8\x99C\x3\x2\x2\x2\x9A8\x99D\x3\x2\x2\x2\x9A8\x9A2\x3"+
		"\x2\x2\x2\x9A8\x9A7\x3\x2\x2\x2\x9A9\x9AC\x3\x2\x2\x2\x9AA\x9AB\a\x61"+
		"\x2\x2\x9AB\x9AD\x5\x15A\xAE\x2\x9AC\x9AA\x3\x2\x2\x2\x9AC\x9AD\x3\x2"+
		"\x2\x2\x9AD\x9AE\x3\x2\x2\x2\x9AE\x9AF\an\x2\x2\x9AF\x9B4\x5\x80\x41\x2"+
		"\x9B0\x9B1\a\xC8\x2\x2\x9B1\x9B3\x5\x80\x41\x2\x9B2\x9B0\x3\x2\x2\x2\x9B3"+
		"\x9B6\x3\x2\x2\x2\x9B4\x9B2\x3\x2\x2\x2\x9B4\x9B5\x3\x2\x2\x2\x9B5\x163"+
		"\x3\x2\x2\x2\x9B6\x9B4\x3\x2\x2\x2\x9B7\x9B8\a,\x2\x2\x9B8\x9B9\x5\x15A"+
		"\xAE\x2\x9B9\x165\x3\x2\x2\x2\x9BA\x9BB\a\xCA\x2\x2\x9BB\x167\x3\x2\x2"+
		"\x2\x9BC\x9BD\a\x36\x2\x2\x9BD\x9BE\a\xCB\x2\x2\x9BE\x169\x3\x2\x2\x2"+
		"\x9BF\x9C0\t\xF\x2\x2\x9C0\x16B\x3\x2\x2\x2\x9C1\x9C2\a\xB9\x2\x2\x9C2"+
		"\x9C3\x5\x16E\xB8\x2\x9C3\x9C4\a\xBA\x2\x2\x9C4\x16D\x3\x2\x2\x2\x9C5"+
		"\x9C6\t\x10\x2\x2\x9C6\x16F\x3\x2\x2\x2\x150\x179\x182\x188\x18F\x195"+
		"\x19D\x1A3\x1A7\x1BB\x1C6\x1D0\x1D6\x1F2\x1FB\x202\x207\x20D\x213\x216"+
		"\x21B\x223\x225\x229\x22C\x231\x239\x23C\x23F\x242\x253\x25A\x25F\x272"+
		"\x275\x283\x286\x289\x28C\x293\x2A2\x2A4\x2A8\x2AB\x2BD\x2C0\x2C9\x2CC"+
		"\x2D0\x2D9\x2E2\x2F1\x2F3\x2FF\x301\x30D\x310\x312\x31D\x328\x337\x339"+
		"\x35D\x35F\x36B\x36D\x37C\x37E\x386\x38B\x399\x3A2\x3A6\x3A8\x3AE\x3B1"+
		"\x3BB\x3C3\x3CA\x3CE\x3E4\x3F6\x3FB\x407\x40C\x410\x413\x41A\x420\x425"+
		"\x42B\x430\x434\x43B\x441\x445\x44A\x44E\x454\x459\x45F\x462\x46C\x46F"+
		"\x477\x47A\x47E\x482\x485\x488\x48B\x48E\x494\x49E\x4A5\x4AE\x4B2\x4B5"+
		"\x4C4\x4DA\x4DE\x4E3\x4E9\x4ED\x4F0\x4F4\x4F7\x4FE\x505\x515\x51B\x51F"+
		"\x521\x531\x53C\x540\x545\x548\x54D\x551\x554\x558\x55E\x561\x566\x56A"+
		"\x56D\x56F\x572\x579\x57D\x584\x592\x59C\x5A5\x5A9\x5AD\x5B1\x5B7\x5C1"+
		"\x5C3\x5CB\x5D2\x5DA\x5E7\x5EE\x5F6\x5F8\x5FC\x600\x607\x60A\x60E\x618"+
		"\x620\x628\x62A\x62D\x630\x635\x637\x63E\x640\x643\x646\x649\x64E\x650"+
		"\x652\x659\x65E\x667\x66D\x66F\x677\x682\x687\x68D\x692\x697\x69E\x6AB"+
		"\x6B4\x6B8\x6C1\x6C5\x6CA\x6D0\x6D4\x6D7\x6DD\x6DF\x6E6\x6ED\x6FC\x6FE"+
		"\x703\x70A\x713\x71C\x71F\x724\x729\x731\x734\x738\x73C\x73F\x742\x747"+
		"\x74D\x751\x754\x757\x75A\x75D\x760\x766\x76D\x774\x77B\x785\x788\x78B"+
		"\x790\x797\x7A2\x7A9\x7AC\x7B3\x7B7\x7BA\x7BD\x7C4\x7C6\x7CF\x7D6\x7E1"+
		"\x7EC\x7F6\x7F9\x7FB\x808\x80F\x818\x81D\x823\x82B\x82F\x833\x841\x84D"+
		"\x852\x855\x859\x864\x86D\x871\x87C\x880\x882\x889\x892\x896\x89D\x8A5"+
		"\x8AA\x8AE\x8B1\x8B4\x8B6\x8BB\x8BE\x8C1\x8C9\x8CD\x8D3\x8D8\x8E5\x8E7"+
		"\x8EA\x8ED\x8F6\x8FA\x8FE\x903\x90A\x910\x913\x91A\x920\x924\x926\x92D"+
		"\x933\x938\x93E\x945\x94C\x94F\x952\x957\x960\x964\x970\x97C\x980\x986"+
		"\x98A\x990\x9A0\x9A5\x9A8\x9AC\x9B4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace tsql2pgsql.grammar
