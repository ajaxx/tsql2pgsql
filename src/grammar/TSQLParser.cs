//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Src\tsql2pgsql\grammar\TSQL.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace tsql2pgsql.grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class TSQLParser : Parser {
	public const int
		T__10=1, T__9=2, T__8=3, T__7=4, T__6=5, T__5=6, T__4=7, T__3=8, T__2=9, 
		T__1=10, T__0=11, READONLY=12, TRY=13, CATCH=14, TRANSACTION=15, COMMIT=16, 
		ROLLBACK=17, RAISE_ERROR=18, PRINT=19, CLUSTERED=20, NONCLUSTERED=21, 
		TABLE=22, PROCEDURE=23, PARTITION=24, INDEX=25, DATABASE=26, CONSTRAINT=27, 
		FOREIGN=28, PRIMARY=29, KEY=30, REFERENCES=31, LEFT=32, RIGHT=33, CROSS=34, 
		OUTER=35, INNER=36, FULL=37, CURSOR=38, FETCH=39, OPEN=40, CLOSE=41, DEALLOCATE=42, 
		FIRST=43, LAST=44, PRIOR=45, NEXT=46, ABSOLUTE=47, RELATIVE=48, CASE=49, 
		CAST=50, CONVERT=51, COLLATE=52, COUNT=53, COUNT_BIG=54, DISTINCT=55, 
		UNIQUE=56, MAX=57, TOP=58, WHEN=59, THEN=60, SWITCH=61, OVER=62, INCLUDE=63, 
		INTERSECT=64, EXCEPT=65, UNION=66, ALL=67, APPLY=68, IF=69, ELSE=70, WHILE=71, 
		GOTO=72, CONTINUE=73, BREAK=74, TRUNCATE=75, ADD=76, REMOVE=77, ALTER=78, 
		CREATE=79, DROP=80, AS=81, WITH=82, FOR=83, REPLICATION=84, BEGIN=85, 
		END=86, EXISTS=87, DEFAULT=88, VARYING=89, SELECT=90, UPDATE=91, INSERT=92, 
		DELETE=93, WHERE=94, FROM=95, JOIN=96, DECLARE=97, OPTION=98, SET=99, 
		TO=100, ON=101, OFF=102, GROUP=103, HAVING=104, ORDER=105, BY=106, EXECUTE=107, 
		INTO=108, VALUES=109, IS=110, IN=111, NOT=112, NULL=113, BETWEEN=114, 
		RETURN=115, OUTPUT=116, OUT=117, LIKE=118, ESCAPE=119, OF=120, DECIMAL=121, 
		NUMERIC=122, VARCHAR=123, NVARCHAR=124, CHAR=125, CHARACTER=126, NCHAR=127, 
		INT=128, TINYINT=129, SMALLINT=130, BIGINT=131, FLOAT=132, IDENTITY=133, 
		LOG=134, AND=135, OR=136, ASC=137, DESC=138, STATISTICS=139, USING=140, 
		MERGE=141, MATCHED=142, TARGET=143, SOURCE=144, XML=145, RAW=146, AUTO=147, 
		EXPLICIT=148, PATH=149, ENABLE=150, DISABLE=151, TRIGGER=152, WAITFOR=153, 
		DELAY=154, COMPUTE=155, LEVEL=156, ISOLATION=157, SPLIT=158, RANGE=159, 
		FUNCTION=160, SCHEME=161, USED=162, OPTIMIZE=163, ROWCOUNT=164, LT=165, 
		LTE=166, GT=167, GTE=168, GT_LT=169, EQUAL_EQUAL=170, NOT_EQUAL=171, ADD_ASSIGN=172, 
		SUB_ASSIGN=173, MUL_ASSIGN=174, DIV_ASSIGN=175, AND_ASSIGN=176, OR_ASSIGN=177, 
		XOR_ASSIGN=178, MOD_ASSIGN=179, HASH=180, LPAREN=181, RPAREN=182, LBRACKET=183, 
		RBRACKET=184, EQUALS=185, AT=186, SEMICOLON=187, COLON=188, STAR=189, 
		SLASH=190, AMPERSAND=191, PIPE=192, PERCENT=193, CARET=194, PLUS=195, 
		MINUS=196, DOT=197, COMMA=198, FloatingPointLiteral=199, StringLiteral=200, 
		Identifier=201, IntegerLiteral=202, WS=203, COMMENT=204, LINE_COMMENT=205;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'dbcc'", "'||'", "'&&'", "'percent'", "'repeatable'", "'snapshot'", 
		"'checkpoint'", "'read'", "'committed'", "'serializable'", "'uncommitted'", 
		"'readonly'", "'try'", "'catch'", "TRANSACTION", "'commit'", "'rollback'", 
		"'raiserror'", "'print'", "'clustered'", "'nonclustered'", "'table'", 
		"PROCEDURE", "'partition'", "'index'", "'database'", "'constraint'", "FOREIGN", 
		"PRIMARY", "'key'", "'references'", "'left'", "'right'", "'cross'", "'outer'", 
		"'inner'", "'full'", "'cursor'", "'fetch'", "'open'", "'close'", "'deallocate'", 
		"'first'", "'last'", "'prior'", "'next'", "'absolute'", "'relative'", 
		"'case'", "'cast'", "'convert'", "'collate'", "'count'", "'count_big'", 
		"'distinct'", "'unique'", "'max'", "'top'", "'when'", "'then'", "'switch'", 
		"'over'", "'include'", "'intersect'", "'except'", "'union'", "'all'", 
		"'apply'", "'if'", "'else'", "'while'", "'goto'", "'continue'", "'break'", 
		"'truncate'", "'add'", "'remove'", "'alter'", "'create'", "'drop'", "'as'", 
		"'with'", "'for'", "'replication'", "'begin'", "'end'", "'exists'", "'default'", 
		"'varying'", "'select'", "'update'", "'insert'", "'delete'", "'where'", 
		"'from'", "'join'", "'declare'", "'option'", "'set'", "'to'", "'on'", 
		"'off'", "'group'", "'having'", "'order'", "'by'", "EXECUTE", "'into'", 
		"'values'", "'is'", "'in'", "'not'", "'null'", "'between'", "'return'", 
		"'output'", "'out'", "'like'", "'escape'", "'of'", "DECIMAL", "NUMERIC", 
		"VARCHAR", "NVARCHAR", "CHAR", "CHARACTER", "NCHAR", "INT", "TINYINT", 
		"SMALLINT", "BIGINT", "FLOAT", "IDENTITY", "'log'", "'and'", "'or'", "'asc'", 
		"'desc'", "'statistics'", "'using'", "'merge'", "'matched'", "'target'", 
		"'source'", "'xml'", "'raw'", "'auto'", "'explicit'", "'path'", "'enable'", 
		"'disable'", "'trigger'", "'waitfor'", "'delay'", "'compute'", "'level'", 
		"'isolation'", "'split'", "'range'", "'function'", "'scheme'", "'used'", 
		"'optimize'", "'rowcount'", "'<'", "'<='", "'>'", "'>='", "'<>'", "'=='", 
		"'!='", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
		"'#'", "'('", "')'", "'['", "']'", "'='", "'@'", "';'", "':'", "'*'", 
		"'/'", "'&'", "'|'", "'%'", "'^'", "'+'", "'-'", "'.'", "','", "FloatingPointLiteral", 
		"StringLiteral", "Identifier", "IntegerLiteral", "WS", "COMMENT", "LINE_COMMENT"
	};
	public const int
		RULE_compileUnit = 0, RULE_dropTable = 1, RULE_alterTable = 2, RULE_alterTableSwitchPartition = 3, 
		RULE_alterTableDropConstraint = 4, RULE_alterTableAddConstraint = 5, RULE_partitionIdent = 6, 
		RULE_alterTableTrigger = 7, RULE_alterIndex = 8, RULE_alterPartitionScheme = 9, 
		RULE_alterPartitionFunction = 10, RULE_basicOptionList = 11, RULE_basicOption = 12, 
		RULE_createTable = 13, RULE_dropIndex = 14, RULE_createIndex = 15, RULE_createIndexIncludeList = 16, 
		RULE_createIndexPartition = 17, RULE_orderedIndexColumnList = 18, RULE_orderedIndexColumn = 19, 
		RULE_createStatistics = 20, RULE_dropProcedure = 21, RULE_createProcedure = 22, 
		RULE_truncateTable = 23, RULE_obscureCommands = 24, RULE_predicateList = 25, 
		RULE_primary = 26, RULE_expression = 27, RULE_existsExpression = 28, RULE_convertExpression = 29, 
		RULE_conditionalExpression = 30, RULE_conditionalOrExpression = 31, RULE_conditionalAndExpression = 32, 
		RULE_inclusiveOrExpression = 33, RULE_exclusiveOrExpression = 34, RULE_andExpression = 35, 
		RULE_equalityExpression = 36, RULE_relationalExpression = 37, RULE_additiveExpression = 38, 
		RULE_multiplicativeExpression = 39, RULE_unaryExpression = 40, RULE_unaryExpressionNotPlusMinus = 41, 
		RULE_postfixExpression = 42, RULE_likeTestExpression = 43, RULE_minSelectElement = 44, 
		RULE_expressionSet = 45, RULE_caseWhen = 46, RULE_caseElse = 47, RULE_subSelectExpression = 48, 
		RULE_type = 49, RULE_typeInBracket = 50, RULE_expressionInRest = 51, RULE_literalValue = 52, 
		RULE_stringValue = 53, RULE_integerValue = 54, RULE_qualifiedNamePart = 55, 
		RULE_qualifiedName = 56, RULE_qualifiedNameList = 57, RULE_tempIndex = 58, 
		RULE_tempTable = 59, RULE_variable = 60, RULE_procedureBody = 61, RULE_procedureParameters = 62, 
		RULE_procedureParameter = 63, RULE_procedureParameterInitialValue = 64, 
		RULE_procedureParameterName = 65, RULE_procedureOptions = 66, RULE_statementList = 67, 
		RULE_statement = 68, RULE_ddl = 69, RULE_dml = 70, RULE_commitTransaction = 71, 
		RULE_rollbackTransaction = 72, RULE_printExpression = 73, RULE_returnExpression = 74, 
		RULE_ifStatement = 75, RULE_whileStatement = 76, RULE_waitFor = 77, RULE_raiseError = 78, 
		RULE_tryBlock = 79, RULE_transactionBlock = 80, RULE_deleteTop = 81, RULE_deleteStatement = 82, 
		RULE_deleteFromClause = 83, RULE_deleteFromClauseLoose = 84, RULE_deleteOutput = 85, 
		RULE_commonTableExpression = 86, RULE_commonTableExpressionAtom = 87, 
		RULE_insertStatement = 88, RULE_insertPreamble = 89, RULE_insertOutputClause = 90, 
		RULE_insertDataSource = 91, RULE_insertValueList = 92, RULE_insertValue = 93, 
		RULE_declareStatement = 94, RULE_variableDeclaration = 95, RULE_variableDeclarationAssignment = 96, 
		RULE_columnList = 97, RULE_columnDefinitionList = 98, RULE_columnDefinition = 99, 
		RULE_tableDeclarationOptions = 100, RULE_tableDeclarationOption = 101, 
		RULE_partitionName = 102, RULE_setStatement = 103, RULE_setSessionOther = 104, 
		RULE_setSessionParameter = 105, RULE_setVariableAssignment = 106, RULE_setVariableToCursor = 107, 
		RULE_transactionIsolationLevel = 108, RULE_updateTop = 109, RULE_updateStatement = 110, 
		RULE_updateStatementSetClauseRest = 111, RULE_argument = 112, RULE_argumentList = 113, 
		RULE_computeStatement = 114, RULE_selectStatement = 115, RULE_selectStatementPart = 116, 
		RULE_xmlWithOption = 117, RULE_xmlDefinitionList = 118, RULE_xmlDefinition = 119, 
		RULE_forXmlClause = 120, RULE_selectTopLimit = 121, RULE_selectVariableAssignment = 122, 
		RULE_selectList = 123, RULE_selectListElement = 124, RULE_dmlOptions = 125, 
		RULE_dmlOption = 126, RULE_overClause = 127, RULE_intoClause = 128, RULE_fromClause = 129, 
		RULE_moreInnerJoin = 130, RULE_groupByClause = 131, RULE_groupByElement = 132, 
		RULE_havingClause = 133, RULE_joinOrApply = 134, RULE_joinType = 135, 
		RULE_whereClause = 136, RULE_orderByClause = 137, RULE_orderByElement = 138, 
		RULE_mergeStatement = 139, RULE_mergeMatched = 140, RULE_mergeNotMatched = 141, 
		RULE_tableTargetWithOptions = 142, RULE_tableTarget = 143, RULE_tableTargetOptions = 144, 
		RULE_tableSourceWithOptions = 145, RULE_tableSource = 146, RULE_tableSourceOptions = 147, 
		RULE_tableAlias = 148, RULE_functionName = 149, RULE_functionCall = 150, 
		RULE_executeStatement = 151, RULE_executeArgumentList = 152, RULE_executeArgument = 153, 
		RULE_characterStringTypeLength = 154, RULE_characterStringType = 155, 
		RULE_numericType = 156, RULE_integerType = 157, RULE_identityType = 158, 
		RULE_identitySpec = 159, RULE_propertyOrField = 160, RULE_assignmentOperator = 161, 
		RULE_qualifiedColumnNameList = 162, RULE_qualifiedColumnName = 163, RULE_columnIndexOrName = 164, 
		RULE_columnName = 165, RULE_columnAlias = 166, RULE_cursorId = 167, RULE_cursorStatement = 168, 
		RULE_cursorOpen = 169, RULE_cursorClose = 170, RULE_cursorFetch = 171, 
		RULE_cursorDeallocate = 172, RULE_stringExpression = 173, RULE_collate = 174, 
		RULE_clusterType = 175, RULE_keyword = 176;
	public static readonly string[] ruleNames = {
		"compileUnit", "dropTable", "alterTable", "alterTableSwitchPartition", 
		"alterTableDropConstraint", "alterTableAddConstraint", "partitionIdent", 
		"alterTableTrigger", "alterIndex", "alterPartitionScheme", "alterPartitionFunction", 
		"basicOptionList", "basicOption", "createTable", "dropIndex", "createIndex", 
		"createIndexIncludeList", "createIndexPartition", "orderedIndexColumnList", 
		"orderedIndexColumn", "createStatistics", "dropProcedure", "createProcedure", 
		"truncateTable", "obscureCommands", "predicateList", "primary", "expression", 
		"existsExpression", "convertExpression", "conditionalExpression", "conditionalOrExpression", 
		"conditionalAndExpression", "inclusiveOrExpression", "exclusiveOrExpression", 
		"andExpression", "equalityExpression", "relationalExpression", "additiveExpression", 
		"multiplicativeExpression", "unaryExpression", "unaryExpressionNotPlusMinus", 
		"postfixExpression", "likeTestExpression", "minSelectElement", "expressionSet", 
		"caseWhen", "caseElse", "subSelectExpression", "type", "typeInBracket", 
		"expressionInRest", "literalValue", "stringValue", "integerValue", "qualifiedNamePart", 
		"qualifiedName", "qualifiedNameList", "tempIndex", "tempTable", "variable", 
		"procedureBody", "procedureParameters", "procedureParameter", "procedureParameterInitialValue", 
		"procedureParameterName", "procedureOptions", "statementList", "statement", 
		"ddl", "dml", "commitTransaction", "rollbackTransaction", "printExpression", 
		"returnExpression", "ifStatement", "whileStatement", "waitFor", "raiseError", 
		"tryBlock", "transactionBlock", "deleteTop", "deleteStatement", "deleteFromClause", 
		"deleteFromClauseLoose", "deleteOutput", "commonTableExpression", "commonTableExpressionAtom", 
		"insertStatement", "insertPreamble", "insertOutputClause", "insertDataSource", 
		"insertValueList", "insertValue", "declareStatement", "variableDeclaration", 
		"variableDeclarationAssignment", "columnList", "columnDefinitionList", 
		"columnDefinition", "tableDeclarationOptions", "tableDeclarationOption", 
		"partitionName", "setStatement", "setSessionOther", "setSessionParameter", 
		"setVariableAssignment", "setVariableToCursor", "transactionIsolationLevel", 
		"updateTop", "updateStatement", "updateStatementSetClauseRest", "argument", 
		"argumentList", "computeStatement", "selectStatement", "selectStatementPart", 
		"xmlWithOption", "xmlDefinitionList", "xmlDefinition", "forXmlClause", 
		"selectTopLimit", "selectVariableAssignment", "selectList", "selectListElement", 
		"dmlOptions", "dmlOption", "overClause", "intoClause", "fromClause", "moreInnerJoin", 
		"groupByClause", "groupByElement", "havingClause", "joinOrApply", "joinType", 
		"whereClause", "orderByClause", "orderByElement", "mergeStatement", "mergeMatched", 
		"mergeNotMatched", "tableTargetWithOptions", "tableTarget", "tableTargetOptions", 
		"tableSourceWithOptions", "tableSource", "tableSourceOptions", "tableAlias", 
		"functionName", "functionCall", "executeStatement", "executeArgumentList", 
		"executeArgument", "characterStringTypeLength", "characterStringType", 
		"numericType", "integerType", "identityType", "identitySpec", "propertyOrField", 
		"assignmentOperator", "qualifiedColumnNameList", "qualifiedColumnName", 
		"columnIndexOrName", "columnName", "columnAlias", "cursorId", "cursorStatement", 
		"cursorOpen", "cursorClose", "cursorFetch", "cursorDeallocate", "stringExpression", 
		"collate", "clusterType", "keyword"
	};

	public override string GrammarFileName { get { return "TSQL.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TSQLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TSQLParser.Eof, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; statementList();
			State = 355; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_dropTable);
		try {
			State = 363;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; Match(DROP);
				State = 358; Match(TABLE);
				State = 359; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 360; Match(DROP);
				State = 361; Match(TABLE);
				State = 362; tempTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public AlterTableAddConstraintContext alterTableAddConstraint() {
			return GetRuleContext<AlterTableAddConstraintContext>(0);
		}
		public AlterTableSwitchPartitionContext alterTableSwitchPartition() {
			return GetRuleContext<AlterTableSwitchPartitionContext>(0);
		}
		public AlterTableDropConstraintContext alterTableDropConstraint() {
			return GetRuleContext<AlterTableDropConstraintContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public AlterTableTriggerContext alterTableTrigger() {
			return GetRuleContext<AlterTableTriggerContext>(0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_alterTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(ALTER);
			State = 366; Match(TABLE);
			State = 367; tableTargetWithOptions();
			State = 372;
			switch (_input.La(1)) {
			case SWITCH:
				{
				State = 368; alterTableSwitchPartition();
				}
				break;
			case ADD:
				{
				State = 369; alterTableAddConstraint();
				}
				break;
			case DROP:
				{
				State = 370; alterTableDropConstraint();
				}
				break;
			case ENABLE:
			case DISABLE:
				{
				State = 371; alterTableTrigger();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableSwitchPartitionContext : ParserRuleContext {
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSQLParser.PARTITION, i);
		}
		public IntegerValueContext integerValue(int i) {
			return GetRuleContext<IntegerValueContext>(i);
		}
		public ITerminalNode SWITCH() { return GetToken(TSQLParser.SWITCH, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSQLParser.PARTITION); }
		public ITerminalNode TO() { return GetToken(TSQLParser.TO, 0); }
		public IntegerValueContext[] integerValue() {
			return GetRuleContexts<IntegerValueContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public PartitionNameContext partitionName() {
			return GetRuleContext<PartitionNameContext>(0);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public AlterTableSwitchPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableSwitchPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableSwitchPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableSwitchPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableSwitchPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableSwitchPartitionContext alterTableSwitchPartition() {
		AlterTableSwitchPartitionContext _localctx = new AlterTableSwitchPartitionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_alterTableSwitchPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(SWITCH);
			State = 375; Match(PARTITION);
			State = 378;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 376; integerValue();
				}
				break;
			case AT:
				{
				State = 377; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 380; Match(TO);
			State = 381; partitionName();
			State = 382; Match(PARTITION);
			State = 385;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 383; integerValue();
				}
				break;
			case AT:
				{
				State = 384; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableDropConstraintContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public AlterTableDropConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableDropConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableDropConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableDropConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableDropConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableDropConstraintContext alterTableDropConstraint() {
		AlterTableDropConstraintContext _localctx = new AlterTableDropConstraintContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_alterTableDropConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(DROP);
			State = 388; Match(CONSTRAINT);
			State = 389; qualifiedName();
			State = 391;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 390; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableAddConstraintContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ColumnListContext[] columnList() {
			return GetRuleContexts<ColumnListContext>();
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode[] RPAREN() { return GetTokens(TSQLParser.RPAREN); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ColumnListContext columnList(int i) {
			return GetRuleContext<ColumnListContext>(i);
		}
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(TSQLParser.RPAREN, i);
		}
		public ITerminalNode[] LPAREN() { return GetTokens(TSQLParser.LPAREN); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSQLParser.ADD, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSQLParser.REFERENCES, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSQLParser.FOREIGN, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(TSQLParser.LPAREN, i);
		}
		public AlterTableAddConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableAddConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableAddConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableAddConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableAddConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableAddConstraintContext alterTableAddConstraint() {
		AlterTableAddConstraintContext _localctx = new AlterTableAddConstraintContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_alterTableAddConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(ADD);
			State = 394; Match(CONSTRAINT);
			State = 395; qualifiedName();
			State = 429;
			switch (_input.La(1)) {
			case PRIMARY:
				{
				{
				State = 396; Match(PRIMARY);
				State = 397; Match(KEY);
				State = 399;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 398; clusterType();
					}
				}

				}
				State = 401; Match(LPAREN);
				State = 402; orderedIndexColumnList();
				State = 403; Match(RPAREN);
				State = 405;
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 404; basicOptionList();
					}
					break;
				}
				State = 409;
				_la = _input.La(1);
				if (_la==ON) {
					{
					State = 407; Match(ON);
					State = 408; partitionIdent();
					}
				}

				}
				break;
			case DEFAULT:
				{
				State = 411; Match(DEFAULT);
				State = 412; Match(LPAREN);
				State = 413; literalValue();
				State = 414; Match(RPAREN);
				State = 415; Match(FOR);
				State = 416; qualifiedName();
				}
				break;
			case FOREIGN:
				{
				State = 418; Match(FOREIGN);
				State = 419; Match(KEY);
				State = 420; Match(LPAREN);
				State = 421; columnList();
				State = 422; Match(RPAREN);
				State = 423; Match(REFERENCES);
				State = 424; tableSource();
				State = 425; Match(LPAREN);
				State = 426; columnList();
				State = 427; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionIdentContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public PartitionIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPartitionIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPartitionIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionIdentContext partitionIdent() {
		PartitionIdentContext _localctx = new PartitionIdentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_partitionIdent);
		try {
			State = 440;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431; Match(PRIMARY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 432; Match(LBRACKET);
				State = 433; Match(PRIMARY);
				State = 434; Match(RBRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 435; qualifiedName();
				State = 436; Match(LPAREN);
				State = 437; columnList();
				State = 438; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableTriggerContext : ParserRuleContext {
		public ITerminalNode DISABLE() { return GetToken(TSQLParser.DISABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode ENABLE() { return GetToken(TSQLParser.ENABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSQLParser.TRIGGER, 0); }
		public AlterTableTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableTriggerContext alterTableTrigger() {
		AlterTableTriggerContext _localctx = new AlterTableTriggerContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_alterTableTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			_la = _input.La(1);
			if ( !(_la==ENABLE || _la==DISABLE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 443; Match(TRIGGER);
			State = 444; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterIndexContext : ParserRuleContext {
		public QualifiedNameContext Index;
		public QualifiedNameContext Table;
		public QualifiedNameContext Operation;
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSQLParser.ALL, 0); }
		public AlterIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterIndexContext alterIndex() {
		AlterIndexContext _localctx = new AlterIndexContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_alterIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(ALTER);
			State = 447; Match(INDEX);
			State = 450;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 448; _localctx.Index = qualifiedName();
				}
				break;

			case 2:
				{
				State = 449; Match(ALL);
				}
				break;
			}
			State = 452; Match(ON);
			{
			State = 453; _localctx.Table = qualifiedName();
			}
			{
			State = 454; _localctx.Operation = qualifiedName();
			}
			State = 456;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 455; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionSchemeContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode USED() { return GetToken(TSQLParser.USED, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSQLParser.SCHEME, 0); }
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public AlterPartitionSchemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartitionScheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterPartitionScheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterPartitionScheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartitionScheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionSchemeContext alterPartitionScheme() {
		AlterPartitionSchemeContext _localctx = new AlterPartitionSchemeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_alterPartitionScheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(ALTER);
			State = 459; Match(PARTITION);
			State = 460; Match(SCHEME);
			State = 461; qualifiedName();
			State = 462; Match(NEXT);
			State = 463; Match(USED);
			State = 464; partitionIdent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionFunctionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(TSQLParser.FUNCTION, 0); }
		public ITerminalNode RANGE() { return GetToken(TSQLParser.RANGE, 0); }
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSQLParser.SPLIT, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AlterPartitionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartitionFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterPartitionFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterPartitionFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartitionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionFunctionContext alterPartitionFunction() {
		AlterPartitionFunctionContext _localctx = new AlterPartitionFunctionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_alterPartitionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(ALTER);
			State = 467; Match(PARTITION);
			State = 468; Match(FUNCTION);
			State = 469; functionName();
			State = 470; Match(LPAREN);
			State = 471; Match(RPAREN);
			State = 484;
			switch (_input.La(1)) {
			case MERGE:
				{
				State = 472; Match(MERGE);
				State = 473; Match(RANGE);
				State = 474; Match(LPAREN);
				State = 475; variable();
				State = 476; Match(RPAREN);
				}
				break;
			case SPLIT:
				{
				State = 478; Match(SPLIT);
				State = 479; Match(RANGE);
				State = 480; Match(LPAREN);
				State = 481; variable();
				State = 482; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicOptionListContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public BasicOptionContext[] basicOption() {
			return GetRuleContexts<BasicOptionContext>();
		}
		public BasicOptionContext basicOption(int i) {
			return GetRuleContext<BasicOptionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public BasicOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicOptionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterBasicOptionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitBasicOptionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicOptionListContext basicOptionList() {
		BasicOptionListContext _localctx = new BasicOptionListContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_basicOptionList);
		int _la;
		try {
			State = 500;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 486; Match(WITH);
				State = 487; Match(LPAREN);
				State = 488; basicOption();
				State = 493;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 489; Match(COMMA);
					State = 490; basicOption();
					}
					}
					State = 495;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 496; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 498; Match(WITH);
				State = 499; basicOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicOptionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public BasicOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterBasicOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitBasicOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicOptionContext basicOption() {
		BasicOptionContext _localctx = new BasicOptionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_basicOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502; Match(Identifier);
			State = 505;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 503; Match(EQUALS);
				State = 504;
				_la = _input.La(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public TableDeclarationOptionsContext tableDeclarationOptions() {
			return GetRuleContext<TableDeclarationOptionsContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ColumnDefinitionListContext columnDefinitionList() {
			return GetRuleContext<ColumnDefinitionListContext>(0);
		}
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; Match(CREATE);
			State = 508; Match(TABLE);
			State = 511;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 509; qualifiedName();
				}
				break;

			case 2:
				{
				State = 510; tempTable();
				}
				break;
			}
			State = 513; Match(LPAREN);
			State = 514; columnDefinitionList();
			State = 517;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 515; Match(COMMA);
				State = 516; tableDeclarationOptions();
				}
				break;
			}
			State = 520;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 519; Match(COMMA);
				}
			}

			State = 522; Match(RPAREN);
			State = 525;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 523; Match(ON);
				State = 524; partitionIdent();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_dropIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527; Match(DROP);
			State = 528; Match(INDEX);
			State = 529; qualifiedName();
			State = 535;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 530; Match(ON);
				State = 531; tableTarget();
				State = 533;
				switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					State = 532; basicOptionList();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public CreateIndexPartitionContext createIndexPartition() {
			return GetRuleContext<CreateIndexPartitionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public CreateIndexIncludeListContext createIndexIncludeList() {
			return GetRuleContext<CreateIndexIncludeListContext>(0);
		}
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public TempIndexContext tempIndex() {
			return GetRuleContext<TempIndexContext>(0);
		}
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_createIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(CREATE);
			State = 539;
			_la = _input.La(1);
			if (_la==UNIQUE) {
				{
				State = 538; Match(UNIQUE);
				}
			}

			State = 542;
			_la = _input.La(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 541; clusterType();
				}
			}

			State = 544; Match(INDEX);
			State = 547;
			switch (_input.La(1)) {
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				{
				State = 545; qualifiedName();
				}
				break;
			case HASH:
				{
				State = 546; tempIndex();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 549; Match(ON);
			State = 550; tableTarget();
			State = 551; Match(LPAREN);
			State = 552; orderedIndexColumnList();
			State = 553; Match(RPAREN);
			State = 555;
			_la = _input.La(1);
			if (_la==INCLUDE) {
				{
				State = 554; createIndexIncludeList();
				}
			}

			State = 558;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 557; whereClause();
				}
			}

			State = 561;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 560; basicOptionList();
				}
				break;
			}
			State = 564;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 563; createIndexPartition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexIncludeListContext : ParserRuleContext {
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSQLParser.INCLUDE, 0); }
		public CreateIndexIncludeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexIncludeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndexIncludeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndexIncludeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexIncludeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexIncludeListContext createIndexIncludeList() {
		CreateIndexIncludeListContext _localctx = new CreateIndexIncludeListContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_createIndexIncludeList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 566; Match(INCLUDE);
			State = 567; Match(LPAREN);
			State = 568; columnList();
			State = 569; Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexPartitionContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public CreateIndexPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndexPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndexPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexPartitionContext createIndexPartition() {
		CreateIndexPartitionContext _localctx = new CreateIndexPartitionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_createIndexPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(ON);
			State = 581;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 572; qualifiedName();
				State = 573; Match(LPAREN);
				State = 574; columnList();
				State = 575; Match(RPAREN);
				}
				break;

			case 2:
				{
				State = 577; Match(LBRACKET);
				State = 578; Match(PRIMARY);
				State = 579; Match(RBRACKET);
				}
				break;

			case 3:
				{
				State = 580; Match(PRIMARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedIndexColumnListContext : ParserRuleContext {
		public OrderedIndexColumnContext orderedIndexColumn(int i) {
			return GetRuleContext<OrderedIndexColumnContext>(i);
		}
		public OrderedIndexColumnContext[] orderedIndexColumn() {
			return GetRuleContexts<OrderedIndexColumnContext>();
		}
		public OrderedIndexColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedIndexColumnList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderedIndexColumnList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderedIndexColumnList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedIndexColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedIndexColumnListContext orderedIndexColumnList() {
		OrderedIndexColumnListContext _localctx = new OrderedIndexColumnListContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_orderedIndexColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; orderedIndexColumn();
			State = 588;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 584; Match(COMMA);
				State = 585; orderedIndexColumn();
				}
				}
				State = 590;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedIndexColumnContext : ParserRuleContext {
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public OrderedIndexColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedIndexColumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderedIndexColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderedIndexColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedIndexColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedIndexColumnContext orderedIndexColumn() {
		OrderedIndexColumnContext _localctx = new OrderedIndexColumnContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_orderedIndexColumn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; columnName();
			State = 593;
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 592;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateStatisticsContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public CreateStatisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createStatistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateStatistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateStatistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateStatistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateStatisticsContext createStatistics() {
		CreateStatisticsContext _localctx = new CreateStatisticsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_createStatistics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595; Match(CREATE);
			State = 596; Match(STATISTICS);
			State = 597; qualifiedName();
			State = 598; Match(ON);
			State = 599; tableTarget();
			State = 600; Match(LPAREN);
			State = 601; qualifiedColumnNameList();
			State = 602; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604; Match(DROP);
			State = 605; Match(PROCEDURE);
			State = 606; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		public ProcedureOptionsContext procedureOptions() {
			return GetRuleContext<ProcedureOptionsContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public ProcedureBodyContext procedureBody() {
			return GetRuleContext<ProcedureBodyContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ProcedureParametersContext procedureParameters() {
			return GetRuleContext<ProcedureParametersContext>(0);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_createProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; Match(CREATE);
			State = 609; Match(PROCEDURE);
			State = 610; qualifiedName();
			State = 612;
			_la = _input.La(1);
			if (_la==LPAREN || _la==AT) {
				{
				State = 611; procedureParameters();
				}
			}

			State = 615;
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 614; procedureOptions();
				}
			}

			State = 617; Match(AS);
			State = 618; procedureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode TRUNCATE() { return GetToken(TSQLParser.TRUNCATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTruncateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTruncateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableContext truncateTable() {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_truncateTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620; Match(TRUNCATE);
			State = 621; Match(TABLE);
			State = 622; tableTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObscureCommandsContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObscureCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obscureCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterObscureCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitObscureCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObscureCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObscureCommandsContext obscureCommands() {
		ObscureCommandsContext _localctx = new ObscureCommandsContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_obscureCommands);
		int _la;
		try {
			State = 638;
			switch (_input.La(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624; Match(T__10);
				State = 625; Match(Identifier);
				State = 632;
				switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					State = 626; expression();
					}
					break;

				case 2:
					{
					State = 627; Match(LPAREN);
					State = 629;
					_la = _input.La(1);
					if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
						{
						State = 628; argumentList();
						}
					}

					State = 631; Match(RPAREN);
					}
					break;
				}
				State = 635;
				switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					State = 634; basicOptionList();
					}
					break;
				}
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 637; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateListContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PredicateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPredicateList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPredicateList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateListContext predicateList() {
		PredicateListContext _localctx = new PredicateListContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_predicateList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ITerminalNode COUNT() { return GetToken(TSQLParser.COUNT, 0); }
		public ITerminalNode CASE() { return GetToken(TSQLParser.CASE, 0); }
		public SubSelectExpressionContext subSelectExpression() {
			return GetRuleContext<SubSelectExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSQLParser.COUNT_BIG, 0); }
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public ExistsExpressionContext existsExpression() {
			return GetRuleContext<ExistsExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public MinSelectElementContext minSelectElement() {
			return GetRuleContext<MinSelectElementContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public CaseWhenContext[] caseWhen() {
			return GetRuleContexts<CaseWhenContext>();
		}
		public CaseWhenContext caseWhen(int i) {
			return GetRuleContext<CaseWhenContext>(i);
		}
		public CaseElseContext caseElse() {
			return GetRuleContext<CaseElseContext>(0);
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CAST() { return GetToken(TSQLParser.CAST, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public ConvertExpressionContext convertExpression() {
			return GetRuleContext<ConvertExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_primary);
		int _la;
		try {
			State = 698;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 642; literalValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 643; qualifiedColumnName();
				State = 645;
				switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					State = 644; collate();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 647; variable();
				State = 649;
				switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					State = 648; collate();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 651; convertExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 652; functionCall();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 653; Match(CAST);
				State = 654; Match(LPAREN);
				State = 655; expression();
				State = 656; Match(AS);
				State = 657; type();
				State = 658; Match(RPAREN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 660;
				_la = _input.La(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 667;
				switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					State = 661; minSelectElement();
					}
					break;

				case 2:
					{
					State = 662; Match(LPAREN);
					State = 663; Match(DISTINCT);
					State = 664; minSelectElement();
					State = 665; Match(RPAREN);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 669; existsExpression();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 670; Match(CASE);
				State = 672;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 671; caseWhen();
					}
					}
					State = 674;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WHEN );
				State = 677;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 676; caseElse();
					}
				}

				State = 679; Match(END);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 681; Match(CASE);
				State = 682; expression();
				State = 684;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 683; caseWhen();
					}
					}
					State = 686;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WHEN );
				State = 689;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 688; caseElse();
					}
				}

				State = 691; Match(END);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 693; Match(LPAREN);
				State = 694; expression();
				State = 695; Match(RPAREN);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 697; subSelectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_expression);
		try {
			State = 702;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 700; primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 701; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistsExpressionContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(TSQLParser.EXISTS, 0); }
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExistsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existsExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExistsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExistsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExistsExpressionContext existsExpression() {
		ExistsExpressionContext _localctx = new ExistsExpressionContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_existsExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 704; Match(NOT);
				}
			}

			State = 707; Match(EXISTS);
			State = 708; Match(LPAREN);
			State = 709; selectStatement();
			State = 710; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConvertExpressionContext : ParserRuleContext {
		public IntegerValueContext Style;
		public ITerminalNode CONVERT() { return GetToken(TSQLParser.CONVERT, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConvertExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convertExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConvertExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConvertExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConvertExpressionContext convertExpression() {
		ConvertExpressionContext _localctx = new ConvertExpressionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_convertExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; Match(CONVERT);
			State = 713; Match(LPAREN);
			State = 714; type();
			State = 715; Match(COMMA);
			State = 716; expression();
			State = 719;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 717; Match(COMMA);
				State = 718; _localctx.Style = integerValue();
				}
			}

			State = 721; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; conditionalOrExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ITerminalNode OR() { return GetToken(TSQLParser.OR, 0); }
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(_ctx, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 726; conditionalAndExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 736;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,50,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 734;
					switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
					case 1:
						{
						_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
						State = 728;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 729; Match(OR);
						State = 730; conditionalAndExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
						State = 731;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 732; Match(T__9);
						State = 733; conditionalAndExpression(0);
						}
						break;
					}
					} 
				}
				State = 738;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,50,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 740; inclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 750;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 748;
					switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
					case 1:
						{
						_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
						State = 742;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 743; Match(AND);
						State = 744; inclusiveOrExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
						State = 745;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 746; Match(T__8);
						State = 747; inclusiveOrExpression(0);
						}
						break;
					}
					} 
				}
				State = 752;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode IS() { return GetToken(TSQLParser.IS, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(_ctx, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_inclusiveOrExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 754; exclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 767;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 765;
					switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
					case 1:
						{
						_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
						State = 756;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 757; Match(PIPE);
						State = 758; exclusiveOrExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
						State = 759;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 760; Match(IS);
						State = 762;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 761; Match(NOT);
							}
						}

						State = 764; Match(NULL);
						}
						break;
					}
					} 
				}
				State = 769;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(_ctx, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 771; andExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 778;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 773;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 774; Match(CARET);
					State = 775; andExpression(0);
					}
					} 
				}
				State = 780;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(_ctx, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 782; equalityExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 789;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,57,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 784;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 785; Match(AMPERSAND);
					State = 786; equalityExpression(0);
					}
					} 
				}
				State = 791;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,57,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(_ctx, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 793; relationalExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 806;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,59,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 804;
					switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 795;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 796; Match(EQUALS);
						State = 797; relationalExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 798;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 799; Match(EQUAL_EQUAL);
						State = 800; relationalExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 801;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 802; Match(NOT_EQUAL);
						State = 803; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 808;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,59,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public LikeTestExpressionContext likeTestExpression() {
			return GetRuleContext<LikeTestExpressionContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(_ctx, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 810; additiveExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 844;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,61,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 842;
					switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 812;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 813; Match(LT);
						State = 814; additiveExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 815;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 816; Match(GT);
						State = 817; additiveExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 818;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 819; Match(LTE);
						State = 820; additiveExpression(0);
						}
						break;

					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 821;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 822; Match(LT);
						State = 823; Match(EQUALS);
						State = 824; additiveExpression(0);
						}
						break;

					case 5:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 825;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 826; Match(GTE);
						State = 827; additiveExpression(0);
						}
						break;

					case 6:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 828;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 829; Match(GT);
						State = 830; Match(EQUALS);
						State = 831; additiveExpression(0);
						}
						break;

					case 7:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 832;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 833; Match(GT_LT);
						State = 834; additiveExpression(0);
						}
						break;

					case 8:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 835;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 836; Match(LIKE);
						State = 837; likeTestExpression();
						}
						break;

					case 9:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 838;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 839; Match(NOT);
						State = 840; Match(LIKE);
						State = 841; likeTestExpression();
						}
						break;
					}
					} 
				}
				State = 846;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,61,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 848; multiplicativeExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 858;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 856;
					switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 850;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 851; Match(PLUS);
						State = 852; multiplicativeExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 853;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 854; Match(MINUS);
						State = 855; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 860;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 862; unaryExpression();
			}
			_ctx.stop = _input.Lt(-1);
			State = 875;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,65,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 873;
					switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 864;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 865; Match(STAR);
						State = 866; unaryExpression();
						}
						break;

					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 867;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 868; Match(SLASH);
						State = 869; unaryExpression();
						}
						break;

					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 870;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 871; Match(PERCENT);
						State = 872; unaryExpression();
						}
						break;
					}
					} 
				}
				State = 877;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,65,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_unaryExpression);
		try {
			State = 883;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 878; Match(PLUS);
				State = 879; unaryExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 880; Match(MINUS);
				State = 881; unaryExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 882; unaryExpressionNotPlusMinus();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionNotPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 888;
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 885; postfixExpression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 886; Match(NOT);
				State = 887; unaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(TSQLParser.BETWEEN, 0); }
		public ExpressionSetContext expressionSet() {
			return GetRuleContext<ExpressionSetContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public LikeTestExpressionContext likeTestExpression() {
			return GetRuleContext<LikeTestExpressionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode IN() { return GetToken(TSQLParser.IN, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(_ctx, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 891; primary();
			}
			_ctx.stop = _input.Lt(-1);
			State = 917;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,71,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 915;
					switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 893;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 894; Match(IN);
						State = 895; expressionSet();
						}
						break;

					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 896;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 897; Match(NOT);
						State = 898; Match(IN);
						State = 899; expressionSet();
						}
						break;

					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 900;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 902;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 901; Match(NOT);
							}
						}

						State = 904; Match(BETWEEN);
						State = 905; expression();
						State = 906; Match(AND);
						State = 907; expression();
						}
						break;

					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 909;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 911;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 910; Match(NOT);
							}
						}

						State = 913; Match(LIKE);
						State = 914; likeTestExpression();
						}
						break;
					}
					} 
				}
				State = 919;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,71,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LikeTestExpressionContext : ParserRuleContext {
		public ITerminalNode ESCAPE() { return GetToken(TSQLParser.ESCAPE, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public LikeTestExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeTestExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterLikeTestExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitLikeTestExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeTestExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeTestExpressionContext likeTestExpression() {
		LikeTestExpressionContext _localctx = new LikeTestExpressionContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_likeTestExpression);
		try {
			State = 926;
			switch (_input.La(1)) {
			case AT:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 920; stringValue();
				State = 923;
				switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					State = 921; Match(ESCAPE);
					State = 922; Match(StringLiteral);
					}
					break;
				}
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 925; functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinSelectElementContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public MinSelectElementContext minSelectElement() {
			return GetRuleContext<MinSelectElementContext>(0);
		}
		public MinSelectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minSelectElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMinSelectElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMinSelectElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinSelectElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinSelectElementContext minSelectElement() {
		MinSelectElementContext _localctx = new MinSelectElementContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_minSelectElement);
		try {
			State = 936;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 928; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 929; qualifiedColumnName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 930; literalValue();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 931; functionCall();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 932; Match(LPAREN);
				State = 933; minSelectElement();
				State = 934; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSetContext : ParserRuleContext {
		public SubSelectExpressionContext subSelectExpression() {
			return GetRuleContext<SubSelectExpressionContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpressionSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpressionSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSetContext expressionSet() {
		ExpressionSetContext _localctx = new ExpressionSetContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_expressionSet);
		int _la;
		try {
			State = 955;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 938; Match(LPAREN);
				State = 939; expression();
				State = 944;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 940; Match(COMMA);
					State = 941; expression();
					}
					}
					State = 946;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 947; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 949; variable();
				State = 951;
				switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					State = 950; collate();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 953; functionCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 954; subSelectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseWhenContext : ParserRuleContext {
		public ITerminalNode THEN() { return GetToken(TSQLParser.THEN, 0); }
		public ITerminalNode WHEN() { return GetToken(TSQLParser.WHEN, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public CaseWhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseWhen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCaseWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCaseWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseWhenContext caseWhen() {
		CaseWhenContext _localctx = new CaseWhenContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_caseWhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957; Match(WHEN);
			State = 958; expression();
			State = 959; Match(THEN);
			State = 960; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseElseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCaseElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCaseElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseElseContext caseElse() {
		CaseElseContext _localctx = new CaseElseContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_caseElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962; Match(ELSE);
			State = 963; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubSelectExpressionContext : ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public SubSelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subSelectExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSubSelectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSubSelectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubSelectExpressionContext subSelectExpression() {
		SubSelectExpressionContext _localctx = new SubSelectExpressionContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_subSelectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965; Match(LPAREN);
			State = 966; selectStatement();
			State = 967; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public IdentityTypeContext identityType() {
			return GetRuleContext<IdentityTypeContext>(0);
		}
		public TypeInBracketContext typeInBracket() {
			return GetRuleContext<TypeInBracketContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public CharacterStringTypeContext characterStringType() {
			return GetRuleContext<CharacterStringTypeContext>(0);
		}
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_type);
		try {
			State = 977;
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 969; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 970; characterStringType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 971; numericType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 972; identityType();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 973; integerType();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 974; Match(XML);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 975; Match(CURSOR);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 976; typeInBracket();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInBracketContext : ParserRuleContext {
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeInBracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInBracket; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTypeInBracket(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTypeInBracket(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInBracket(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInBracketContext typeInBracket() {
		TypeInBracketContext _localctx = new TypeInBracketContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_typeInBracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979; Match(LBRACKET);
			State = 980; type();
			State = 981; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionInRestContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionInRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionInRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpressionInRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpressionInRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionInRestContext expressionInRest() {
		ExpressionInRestContext _localctx = new ExpressionInRestContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_expressionInRest);
		int _la;
		try {
			State = 1000;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 983; Match(LPAREN);
				State = 984; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 985; Match(LPAREN);
				State = 986; selectStatement();
				State = 987; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 989; Match(LPAREN);
				State = 990; expression();
				State = 995;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 991; Match(COMMA);
					State = 992; expression();
					}
					}
					State = 997;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 998; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		public LiteralValueContext literalValue(int i) {
			return GetRuleContext<LiteralValueContext>(i);
		}
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public LiteralValueContext[] literalValue() {
			return GetRuleContexts<LiteralValueContext>();
		}
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode FloatingPointLiteral() { return GetToken(TSQLParser.FloatingPointLiteral, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_literalValue);
		int _la;
		try {
			State = 1017;
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1002; Match(StringLiteral);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1003; integerValue();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1004; Match(FloatingPointLiteral);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1005; Match(NULL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1006; Match(LPAREN);
				State = 1007; literalValue();
				State = 1012;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1008; Match(COMMA);
					State = 1009; literalValue();
					}
					}
					State = 1014;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1015; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_stringValue);
		try {
			State = 1021;
			switch (_input.La(1)) {
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1019; Match(StringLiteral);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1020; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerValueContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(TSQLParser.IntegerLiteral, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public IntegerValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntegerValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntegerValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerValueContext integerValue() {
		IntegerValueContext _localctx = new IntegerValueContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_integerValue);
		int _la;
		try {
			State = 1031;
			switch (_input.La(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1024;
				_la = _input.La(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 1023;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
				}

				State = 1026; Match(IntegerLiteral);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1027; Match(LPAREN);
				State = 1028; integerValue();
				State = 1029; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNamePartContext : ParserRuleContext {
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public QualifiedNamePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNamePart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedNamePart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedNamePart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNamePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNamePartContext qualifiedNamePart() {
		QualifiedNamePartContext _localctx = new QualifiedNamePartContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_qualifiedNamePart);
		int _la;
		try {
			State = 1042;
			switch (_input.La(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1033; Match(LBRACKET);
				State = 1035;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1034; keyword();
					}
					}
					State = 1037;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << READONLY) | (1L << TRY) | (1L << CATCH) | (1L << TRANSACTION) | (1L << COMMIT) | (1L << ROLLBACK) | (1L << RAISE_ERROR) | (1L << PRINT) | (1L << CLUSTERED) | (1L << NONCLUSTERED) | (1L << TABLE) | (1L << PROCEDURE) | (1L << PARTITION) | (1L << INDEX) | (1L << DATABASE) | (1L << CONSTRAINT) | (1L << FOREIGN) | (1L << PRIMARY) | (1L << KEY) | (1L << REFERENCES) | (1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL) | (1L << CURSOR) | (1L << FETCH) | (1L << OPEN) | (1L << CLOSE) | (1L << DEALLOCATE) | (1L << FIRST) | (1L << LAST) | (1L << PRIOR) | (1L << NEXT) | (1L << ABSOLUTE) | (1L << RELATIVE) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << COLLATE) | (1L << COUNT) | (1L << COUNT_BIG) | (1L << DISTINCT) | (1L << UNIQUE) | (1L << MAX) | (1L << TOP) | (1L << WHEN) | (1L << THEN) | (1L << SWITCH) | (1L << OVER) | (1L << INCLUDE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTERSECT - 64)) | (1L << (EXCEPT - 64)) | (1L << (UNION - 64)) | (1L << (ALL - 64)) | (1L << (APPLY - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (WHILE - 64)) | (1L << (GOTO - 64)) | (1L << (CONTINUE - 64)) | (1L << (BREAK - 64)) | (1L << (TRUNCATE - 64)) | (1L << (ADD - 64)) | (1L << (REMOVE - 64)) | (1L << (ALTER - 64)) | (1L << (CREATE - 64)) | (1L << (DROP - 64)) | (1L << (AS - 64)) | (1L << (WITH - 64)) | (1L << (FOR - 64)) | (1L << (REPLICATION - 64)) | (1L << (BEGIN - 64)) | (1L << (END - 64)) | (1L << (EXISTS - 64)) | (1L << (DEFAULT - 64)) | (1L << (VARYING - 64)) | (1L << (SELECT - 64)) | (1L << (UPDATE - 64)) | (1L << (INSERT - 64)) | (1L << (DELETE - 64)) | (1L << (WHERE - 64)) | (1L << (FROM - 64)) | (1L << (JOIN - 64)) | (1L << (DECLARE - 64)) | (1L << (OPTION - 64)) | (1L << (SET - 64)) | (1L << (TO - 64)) | (1L << (ON - 64)) | (1L << (OFF - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (EXECUTE - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (IS - 64)) | (1L << (IN - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (BETWEEN - 64)) | (1L << (RETURN - 64)) | (1L << (OUTPUT - 64)) | (1L << (OUT - 64)) | (1L << (LIKE - 64)) | (1L << (ESCAPE - 64)) | (1L << (OF - 64)) | (1L << (DECIMAL - 64)) | (1L << (NUMERIC - 64)) | (1L << (VARCHAR - 64)) | (1L << (NVARCHAR - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (NCHAR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT - 128)) | (1L << (IDENTITY - 128)) | (1L << (LOG - 128)) | (1L << (AND - 128)) | (1L << (OR - 128)) | (1L << (ASC - 128)) | (1L << (DESC - 128)) | (1L << (STATISTICS - 128)) | (1L << (USING - 128)) | (1L << (MERGE - 128)) | (1L << (MATCHED - 128)) | (1L << (TARGET - 128)) | (1L << (SOURCE - 128)) | (1L << (XML - 128)) | (1L << (RAW - 128)) | (1L << (AUTO - 128)) | (1L << (EXPLICIT - 128)) | (1L << (PATH - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (TRIGGER - 128)) | (1L << (WAITFOR - 128)) | (1L << (DELAY - 128)) | (1L << (COMPUTE - 128)) | (1L << (LEVEL - 128)) | (1L << (ISOLATION - 128)) | (1L << (SPLIT - 128)) | (1L << (RANGE - 128)) | (1L << (FUNCTION - 128)) | (1L << (SCHEME - 128)) | (1L << (USED - 128)) | (1L << (OPTIMIZE - 128)) | (1L << (ROWCOUNT - 128)))) != 0) );
				State = 1039; Match(RBRACKET);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1041; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public QualifiedNamePartContext[] qualifiedNamePart() {
			return GetRuleContexts<QualifiedNamePartContext>();
		}
		public QualifiedNamePartContext qualifiedNamePart(int i) {
			return GetRuleContext<QualifiedNamePartContext>(i);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_qualifiedName);
		int _la;
		try {
			int _alt;
			State = 1057;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1044; qualifiedNamePart();
				State = 1053;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,89,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1046;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 1045; Match(DOT);
							}
							}
							State = 1048;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==DOT );
						State = 1050; qualifiedNamePart();
						}
						} 
					}
					State = 1055;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,89,_ctx);
				}
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1056; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059; qualifiedName();
			State = 1064;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1060; Match(COMMA);
				State = 1061; qualifiedName();
				}
				}
				State = 1066;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempIndexContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode HASH(int i) {
			return GetToken(TSQLParser.HASH, i);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode[] HASH() { return GetTokens(TSQLParser.HASH); }
		public TempIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTempIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTempIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempIndexContext tempIndex() {
		TempIndexContext _localctx = new TempIndexContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_tempIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1067; Match(HASH);
				}
				}
				State = 1070;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==HASH );
			State = 1074;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				{
				State = 1072; qualifiedNamePart();
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
				{
				State = 1073; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempTableContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSQLParser.DOT, 0); }
		public ITerminalNode HASH(int i) {
			return GetToken(TSQLParser.HASH, i);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode[] HASH() { return GetTokens(TSQLParser.HASH); }
		public TempTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTempTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTempTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempTableContext tempTable() {
		TempTableContext _localctx = new TempTableContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_tempTable);
		int _la;
		try {
			State = 1089;
			switch (_input.La(1)) {
			case HASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1077;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1076; Match(HASH);
					}
					}
					State = 1079;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==HASH );
				State = 1083;
				switch (_input.La(1)) {
				case LBRACKET:
				case Identifier:
					{
					State = 1081; qualifiedNamePart();
					}
					break;
				case READONLY:
				case TRY:
				case CATCH:
				case TRANSACTION:
				case COMMIT:
				case ROLLBACK:
				case RAISE_ERROR:
				case PRINT:
				case CLUSTERED:
				case NONCLUSTERED:
				case TABLE:
				case PROCEDURE:
				case PARTITION:
				case INDEX:
				case DATABASE:
				case CONSTRAINT:
				case FOREIGN:
				case PRIMARY:
				case KEY:
				case REFERENCES:
				case LEFT:
				case RIGHT:
				case CROSS:
				case OUTER:
				case INNER:
				case FULL:
				case CURSOR:
				case FETCH:
				case OPEN:
				case CLOSE:
				case DEALLOCATE:
				case FIRST:
				case LAST:
				case PRIOR:
				case NEXT:
				case ABSOLUTE:
				case RELATIVE:
				case CASE:
				case CAST:
				case CONVERT:
				case COLLATE:
				case COUNT:
				case COUNT_BIG:
				case DISTINCT:
				case UNIQUE:
				case MAX:
				case TOP:
				case WHEN:
				case THEN:
				case SWITCH:
				case OVER:
				case INCLUDE:
				case INTERSECT:
				case EXCEPT:
				case UNION:
				case ALL:
				case APPLY:
				case IF:
				case ELSE:
				case WHILE:
				case GOTO:
				case CONTINUE:
				case BREAK:
				case TRUNCATE:
				case ADD:
				case REMOVE:
				case ALTER:
				case CREATE:
				case DROP:
				case AS:
				case WITH:
				case FOR:
				case REPLICATION:
				case BEGIN:
				case END:
				case EXISTS:
				case DEFAULT:
				case VARYING:
				case SELECT:
				case UPDATE:
				case INSERT:
				case DELETE:
				case WHERE:
				case FROM:
				case JOIN:
				case DECLARE:
				case OPTION:
				case SET:
				case TO:
				case ON:
				case OFF:
				case GROUP:
				case HAVING:
				case ORDER:
				case BY:
				case EXECUTE:
				case INTO:
				case VALUES:
				case IS:
				case IN:
				case NOT:
				case NULL:
				case BETWEEN:
				case RETURN:
				case OUTPUT:
				case OUT:
				case LIKE:
				case ESCAPE:
				case OF:
				case DECIMAL:
				case NUMERIC:
				case VARCHAR:
				case NVARCHAR:
				case CHAR:
				case CHARACTER:
				case NCHAR:
				case INT:
				case TINYINT:
				case SMALLINT:
				case BIGINT:
				case FLOAT:
				case IDENTITY:
				case LOG:
				case AND:
				case OR:
				case ASC:
				case DESC:
				case STATISTICS:
				case USING:
				case MERGE:
				case MATCHED:
				case TARGET:
				case SOURCE:
				case XML:
				case RAW:
				case AUTO:
				case EXPLICIT:
				case PATH:
				case ENABLE:
				case DISABLE:
				case TRIGGER:
				case WAITFOR:
				case DELAY:
				case COMPUTE:
				case LEVEL:
				case ISOLATION:
				case SPLIT:
				case RANGE:
				case FUNCTION:
				case SCHEME:
				case USED:
				case OPTIMIZE:
				case ROWCOUNT:
					{
					State = 1082; keyword();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1085; qualifiedName();
				State = 1086; Match(DOT);
				State = 1087; tempTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode[] AT() { return GetTokens(TSQLParser.AT); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode AT(int i) {
			return GetToken(TSQLParser.AT, i);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_variable);
		int _la;
		try {
			State = 1103;
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1092;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1091; Match(AT);
					}
					}
					State = 1094;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==AT );
				State = 1096; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1098;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1097; Match(AT);
					}
					}
					State = 1100;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==AT );
				State = 1102; keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureBodyContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ProcedureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureBodyContext procedureBody() {
		ProcedureBodyContext _localctx = new ProcedureBodyContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_procedureBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParametersContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		public ProcedureParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParametersContext procedureParameters() {
		ProcedureParametersContext _localctx = new ProcedureParametersContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_procedureParameters);
		int _la;
		try {
			State = 1127;
			switch (_input.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1107; Match(LPAREN);
				State = 1116;
				_la = _input.La(1);
				if (_la==AT) {
					{
					State = 1108; procedureParameter();
					State = 1113;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1109; Match(COMMA);
						State = 1110; procedureParameter();
						}
						}
						State = 1115;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1118; Match(RPAREN);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1119; procedureParameter();
				State = 1124;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1120; Match(COMMA);
					State = 1121; procedureParameter();
					}
					}
					State = 1126;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ITerminalNode READONLY() { return GetToken(TSQLParser.READONLY, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ProcedureParameterNameContext procedureParameterName() {
			return GetRuleContext<ProcedureParameterNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ProcedureParameterInitialValueContext procedureParameterInitialValue() {
			return GetRuleContext<ProcedureParameterInitialValueContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129; procedureParameterName();
			State = 1131;
			switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				State = 1130; Match(AS);
				}
				break;
			}
			State = 1133; type();
			{
			State = 1135;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 1134; Match(NOT);
				}
			}

			State = 1138;
			_la = _input.La(1);
			if (_la==NULL) {
				{
				State = 1137; Match(NULL);
				}
			}

			}
			State = 1141;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 1140; procedureParameterInitialValue();
				}
			}

			State = 1144;
			_la = _input.La(1);
			if (_la==READONLY) {
				{
				State = 1143; Match(READONLY);
				}
			}

			State = 1147;
			_la = _input.La(1);
			if (_la==OUTPUT || _la==OUT) {
				{
				State = 1146;
				_la = _input.La(1);
				if ( !(_la==OUTPUT || _la==OUT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterInitialValueContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ProcedureParameterInitialValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterInitialValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameterInitialValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameterInitialValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameterInitialValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterInitialValueContext procedureParameterInitialValue() {
		ProcedureParameterInitialValueContext _localctx = new ProcedureParameterInitialValueContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_procedureParameterInitialValue);
		try {
			State = 1153;
			switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1149; Match(EQUALS);
				State = 1150; literalValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1151; Match(EQUALS);
				State = 1152; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterNameContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ProcedureParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameterName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameterName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterNameContext procedureParameterName() {
		ProcedureParameterNameContext _localctx = new ProcedureParameterNameContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_procedureParameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureOptionsContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(TSQLParser.Identifier); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode Identifier(int i) {
			return GetToken(TSQLParser.Identifier, i);
		}
		public ProcedureOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureOptionsContext procedureOptions() {
		ProcedureOptionsContext _localctx = new ProcedureOptionsContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_procedureOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157; Match(WITH);
			State = 1158; Match(Identifier);
			State = 1163;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1159; Match(COMMA);
				State = 1160; Match(Identifier);
				}
				}
				State = 1165;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166; statement();
			State = 1170;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,112,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1167; statement();
					}
					} 
				}
				State = 1172;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,112,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(TSQLParser.SEMICOLON, 0); }
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public DdlContext ddl() {
			return GetRuleContext<DdlContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_statement);
		try {
			State = 1186;
			switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1173; Match(BEGIN);
				State = 1174; statementList();
				State = 1175; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1177; ddl();
				State = 1179;
				switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					State = 1178; Match(SEMICOLON);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1181; dml();
				State = 1183;
				switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
				case 1:
					{
					State = 1182; Match(SEMICOLON);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1185; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlContext : ParserRuleContext {
		public ObscureCommandsContext obscureCommands() {
			return GetRuleContext<ObscureCommandsContext>(0);
		}
		public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		public AlterIndexContext alterIndex() {
			return GetRuleContext<AlterIndexContext>(0);
		}
		public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		public CreateStatisticsContext createStatistics() {
			return GetRuleContext<CreateStatisticsContext>(0);
		}
		public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		public TruncateTableContext truncateTable() {
			return GetRuleContext<TruncateTableContext>(0);
		}
		public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		public AlterPartitionFunctionContext alterPartitionFunction() {
			return GetRuleContext<AlterPartitionFunctionContext>(0);
		}
		public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		public AlterPartitionSchemeContext alterPartitionScheme() {
			return GetRuleContext<AlterPartitionSchemeContext>(0);
		}
		public DdlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDdl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDdl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdlContext ddl() {
		DdlContext _localctx = new DdlContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_ddl);
		try {
			State = 1201;
			switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1188; createProcedure();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1189; createTable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1190; createIndex();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1191; createStatistics();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1192; dropProcedure();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1193; dropTable();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1194; dropIndex();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1195; truncateTable();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1196; alterTable();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1197; alterIndex();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1198; alterPartitionFunction();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1199; alterPartitionScheme();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1200; obscureCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlContext : ParserRuleContext {
		public ReturnExpressionContext returnExpression() {
			return GetRuleContext<ReturnExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(TSQLParser.BREAK, 0); }
		public DeclareStatementContext declareStatement() {
			return GetRuleContext<DeclareStatementContext>(0);
		}
		public MergeStatementContext mergeStatement() {
			return GetRuleContext<MergeStatementContext>(0);
		}
		public TryBlockContext tryBlock() {
			return GetRuleContext<TryBlockContext>(0);
		}
		public TransactionBlockContext transactionBlock() {
			return GetRuleContext<TransactionBlockContext>(0);
		}
		public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		public CommitTransactionContext commitTransaction() {
			return GetRuleContext<CommitTransactionContext>(0);
		}
		public PrintExpressionContext printExpression() {
			return GetRuleContext<PrintExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TSQLParser.COLON, 0); }
		public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public ComputeStatementContext computeStatement() {
			return GetRuleContext<ComputeStatementContext>(0);
		}
		public RollbackTransactionContext rollbackTransaction() {
			return GetRuleContext<RollbackTransactionContext>(0);
		}
		public CommonTableExpressionContext commonTableExpression() {
			return GetRuleContext<CommonTableExpressionContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WaitForContext waitFor() {
			return GetRuleContext<WaitForContext>(0);
		}
		public ITerminalNode CONTINUE() { return GetToken(TSQLParser.CONTINUE, 0); }
		public CursorStatementContext cursorStatement() {
			return GetRuleContext<CursorStatementContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(TSQLParser.GOTO, 0); }
		public RaiseErrorContext raiseError() {
			return GetRuleContext<RaiseErrorContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDml(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlContext dml() {
		DmlContext _localctx = new DmlContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_dml);
		try {
			State = 1238;
			switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1203; selectStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1204; insertStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1205; deleteStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1206; updateStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1207; executeStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1208; mergeStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1209; computeStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1210; setStatement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1211; declareStatement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1212; tryBlock();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1213; transactionBlock();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1214; raiseError();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1215; waitFor();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1216; commonTableExpression();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1217; cursorStatement();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1218; printExpression();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1219; ifStatement();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1220; whileStatement();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1221; Match(BREAK);
				State = 1223;
				switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					State = 1222; qualifiedName();
					}
					break;
				}
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1225; Match(CONTINUE);
				State = 1227;
				switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					State = 1226; qualifiedName();
					}
					break;
				}
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1229; commitTransaction();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1230; Match(GOTO);
				State = 1232;
				switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					State = 1231; qualifiedName();
					}
					break;
				}
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1234; rollbackTransaction();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1235; returnExpression();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1236; Match(Identifier);
				State = 1237; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommitTransactionContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSQLParser.COMMIT, 0); }
		public CommitTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commitTransaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCommitTransaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCommitTransaction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommitTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommitTransactionContext commitTransaction() {
		CommitTransactionContext _localctx = new CommitTransactionContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_commitTransaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240; Match(COMMIT);
			State = 1242;
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				State = 1241; Match(TRANSACTION);
				}
				break;
			}
			State = 1245;
			switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				State = 1244; qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackTransactionContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSQLParser.ROLLBACK, 0); }
		public RollbackTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackTransaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterRollbackTransaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitRollbackTransaction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackTransactionContext rollbackTransaction() {
		RollbackTransactionContext _localctx = new RollbackTransactionContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_rollbackTransaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1247; Match(ROLLBACK);
			State = 1249;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1248; Match(TRANSACTION);
				}
				break;
			}
			State = 1252;
			switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				State = 1251; qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintExpressionContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(TSQLParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPrintExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPrintExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintExpressionContext printExpression() {
		PrintExpressionContext _localctx = new PrintExpressionContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_printExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1254; Match(PRINT);
			State = 1255; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExpressionContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TSQLParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterReturnExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitReturnExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExpressionContext returnExpression() {
		ReturnExpressionContext _localctx = new ReturnExpressionContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_returnExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257; Match(RETURN);
			State = 1259;
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				State = 1258; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(TSQLParser.IF, 0); }
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261; Match(IF);
			State = 1262; predicateList();
			State = 1263; statement();
			State = 1266;
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				State = 1264; Match(ELSE);
				State = 1265; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(TSQLParser.WHILE, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268; Match(WHILE);
			State = 1269; predicateList();
			State = 1270; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitForContext : ParserRuleContext {
		public ITerminalNode WAITFOR() { return GetToken(TSQLParser.WAITFOR, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public ITerminalNode DELAY() { return GetToken(TSQLParser.DELAY, 0); }
		public WaitForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitFor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWaitFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWaitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitForContext waitFor() {
		WaitForContext _localctx = new WaitForContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_waitFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1272; Match(WAITFOR);
			State = 1273; Match(DELAY);
			State = 1274; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseErrorContext : ParserRuleContext {
		public ITerminalNode LOG() { return GetToken(TSQLParser.LOG, 0); }
		public ITerminalNode RAISE_ERROR() { return GetToken(TSQLParser.RAISE_ERROR, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public RaiseErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseError; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterRaiseError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitRaiseError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseErrorContext raiseError() {
		RaiseErrorContext _localctx = new RaiseErrorContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_raiseError);
		try {
			int _alt;
			State = 1294;
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1276; Match(RAISE_ERROR);
				State = 1277; Match(LPAREN);
				State = 1278; argumentList();
				State = 1279; Match(RPAREN);
				State = 1282;
				switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					State = 1280; Match(WITH);
					State = 1281; Match(LOG);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1284; Match(RAISE_ERROR);
				State = 1286;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1285; argument();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1288;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,128,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1292;
				switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					State = 1290; Match(WITH);
					State = 1291; Match(LOG);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryBlockContext : ParserRuleContext {
		public ITerminalNode[] TRY() { return GetTokens(TSQLParser.TRY); }
		public ITerminalNode END(int i) {
			return GetToken(TSQLParser.END, i);
		}
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public ITerminalNode[] CATCH() { return GetTokens(TSQLParser.CATCH); }
		public ITerminalNode[] BEGIN() { return GetTokens(TSQLParser.BEGIN); }
		public ITerminalNode[] END() { return GetTokens(TSQLParser.END); }
		public ITerminalNode CATCH(int i) {
			return GetToken(TSQLParser.CATCH, i);
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public ITerminalNode BEGIN(int i) {
			return GetToken(TSQLParser.BEGIN, i);
		}
		public ITerminalNode TRY(int i) {
			return GetToken(TSQLParser.TRY, i);
		}
		public TryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTryBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTryBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryBlockContext tryBlock() {
		TryBlockContext _localctx = new TryBlockContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_tryBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1296; Match(BEGIN);
			State = 1297; Match(TRY);
			State = 1298; statementList();
			State = 1299; Match(END);
			State = 1300; Match(TRY);
			State = 1301; Match(BEGIN);
			State = 1302; Match(CATCH);
			State = 1303; statementList();
			State = 1304; Match(END);
			State = 1305; Match(CATCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionBlockContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public TransactionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTransactionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTransactionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionBlockContext transactionBlock() {
		TransactionBlockContext _localctx = new TransactionBlockContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_transactionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1307; Match(BEGIN);
			State = 1308; Match(TRANSACTION);
			State = 1310;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				State = 1309; qualifiedName();
				}
				break;
			}
			State = 1312; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteTopContext : ParserRuleContext {
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DeleteTopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteTop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteTop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteTop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteTopContext deleteTop() {
		DeleteTopContext _localctx = new DeleteTopContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_deleteTop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1314; Match(TOP);
			State = 1321;
			switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				State = 1315; integerValue();
				}
				break;

			case 2:
				{
				State = 1316; variable();
				}
				break;

			case 3:
				{
				State = 1317; Match(LPAREN);
				State = 1318; variable();
				State = 1319; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		public DeleteFromClauseContext[] deleteFromClause() {
			return GetRuleContexts<DeleteFromClauseContext>();
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public DeleteFromClauseLooseContext[] deleteFromClauseLoose() {
			return GetRuleContexts<DeleteFromClauseLooseContext>();
		}
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public DeleteFromClauseContext deleteFromClause(int i) {
			return GetRuleContext<DeleteFromClauseContext>(i);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public DeleteOutputContext deleteOutput() {
			return GetRuleContext<DeleteOutputContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public DeleteFromClauseLooseContext deleteFromClauseLoose(int i) {
			return GetRuleContext<DeleteFromClauseLooseContext>(i);
		}
		public DeleteTopContext deleteTop() {
			return GetRuleContext<DeleteTopContext>(0);
		}
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			State = 1372;
			switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1323; Match(DELETE);
				State = 1325;
				switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					State = 1324; deleteTop();
					}
					break;
				}
				State = 1328;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1327; deleteFromClause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1330;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,134,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1333;
				_la = _input.La(1);
				if (_la==OUTPUT) {
					{
					State = 1332; deleteOutput();
					}
				}

				State = 1338;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1335; joinOrApply();
					}
					}
					State = 1340;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1342;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1341; whereClause();
					}
				}

				State = 1345;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1344; dmlOptions();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1347; Match(DELETE);
				State = 1349;
				switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					State = 1348; deleteTop();
					}
					break;
				}
				State = 1351; tableTarget();
				State = 1353;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1352; deleteFromClauseLoose();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1355;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,140,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1358;
				_la = _input.La(1);
				if (_la==OUTPUT) {
					{
					State = 1357; deleteOutput();
					}
				}

				State = 1363;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1360; joinOrApply();
					}
					}
					State = 1365;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1367;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1366; whereClause();
					}
				}

				State = 1370;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1369; dmlOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFromClauseContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public DeleteFromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFromClauseContext deleteFromClause() {
		DeleteFromClauseContext _localctx = new DeleteFromClauseContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_deleteFromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1374; Match(FROM);
				}
				break;
			}
			State = 1377; tableTargetWithOptions();
			State = 1382;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1378; Match(COMMA);
				State = 1379; tableSourceWithOptions();
				}
				}
				State = 1384;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFromClauseLooseContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public DeleteFromClauseLooseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFromClauseLoose; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteFromClauseLoose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteFromClauseLoose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteFromClauseLoose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFromClauseLooseContext deleteFromClauseLoose() {
		DeleteFromClauseLooseContext _localctx = new DeleteFromClauseLooseContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_deleteFromClauseLoose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386;
			switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				State = 1385; Match(FROM);
				}
				break;
			}
			State = 1388; tableSourceWithOptions();
			State = 1393;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1389; Match(COMMA);
				State = 1390; tableSourceWithOptions();
				}
				}
				State = 1395;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteOutputContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public DeleteOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteOutputContext deleteOutput() {
		DeleteOutputContext _localctx = new DeleteOutputContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_deleteOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396; Match(OUTPUT);
			State = 1397; qualifiedColumnNameList();
			State = 1398; Match(INTO);
			State = 1399; tableTargetWithOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public CommonTableExpressionAtomContext commonTableExpressionAtom(int i) {
			return GetRuleContext<CommonTableExpressionAtomContext>(i);
		}
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public CommonTableExpressionAtomContext[] commonTableExpressionAtom() {
			return GetRuleContexts<CommonTableExpressionAtomContext>();
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCommonTableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCommonTableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionContext commonTableExpression() {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_commonTableExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401; Match(WITH);
			State = 1402; commonTableExpressionAtom();
			State = 1407;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1403; Match(COMMA);
				State = 1404; commonTableExpressionAtom();
				}
				}
				State = 1409;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1410; dml();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionAtomContext : ParserRuleContext {
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(TSQLParser.RPAREN, i);
		}
		public ITerminalNode[] LPAREN() { return GetTokens(TSQLParser.LPAREN); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(TSQLParser.RPAREN); }
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(TSQLParser.LPAREN, i);
		}
		public CommonTableExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpressionAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCommonTableExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCommonTableExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionAtomContext commonTableExpressionAtom() {
		CommonTableExpressionAtomContext _localctx = new CommonTableExpressionAtomContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_commonTableExpressionAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412; qualifiedName();
			State = 1417;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1413; Match(LPAREN);
				State = 1414; columnList();
				State = 1415; Match(RPAREN);
				}
			}

			State = 1419; Match(AS);
			State = 1420; Match(LPAREN);
			State = 1421; dml();
			State = 1422; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public InsertDataSourceContext insertDataSource() {
			return GetRuleContext<InsertDataSourceContext>(0);
		}
		public InsertPreambleContext insertPreamble() {
			return GetRuleContext<InsertPreambleContext>(0);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public InsertOutputClauseContext insertOutputClause() {
			return GetRuleContext<InsertOutputClauseContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1424; insertPreamble();
			State = 1426;
			switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				State = 1425; insertOutputClause();
				}
				break;
			}
			State = 1428; insertDataSource();
			State = 1430;
			_la = _input.La(1);
			if (_la==OPTION) {
				{
				State = 1429; dmlOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertPreambleContext : ParserRuleContext {
		public TableTargetOptionsContext tableTargetOptions() {
			return GetRuleContext<TableTargetOptionsContext>(0);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public InsertPreambleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertPreamble; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertPreamble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertPreamble(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertPreamble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertPreambleContext insertPreamble() {
		InsertPreambleContext _localctx = new InsertPreambleContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_insertPreamble);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1432; Match(INSERT);
			State = 1434;
			switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				State = 1433; Match(INTO);
				}
				break;
			}
			State = 1436; tableTarget();
			State = 1438;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 1437; tableTargetOptions();
				}
				break;
			}
			State = 1444;
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				State = 1440; Match(LPAREN);
				State = 1441; qualifiedNameList();
				State = 1442; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertOutputClauseContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public InsertOutputClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertOutputClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertOutputClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertOutputClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertOutputClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertOutputClauseContext insertOutputClause() {
		InsertOutputClauseContext _localctx = new InsertOutputClauseContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_insertOutputClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1446; Match(OUTPUT);
			State = 1447; selectList();
			State = 1456;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				State = 1448; Match(INTO);
				State = 1449; tableTarget();
				State = 1454;
				switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					State = 1450; Match(LPAREN);
					State = 1451; qualifiedColumnNameList();
					State = 1452; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertDataSourceContext : ParserRuleContext {
		public InsertValueListContext insertValueList(int i) {
			return GetRuleContext<InsertValueListContext>(i);
		}
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public InsertValueListContext[] insertValueList() {
			return GetRuleContexts<InsertValueListContext>();
		}
		public InsertDataSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertDataSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertDataSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertDataSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertDataSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertDataSourceContext insertDataSource() {
		InsertDataSourceContext _localctx = new InsertDataSourceContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_insertDataSource);
		int _la;
		try {
			State = 1471;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1458; Match(VALUES);
				State = 1459; insertValueList();
				State = 1464;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1460; Match(COMMA);
					State = 1461; insertValueList();
					}
					}
					State = 1466;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1467; Match(DEFAULT);
				State = 1468; Match(VALUES);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1469; selectStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1470; tableSource();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValueListContext : ParserRuleContext {
		public InsertValueContext[] insertValue() {
			return GetRuleContexts<InsertValueContext>();
		}
		public InsertValueContext insertValue(int i) {
			return GetRuleContext<InsertValueContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public InsertValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValueListContext insertValueList() {
		InsertValueListContext _localctx = new InsertValueListContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_insertValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1473; Match(LPAREN);
			State = 1474; insertValue();
			State = 1479;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1475; Match(COMMA);
				State = 1476; insertValue();
				}
				}
				State = 1481;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1482; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InsertValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValueContext insertValue() {
		InsertValueContext _localctx = new InsertValueContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_insertValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStatementContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(TSQLParser.DECLARE, 0); }
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode OF() { return GetToken(TSQLParser.OF, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSQLParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSQLParser.FOR, i);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeclareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeclareStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeclareStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStatementContext declareStatement() {
		DeclareStatementContext _localctx = new DeclareStatementContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_declareStatement);
		int _la;
		try {
			State = 1509;
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1486; Match(DECLARE);
				State = 1487; variableDeclaration();
				State = 1492;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1488; Match(COMMA);
					State = 1489; variableDeclaration();
					}
					}
					State = 1494;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1495; Match(DECLARE);
				State = 1496; qualifiedName();
				State = 1497; Match(CURSOR);
				State = 1499;
				_la = _input.La(1);
				if (_la==Identifier) {
					{
					State = 1498; Match(Identifier);
					}
				}

				State = 1501; Match(FOR);
				State = 1502; selectStatement();
				State = 1507;
				_la = _input.La(1);
				if (_la==FOR) {
					{
					State = 1503; Match(FOR);
					State = 1504; Match(UPDATE);
					State = 1505; Match(OF);
					State = 1506; tableTarget();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public TableDeclarationOptionsContext tableDeclarationOptions() {
			return GetRuleContext<TableDeclarationOptionsContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ColumnDefinitionListContext columnDefinitionList() {
			return GetRuleContext<ColumnDefinitionListContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1511; variable();
			State = 1531;
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 1513;
				switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
				case 1:
					{
					State = 1512; Match(AS);
					}
					break;
				}
				State = 1515; type();
				State = 1517;
				_la = _input.La(1);
				if (_la==EQUALS) {
					{
					State = 1516; variableDeclarationAssignment();
					}
				}

				}
				break;

			case 2:
				{
				State = 1519; Match(TABLE);
				State = 1520; Match(LPAREN);
				State = 1521; columnDefinitionList();
				State = 1524;
				switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
				case 1:
					{
					State = 1522; Match(COMMA);
					State = 1523; tableDeclarationOptions();
					}
					break;
				}
				State = 1527;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1526; Match(COMMA);
					}
				}

				State = 1529; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
		VariableDeclarationAssignmentContext _localctx = new VariableDeclarationAssignmentContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_variableDeclarationAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1533; Match(EQUALS);
			State = 1534; expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnListContext : ParserRuleContext {
		public ColumnNameContext[] columnName() {
			return GetRuleContexts<ColumnNameContext>();
		}
		public ColumnNameContext columnName(int i) {
			return GetRuleContext<ColumnNameContext>(i);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnListContext columnList() {
		ColumnListContext _localctx = new ColumnListContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_columnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536; columnName();
			State = 1541;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1537; Match(COMMA);
				State = 1538; columnName();
				}
				}
				State = 1543;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionListContext : ParserRuleContext {
		public ColumnDefinitionContext[] columnDefinition() {
			return GetRuleContexts<ColumnDefinitionContext>();
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return GetRuleContext<ColumnDefinitionContext>(i);
		}
		public ColumnDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinitionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnDefinitionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnDefinitionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionListContext columnDefinitionList() {
		ColumnDefinitionListContext _localctx = new ColumnDefinitionListContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_columnDefinitionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1544; columnDefinition();
			State = 1549;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,172,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1545; Match(COMMA);
					State = 1546; columnDefinition();
					}
					} 
				}
				State = 1551;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,172,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public IdentitySpecContext identitySpec() {
			return GetRuleContext<IdentitySpecContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_columnDefinition);
		int _la;
		try {
			State = 1599;
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1552; columnName();
				State = 1553; type();
				State = 1559;
				_la = _input.La(1);
				if (_la==PRIMARY) {
					{
					State = 1554; Match(PRIMARY);
					State = 1555; Match(KEY);
					State = 1557;
					_la = _input.La(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						State = 1556; clusterType();
						}
					}

					}
				}

				State = 1562;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 1561; Match(NOT);
					}
				}

				State = 1565;
				_la = _input.La(1);
				if (_la==NULL) {
					{
					State = 1564; Match(NULL);
					}
				}

				State = 1572;
				_la = _input.La(1);
				if (_la==DEFAULT) {
					{
					State = 1567; Match(DEFAULT);
					State = 1570;
					switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
					case 1:
						{
						State = 1568; literalValue();
						}
						break;

					case 2:
						{
						State = 1569; functionCall();
						}
						break;
					}
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1574; columnName();
				State = 1575; integerType();
				State = 1581;
				_la = _input.La(1);
				if (_la==PRIMARY) {
					{
					State = 1576; Match(PRIMARY);
					State = 1577; Match(KEY);
					State = 1579;
					_la = _input.La(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						State = 1578; clusterType();
						}
					}

					}
				}

				State = 1584;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 1583; Match(NOT);
					}
				}

				State = 1587;
				_la = _input.La(1);
				if (_la==NULL) {
					{
					State = 1586; Match(NULL);
					}
				}

				State = 1590;
				_la = _input.La(1);
				if (_la==IDENTITY) {
					{
					State = 1589; identitySpec();
					}
				}

				State = 1597;
				_la = _input.La(1);
				if (_la==DEFAULT) {
					{
					State = 1592; Match(DEFAULT);
					State = 1595;
					switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
					case 1:
						{
						State = 1593; literalValue();
						}
						break;

					case 2:
						{
						State = 1594; functionCall();
						}
						break;
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeclarationOptionsContext : ParserRuleContext {
		public TableDeclarationOptionContext[] tableDeclarationOption() {
			return GetRuleContexts<TableDeclarationOptionContext>();
		}
		public TableDeclarationOptionContext tableDeclarationOption(int i) {
			return GetRuleContext<TableDeclarationOptionContext>(i);
		}
		public TableDeclarationOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeclarationOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableDeclarationOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableDeclarationOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeclarationOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeclarationOptionsContext tableDeclarationOptions() {
		TableDeclarationOptionsContext _localctx = new TableDeclarationOptionsContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_tableDeclarationOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1601; tableDeclarationOption();
			State = 1606;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,187,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1602; Match(COMMA);
					State = 1603; tableDeclarationOption();
					}
					} 
				}
				State = 1608;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,187,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeclarationOptionContext : ParserRuleContext {
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public TableDeclarationOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeclarationOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableDeclarationOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableDeclarationOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeclarationOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeclarationOptionContext tableDeclarationOption() {
		TableDeclarationOptionContext _localctx = new TableDeclarationOptionContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_tableDeclarationOption);
		int _la;
		try {
			State = 1628;
			switch (_input.La(1)) {
			case UNIQUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1609; Match(UNIQUE);
				State = 1611;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1610; clusterType();
					}
				}

				State = 1613; Match(LPAREN);
				State = 1614; columnList();
				State = 1615; Match(RPAREN);
				}
				break;
			case PRIMARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1617; Match(PRIMARY);
				State = 1618; Match(KEY);
				State = 1620;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1619; clusterType();
					}
				}

				State = 1622; Match(LPAREN);
				State = 1623; orderedIndexColumnList();
				State = 1624; Match(RPAREN);
				State = 1626;
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 1625; basicOptionList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionNameContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PartitionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPartitionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPartitionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionNameContext partitionName() {
		PartitionNameContext _localctx = new PartitionNameContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_partitionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public SetVariableToCursorContext setVariableToCursor() {
			return GetRuleContext<SetVariableToCursorContext>(0);
		}
		public SetVariableAssignmentContext setVariableAssignment() {
			return GetRuleContext<SetVariableAssignmentContext>(0);
		}
		public SetSessionOtherContext setSessionOther() {
			return GetRuleContext<SetSessionOtherContext>(0);
		}
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_setStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632; Match(SET);
			State = 1636;
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				State = 1633; setVariableAssignment();
				}
				break;

			case 2:
				{
				State = 1634; setVariableToCursor();
				}
				break;

			case 3:
				{
				State = 1635; setSessionOther();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSessionOtherContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TransactionIsolationLevelContext transactionIsolationLevel() {
			return GetRuleContext<TransactionIsolationLevelContext>(0);
		}
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSQLParser.ROWCOUNT, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSQLParser.LEVEL, 0); }
		public SetSessionParameterContext[] setSessionParameter() {
			return GetRuleContexts<SetSessionParameterContext>();
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSQLParser.ISOLATION, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public SetSessionParameterContext setSessionParameter(int i) {
			return GetRuleContext<SetSessionParameterContext>(i);
		}
		public SetSessionOtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSessionOther; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetSessionOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetSessionOther(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSessionOther(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetSessionOtherContext setSessionOther() {
		SetSessionOtherContext _localctx = new SetSessionOtherContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_setSessionOther);
		int _la;
		try {
			State = 1652;
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1638; Match(ROWCOUNT);
				State = 1639; integerValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1640; Match(TRANSACTION);
				State = 1641; Match(ISOLATION);
				State = 1642; Match(LEVEL);
				State = 1643; transactionIsolationLevel();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1645;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1644; setSessionParameter();
					}
					}
					State = 1647;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LBRACKET || _la==Identifier );
				State = 1649;
				_la = _input.La(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1651; setSessionParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSessionParameterContext : ParserRuleContext {
		public QualifiedNamePartContext[] qualifiedNamePart() {
			return GetRuleContexts<QualifiedNamePartContext>();
		}
		public QualifiedNamePartContext qualifiedNamePart(int i) {
			return GetRuleContext<QualifiedNamePartContext>(i);
		}
		public SetSessionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSessionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetSessionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetSessionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSessionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetSessionParameterContext setSessionParameter() {
		SetSessionParameterContext _localctx = new SetSessionParameterContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_setSessionParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654; qualifiedNamePart();
			State = 1663;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 1656;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1655; Match(DOT);
					}
					}
					State = 1658;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==DOT );
				State = 1660; qualifiedNamePart();
				}
				}
				State = 1665;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableAssignmentContext : ParserRuleContext {
		public PropertyOrFieldContext propertyOrField() {
			return GetRuleContext<PropertyOrFieldContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SetVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariableAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetVariableAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetVariableAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableAssignmentContext setVariableAssignment() {
		SetVariableAssignmentContext _localctx = new SetVariableAssignmentContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_setVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1666; variable();
			State = 1668;
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 1667; propertyOrField();
				}
			}

			State = 1670; assignmentOperator();
			State = 1671; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableToCursorContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(TSQLParser.EQUALS, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public PropertyOrFieldContext propertyOrField() {
			return GetRuleContext<PropertyOrFieldContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SetVariableToCursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariableToCursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetVariableToCursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetVariableToCursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariableToCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableToCursorContext setVariableToCursor() {
		SetVariableToCursorContext _localctx = new SetVariableToCursorContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_setVariableToCursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1673; variable();
			State = 1675;
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 1674; propertyOrField();
				}
			}

			State = 1677; Match(EQUALS);
			State = 1678; Match(CURSOR);
			State = 1679; Match(FOR);
			State = 1680; selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionIsolationLevelContext : ParserRuleContext {
		public TransactionIsolationLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionIsolationLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTransactionIsolationLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTransactionIsolationLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionIsolationLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionIsolationLevelContext transactionIsolationLevel() {
		TransactionIsolationLevelContext _localctx = new TransactionIsolationLevelContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_transactionIsolationLevel);
		int _la;
		try {
			State = 1688;
			switch (_input.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1682; Match(T__3);
				State = 1683;
				_la = _input.La(1);
				if ( !(_la==T__2 || _la==T__0) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1684; Match(T__6);
				State = 1685; Match(T__3);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1686; Match(T__5);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1687; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateTopContext : ParserRuleContext {
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public UpdateTopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateTop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateTop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateTop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateTopContext updateTop() {
		UpdateTopContext _localctx = new UpdateTopContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_updateTop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1690; Match(TOP);
			State = 1697;
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				State = 1691; integerValue();
				}
				break;

			case 2:
				{
				State = 1692; variable();
				}
				break;

			case 3:
				{
				State = 1693; Match(LPAREN);
				State = 1694; variable();
				State = 1695; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		public UpdateStatementSetClauseRestContext updateStatementSetClauseRest(int i) {
			return GetRuleContext<UpdateStatementSetClauseRestContext>(i);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public MoreInnerJoinContext moreInnerJoin(int i) {
			return GetRuleContext<MoreInnerJoinContext>(i);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public UpdateTopContext updateTop() {
			return GetRuleContext<UpdateTopContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public MoreInnerJoinContext[] moreInnerJoin() {
			return GetRuleContexts<MoreInnerJoinContext>();
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public UpdateStatementSetClauseRestContext[] updateStatementSetClauseRest() {
			return GetRuleContexts<UpdateStatementSetClauseRestContext>();
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_updateStatement);
		int _la;
		try {
			int _alt;
			State = 1740;
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1699; Match(UPDATE);
				State = 1701;
				switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
				case 1:
					{
					State = 1700; updateTop();
					}
					break;
				}
				State = 1703; tableTargetWithOptions();
				State = 1704; Match(SET);
				State = 1705; updateStatementSetClauseRest();
				State = 1710;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,202,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1706; Match(COMMA);
						State = 1707; updateStatementSetClauseRest();
						}
						} 
					}
					State = 1712;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,202,_ctx);
				}
				State = 1714;
				_la = _input.La(1);
				if (_la==FROM) {
					{
					State = 1713; fromClause();
					}
				}

				State = 1719;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1716; joinOrApply();
					}
					}
					State = 1721;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1725;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1722; moreInnerJoin();
					}
					}
					State = 1727;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1729;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1728; whereClause();
					}
				}

				State = 1732;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1731; dmlOptions();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1734; Match(UPDATE);
				State = 1735; Match(STATISTICS);
				State = 1736; tableTarget();
				State = 1738;
				switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					State = 1737; basicOptionList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementSetClauseRestContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(TSQLParser.EQUALS, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public UpdateStatementSetClauseRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatementSetClauseRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateStatementSetClauseRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateStatementSetClauseRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatementSetClauseRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementSetClauseRestContext updateStatementSetClauseRest() {
		UpdateStatementSetClauseRestContext _localctx = new UpdateStatementSetClauseRestContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_updateStatementSetClauseRest);
		try {
			State = 1771;
			switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1742; qualifiedColumnName();
				State = 1743; assignmentOperator();
				State = 1747;
				switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					State = 1744; expression();
					}
					break;

				case 2:
					{
					State = 1745; Match(DEFAULT);
					}
					break;

				case 3:
					{
					State = 1746; Match(NULL);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1749; variable();
				State = 1750; assignmentOperator();
				State = 1754;
				switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					State = 1751; qualifiedColumnName();
					State = 1752; Match(EQUALS);
					}
					break;
				}
				State = 1756; expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1758; qualifiedColumnName();
				State = 1759; Match(DOT);
				State = 1760; qualifiedNamePart();
				State = 1769;
				switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					State = 1761; Match(EQUALS);
					State = 1762; expression();
					}
					break;

				case 2:
					{
					State = 1763; Match(LPAREN);
					State = 1764; Match(RPAREN);
					}
					break;

				case 3:
					{
					State = 1765; Match(LPAREN);
					State = 1766; argumentList();
					State = 1767; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_argument);
		try {
			State = 1776;
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1773; expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1774; tempTable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1775; type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1778; argument();
			State = 1783;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1779; Match(COMMA);
				State = 1780; argument();
				}
				}
				State = 1785;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputeStatementContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMPUTE() { return GetToken(TSQLParser.COMPUTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public ComputeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterComputeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitComputeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputeStatementContext computeStatement() {
		ComputeStatementContext _localctx = new ComputeStatementContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_computeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786; Match(COMPUTE);
			State = 1787; expression();
			State = 1792;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1788; Match(COMMA);
				State = 1789; expression();
				}
				}
				State = 1794;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1804;
			_la = _input.La(1);
			if (_la==BY) {
				{
				State = 1795; Match(BY);
				State = 1796; expression();
				State = 1801;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1797; Match(COMMA);
					State = 1798; expression();
					}
					}
					State = 1803;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public ITerminalNode[] UNION() { return GetTokens(TSQLParser.UNION); }
		public ITerminalNode INTERSECT(int i) {
			return GetToken(TSQLParser.INTERSECT, i);
		}
		public ITerminalNode[] INTERSECT() { return GetTokens(TSQLParser.INTERSECT); }
		public ITerminalNode UNION(int i) {
			return GetToken(TSQLParser.UNION, i);
		}
		public ITerminalNode EXCEPT(int i) {
			return GetToken(TSQLParser.EXCEPT, i);
		}
		public ITerminalNode ALL(int i) {
			return GetToken(TSQLParser.ALL, i);
		}
		public SelectStatementPartContext[] selectStatementPart() {
			return GetRuleContexts<SelectStatementPartContext>();
		}
		public SelectStatementPartContext selectStatementPart(int i) {
			return GetRuleContext<SelectStatementPartContext>(i);
		}
		public ITerminalNode[] EXCEPT() { return GetTokens(TSQLParser.EXCEPT); }
		public ITerminalNode[] ALL() { return GetTokens(TSQLParser.ALL); }
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_selectStatement);
		int _la;
		try {
			State = 1825;
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1806; selectStatementPart();
				State = 1814;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==UNION) {
					{
					{
					State = 1807; Match(UNION);
					State = 1809;
					_la = _input.La(1);
					if (_la==ALL) {
						{
						State = 1808; Match(ALL);
						}
					}

					State = 1811; selectStatementPart();
					}
					}
					State = 1816;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1817; selectStatementPart();
				State = 1822;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==INTERSECT || _la==EXCEPT) {
					{
					{
					State = 1818;
					_la = _input.La(1);
					if ( !(_la==INTERSECT || _la==EXCEPT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 1819; selectStatementPart();
					}
					}
					State = 1824;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementPartContext : ParserRuleContext {
		public MoreInnerJoinContext moreInnerJoin(int i) {
			return GetRuleContext<MoreInnerJoinContext>(i);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public MoreInnerJoinContext[] moreInnerJoin() {
			return GetRuleContexts<MoreInnerJoinContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public ForXmlClauseContext forXmlClause() {
			return GetRuleContext<ForXmlClauseContext>(0);
		}
		public SelectTopLimitContext selectTopLimit() {
			return GetRuleContext<SelectTopLimitContext>(0);
		}
		public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ITerminalNode SELECT() { return GetToken(TSQLParser.SELECT, 0); }
		public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public XmlWithOptionContext xmlWithOption() {
			return GetRuleContext<XmlWithOptionContext>(0);
		}
		public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public SelectStatementPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatementPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectStatementPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectStatementPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatementPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementPartContext selectStatementPart() {
		SelectStatementPartContext _localctx = new SelectStatementPartContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_selectStatementPart);
		int _la;
		try {
			State = 1875;
			switch (_input.La(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1827; Match(SELECT);
				State = 1829;
				switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
				case 1:
					{
					State = 1828; selectTopLimit();
					}
					break;
				}
				State = 1831; selectList();
				State = 1833;
				_la = _input.La(1);
				if (_la==INTO) {
					{
					State = 1832; intoClause();
					}
				}

				State = 1836;
				_la = _input.La(1);
				if (_la==FROM) {
					{
					State = 1835; fromClause();
					}
				}

				State = 1839;
				switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
				case 1:
					{
					State = 1838; xmlWithOption();
					}
					break;
				}
				State = 1844;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1841; joinOrApply();
					}
					}
					State = 1846;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1850;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1847; moreInnerJoin();
					}
					}
					State = 1852;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1854;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1853; whereClause();
					}
				}

				State = 1857;
				_la = _input.La(1);
				if (_la==GROUP) {
					{
					State = 1856; groupByClause();
					}
				}

				State = 1860;
				_la = _input.La(1);
				if (_la==HAVING) {
					{
					State = 1859; havingClause();
					}
				}

				State = 1863;
				_la = _input.La(1);
				if (_la==ORDER) {
					{
					State = 1862; orderByClause();
					}
				}

				State = 1866;
				switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
				case 1:
					{
					State = 1865; dmlOptions();
					}
					break;
				}
				State = 1869;
				switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
				case 1:
					{
					State = 1868; forXmlClause();
					}
					break;
				}
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1871; Match(LPAREN);
				State = 1872; selectStatement();
				State = 1873; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlWithOptionContext : ParserRuleContext {
		public QualifiedNameContext Alias;
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public XmlDefinitionListContext xmlDefinitionList() {
			return GetRuleContext<XmlDefinitionListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public XmlWithOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlWithOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlWithOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlWithOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlWithOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlWithOptionContext xmlWithOption() {
		XmlWithOptionContext _localctx = new XmlWithOptionContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_xmlWithOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1877; Match(WITH);
			State = 1878; Match(LPAREN);
			State = 1879; xmlDefinitionList();
			State = 1880; Match(RPAREN);
			State = 1882;
			switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				State = 1881; _localctx.Alias = qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlDefinitionListContext : ParserRuleContext {
		public XmlDefinitionContext xmlDefinition(int i) {
			return GetRuleContext<XmlDefinitionContext>(i);
		}
		public XmlDefinitionContext[] xmlDefinition() {
			return GetRuleContexts<XmlDefinitionContext>();
		}
		public XmlDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlDefinitionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlDefinitionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlDefinitionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlDefinitionListContext xmlDefinitionList() {
		XmlDefinitionListContext _localctx = new XmlDefinitionListContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_xmlDefinitionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1884; xmlDefinition();
			State = 1889;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1885; Match(COMMA);
				State = 1886; xmlDefinition();
				}
				}
				State = 1891;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlDefinitionContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public XmlDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlDefinitionContext xmlDefinition() {
		XmlDefinitionContext _localctx = new XmlDefinitionContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_xmlDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1892; columnName();
			State = 1893; type();
			State = 1896;
			switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				State = 1894; literalValue();
				}
				break;

			case 2:
				{
				State = 1895; functionCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForXmlClauseContext : ParserRuleContext {
		public ITerminalNode PATH() { return GetToken(TSQLParser.PATH, 0); }
		public ITerminalNode RAW() { return GetToken(TSQLParser.RAW, 0); }
		public ITerminalNode AUTO() { return GetToken(TSQLParser.AUTO, 0); }
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSQLParser.EXPLICIT, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public ForXmlClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forXmlClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterForXmlClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitForXmlClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForXmlClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForXmlClauseContext forXmlClause() {
		ForXmlClauseContext _localctx = new ForXmlClauseContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_forXmlClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898; Match(FOR);
			State = 1899; Match(XML);
			State = 1909;
			switch (_input.La(1)) {
			case AUTO:
				{
				State = 1900; Match(AUTO);
				}
				break;
			case RAW:
				{
				State = 1901; Match(RAW);
				}
				break;
			case EXPLICIT:
				{
				State = 1902; Match(EXPLICIT);
				}
				break;
			case PATH:
				{
				State = 1903; Match(PATH);
				State = 1904; Match(LPAREN);
				State = 1906;
				_la = _input.La(1);
				if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
					{
					State = 1905; argumentList();
					}
				}

				State = 1908; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTopLimitContext : ParserRuleContext {
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SelectTopLimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTopLimit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectTopLimit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectTopLimit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTopLimit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTopLimitContext selectTopLimit() {
		SelectTopLimitContext _localctx = new SelectTopLimitContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_selectTopLimit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1912;
			_la = _input.La(1);
			if (_la==DISTINCT) {
				{
				State = 1911; Match(DISTINCT);
				}
			}

			State = 1914; Match(TOP);
			State = 1924;
			switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				State = 1915; integerValue();
				State = 1917;
				_la = _input.La(1);
				if (_la==T__7) {
					{
					State = 1916; Match(T__7);
					}
				}

				}
				break;

			case 2:
				{
				State = 1919; variable();
				}
				break;

			case 3:
				{
				State = 1920; Match(LPAREN);
				State = 1921; variable();
				State = 1922; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectVariableAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SelectVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectVariableAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectVariableAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectVariableAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectVariableAssignmentContext selectVariableAssignment() {
		SelectVariableAssignmentContext _localctx = new SelectVariableAssignmentContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_selectVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1926; variable();
			State = 1927;
			_la = _input.La(1);
			if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (ADD_ASSIGN - 172)) | (1L << (SUB_ASSIGN - 172)) | (1L << (MUL_ASSIGN - 172)) | (1L << (DIV_ASSIGN - 172)) | (1L << (AND_ASSIGN - 172)) | (1L << (OR_ASSIGN - 172)) | (1L << (XOR_ASSIGN - 172)) | (1L << (MOD_ASSIGN - 172)) | (1L << (EQUALS - 172)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1928; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		public SelectListElementContext[] selectListElement() {
			return GetRuleContexts<SelectListElementContext>();
		}
		public SelectListElementContext selectListElement(int i) {
			return GetRuleContext<SelectListElementContext>(i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_selectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1930; selectListElement();
			State = 1935;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,244,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1931; Match(COMMA);
					State = 1932; selectListElement();
					}
					} 
				}
				State = 1937;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,244,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListElementContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(TSQLParser.DOT, 0); }
		public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ColumnAliasContext columnAlias() {
			return GetRuleContext<ColumnAliasContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(TSQLParser.STAR, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SelectListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListElementContext selectListElement() {
		SelectListElementContext _localctx = new SelectListElementContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_selectListElement);
		int _la;
		try {
			State = 1971;
			switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1939;
				switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					State = 1938; Match(DISTINCT);
					}
					break;
				}
				State = 1956;
				switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					State = 1941; expression();
					State = 1943;
					switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
					case 1:
						{
						State = 1942; overClause();
						}
						break;
					}
					State = 1949;
					switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
					case 1:
						{
						State = 1946;
						_la = _input.La(1);
						if (_la==AS) {
							{
							State = 1945; Match(AS);
							}
						}

						State = 1948; columnAlias();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 1951; qualifiedName();
					State = 1952; Match(DOT);
					State = 1953; Match(STAR);
					}
					break;

				case 3:
					{
					State = 1955; Match(STAR);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1958; variable();
				State = 1959;
				_la = _input.La(1);
				if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (ADD_ASSIGN - 172)) | (1L << (SUB_ASSIGN - 172)) | (1L << (MUL_ASSIGN - 172)) | (1L << (DIV_ASSIGN - 172)) | (1L << (AND_ASSIGN - 172)) | (1L << (OR_ASSIGN - 172)) | (1L << (XOR_ASSIGN - 172)) | (1L << (MOD_ASSIGN - 172)) | (1L << (EQUALS - 172)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1960; expression();
				State = 1965;
				switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					State = 1962;
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1961; Match(AS);
						}
					}

					State = 1964; columnAlias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1967; qualifiedColumnName();
				{
				State = 1968; Match(EQUALS);
				}
				State = 1969; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlOptionsContext : ParserRuleContext {
		public DmlOptionContext dmlOption(int i) {
			return GetRuleContext<DmlOptionContext>(i);
		}
		public DmlOptionContext[] dmlOption() {
			return GetRuleContexts<DmlOptionContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode OPTION() { return GetToken(TSQLParser.OPTION, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public DmlOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDmlOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDmlOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlOptionsContext dmlOptions() {
		DmlOptionsContext _localctx = new DmlOptionsContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_dmlOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1973; Match(OPTION);
			State = 1974; Match(LPAREN);
			State = 1975; dmlOption();
			State = 1980;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1976; Match(COMMA);
				State = 1977; dmlOption();
				}
				}
				State = 1982;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1983; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlOptionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSQLParser.OPTIMIZE, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DmlOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDmlOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDmlOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlOptionContext dmlOption() {
		DmlOptionContext _localctx = new DmlOptionContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_dmlOption);
		int _la;
		try {
			State = 1998;
			switch (_input.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1985; Match(Identifier);
				State = 1987;
				_la = _input.La(1);
				if (_la==NULL || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (LPAREN - 181)) | (1L << (PLUS - 181)) | (1L << (MINUS - 181)) | (1L << (FloatingPointLiteral - 181)) | (1L << (StringLiteral - 181)) | (1L << (IntegerLiteral - 181)))) != 0)) {
					{
					State = 1986; literalValue();
					}
				}

				}
				break;
			case OPTIMIZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1989; Match(OPTIMIZE);
				State = 1990; Match(FOR);
				State = 1991; Match(LPAREN);
				{
				State = 1992; variable();
				State = 1993; Match(EQUALS);
				State = 1994; literalValue();
				}
				State = 1996; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverClauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(TSQLParser.OVER, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSQLParser.PARTITION); }
		public ITerminalNode ORDER(int i) {
			return GetToken(TSQLParser.ORDER, i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSQLParser.PARTITION, i);
		}
		public OrderByElementContext[] orderByElement() {
			return GetRuleContexts<OrderByElementContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode[] ORDER() { return GetTokens(TSQLParser.ORDER); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public OrderByElementContext orderByElement(int i) {
			return GetRuleContext<OrderByElementContext>(i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSQLParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSQLParser.BY, i);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOverClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOverClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverClauseContext overClause() {
		OverClauseContext _localctx = new OverClauseContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_overClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2000; Match(OVER);
			State = 2001; Match(LPAREN);
			State = 2022;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 2022;
				switch (_input.La(1)) {
				case PARTITION:
					{
					State = 2002; Match(PARTITION);
					State = 2003; Match(BY);
					State = 2004; expression();
					State = 2009;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2005; Match(COMMA);
						State = 2006; expression();
						}
						}
						State = 2011;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				case ORDER:
					{
					State = 2012; Match(ORDER);
					State = 2013; Match(BY);
					State = 2014; orderByElement();
					State = 2019;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2015; Match(COMMA);
						State = 2016; orderByElement();
						}
						}
						State = 2021;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2024;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PARTITION || _la==ORDER );
			State = 2026; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntoClauseContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public IntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntoClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntoClauseContext intoClause() {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_intoClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2028; Match(INTO);
			State = 2029; tableTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_fromClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2031; Match(FROM);
			State = 2032; tableSourceWithOptions();
			State = 2037;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,260,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2033; Match(COMMA);
					State = 2034; tableSourceWithOptions();
					}
					} 
				}
				State = 2039;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,260,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreInnerJoinContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public MoreInnerJoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreInnerJoin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMoreInnerJoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMoreInnerJoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreInnerJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreInnerJoinContext moreInnerJoin() {
		MoreInnerJoinContext _localctx = new MoreInnerJoinContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_moreInnerJoin);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2042;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2040; Match(COMMA);
					State = 2041; tableSourceWithOptions();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2044;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,261,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		public GroupByElementContext[] groupByElement() {
			return GetRuleContexts<GroupByElementContext>();
		}
		public ITerminalNode GROUP() { return GetToken(TSQLParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public GroupByElementContext groupByElement(int i) {
			return GetRuleContext<GroupByElementContext>(i);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_groupByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2046; Match(GROUP);
			State = 2047; Match(BY);
			State = 2048; groupByElement();
			State = 2053;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2049; Match(COMMA);
				State = 2050; groupByElement();
				}
				}
				State = 2055;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByElementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColumnIndexOrNameContext columnIndexOrName() {
			return GetRuleContext<ColumnIndexOrNameContext>(0);
		}
		public GroupByElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterGroupByElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitGroupByElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByElementContext groupByElement() {
		GroupByElementContext _localctx = new GroupByElementContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_groupByElement);
		try {
			State = 2058;
			switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2056; columnIndexOrName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2057; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public ITerminalNode HAVING() { return GetToken(TSQLParser.HAVING, 0); }
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2060; Match(HAVING);
			State = 2061; predicateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinOrApplyContext : ParserRuleContext {
		public PredicateListContext[] predicateList() {
			return GetRuleContexts<PredicateListContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions() {
			return GetRuleContext<TableSourceWithOptionsContext>(0);
		}
		public ITerminalNode[] ON() { return GetTokens(TSQLParser.ON); }
		public PredicateListContext predicateList(int i) {
			return GetRuleContext<PredicateListContext>(i);
		}
		public ITerminalNode ON(int i) {
			return GetToken(TSQLParser.ON, i);
		}
		public ITerminalNode APPLY() { return GetToken(TSQLParser.APPLY, 0); }
		public JoinTypeContext joinType() {
			return GetRuleContext<JoinTypeContext>(0);
		}
		public ITerminalNode JOIN() { return GetToken(TSQLParser.JOIN, 0); }
		public JoinOrApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinOrApply; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterJoinOrApply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitJoinOrApply(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinOrApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinOrApplyContext joinOrApply() {
		JoinOrApplyContext _localctx = new JoinOrApplyContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_joinOrApply);
		int _la;
		try {
			State = 2080;
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2064;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0)) {
					{
					State = 2063; joinType();
					}
				}

				State = 2066; Match(JOIN);
				State = 2067; tableSourceWithOptions();
				State = 2072;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ON) {
					{
					{
					State = 2068; Match(ON);
					State = 2069; predicateList();
					}
					}
					State = 2074;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2076;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0)) {
					{
					State = 2075; joinType();
					}
				}

				State = 2078; Match(APPLY);
				State = 2079; tableSourceWithOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinTypeContext : ParserRuleContext {
		public ITerminalNode LEFT() { return GetToken(TSQLParser.LEFT, 0); }
		public ITerminalNode OUTER() { return GetToken(TSQLParser.OUTER, 0); }
		public ITerminalNode INNER() { return GetToken(TSQLParser.INNER, 0); }
		public ITerminalNode CROSS() { return GetToken(TSQLParser.CROSS, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSQLParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(TSQLParser.FULL, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterJoinType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitJoinType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinTypeContext joinType() {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_joinType);
		try {
			State = 2094;
			switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2082; Match(LEFT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2083; Match(RIGHT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2084; Match(OUTER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2085; Match(INNER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2086; Match(CROSS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2087; Match(FULL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2088; Match(FULL);
				State = 2089; Match(OUTER);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2090; Match(LEFT);
				State = 2091; Match(OUTER);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2092; Match(RIGHT);
				State = 2093; Match(OUTER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSQLParser.WHERE, 0); }
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2096; Match(WHERE);
			State = 2097; predicateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		public OrderByElementContext[] orderByElement() {
			return GetRuleContexts<OrderByElementContext>();
		}
		public ITerminalNode ORDER() { return GetToken(TSQLParser.ORDER, 0); }
		public OrderByElementContext orderByElement(int i) {
			return GetRuleContext<OrderByElementContext>(i);
		}
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_orderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2099; Match(ORDER);
			State = 2100; Match(BY);
			State = 2101; orderByElement();
			State = 2106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2102; Match(COMMA);
				State = 2103; orderByElement();
				}
				}
				State = 2108;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByElementContext : ParserRuleContext {
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColumnIndexOrNameContext columnIndexOrName() {
			return GetRuleContext<ColumnIndexOrNameContext>(0);
		}
		public OrderByElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderByElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderByElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByElementContext orderByElement() {
		OrderByElementContext _localctx = new OrderByElementContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_orderByElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2111;
			switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				State = 2109; columnIndexOrName();
				}
				break;

			case 2:
				{
				State = 2110; expression();
				}
				break;
			}
			State = 2114;
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 2113;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeStatementContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSQLParser.TARGET, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSQLParser.NOT); }
		public MergeNotMatchedContext mergeNotMatched(int i) {
			return GetRuleContext<MergeNotMatchedContext>(i);
		}
		public ITerminalNode[] SOURCE() { return GetTokens(TSQLParser.SOURCE); }
		public PredicateListContext predicateList(int i) {
			return GetRuleContext<PredicateListContext>(i);
		}
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode INTO(int i) {
			return GetToken(TSQLParser.INTO, i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSQLParser.AND); }
		public ITerminalNode[] TARGET() { return GetTokens(TSQLParser.TARGET); }
		public ITerminalNode[] BY() { return GetTokens(TSQLParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSQLParser.BY, i);
		}
		public PredicateListContext[] predicateList() {
			return GetRuleContexts<PredicateListContext>();
		}
		public ITerminalNode MATCHED(int i) {
			return GetToken(TSQLParser.MATCHED, i);
		}
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode AND(int i) {
			return GetToken(TSQLParser.AND, i);
		}
		public ITerminalNode[] THEN() { return GetTokens(TSQLParser.THEN); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSQLParser.USING, 0); }
		public MergeMatchedContext[] mergeMatched() {
			return GetRuleContexts<MergeMatchedContext>();
		}
		public ITerminalNode[] INTO() { return GetTokens(TSQLParser.INTO); }
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public ITerminalNode[] MATCHED() { return GetTokens(TSQLParser.MATCHED); }
		public ITerminalNode[] WHEN() { return GetTokens(TSQLParser.WHEN); }
		public ITerminalNode SOURCE(int i) {
			return GetToken(TSQLParser.SOURCE, i);
		}
		public MergeNotMatchedContext[] mergeNotMatched() {
			return GetRuleContexts<MergeNotMatchedContext>();
		}
		public MergeMatchedContext mergeMatched(int i) {
			return GetRuleContext<MergeMatchedContext>(i);
		}
		public ITerminalNode NOT(int i) {
			return GetToken(TSQLParser.NOT, i);
		}
		public ITerminalNode WHEN(int i) {
			return GetToken(TSQLParser.WHEN, i);
		}
		public ITerminalNode THEN(int i) {
			return GetToken(TSQLParser.THEN, i);
		}
		public MergeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeStatementContext mergeStatement() {
		MergeStatementContext _localctx = new MergeStatementContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_mergeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2116; Match(MERGE);
			State = 2118;
			switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				State = 2117; Match(INTO);
				}
				break;
			}
			State = 2120; tableTarget();
			State = 2121; Match(USING);
			State = 2122; tableSource();
			State = 2123; Match(ON);
			State = 2124; predicateList();
			State = 2157;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 2157;
				switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					State = 2125; Match(WHEN);
					State = 2126; Match(MATCHED);
					State = 2129;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2127; Match(AND);
						State = 2128; predicateList();
						}
					}

					State = 2131; Match(THEN);
					State = 2132; mergeMatched();
					}
					break;

				case 2:
					{
					State = 2133; Match(WHEN);
					State = 2134; Match(NOT);
					State = 2135; Match(MATCHED);
					State = 2138;
					_la = _input.La(1);
					if (_la==BY) {
						{
						State = 2136; Match(BY);
						State = 2137; Match(TARGET);
						}
					}

					State = 2142;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2140; Match(AND);
						State = 2141; predicateList();
						}
					}

					State = 2144; Match(THEN);
					State = 2145; mergeNotMatched();
					}
					break;

				case 3:
					{
					State = 2146; Match(WHEN);
					State = 2147; Match(NOT);
					State = 2148; Match(MATCHED);
					State = 2149; Match(BY);
					State = 2150; Match(SOURCE);
					State = 2153;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2151; Match(AND);
						State = 2152; predicateList();
						}
					}

					State = 2155; Match(THEN);
					State = 2156; mergeMatched();
					}
					break;
				}
				}
				State = 2159;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==WHEN );
			State = 2166;
			_la = _input.La(1);
			if (_la==OUTPUT) {
				{
				State = 2161; Match(OUTPUT);
				State = 2162; selectList();
				State = 2163; Match(INTO);
				State = 2164; tableTargetWithOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeMatchedContext : ParserRuleContext {
		public UpdateStatementSetClauseRestContext updateStatementSetClauseRest(int i) {
			return GetRuleContext<UpdateStatementSetClauseRestContext>(i);
		}
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public UpdateStatementSetClauseRestContext[] updateStatementSetClauseRest() {
			return GetRuleContexts<UpdateStatementSetClauseRestContext>();
		}
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public MergeMatchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeMatched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeMatched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeMatched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeMatched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeMatchedContext mergeMatched() {
		MergeMatchedContext _localctx = new MergeMatchedContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_mergeMatched);
		int _la;
		try {
			State = 2179;
			switch (_input.La(1)) {
			case UPDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2168; Match(UPDATE);
				State = 2169; Match(SET);
				State = 2170; updateStatementSetClauseRest();
				State = 2175;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2171; Match(COMMA);
					State = 2172; updateStatementSetClauseRest();
					}
					}
					State = 2177;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2178; Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeNotMatchedContext : ParserRuleContext {
		public InsertValueListContext insertValueList(int i) {
			return GetRuleContext<InsertValueListContext>(i);
		}
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public InsertValueListContext[] insertValueList() {
			return GetRuleContexts<InsertValueListContext>();
		}
		public MergeNotMatchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeNotMatched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeNotMatched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeNotMatched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeNotMatched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeNotMatchedContext mergeNotMatched() {
		MergeNotMatchedContext _localctx = new MergeNotMatchedContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_mergeNotMatched);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2181; Match(INSERT);
			State = 2186;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 2182; Match(LPAREN);
				State = 2183; qualifiedNameList();
				State = 2184; Match(RPAREN);
				}
			}

			State = 2188; Match(VALUES);
			State = 2189; insertValueList();
			State = 2194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2190; Match(COMMA);
				State = 2191; insertValueList();
				}
				}
				State = 2196;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetWithOptionsContext : ParserRuleContext {
		public TableTargetOptionsContext tableTargetOptions() {
			return GetRuleContext<TableTargetOptionsContext>(0);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public TableTargetWithOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTargetWithOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTargetWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTargetWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTargetWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetWithOptionsContext tableTargetWithOptions() {
		TableTargetWithOptionsContext _localctx = new TableTargetWithOptionsContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_tableTargetWithOptions);
		int _la;
		try {
			State = 2211;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2197; tableTarget();
				State = 2199;
				switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					State = 2198; tableTargetOptions();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2201; tableTarget();
				State = 2203;
				switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					State = 2202; tableTargetOptions();
					}
					break;
				}
				State = 2209;
				switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					State = 2206;
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 2205; Match(AS);
						}
					}

					State = 2208; tableAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public TableTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetContext tableTarget() {
		TableTargetContext _localctx = new TableTargetContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_tableTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2216;
			switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
			case 1:
				{
				State = 2213; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2214; variable();
				}
				break;

			case 3:
				{
				State = 2215; tempTable();
				}
				break;
			}
			State = 2222;
			switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
			case 1:
				{
				State = 2219;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2218; Match(AS);
					}
				}

				State = 2221; tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetOptionsContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public TableTargetOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTargetOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTargetOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTargetOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTargetOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetOptionsContext tableTargetOptions() {
		TableTargetOptionsContext _localctx = new TableTargetOptionsContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_tableTargetOptions);
		try {
			State = 2230;
			switch ( Interpreter.AdaptivePredict(_input,292,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2224; Match(WITH);
				State = 2225; Match(LPAREN);
				State = 2226; Match(Identifier);
				State = 2227; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2228; Match(WITH);
				State = 2229; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceWithOptionsContext : ParserRuleContext {
		public TableSourceOptionsContext tableSourceOptions() {
			return GetRuleContext<TableSourceOptionsContext>(0);
		}
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public TableSourceWithOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceWithOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSourceWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSourceWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceWithOptionsContext tableSourceWithOptions() {
		TableSourceWithOptionsContext _localctx = new TableSourceWithOptionsContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_tableSourceWithOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2232; tableSource();
			State = 2234;
			switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				State = 2233; tableSourceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public XmlDefinitionListContext xmlDefinitionList() {
			return GetRuleContext<XmlDefinitionListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_tableSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2260;
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 2236; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2237; variable();
				State = 2240;
				_la = _input.La(1);
				if (_la==DOT) {
					{
					State = 2238; Match(DOT);
					State = 2239; functionCall();
					}
				}

				}
				break;

			case 3:
				{
				State = 2242; tempTable();
				State = 2245;
				_la = _input.La(1);
				if (_la==DOT) {
					{
					State = 2243; Match(DOT);
					State = 2244; functionCall();
					}
				}

				}
				break;

			case 4:
				{
				State = 2247; Match(LPAREN);
				State = 2248; selectStatement();
				State = 2249; Match(RPAREN);
				}
				break;

			case 5:
				{
				State = 2251; executeStatement();
				}
				break;

			case 6:
				{
				State = 2252; functionCall();
				State = 2258;
				switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					State = 2253; Match(WITH);
					State = 2254; Match(LPAREN);
					State = 2255; xmlDefinitionList();
					State = 2256; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			State = 2266;
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				State = 2263;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2262; Match(AS);
					}
				}

				State = 2265; tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceOptionsContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public TableSourceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSourceOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSourceOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceOptionsContext tableSourceOptions() {
		TableSourceOptionsContext _localctx = new TableSourceOptionsContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_tableSourceOptions);
		try {
			State = 2275;
			switch (_input.La(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2268; Match(WITH);
				State = 2269; Match(LPAREN);
				State = 2270; Match(Identifier);
				State = 2271; Match(RPAREN);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2272; Match(LPAREN);
				State = 2273; Match(Identifier);
				State = 2274; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasContext tableAlias() {
		TableAliasContext _localctx = new TableAliasContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_tableAlias);
		try {
			State = 2279;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2277; qualifiedNamePart();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2278; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2283;
			switch ( Interpreter.AdaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				State = 2281; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2282; keyword();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285; functionName();
			State = 2286; Match(LPAREN);
			State = 2288;
			_la = _input.La(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
				{
				State = 2287; argumentList();
				}
			}

			State = 2290; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ExecuteArgumentListContext executeArgumentList() {
			return GetRuleContext<ExecuteArgumentListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ITerminalNode EXECUTE() { return GetToken(TSQLParser.EXECUTE, 0); }
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_executeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2292; Match(EXECUTE);
			State = 2301;
			switch (_input.La(1)) {
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				{
				State = 2293; qualifiedName();
				State = 2295;
				switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					State = 2294; executeArgumentList();
					}
					break;
				}
				}
				break;
			case LPAREN:
				{
				State = 2297; Match(LPAREN);
				State = 2298; expression();
				State = 2299; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2304;
			switch ( Interpreter.AdaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				State = 2303; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteArgumentListContext : ParserRuleContext {
		public ExecuteArgumentContext executeArgument(int i) {
			return GetRuleContext<ExecuteArgumentContext>(i);
		}
		public ExecuteArgumentContext[] executeArgument() {
			return GetRuleContexts<ExecuteArgumentContext>();
		}
		public ExecuteArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteArgumentListContext executeArgumentList() {
		ExecuteArgumentListContext _localctx = new ExecuteArgumentListContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_executeArgumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2306; executeArgument();
			State = 2311;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,307,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2307; Match(COMMA);
					State = 2308; executeArgument();
					}
					} 
				}
				State = 2313;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,307,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteArgumentContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(TSQLParser.EQUALS, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ExecuteArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteArgumentContext executeArgument() {
		ExecuteArgumentContext _localctx = new ExecuteArgumentContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_executeArgument);
		int _la;
		try {
			State = 2323;
			switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2314; variable();
				State = 2315; Match(EQUALS);
				State = 2317;
				switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					State = 2316; expression();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2319; expression();
				State = 2321;
				switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					State = 2320;
					_la = _input.La(1);
					if ( !(_la==OUTPUT || _la==OUT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterStringTypeLengthContext : ParserRuleContext {
		public ITerminalNode MAX() { return GetToken(TSQLParser.MAX, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public CharacterStringTypeLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterStringTypeLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCharacterStringTypeLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCharacterStringTypeLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterStringTypeLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterStringTypeLengthContext characterStringTypeLength() {
		CharacterStringTypeLengthContext _localctx = new CharacterStringTypeLengthContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_characterStringTypeLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2325; Match(LPAREN);
			State = 2328;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 2326; integerValue();
				}
				break;
			case MAX:
				{
				State = 2327; Match(MAX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2330; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterStringTypeContext : ParserRuleContext {
		public ITerminalNode NVARCHAR() { return GetToken(TSQLParser.NVARCHAR, 0); }
		public ITerminalNode VARYING() { return GetToken(TSQLParser.VARYING, 0); }
		public ITerminalNode CHARACTER() { return GetToken(TSQLParser.CHARACTER, 0); }
		public ITerminalNode CHAR() { return GetToken(TSQLParser.CHAR, 0); }
		public CharacterStringTypeLengthContext characterStringTypeLength() {
			return GetRuleContext<CharacterStringTypeLengthContext>(0);
		}
		public ITerminalNode NCHAR() { return GetToken(TSQLParser.NCHAR, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSQLParser.VARCHAR, 0); }
		public CharacterStringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterStringType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCharacterStringType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCharacterStringType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterStringType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterStringTypeContext characterStringType() {
		CharacterStringTypeContext _localctx = new CharacterStringTypeContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_characterStringType);
		int _la;
		try {
			State = 2341;
			switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2332;
				_la = _input.La(1);
				if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (CHAR - 125)) | (1L << (CHARACTER - 125)) | (1L << (NCHAR - 125)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2334;
				switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					State = 2333; characterStringTypeLength();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2336;
				_la = _input.La(1);
				if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (CHAR - 125)) | (1L << (CHARACTER - 125)) | (1L << (NCHAR - 125)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2337; Match(VARYING);
				State = 2338; characterStringTypeLength();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2339;
				_la = _input.La(1);
				if ( !(_la==VARCHAR || _la==NVARCHAR) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2340; characterStringTypeLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public IToken Scale;
		public IToken Precision;
		public ITerminalNode DECIMAL() { return GetToken(TSQLParser.DECIMAL, 0); }
		public ITerminalNode NUMERIC() { return GetToken(TSQLParser.NUMERIC, 0); }
		public ITerminalNode[] IntegerLiteral() { return GetTokens(TSQLParser.IntegerLiteral); }
		public ITerminalNode IntegerLiteral(int i) {
			return GetToken(TSQLParser.IntegerLiteral, i);
		}
		public ITerminalNode FLOAT() { return GetToken(TSQLParser.FLOAT, 0); }
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_numericType);
		int _la;
		try {
			State = 2354;
			switch (_input.La(1)) {
			case DECIMAL:
			case NUMERIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2343;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==NUMERIC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2351;
				switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					State = 2344; Match(LPAREN);
					State = 2345; _localctx.Scale = Match(IntegerLiteral);
					State = 2348;
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 2346; Match(COMMA);
						State = 2347; _localctx.Precision = Match(IntegerLiteral);
						}
					}

					State = 2350; Match(RPAREN);
					}
					break;
				}
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2353; Match(FLOAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		public ITerminalNode SMALLINT() { return GetToken(TSQLParser.SMALLINT, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSQLParser.BIGINT, 0); }
		public ITerminalNode INT() { return GetToken(TSQLParser.INT, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSQLParser.TINYINT, 0); }
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_integerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2356;
			_la = _input.La(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentityTypeContext : ParserRuleContext {
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public IdentitySpecContext identitySpec() {
			return GetRuleContext<IdentitySpecContext>(0);
		}
		public IdentityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identityType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIdentityType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIdentityType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityTypeContext identityType() {
		IdentityTypeContext _localctx = new IdentityTypeContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_identityType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2359;
			_la = _input.La(1);
			if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)))) != 0)) {
				{
				State = 2358; integerType();
				}
			}

			State = 2361; identitySpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentitySpecContext : ParserRuleContext {
		public IntegerValueContext Seed;
		public IntegerValueContext Increment;
		public IntegerValueContext integerValue(int i) {
			return GetRuleContext<IntegerValueContext>(i);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSQLParser.IDENTITY, 0); }
		public IntegerValueContext[] integerValue() {
			return GetRuleContexts<IntegerValueContext>();
		}
		public IdentitySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identitySpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIdentitySpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIdentitySpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentitySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentitySpecContext identitySpec() {
		IdentitySpecContext _localctx = new IdentitySpecContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_identitySpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363; Match(IDENTITY);
			State = 2372;
			switch ( Interpreter.AdaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				State = 2364; Match(LPAREN);
				State = 2365; _localctx.Seed = integerValue();
				State = 2368;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 2366; Match(COMMA);
					State = 2367; _localctx.Increment = integerValue();
					}
				}

				State = 2370; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyOrFieldContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public PropertyOrFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyOrField; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPropertyOrField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPropertyOrField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyOrField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyOrFieldContext propertyOrField() {
		PropertyOrFieldContext _localctx = new PropertyOrFieldContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_propertyOrField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2374; Match(DOT);
			State = 2375; qualifiedNamePart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2377;
			_la = _input.La(1);
			if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (ADD_ASSIGN - 172)) | (1L << (SUB_ASSIGN - 172)) | (1L << (MUL_ASSIGN - 172)) | (1L << (DIV_ASSIGN - 172)) | (1L << (AND_ASSIGN - 172)) | (1L << (OR_ASSIGN - 172)) | (1L << (XOR_ASSIGN - 172)) | (1L << (MOD_ASSIGN - 172)) | (1L << (EQUALS - 172)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedColumnNameListContext : ParserRuleContext {
		public QualifiedColumnNameContext qualifiedColumnName(int i) {
			return GetRuleContext<QualifiedColumnNameContext>(i);
		}
		public QualifiedColumnNameContext[] qualifiedColumnName() {
			return GetRuleContexts<QualifiedColumnNameContext>();
		}
		public QualifiedColumnNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedColumnNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedColumnNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedColumnNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedColumnNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedColumnNameListContext qualifiedColumnNameList() {
		QualifiedColumnNameListContext _localctx = new QualifiedColumnNameListContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_qualifiedColumnNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2379; qualifiedColumnName();
			State = 2384;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2380; Match(COMMA);
				State = 2381; qualifiedColumnName();
				}
				}
				State = 2386;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedColumnNameContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public QualifiedColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedColumnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedColumnNameContext qualifiedColumnName() {
		QualifiedColumnNameContext _localctx = new QualifiedColumnNameContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_qualifiedColumnName);
		try {
			State = 2396;
			switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2387; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2388; qualifiedName();
				State = 2389; Match(DOT);
				State = 2390; keyword();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2392; tempTable();
				State = 2393; Match(DOT);
				State = 2394; qualifiedNamePart();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnIndexOrNameContext : ParserRuleContext {
		public IntegerValueContext ColumnIndex;
		public QualifiedNameContext ColumnName;
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ColumnIndexOrNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnIndexOrName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnIndexOrName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnIndexOrName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnIndexOrName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnIndexOrNameContext columnIndexOrName() {
		ColumnIndexOrNameContext _localctx = new ColumnIndexOrNameContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_columnIndexOrName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2400;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 2398; _localctx.ColumnIndex = integerValue();
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				{
				State = 2399; _localctx.ColumnName = qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_columnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2402; qualifiedNamePart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAliasContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public ColumnAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAliasContext columnAlias() {
		ColumnAliasContext _localctx = new ColumnAliasContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_columnAlias);
		try {
			State = 2406;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2404; qualifiedNamePart();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2405; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorIdContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CursorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorIdContext cursorId() {
		CursorIdContext _localctx = new CursorIdContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_cursorId);
		try {
			State = 2410;
			switch (_input.La(1)) {
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2408; qualifiedName();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2409; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorStatementContext : ParserRuleContext {
		public CursorFetchContext cursorFetch() {
			return GetRuleContext<CursorFetchContext>(0);
		}
		public CursorDeallocateContext cursorDeallocate() {
			return GetRuleContext<CursorDeallocateContext>(0);
		}
		public CursorCloseContext cursorClose() {
			return GetRuleContext<CursorCloseContext>(0);
		}
		public CursorOpenContext cursorOpen() {
			return GetRuleContext<CursorOpenContext>(0);
		}
		public CursorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorStatementContext cursorStatement() {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_cursorStatement);
		try {
			State = 2416;
			switch (_input.La(1)) {
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2412; cursorOpen();
				}
				break;
			case CLOSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2413; cursorClose();
				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2414; cursorFetch();
				}
				break;
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2415; cursorDeallocate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorOpenContext : ParserRuleContext {
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(TSQLParser.OPEN, 0); }
		public CursorOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorOpen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorOpen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorOpen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorOpen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorOpenContext cursorOpen() {
		CursorOpenContext _localctx = new CursorOpenContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_cursorOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2418; Match(OPEN);
			State = 2419; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorCloseContext : ParserRuleContext {
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(TSQLParser.CLOSE, 0); }
		public CursorCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorClose; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorClose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorClose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorClose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorCloseContext cursorClose() {
		CursorCloseContext _localctx = new CursorCloseContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_cursorClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2421; Match(CLOSE);
			State = 2422; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorFetchContext : ParserRuleContext {
		public ITerminalNode ABSOLUTE() { return GetToken(TSQLParser.ABSOLUTE, 0); }
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public ITerminalNode FIRST() { return GetToken(TSQLParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(TSQLParser.LAST, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode FETCH() { return GetToken(TSQLParser.FETCH, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode RELATIVE() { return GetToken(TSQLParser.RELATIVE, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public ITerminalNode PRIOR() { return GetToken(TSQLParser.PRIOR, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorFetch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorFetch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorFetchContext cursorFetch() {
		CursorFetchContext _localctx = new CursorFetchContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_cursorFetch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2424; Match(FETCH);
			State = 2440;
			switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				State = 2425; Match(NEXT);
				}
				break;

			case 2:
				{
				State = 2426; Match(PRIOR);
				}
				break;

			case 3:
				{
				State = 2427; Match(FIRST);
				}
				break;

			case 4:
				{
				State = 2428; Match(LAST);
				}
				break;

			case 5:
				{
				State = 2429; Match(ABSOLUTE);
				State = 2432;
				switch (_input.La(1)) {
				case LPAREN:
				case PLUS:
				case MINUS:
				case IntegerLiteral:
					{
					State = 2430; integerValue();
					}
					break;
				case AT:
					{
					State = 2431; variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 6:
				{
				State = 2434; Match(RELATIVE);
				State = 2437;
				switch (_input.La(1)) {
				case LPAREN:
				case PLUS:
				case MINUS:
				case IntegerLiteral:
					{
					State = 2435; integerValue();
					}
					break;
				case AT:
					{
					State = 2436; variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 7:
				{
				State = 2439; qualifiedName();
				}
				break;
			}
			State = 2444;
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 2442; Match(FROM);
				State = 2443; cursorId();
				}
			}

			State = 2446; Match(INTO);
			State = 2447; variable();
			State = 2452;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2448; Match(COMMA);
				State = 2449; variable();
				}
				}
				State = 2454;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorDeallocateContext : ParserRuleContext {
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode DEALLOCATE() { return GetToken(TSQLParser.DEALLOCATE, 0); }
		public CursorDeallocateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorDeallocate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorDeallocate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorDeallocate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorDeallocate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorDeallocateContext cursorDeallocate() {
		CursorDeallocateContext _localctx = new CursorDeallocateContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_cursorDeallocate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2455; Match(DEALLOCATE);
			State = 2456; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpressionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public StringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpressionContext stringExpression() {
		StringExpressionContext _localctx = new StringExpressionContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_stringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2458; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollateContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSQLParser.COLLATE, 0); }
		public CollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollateContext collate() {
		CollateContext _localctx = new CollateContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2460; Match(COLLATE);
			State = 2461; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusterTypeContext : ParserRuleContext {
		public ITerminalNode NONCLUSTERED() { return GetToken(TSQLParser.NONCLUSTERED, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSQLParser.CLUSTERED, 0); }
		public ClusterTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clusterType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterClusterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitClusterType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClusterType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusterTypeContext clusterType() {
		ClusterTypeContext _localctx = new ClusterTypeContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_clusterType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2463;
			_la = _input.La(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(TSQLParser.CASE, 0); }
		public ITerminalNode LOG() { return GetToken(TSQLParser.LOG, 0); }
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSQLParser.DECIMAL, 0); }
		public ITerminalNode IF() { return GetToken(TSQLParser.IF, 0); }
		public ITerminalNode READONLY() { return GetToken(TSQLParser.READONLY, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSQLParser.OPTIMIZE, 0); }
		public ITerminalNode FIRST() { return GetToken(TSQLParser.FIRST, 0); }
		public ITerminalNode COMPUTE() { return GetToken(TSQLParser.COMPUTE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSQLParser.EXECUTE, 0); }
		public ITerminalNode TRY() { return GetToken(TSQLParser.TRY, 0); }
		public ITerminalNode OF() { return GetToken(TSQLParser.OF, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSQLParser.ROWCOUNT, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public ITerminalNode FETCH() { return GetToken(TSQLParser.FETCH, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSQLParser.RELATIVE, 0); }
		public ITerminalNode USED() { return GetToken(TSQLParser.USED, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSQLParser.PRIOR, 0); }
		public ITerminalNode OVER() { return GetToken(TSQLParser.OVER, 0); }
		public ITerminalNode BETWEEN() { return GetToken(TSQLParser.BETWEEN, 0); }
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public ITerminalNode GROUP() { return GetToken(TSQLParser.GROUP, 0); }
		public ITerminalNode OR() { return GetToken(TSQLParser.OR, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSQLParser.VARCHAR, 0); }
		public ITerminalNode IN() { return GetToken(TSQLParser.IN, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSQLParser.FLOAT, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSQLParser.CLUSTERED, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode MATCHED() { return GetToken(TSQLParser.MATCHED, 0); }
		public ITerminalNode ORDER() { return GetToken(TSQLParser.ORDER, 0); }
		public ITerminalNode WHEN() { return GetToken(TSQLParser.WHEN, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSQLParser.REFERENCES, 0); }
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public ITerminalNode RAW() { return GetToken(TSQLParser.RAW, 0); }
		public ITerminalNode EXCEPT() { return GetToken(TSQLParser.EXCEPT, 0); }
		public ITerminalNode INT() { return GetToken(TSQLParser.INT, 0); }
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSQLParser.COMMIT, 0); }
		public ITerminalNode FULL() { return GetToken(TSQLParser.FULL, 0); }
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSQLParser.SOURCE, 0); }
		public ITerminalNode PATH() { return GetToken(TSQLParser.PATH, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public ITerminalNode CROSS() { return GetToken(TSQLParser.CROSS, 0); }
		public ITerminalNode OPTION() { return GetToken(TSQLParser.OPTION, 0); }
		public ITerminalNode CHARACTER() { return GetToken(TSQLParser.CHARACTER, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public ITerminalNode CHAR() { return GetToken(TSQLParser.CHAR, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ITerminalNode NCHAR() { return GetToken(TSQLParser.NCHAR, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(TSQLParser.DEALLOCATE, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public ITerminalNode LEFT() { return GetToken(TSQLParser.LEFT, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(TSQLParser.ABSOLUTE, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSQLParser.NVARCHAR, 0); }
		public ITerminalNode DECLARE() { return GetToken(TSQLParser.DECLARE, 0); }
		public ITerminalNode VARYING() { return GetToken(TSQLParser.VARYING, 0); }
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode WHILE() { return GetToken(TSQLParser.WHILE, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSQLParser.EXPLICIT, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSQLParser.NONCLUSTERED, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSQLParser.EXISTS, 0); }
		public ITerminalNode ESCAPE() { return GetToken(TSQLParser.ESCAPE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSQLParser.FUNCTION, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(TSQLParser.TRUNCATE, 0); }
		public ITerminalNode INNER() { return GetToken(TSQLParser.INNER, 0); }
		public ITerminalNode GOTO() { return GetToken(TSQLParser.GOTO, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public ITerminalNode SELECT() { return GetToken(TSQLParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public ITerminalNode COUNT() { return GetToken(TSQLParser.COUNT, 0); }
		public ITerminalNode UNION() { return GetToken(TSQLParser.UNION, 0); }
		public ITerminalNode WAITFOR() { return GetToken(TSQLParser.WAITFOR, 0); }
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public ITerminalNode SWITCH() { return GetToken(TSQLParser.SWITCH, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSQLParser.DISABLE, 0); }
		public ITerminalNode CATCH() { return GetToken(TSQLParser.CATCH, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSQLParser.RIGHT, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSQLParser.INCLUDE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public ITerminalNode RETURN() { return GetToken(TSQLParser.RETURN, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSQLParser.ISOLATION, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSQLParser.FOREIGN, 0); }
		public ITerminalNode CAST() { return GetToken(TSQLParser.CAST, 0); }
		public ITerminalNode JOIN() { return GetToken(TSQLParser.JOIN, 0); }
		public ITerminalNode RAISE_ERROR() { return GetToken(TSQLParser.RAISE_ERROR, 0); }
		public ITerminalNode PRINT() { return GetToken(TSQLParser.PRINT, 0); }
		public ITerminalNode RANGE() { return GetToken(TSQLParser.RANGE, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSQLParser.BIGINT, 0); }
		public ITerminalNode OUTER() { return GetToken(TSQLParser.OUTER, 0); }
		public ITerminalNode THEN() { return GetToken(TSQLParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSQLParser.DATABASE, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSQLParser.COLLATE, 0); }
		public ITerminalNode USING() { return GetToken(TSQLParser.USING, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSQLParser.COUNT_BIG, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSQLParser.TRIGGER, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSQLParser.REPLICATION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSQLParser.SCHEME, 0); }
		public ITerminalNode IS() { return GetToken(TSQLParser.IS, 0); }
		public ITerminalNode CONVERT() { return GetToken(TSQLParser.CONVERT, 0); }
		public ITerminalNode NUMERIC() { return GetToken(TSQLParser.NUMERIC, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TSQLParser.CONTINUE, 0); }
		public ITerminalNode AUTO() { return GetToken(TSQLParser.AUTO, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSQLParser.SPLIT, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSQLParser.IDENTITY, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSQLParser.ROLLBACK, 0); }
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode BREAK() { return GetToken(TSQLParser.BREAK, 0); }
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSQLParser.LEVEL, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode DELAY() { return GetToken(TSQLParser.DELAY, 0); }
		public ITerminalNode TO() { return GetToken(TSQLParser.TO, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSQLParser.TINYINT, 0); }
		public ITerminalNode ALL() { return GetToken(TSQLParser.ALL, 0); }
		public ITerminalNode OPEN() { return GetToken(TSQLParser.OPEN, 0); }
		public ITerminalNode INTERSECT() { return GetToken(TSQLParser.INTERSECT, 0); }
		public ITerminalNode MAX() { return GetToken(TSQLParser.MAX, 0); }
		public ITerminalNode CLOSE() { return GetToken(TSQLParser.CLOSE, 0); }
		public ITerminalNode ADD() { return GetToken(TSQLParser.ADD, 0); }
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSQLParser.REMOVE, 0); }
		public ITerminalNode APPLY() { return GetToken(TSQLParser.APPLY, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public ITerminalNode HAVING() { return GetToken(TSQLParser.HAVING, 0); }
		public ITerminalNode TARGET() { return GetToken(TSQLParser.TARGET, 0); }
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSQLParser.SMALLINT, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSQLParser.ENABLE, 0); }
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public ITerminalNode LAST() { return GetToken(TSQLParser.LAST, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public ITerminalNode WHERE() { return GetToken(TSQLParser.WHERE, 0); }
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2465;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << READONLY) | (1L << TRY) | (1L << CATCH) | (1L << TRANSACTION) | (1L << COMMIT) | (1L << ROLLBACK) | (1L << RAISE_ERROR) | (1L << PRINT) | (1L << CLUSTERED) | (1L << NONCLUSTERED) | (1L << TABLE) | (1L << PROCEDURE) | (1L << PARTITION) | (1L << INDEX) | (1L << DATABASE) | (1L << CONSTRAINT) | (1L << FOREIGN) | (1L << PRIMARY) | (1L << KEY) | (1L << REFERENCES) | (1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL) | (1L << CURSOR) | (1L << FETCH) | (1L << OPEN) | (1L << CLOSE) | (1L << DEALLOCATE) | (1L << FIRST) | (1L << LAST) | (1L << PRIOR) | (1L << NEXT) | (1L << ABSOLUTE) | (1L << RELATIVE) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << COLLATE) | (1L << COUNT) | (1L << COUNT_BIG) | (1L << DISTINCT) | (1L << UNIQUE) | (1L << MAX) | (1L << TOP) | (1L << WHEN) | (1L << THEN) | (1L << SWITCH) | (1L << OVER) | (1L << INCLUDE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTERSECT - 64)) | (1L << (EXCEPT - 64)) | (1L << (UNION - 64)) | (1L << (ALL - 64)) | (1L << (APPLY - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (WHILE - 64)) | (1L << (GOTO - 64)) | (1L << (CONTINUE - 64)) | (1L << (BREAK - 64)) | (1L << (TRUNCATE - 64)) | (1L << (ADD - 64)) | (1L << (REMOVE - 64)) | (1L << (ALTER - 64)) | (1L << (CREATE - 64)) | (1L << (DROP - 64)) | (1L << (AS - 64)) | (1L << (WITH - 64)) | (1L << (FOR - 64)) | (1L << (REPLICATION - 64)) | (1L << (BEGIN - 64)) | (1L << (END - 64)) | (1L << (EXISTS - 64)) | (1L << (DEFAULT - 64)) | (1L << (VARYING - 64)) | (1L << (SELECT - 64)) | (1L << (UPDATE - 64)) | (1L << (INSERT - 64)) | (1L << (DELETE - 64)) | (1L << (WHERE - 64)) | (1L << (FROM - 64)) | (1L << (JOIN - 64)) | (1L << (DECLARE - 64)) | (1L << (OPTION - 64)) | (1L << (SET - 64)) | (1L << (TO - 64)) | (1L << (ON - 64)) | (1L << (OFF - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (EXECUTE - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (IS - 64)) | (1L << (IN - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (BETWEEN - 64)) | (1L << (RETURN - 64)) | (1L << (OUTPUT - 64)) | (1L << (OUT - 64)) | (1L << (LIKE - 64)) | (1L << (ESCAPE - 64)) | (1L << (OF - 64)) | (1L << (DECIMAL - 64)) | (1L << (NUMERIC - 64)) | (1L << (VARCHAR - 64)) | (1L << (NVARCHAR - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (NCHAR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT - 128)) | (1L << (IDENTITY - 128)) | (1L << (LOG - 128)) | (1L << (AND - 128)) | (1L << (OR - 128)) | (1L << (ASC - 128)) | (1L << (DESC - 128)) | (1L << (STATISTICS - 128)) | (1L << (USING - 128)) | (1L << (MERGE - 128)) | (1L << (MATCHED - 128)) | (1L << (TARGET - 128)) | (1L << (SOURCE - 128)) | (1L << (XML - 128)) | (1L << (RAW - 128)) | (1L << (AUTO - 128)) | (1L << (EXPLICIT - 128)) | (1L << (PATH - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (TRIGGER - 128)) | (1L << (WAITFOR - 128)) | (1L << (DELAY - 128)) | (1L << (COMPUTE - 128)) | (1L << (LEVEL - 128)) | (1L << (ISOLATION - 128)) | (1L << (SPLIT - 128)) | (1L << (RANGE - 128)) | (1L << (FUNCTION - 128)) | (1L << (SCHEME - 128)) | (1L << (USED - 128)) | (1L << (OPTIMIZE - 128)) | (1L << (ROWCOUNT - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 31: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);

		case 32: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);

		case 33: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);

		case 34: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);

		case 35: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);

		case 36: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);

		case 37: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);

		case 38: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);

		case 39: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);

		case 42: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(_ctx, 2);

		case 21: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 2);

		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(_ctx, 4);

		case 17: return Precpred(_ctx, 3);

		case 18: return Precpred(_ctx, 2);

		case 19: return Precpred(_ctx, 1);

		case 11: return Precpred(_ctx, 9);

		case 12: return Precpred(_ctx, 8);

		case 13: return Precpred(_ctx, 7);

		case 14: return Precpred(_ctx, 6);

		case 15: return Precpred(_ctx, 5);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(_ctx, 3);

		case 9: return Precpred(_ctx, 2);

		case 10: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(_ctx, 3);

		case 23: return Precpred(_ctx, 2);

		case 24: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(_ctx, 4);

		case 26: return Precpred(_ctx, 3);

		case 27: return Precpred(_ctx, 2);

		case 28: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xCF\x9A6\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x16E\n\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x177\n\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x5\x5\x17D\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x184\n\x5\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x5\x6\x18A\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x192"+
		"\n\a\x3\a\x3\a\x3\a\x3\a\x5\a\x198\n\a\x3\a\x3\a\x5\a\x19C\n\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x5\a\x1B0\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x5\b\x1BB\n\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x5\n\x1C5\n\n"+
		"\x3\n\x3\n\x3\n\x3\n\x5\n\x1CB\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1E7\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x1EE"+
		"\n\r\f\r\xE\r\x1F1\v\r\x3\r\x3\r\x3\r\x3\r\x5\r\x1F7\n\r\x3\xE\x3\xE\x3"+
		"\xE\x5\xE\x1FC\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x202\n\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x5\xF\x208\n\xF\x3\xF\x5\xF\x20B\n\xF\x3\xF\x3\xF\x3\xF\x5"+
		"\xF\x210\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x218\n"+
		"\x10\x5\x10\x21A\n\x10\x3\x11\x3\x11\x5\x11\x21E\n\x11\x3\x11\x5\x11\x221"+
		"\n\x11\x3\x11\x3\x11\x3\x11\x5\x11\x226\n\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\x22E\n\x11\x3\x11\x5\x11\x231\n\x11\x3\x11\x5"+
		"\x11\x234\n\x11\x3\x11\x5\x11\x237\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x5\x13\x248\n\x13\x3\x14\x3\x14\x3\x14\a\x14\x24D\n\x14\f\x14\xE"+
		"\x14\x250\v\x14\x3\x15\x3\x15\x5\x15\x254\n\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x5\x18\x267\n\x18\x3\x18\x5\x18\x26A\n\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x278\n\x1A\x3\x1A\x5\x1A\x27B\n\x1A\x3\x1A\x5\x1A\x27E"+
		"\n\x1A\x3\x1A\x5\x1A\x281\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5"+
		"\x1C\x288\n\x1C\x3\x1C\x3\x1C\x5\x1C\x28C\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x5\x1C\x29E\n\x1C\x3\x1C\x3\x1C\x3\x1C\x6\x1C\x2A3"+
		"\n\x1C\r\x1C\xE\x1C\x2A4\x3\x1C\x5\x1C\x2A8\n\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x6\x1C\x2AF\n\x1C\r\x1C\xE\x1C\x2B0\x3\x1C\x5\x1C\x2B4"+
		"\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2BD\n"+
		"\x1C\x3\x1D\x3\x1D\x5\x1D\x2C1\n\x1D\x3\x1E\x5\x1E\x2C4\n\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x5\x1F\x2D2\n\x1F\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\a!\x2E1\n!\f!\xE!\x2E4\v!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\a\"\x2EF\n\"\f\"\xE\"\x2F2\v\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#"+
		"\x3#\x3#\x5#\x2FD\n#\x3#\a#\x300\n#\f#\xE#\x303\v#\x3$\x3$\x3$\x3$\x3"+
		"$\x3$\a$\x30B\n$\f$\xE$\x30E\v$\x3%\x3%\x3%\x3%\x3%\x3%\a%\x316\n%\f%"+
		"\xE%\x319\v%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\a&\x327\n"+
		"&\f&\xE&\x32A\v&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\a\'\x34D\n\'\f\'\xE\'\x350"+
		"\v\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\a(\x35B\n(\f(\xE(\x35E\v(\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\a)\x36C\n)\f)\xE)\x36F\v"+
		")\x3*\x3*\x3*\x3*\x3*\x5*\x376\n*\x3+\x3+\x3+\x5+\x37B\n+\x3,\x3,\x3,"+
		"\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x389\n,\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x3,\x5,\x392\n,\x3,\x3,\a,\x396\n,\f,\xE,\x399\v,\x3-\x3-\x3-\x5-\x39E"+
		"\n-\x3-\x5-\x3A1\n-\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x3AB\n.\x3/\x3"+
		"/\x3/\x3/\a/\x3B1\n/\f/\xE/\x3B4\v/\x3/\x3/\x3/\x3/\x5/\x3BA\n/\x3/\x3"+
		"/\x5/\x3BE\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x5\x33\x3D4\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3"+
		"\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x3E4"+
		"\n\x35\f\x35\xE\x35\x3E7\v\x35\x3\x35\x3\x35\x5\x35\x3EB\n\x35\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x3F5\n\x36\f\x36"+
		"\xE\x36\x3F8\v\x36\x3\x36\x3\x36\x5\x36\x3FC\n\x36\x3\x37\x3\x37\x5\x37"+
		"\x400\n\x37\x3\x38\x5\x38\x403\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x5\x38\x40A\n\x38\x3\x39\x3\x39\x6\x39\x40E\n\x39\r\x39\xE\x39\x40F\x3"+
		"\x39\x3\x39\x3\x39\x5\x39\x415\n\x39\x3:\x3:\x6:\x419\n:\r:\xE:\x41A\x3"+
		":\a:\x41E\n:\f:\xE:\x421\v:\x3:\x5:\x424\n:\x3;\x3;\x3;\a;\x429\n;\f;"+
		"\xE;\x42C\v;\x3<\x6<\x42F\n<\r<\xE<\x430\x3<\x3<\x5<\x435\n<\x3=\x6=\x438"+
		"\n=\r=\xE=\x439\x3=\x3=\x5=\x43E\n=\x3=\x3=\x3=\x3=\x5=\x444\n=\x3>\x6"+
		">\x447\n>\r>\xE>\x448\x3>\x3>\x6>\x44D\n>\r>\xE>\x44E\x3>\x5>\x452\n>"+
		"\x3?\x3?\x3@\x3@\x3@\x3@\a@\x45A\n@\f@\xE@\x45D\v@\x5@\x45F\n@\x3@\x3"+
		"@\x3@\x3@\a@\x465\n@\f@\xE@\x468\v@\x5@\x46A\n@\x3\x41\x3\x41\x5\x41\x46E"+
		"\n\x41\x3\x41\x3\x41\x5\x41\x472\n\x41\x3\x41\x5\x41\x475\n\x41\x3\x41"+
		"\x5\x41\x478\n\x41\x3\x41\x5\x41\x47B\n\x41\x3\x41\x5\x41\x47E\n\x41\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x5\x42\x484\n\x42\x3\x43\x3\x43\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\a\x44\x48C\n\x44\f\x44\xE\x44\x48F\v\x44\x3\x45\x3\x45"+
		"\a\x45\x493\n\x45\f\x45\xE\x45\x496\v\x45\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x5\x46\x49E\n\x46\x3\x46\x3\x46\x5\x46\x4A2\n\x46\x3\x46"+
		"\x5\x46\x4A5\n\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3"+
		"G\x5G\x4B4\nG\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H"+
		"\x3H\x3H\x3H\x3H\x3H\x3H\x5H\x4CA\nH\x3H\x3H\x5H\x4CE\nH\x3H\x3H\x3H\x5"+
		"H\x4D3\nH\x3H\x3H\x3H\x3H\x5H\x4D9\nH\x3I\x3I\x5I\x4DD\nI\x3I\x5I\x4E0"+
		"\nI\x3J\x3J\x5J\x4E4\nJ\x3J\x5J\x4E7\nJ\x3K\x3K\x3K\x3L\x3L\x5L\x4EE\n"+
		"L\x3M\x3M\x3M\x3M\x3M\x5M\x4F5\nM\x3N\x3N\x3N\x3N\x3O\x3O\x3O\x3O\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x5P\x505\nP\x3P\x3P\x6P\x509\nP\rP\xEP\x50A\x3P\x3"+
		"P\x5P\x50F\nP\x5P\x511\nP\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q"+
		"\x3R\x3R\x3R\x5R\x521\nR\x3R\x3R\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x52C"+
		"\nS\x3T\x3T\x5T\x530\nT\x3T\x6T\x533\nT\rT\xET\x534\x3T\x5T\x538\nT\x3"+
		"T\aT\x53B\nT\fT\xET\x53E\vT\x3T\x5T\x541\nT\x3T\x5T\x544\nT\x3T\x3T\x5"+
		"T\x548\nT\x3T\x3T\x6T\x54C\nT\rT\xET\x54D\x3T\x5T\x551\nT\x3T\aT\x554"+
		"\nT\fT\xET\x557\vT\x3T\x5T\x55A\nT\x3T\x5T\x55D\nT\x5T\x55F\nT\x3U\x5"+
		"U\x562\nU\x3U\x3U\x3U\aU\x567\nU\fU\xEU\x56A\vU\x3V\x5V\x56D\nV\x3V\x3"+
		"V\x3V\aV\x572\nV\fV\xEV\x575\vV\x3W\x3W\x3W\x3W\x3W\x3X\x3X\x3X\x3X\a"+
		"X\x580\nX\fX\xEX\x583\vX\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\x58C\nY\x3Y\x3"+
		"Y\x3Y\x3Y\x3Y\x3Z\x3Z\x5Z\x595\nZ\x3Z\x3Z\x5Z\x599\nZ\x3[\x3[\x5[\x59D"+
		"\n[\x3[\x3[\x5[\x5A1\n[\x3[\x3[\x3[\x3[\x5[\x5A7\n[\x3\\\x3\\\x3\\\x3"+
		"\\\x3\\\x3\\\x3\\\x3\\\x5\\\x5B1\n\\\x5\\\x5B3\n\\\x3]\x3]\x3]\x3]\a]"+
		"\x5B9\n]\f]\xE]\x5BC\v]\x3]\x3]\x3]\x3]\x5]\x5C2\n]\x3^\x3^\x3^\x3^\a"+
		"^\x5C8\n^\f^\xE^\x5CB\v^\x3^\x3^\x3_\x3_\x3`\x3`\x3`\x3`\a`\x5D5\n`\f"+
		"`\xE`\x5D8\v`\x3`\x3`\x3`\x3`\x5`\x5DE\n`\x3`\x3`\x3`\x3`\x3`\x3`\x5`"+
		"\x5E6\n`\x5`\x5E8\n`\x3\x61\x3\x61\x5\x61\x5EC\n\x61\x3\x61\x3\x61\x5"+
		"\x61\x5F0\n\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x5F7\n\x61\x3"+
		"\x61\x5\x61\x5FA\n\x61\x3\x61\x3\x61\x5\x61\x5FE\n\x61\x3\x62\x3\x62\x3"+
		"\x62\x3\x63\x3\x63\x3\x63\a\x63\x606\n\x63\f\x63\xE\x63\x609\v\x63\x3"+
		"\x64\x3\x64\x3\x64\a\x64\x60E\n\x64\f\x64\xE\x64\x611\v\x64\x3\x65\x3"+
		"\x65\x3\x65\x3\x65\x3\x65\x5\x65\x618\n\x65\x5\x65\x61A\n\x65\x3\x65\x5"+
		"\x65\x61D\n\x65\x3\x65\x5\x65\x620\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x625"+
		"\n\x65\x5\x65\x627\n\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x62E"+
		"\n\x65\x5\x65\x630\n\x65\x3\x65\x5\x65\x633\n\x65\x3\x65\x5\x65\x636\n"+
		"\x65\x3\x65\x5\x65\x639\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x63E\n\x65\x5"+
		"\x65\x640\n\x65\x5\x65\x642\n\x65\x3\x66\x3\x66\x3\x66\a\x66\x647\n\x66"+
		"\f\x66\xE\x66\x64A\v\x66\x3g\x3g\x5g\x64E\ng\x3g\x3g\x3g\x3g\x3g\x3g\x3"+
		"g\x5g\x657\ng\x3g\x3g\x3g\x3g\x5g\x65D\ng\x5g\x65F\ng\x3h\x3h\x3i\x3i"+
		"\x3i\x3i\x5i\x667\ni\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x6j\x670\nj\rj\xEj\x671"+
		"\x3j\x3j\x3j\x5j\x677\nj\x3k\x3k\x6k\x67B\nk\rk\xEk\x67C\x3k\ak\x680\n"+
		"k\fk\xEk\x683\vk\x3l\x3l\x5l\x687\nl\x3l\x3l\x3l\x3m\x3m\x5m\x68E\nm\x3"+
		"m\x3m\x3m\x3m\x3m\x3n\x3n\x3n\x3n\x3n\x3n\x5n\x69B\nn\x3o\x3o\x3o\x3o"+
		"\x3o\x3o\x3o\x5o\x6A4\no\x3p\x3p\x5p\x6A8\np\x3p\x3p\x3p\x3p\x3p\ap\x6AF"+
		"\np\fp\xEp\x6B2\vp\x3p\x5p\x6B5\np\x3p\ap\x6B8\np\fp\xEp\x6BB\vp\x3p\a"+
		"p\x6BE\np\fp\xEp\x6C1\vp\x3p\x5p\x6C4\np\x3p\x5p\x6C7\np\x3p\x3p\x3p\x3"+
		"p\x5p\x6CD\np\x5p\x6CF\np\x3q\x3q\x3q\x3q\x3q\x5q\x6D6\nq\x3q\x3q\x3q"+
		"\x3q\x3q\x5q\x6DD\nq\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3"+
		"q\x5q\x6EC\nq\x5q\x6EE\nq\x3r\x3r\x3r\x5r\x6F3\nr\x3s\x3s\x3s\as\x6F8"+
		"\ns\fs\xEs\x6FB\vs\x3t\x3t\x3t\x3t\at\x701\nt\ft\xEt\x704\vt\x3t\x3t\x3"+
		"t\x3t\at\x70A\nt\ft\xEt\x70D\vt\x5t\x70F\nt\x3u\x3u\x3u\x5u\x714\nu\x3"+
		"u\au\x717\nu\fu\xEu\x71A\vu\x3u\x3u\x3u\au\x71F\nu\fu\xEu\x722\vu\x5u"+
		"\x724\nu\x3v\x3v\x5v\x728\nv\x3v\x3v\x5v\x72C\nv\x3v\x5v\x72F\nv\x3v\x5"+
		"v\x732\nv\x3v\av\x735\nv\fv\xEv\x738\vv\x3v\av\x73B\nv\fv\xEv\x73E\vv"+
		"\x3v\x5v\x741\nv\x3v\x5v\x744\nv\x3v\x5v\x747\nv\x3v\x5v\x74A\nv\x3v\x5"+
		"v\x74D\nv\x3v\x5v\x750\nv\x3v\x3v\x3v\x3v\x5v\x756\nv\x3w\x3w\x3w\x3w"+
		"\x3w\x5w\x75D\nw\x3x\x3x\x3x\ax\x762\nx\fx\xEx\x765\vx\x3y\x3y\x3y\x3"+
		"y\x5y\x76B\ny\x3z\x3z\x3z\x3z\x3z\x3z\x3z\x3z\x5z\x775\nz\x3z\x5z\x778"+
		"\nz\x3{\x5{\x77B\n{\x3{\x3{\x3{\x5{\x780\n{\x3{\x3{\x3{\x3{\x3{\x5{\x787"+
		"\n{\x3|\x3|\x3|\x3|\x3}\x3}\x3}\a}\x790\n}\f}\xE}\x793\v}\x3~\x5~\x796"+
		"\n~\x3~\x3~\x5~\x79A\n~\x3~\x5~\x79D\n~\x3~\x5~\x7A0\n~\x3~\x3~\x3~\x3"+
		"~\x3~\x5~\x7A7\n~\x3~\x3~\x3~\x3~\x5~\x7AD\n~\x3~\x5~\x7B0\n~\x3~\x3~"+
		"\x3~\x3~\x5~\x7B6\n~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\a\x7F\x7BD\n\x7F"+
		"\f\x7F\xE\x7F\x7C0\v\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x5\x80\x7C6\n\x80"+
		"\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80"+
		"\x7D1\n\x80\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\a\x81\x7DA"+
		"\n\x81\f\x81\xE\x81\x7DD\v\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\a\x81"+
		"\x7E4\n\x81\f\x81\xE\x81\x7E7\v\x81\x6\x81\x7E9\n\x81\r\x81\xE\x81\x7EA"+
		"\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\x3\x83\x3\x83\x3\x83\x3\x83\a\x83"+
		"\x7F6\n\x83\f\x83\xE\x83\x7F9\v\x83\x3\x84\x3\x84\x6\x84\x7FD\n\x84\r"+
		"\x84\xE\x84\x7FE\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\a\x85\x806\n\x85\f"+
		"\x85\xE\x85\x809\v\x85\x3\x86\x3\x86\x5\x86\x80D\n\x86\x3\x87\x3\x87\x3"+
		"\x87\x3\x88\x5\x88\x813\n\x88\x3\x88\x3\x88\x3\x88\x3\x88\a\x88\x819\n"+
		"\x88\f\x88\xE\x88\x81C\v\x88\x3\x88\x5\x88\x81F\n\x88\x3\x88\x3\x88\x5"+
		"\x88\x823\n\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89"+
		"\x3\x89\x3\x89\x3\x89\x3\x89\x5\x89\x831\n\x89\x3\x8A\x3\x8A\x3\x8A\x3"+
		"\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\a\x8B\x83B\n\x8B\f\x8B\xE\x8B\x83E\v"+
		"\x8B\x3\x8C\x3\x8C\x5\x8C\x842\n\x8C\x3\x8C\x5\x8C\x845\n\x8C\x3\x8D\x3"+
		"\x8D\x5\x8D\x849\n\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D"+
		"\x3\x8D\x3\x8D\x5\x8D\x854\n\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3"+
		"\x8D\x3\x8D\x5\x8D\x85D\n\x8D\x3\x8D\x3\x8D\x5\x8D\x861\n\x8D\x3\x8D\x3"+
		"\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\x86C\n\x8D"+
		"\x3\x8D\x3\x8D\x6\x8D\x870\n\x8D\r\x8D\xE\x8D\x871\x3\x8D\x3\x8D\x3\x8D"+
		"\x3\x8D\x3\x8D\x5\x8D\x879\n\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\a"+
		"\x8E\x880\n\x8E\f\x8E\xE\x8E\x883\v\x8E\x3\x8E\x5\x8E\x886\n\x8E\x3\x8F"+
		"\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\x88D\n\x8F\x3\x8F\x3\x8F\x3\x8F\x3"+
		"\x8F\a\x8F\x893\n\x8F\f\x8F\xE\x8F\x896\v\x8F\x3\x90\x3\x90\x5\x90\x89A"+
		"\n\x90\x3\x90\x3\x90\x5\x90\x89E\n\x90\x3\x90\x5\x90\x8A1\n\x90\x3\x90"+
		"\x5\x90\x8A4\n\x90\x5\x90\x8A6\n\x90\x3\x91\x3\x91\x3\x91\x5\x91\x8AB"+
		"\n\x91\x3\x91\x5\x91\x8AE\n\x91\x3\x91\x5\x91\x8B1\n\x91\x3\x92\x3\x92"+
		"\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\x8B9\n\x92\x3\x93\x3\x93\x5\x93\x8BD"+
		"\n\x93\x3\x94\x3\x94\x3\x94\x3\x94\x5\x94\x8C3\n\x94\x3\x94\x3\x94\x3"+
		"\x94\x5\x94\x8C8\n\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94"+
		"\x3\x94\x3\x94\x3\x94\x3\x94\x5\x94\x8D5\n\x94\x5\x94\x8D7\n\x94\x3\x94"+
		"\x5\x94\x8DA\n\x94\x3\x94\x5\x94\x8DD\n\x94\x3\x95\x3\x95\x3\x95\x3\x95"+
		"\x3\x95\x3\x95\x3\x95\x5\x95\x8E6\n\x95\x3\x96\x3\x96\x5\x96\x8EA\n\x96"+
		"\x3\x97\x3\x97\x5\x97\x8EE\n\x97\x3\x98\x3\x98\x3\x98\x5\x98\x8F3\n\x98"+
		"\x3\x98\x3\x98\x3\x99\x3\x99\x3\x99\x5\x99\x8FA\n\x99\x3\x99\x3\x99\x3"+
		"\x99\x3\x99\x5\x99\x900\n\x99\x3\x99\x5\x99\x903\n\x99\x3\x9A\x3\x9A\x3"+
		"\x9A\a\x9A\x908\n\x9A\f\x9A\xE\x9A\x90B\v\x9A\x3\x9B\x3\x9B\x3\x9B\x5"+
		"\x9B\x910\n\x9B\x3\x9B\x3\x9B\x5\x9B\x914\n\x9B\x5\x9B\x916\n\x9B\x3\x9C"+
		"\x3\x9C\x3\x9C\x5\x9C\x91B\n\x9C\x3\x9C\x3\x9C\x3\x9D\x3\x9D\x5\x9D\x921"+
		"\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\x928\n\x9D\x3\x9E\x3"+
		"\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E\x92F\n\x9E\x3\x9E\x5\x9E\x932\n\x9E\x3"+
		"\x9E\x5\x9E\x935\n\x9E\x3\x9F\x3\x9F\x3\xA0\x5\xA0\x93A\n\xA0\x3\xA0\x3"+
		"\xA0\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x5\xA1\x943\n\xA1\x3\xA1\x3\xA1"+
		"\x5\xA1\x947\n\xA1\x3\xA2\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x3"+
		"\xA4\a\xA4\x951\n\xA4\f\xA4\xE\xA4\x954\v\xA4\x3\xA5\x3\xA5\x3\xA5\x3"+
		"\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x5\xA5\x95F\n\xA5\x3\xA6\x3\xA6"+
		"\x5\xA6\x963\n\xA6\x3\xA7\x3\xA7\x3\xA8\x3\xA8\x5\xA8\x969\n\xA8\x3\xA9"+
		"\x3\xA9\x5\xA9\x96D\n\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA\x973\n\xAA"+
		"\x3\xAB\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3\xAD\x3\xAD"+
		"\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x5\xAD\x983\n\xAD\x3\xAD\x3\xAD\x3\xAD\x5"+
		"\xAD\x988\n\xAD\x3\xAD\x5\xAD\x98B\n\xAD\x3\xAD\x3\xAD\x5\xAD\x98F\n\xAD"+
		"\x3\xAD\x3\xAD\x3\xAD\x3\xAD\a\xAD\x995\n\xAD\f\xAD\xE\xAD\x998\v\xAD"+
		"\x3\xAE\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x3\xB0\x3\xB0\x3\xB0\x3\xB1\x3\xB1"+
		"\x3\xB2\x3\xB2\x3\xB2\x2\x2\f@\x42\x44\x46HJLNPV\xB3\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2"+
		"\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38"+
		"\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V"+
		"\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2"+
		"t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C"+
		"\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0"+
		"\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4"+
		"\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8"+
		"\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC"+
		"\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0"+
		"\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104"+
		"\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A"+
		"\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C"+
		"\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E"+
		"\x2\x160\x2\x162\x2\x2\x11\x3\x2\x98\x99\x3\x2gh\x3\x2\x8B\x8C\x3\x2\x37"+
		"\x38\x3\x2\xC5\xC6\x3\x2vw\x4\x2\v\v\r\r\x3\x2\x42\x43\x4\x2\xAE\xB5\xBB"+
		"\xBB\x3\x2\x7F\x81\x3\x2}~\x3\x2{|\x3\x2\x82\x85\x3\x2\x16\x17\x3\x2\xE"+
		"\xA6\xAB6\x2\x164\x3\x2\x2\x2\x4\x16D\x3\x2\x2\x2\x6\x16F\x3\x2\x2\x2"+
		"\b\x178\x3\x2\x2\x2\n\x185\x3\x2\x2\x2\f\x18B\x3\x2\x2\x2\xE\x1BA\x3\x2"+
		"\x2\x2\x10\x1BC\x3\x2\x2\x2\x12\x1C0\x3\x2\x2\x2\x14\x1CC\x3\x2\x2\x2"+
		"\x16\x1D4\x3\x2\x2\x2\x18\x1F6\x3\x2\x2\x2\x1A\x1F8\x3\x2\x2\x2\x1C\x1FD"+
		"\x3\x2\x2\x2\x1E\x211\x3\x2\x2\x2 \x21B\x3\x2\x2\x2\"\x238\x3\x2\x2\x2"+
		"$\x23D\x3\x2\x2\x2&\x249\x3\x2\x2\x2(\x251\x3\x2\x2\x2*\x255\x3\x2\x2"+
		"\x2,\x25E\x3\x2\x2\x2.\x262\x3\x2\x2\x2\x30\x26E\x3\x2\x2\x2\x32\x280"+
		"\x3\x2\x2\x2\x34\x282\x3\x2\x2\x2\x36\x2BC\x3\x2\x2\x2\x38\x2C0\x3\x2"+
		"\x2\x2:\x2C3\x3\x2\x2\x2<\x2CA\x3\x2\x2\x2>\x2D5\x3\x2\x2\x2@\x2D7\x3"+
		"\x2\x2\x2\x42\x2E5\x3\x2\x2\x2\x44\x2F3\x3\x2\x2\x2\x46\x304\x3\x2\x2"+
		"\x2H\x30F\x3\x2\x2\x2J\x31A\x3\x2\x2\x2L\x32B\x3\x2\x2\x2N\x351\x3\x2"+
		"\x2\x2P\x35F\x3\x2\x2\x2R\x375\x3\x2\x2\x2T\x37A\x3\x2\x2\x2V\x37C\x3"+
		"\x2\x2\x2X\x3A0\x3\x2\x2\x2Z\x3AA\x3\x2\x2\x2\\\x3BD\x3\x2\x2\x2^\x3BF"+
		"\x3\x2\x2\x2`\x3C4\x3\x2\x2\x2\x62\x3C7\x3\x2\x2\x2\x64\x3D3\x3\x2\x2"+
		"\x2\x66\x3D5\x3\x2\x2\x2h\x3EA\x3\x2\x2\x2j\x3FB\x3\x2\x2\x2l\x3FF\x3"+
		"\x2\x2\x2n\x409\x3\x2\x2\x2p\x414\x3\x2\x2\x2r\x423\x3\x2\x2\x2t\x425"+
		"\x3\x2\x2\x2v\x42E\x3\x2\x2\x2x\x443\x3\x2\x2\x2z\x451\x3\x2\x2\x2|\x453"+
		"\x3\x2\x2\x2~\x469\x3\x2\x2\x2\x80\x46B\x3\x2\x2\x2\x82\x483\x3\x2\x2"+
		"\x2\x84\x485\x3\x2\x2\x2\x86\x487\x3\x2\x2\x2\x88\x490\x3\x2\x2\x2\x8A"+
		"\x4A4\x3\x2\x2\x2\x8C\x4B3\x3\x2\x2\x2\x8E\x4D8\x3\x2\x2\x2\x90\x4DA\x3"+
		"\x2\x2\x2\x92\x4E1\x3\x2\x2\x2\x94\x4E8\x3\x2\x2\x2\x96\x4EB\x3\x2\x2"+
		"\x2\x98\x4EF\x3\x2\x2\x2\x9A\x4F6\x3\x2\x2\x2\x9C\x4FA\x3\x2\x2\x2\x9E"+
		"\x510\x3\x2\x2\x2\xA0\x512\x3\x2\x2\x2\xA2\x51D\x3\x2\x2\x2\xA4\x524\x3"+
		"\x2\x2\x2\xA6\x55E\x3\x2\x2\x2\xA8\x561\x3\x2\x2\x2\xAA\x56C\x3\x2\x2"+
		"\x2\xAC\x576\x3\x2\x2\x2\xAE\x57B\x3\x2\x2\x2\xB0\x586\x3\x2\x2\x2\xB2"+
		"\x592\x3\x2\x2\x2\xB4\x59A\x3\x2\x2\x2\xB6\x5A8\x3\x2\x2\x2\xB8\x5C1\x3"+
		"\x2\x2\x2\xBA\x5C3\x3\x2\x2\x2\xBC\x5CE\x3\x2\x2\x2\xBE\x5E7\x3\x2\x2"+
		"\x2\xC0\x5E9\x3\x2\x2\x2\xC2\x5FF\x3\x2\x2\x2\xC4\x602\x3\x2\x2\x2\xC6"+
		"\x60A\x3\x2\x2\x2\xC8\x641\x3\x2\x2\x2\xCA\x643\x3\x2\x2\x2\xCC\x65E\x3"+
		"\x2\x2\x2\xCE\x660\x3\x2\x2\x2\xD0\x662\x3\x2\x2\x2\xD2\x676\x3\x2\x2"+
		"\x2\xD4\x678\x3\x2\x2\x2\xD6\x684\x3\x2\x2\x2\xD8\x68B\x3\x2\x2\x2\xDA"+
		"\x69A\x3\x2\x2\x2\xDC\x69C\x3\x2\x2\x2\xDE\x6CE\x3\x2\x2\x2\xE0\x6ED\x3"+
		"\x2\x2\x2\xE2\x6F2\x3\x2\x2\x2\xE4\x6F4\x3\x2\x2\x2\xE6\x6FC\x3\x2\x2"+
		"\x2\xE8\x723\x3\x2\x2\x2\xEA\x755\x3\x2\x2\x2\xEC\x757\x3\x2\x2\x2\xEE"+
		"\x75E\x3\x2\x2\x2\xF0\x766\x3\x2\x2\x2\xF2\x76C\x3\x2\x2\x2\xF4\x77A\x3"+
		"\x2\x2\x2\xF6\x788\x3\x2\x2\x2\xF8\x78C\x3\x2\x2\x2\xFA\x7B5\x3\x2\x2"+
		"\x2\xFC\x7B7\x3\x2\x2\x2\xFE\x7D0\x3\x2\x2\x2\x100\x7D2\x3\x2\x2\x2\x102"+
		"\x7EE\x3\x2\x2\x2\x104\x7F1\x3\x2\x2\x2\x106\x7FC\x3\x2\x2\x2\x108\x800"+
		"\x3\x2\x2\x2\x10A\x80C\x3\x2\x2\x2\x10C\x80E\x3\x2\x2\x2\x10E\x822\x3"+
		"\x2\x2\x2\x110\x830\x3\x2\x2\x2\x112\x832\x3\x2\x2\x2\x114\x835\x3\x2"+
		"\x2\x2\x116\x841\x3\x2\x2\x2\x118\x846\x3\x2\x2\x2\x11A\x885\x3\x2\x2"+
		"\x2\x11C\x887\x3\x2\x2\x2\x11E\x8A5\x3\x2\x2\x2\x120\x8AA\x3\x2\x2\x2"+
		"\x122\x8B8\x3\x2\x2\x2\x124\x8BA\x3\x2\x2\x2\x126\x8D6\x3\x2\x2\x2\x128"+
		"\x8E5\x3\x2\x2\x2\x12A\x8E9\x3\x2\x2\x2\x12C\x8ED\x3\x2\x2\x2\x12E\x8EF"+
		"\x3\x2\x2\x2\x130\x8F6\x3\x2\x2\x2\x132\x904\x3\x2\x2\x2\x134\x915\x3"+
		"\x2\x2\x2\x136\x917\x3\x2\x2\x2\x138\x927\x3\x2\x2\x2\x13A\x934\x3\x2"+
		"\x2\x2\x13C\x936\x3\x2\x2\x2\x13E\x939\x3\x2\x2\x2\x140\x93D\x3\x2\x2"+
		"\x2\x142\x948\x3\x2\x2\x2\x144\x94B\x3\x2\x2\x2\x146\x94D\x3\x2\x2\x2"+
		"\x148\x95E\x3\x2\x2\x2\x14A\x962\x3\x2\x2\x2\x14C\x964\x3\x2\x2\x2\x14E"+
		"\x968\x3\x2\x2\x2\x150\x96C\x3\x2\x2\x2\x152\x972\x3\x2\x2\x2\x154\x974"+
		"\x3\x2\x2\x2\x156\x977\x3\x2\x2\x2\x158\x97A\x3\x2\x2\x2\x15A\x999\x3"+
		"\x2\x2\x2\x15C\x99C\x3\x2\x2\x2\x15E\x99E\x3\x2\x2\x2\x160\x9A1\x3\x2"+
		"\x2\x2\x162\x9A3\x3\x2\x2\x2\x164\x165\x5\x88\x45\x2\x165\x166\a\x2\x2"+
		"\x3\x166\x3\x3\x2\x2\x2\x167\x168\aR\x2\x2\x168\x169\a\x18\x2\x2\x169"+
		"\x16E\x5r:\x2\x16A\x16B\aR\x2\x2\x16B\x16C\a\x18\x2\x2\x16C\x16E\x5x="+
		"\x2\x16D\x167\x3\x2\x2\x2\x16D\x16A\x3\x2\x2\x2\x16E\x5\x3\x2\x2\x2\x16F"+
		"\x170\aP\x2\x2\x170\x171\a\x18\x2\x2\x171\x176\x5\x11E\x90\x2\x172\x177"+
		"\x5\b\x5\x2\x173\x177\x5\f\a\x2\x174\x177\x5\n\x6\x2\x175\x177\x5\x10"+
		"\t\x2\x176\x172\x3\x2\x2\x2\x176\x173\x3\x2\x2\x2\x176\x174\x3\x2\x2\x2"+
		"\x176\x175\x3\x2\x2\x2\x177\a\x3\x2\x2\x2\x178\x179\a?\x2\x2\x179\x17C"+
		"\a\x1A\x2\x2\x17A\x17D\x5n\x38\x2\x17B\x17D\x5z>\x2\x17C\x17A\x3\x2\x2"+
		"\x2\x17C\x17B\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E\x17F\a\x66\x2\x2"+
		"\x17F\x180\x5\xCEh\x2\x180\x183\a\x1A\x2\x2\x181\x184\x5n\x38\x2\x182"+
		"\x184\x5z>\x2\x183\x181\x3\x2\x2\x2\x183\x182\x3\x2\x2\x2\x184\t\x3\x2"+
		"\x2\x2\x185\x186\aR\x2\x2\x186\x187\a\x1D\x2\x2\x187\x189\x5r:\x2\x188"+
		"\x18A\x5\x18\r\x2\x189\x188\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\v\x3"+
		"\x2\x2\x2\x18B\x18C\aN\x2\x2\x18C\x18D\a\x1D\x2\x2\x18D\x1AF\x5r:\x2\x18E"+
		"\x18F\a\x1F\x2\x2\x18F\x191\a \x2\x2\x190\x192\x5\x160\xB1\x2\x191\x190"+
		"\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x194\a\xB7"+
		"\x2\x2\x194\x195\x5&\x14\x2\x195\x197\a\xB8\x2\x2\x196\x198\x5\x18\r\x2"+
		"\x197\x196\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x19B\x3\x2\x2\x2\x199"+
		"\x19A\ag\x2\x2\x19A\x19C\x5\xE\b\x2\x19B\x199\x3\x2\x2\x2\x19B\x19C\x3"+
		"\x2\x2\x2\x19C\x1B0\x3\x2\x2\x2\x19D\x19E\aZ\x2\x2\x19E\x19F\a\xB7\x2"+
		"\x2\x19F\x1A0\x5j\x36\x2\x1A0\x1A1\a\xB8\x2\x2\x1A1\x1A2\aU\x2\x2\x1A2"+
		"\x1A3\x5r:\x2\x1A3\x1B0\x3\x2\x2\x2\x1A4\x1A5\a\x1E\x2\x2\x1A5\x1A6\a"+
		" \x2\x2\x1A6\x1A7\a\xB7\x2\x2\x1A7\x1A8\x5\xC4\x63\x2\x1A8\x1A9\a\xB8"+
		"\x2\x2\x1A9\x1AA\a!\x2\x2\x1AA\x1AB\x5\x126\x94\x2\x1AB\x1AC\a\xB7\x2"+
		"\x2\x1AC\x1AD\x5\xC4\x63\x2\x1AD\x1AE\a\xB8\x2\x2\x1AE\x1B0\x3\x2\x2\x2"+
		"\x1AF\x18E\x3\x2\x2\x2\x1AF\x19D\x3\x2\x2\x2\x1AF\x1A4\x3\x2\x2\x2\x1B0"+
		"\r\x3\x2\x2\x2\x1B1\x1BB\a\x1F\x2\x2\x1B2\x1B3\a\xB9\x2\x2\x1B3\x1B4\a"+
		"\x1F\x2\x2\x1B4\x1BB\a\xBA\x2\x2\x1B5\x1B6\x5r:\x2\x1B6\x1B7\a\xB7\x2"+
		"\x2\x1B7\x1B8\x5\xC4\x63\x2\x1B8\x1B9\a\xB8\x2\x2\x1B9\x1BB\x3\x2\x2\x2"+
		"\x1BA\x1B1\x3\x2\x2\x2\x1BA\x1B2\x3\x2\x2\x2\x1BA\x1B5\x3\x2\x2\x2\x1BB"+
		"\xF\x3\x2\x2\x2\x1BC\x1BD\t\x2\x2\x2\x1BD\x1BE\a\x9A\x2\x2\x1BE\x1BF\x5"+
		"r:\x2\x1BF\x11\x3\x2\x2\x2\x1C0\x1C1\aP\x2\x2\x1C1\x1C4\a\x1B\x2\x2\x1C2"+
		"\x1C5\x5r:\x2\x1C3\x1C5\a\x45\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C4\x1C3\x3"+
		"\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\ag\x2\x2\x1C7\x1C8\x5r:\x2\x1C8"+
		"\x1CA\x5r:\x2\x1C9\x1CB\x5\x18\r\x2\x1CA\x1C9\x3\x2\x2\x2\x1CA\x1CB\x3"+
		"\x2\x2\x2\x1CB\x13\x3\x2\x2\x2\x1CC\x1CD\aP\x2\x2\x1CD\x1CE\a\x1A\x2\x2"+
		"\x1CE\x1CF\a\xA3\x2\x2\x1CF\x1D0\x5r:\x2\x1D0\x1D1\a\x30\x2\x2\x1D1\x1D2"+
		"\a\xA4\x2\x2\x1D2\x1D3\x5\xE\b\x2\x1D3\x15\x3\x2\x2\x2\x1D4\x1D5\aP\x2"+
		"\x2\x1D5\x1D6\a\x1A\x2\x2\x1D6\x1D7\a\xA2\x2\x2\x1D7\x1D8\x5\x12C\x97"+
		"\x2\x1D8\x1D9\a\xB7\x2\x2\x1D9\x1E6\a\xB8\x2\x2\x1DA\x1DB\a\x8F\x2\x2"+
		"\x1DB\x1DC\a\xA1\x2\x2\x1DC\x1DD\a\xB7\x2\x2\x1DD\x1DE\x5z>\x2\x1DE\x1DF"+
		"\a\xB8\x2\x2\x1DF\x1E7\x3\x2\x2\x2\x1E0\x1E1\a\xA0\x2\x2\x1E1\x1E2\a\xA1"+
		"\x2\x2\x1E2\x1E3\a\xB7\x2\x2\x1E3\x1E4\x5z>\x2\x1E4\x1E5\a\xB8\x2\x2\x1E5"+
		"\x1E7\x3\x2\x2\x2\x1E6\x1DA\x3\x2\x2\x2\x1E6\x1E0\x3\x2\x2\x2\x1E7\x17"+
		"\x3\x2\x2\x2\x1E8\x1E9\aT\x2\x2\x1E9\x1EA\a\xB7\x2\x2\x1EA\x1EF\x5\x1A"+
		"\xE\x2\x1EB\x1EC\a\xC8\x2\x2\x1EC\x1EE\x5\x1A\xE\x2\x1ED\x1EB\x3\x2\x2"+
		"\x2\x1EE\x1F1\x3\x2\x2\x2\x1EF\x1ED\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2"+
		"\x1F0\x1F2\x3\x2\x2\x2\x1F1\x1EF\x3\x2\x2\x2\x1F2\x1F3\a\xB8\x2\x2\x1F3"+
		"\x1F7\x3\x2\x2\x2\x1F4\x1F5\aT\x2\x2\x1F5\x1F7\x5\x1A\xE\x2\x1F6\x1E8"+
		"\x3\x2\x2\x2\x1F6\x1F4\x3\x2\x2\x2\x1F7\x19\x3\x2\x2\x2\x1F8\x1FB\a\xCB"+
		"\x2\x2\x1F9\x1FA\a\xBB\x2\x2\x1FA\x1FC\t\x3\x2\x2\x1FB\x1F9\x3\x2\x2\x2"+
		"\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1B\x3\x2\x2\x2\x1FD\x1FE\aQ\x2\x2\x1FE\x201"+
		"\a\x18\x2\x2\x1FF\x202\x5r:\x2\x200\x202\x5x=\x2\x201\x1FF\x3\x2\x2\x2"+
		"\x201\x200\x3\x2\x2\x2\x202\x203\x3\x2\x2\x2\x203\x204\a\xB7\x2\x2\x204"+
		"\x207\x5\xC6\x64\x2\x205\x206\a\xC8\x2\x2\x206\x208\x5\xCA\x66\x2\x207"+
		"\x205\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x208\x20A\x3\x2\x2\x2\x209\x20B"+
		"\a\xC8\x2\x2\x20A\x209\x3\x2\x2\x2\x20A\x20B\x3\x2\x2\x2\x20B\x20C\x3"+
		"\x2\x2\x2\x20C\x20F\a\xB8\x2\x2\x20D\x20E\ag\x2\x2\x20E\x210\x5\xE\b\x2"+
		"\x20F\x20D\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x1D\x3\x2\x2\x2\x211"+
		"\x212\aR\x2\x2\x212\x213\a\x1B\x2\x2\x213\x219\x5r:\x2\x214\x215\ag\x2"+
		"\x2\x215\x217\x5\x120\x91\x2\x216\x218\x5\x18\r\x2\x217\x216\x3\x2\x2"+
		"\x2\x217\x218\x3\x2\x2\x2\x218\x21A\x3\x2\x2\x2\x219\x214\x3\x2\x2\x2"+
		"\x219\x21A\x3\x2\x2\x2\x21A\x1F\x3\x2\x2\x2\x21B\x21D\aQ\x2\x2\x21C\x21E"+
		"\a:\x2\x2\x21D\x21C\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x220\x3\x2"+
		"\x2\x2\x21F\x221\x5\x160\xB1\x2\x220\x21F\x3\x2\x2\x2\x220\x221\x3\x2"+
		"\x2\x2\x221\x222\x3\x2\x2\x2\x222\x225\a\x1B\x2\x2\x223\x226\x5r:\x2\x224"+
		"\x226\x5v<\x2\x225\x223\x3\x2\x2\x2\x225\x224\x3\x2\x2\x2\x226\x227\x3"+
		"\x2\x2\x2\x227\x228\ag\x2\x2\x228\x229\x5\x120\x91\x2\x229\x22A\a\xB7"+
		"\x2\x2\x22A\x22B\x5&\x14\x2\x22B\x22D\a\xB8\x2\x2\x22C\x22E\x5\"\x12\x2"+
		"\x22D\x22C\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x230\x3\x2\x2\x2\x22F"+
		"\x231\x5\x112\x8A\x2\x230\x22F\x3\x2\x2\x2\x230\x231\x3\x2\x2\x2\x231"+
		"\x233\x3\x2\x2\x2\x232\x234\x5\x18\r\x2\x233\x232\x3\x2\x2\x2\x233\x234"+
		"\x3\x2\x2\x2\x234\x236\x3\x2\x2\x2\x235\x237\x5$\x13\x2\x236\x235\x3\x2"+
		"\x2\x2\x236\x237\x3\x2\x2\x2\x237!\x3\x2\x2\x2\x238\x239\a\x41\x2\x2\x239"+
		"\x23A\a\xB7\x2\x2\x23A\x23B\x5\xC4\x63\x2\x23B\x23C\a\xB8\x2\x2\x23C#"+
		"\x3\x2\x2\x2\x23D\x247\ag\x2\x2\x23E\x23F\x5r:\x2\x23F\x240\a\xB7\x2\x2"+
		"\x240\x241\x5\xC4\x63\x2\x241\x242\a\xB8\x2\x2\x242\x248\x3\x2\x2\x2\x243"+
		"\x244\a\xB9\x2\x2\x244\x245\a\x1F\x2\x2\x245\x248\a\xBA\x2\x2\x246\x248"+
		"\a\x1F\x2\x2\x247\x23E\x3\x2\x2\x2\x247\x243\x3\x2\x2\x2\x247\x246\x3"+
		"\x2\x2\x2\x248%\x3\x2\x2\x2\x249\x24E\x5(\x15\x2\x24A\x24B\a\xC8\x2\x2"+
		"\x24B\x24D\x5(\x15\x2\x24C\x24A\x3\x2\x2\x2\x24D\x250\x3\x2\x2\x2\x24E"+
		"\x24C\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\'\x3\x2\x2\x2\x250\x24E\x3"+
		"\x2\x2\x2\x251\x253\x5\x14C\xA7\x2\x252\x254\t\x4\x2\x2\x253\x252\x3\x2"+
		"\x2\x2\x253\x254\x3\x2\x2\x2\x254)\x3\x2\x2\x2\x255\x256\aQ\x2\x2\x256"+
		"\x257\a\x8D\x2\x2\x257\x258\x5r:\x2\x258\x259\ag\x2\x2\x259\x25A\x5\x120"+
		"\x91\x2\x25A\x25B\a\xB7\x2\x2\x25B\x25C\x5\x146\xA4\x2\x25C\x25D\a\xB8"+
		"\x2\x2\x25D+\x3\x2\x2\x2\x25E\x25F\aR\x2\x2\x25F\x260\a\x19\x2\x2\x260"+
		"\x261\x5r:\x2\x261-\x3\x2\x2\x2\x262\x263\aQ\x2\x2\x263\x264\a\x19\x2"+
		"\x2\x264\x266\x5r:\x2\x265\x267\x5~@\x2\x266\x265\x3\x2\x2\x2\x266\x267"+
		"\x3\x2\x2\x2\x267\x269\x3\x2\x2\x2\x268\x26A\x5\x86\x44\x2\x269\x268\x3"+
		"\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26C\aS\x2"+
		"\x2\x26C\x26D\x5|?\x2\x26D/\x3\x2\x2\x2\x26E\x26F\aM\x2\x2\x26F\x270\a"+
		"\x18\x2\x2\x270\x271\x5\x120\x91\x2\x271\x31\x3\x2\x2\x2\x272\x273\a\x3"+
		"\x2\x2\x273\x27A\a\xCB\x2\x2\x274\x27B\x5\x38\x1D\x2\x275\x277\a\xB7\x2"+
		"\x2\x276\x278\x5\xE4s\x2\x277\x276\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278"+
		"\x279\x3\x2\x2\x2\x279\x27B\a\xB8\x2\x2\x27A\x274\x3\x2\x2\x2\x27A\x275"+
		"\x3\x2\x2\x2\x27B\x27D\x3\x2\x2\x2\x27C\x27E\x5\x18\r\x2\x27D\x27C\x3"+
		"\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E\x281\x3\x2\x2\x2\x27F\x281\a\t\x2"+
		"\x2\x280\x272\x3\x2\x2\x2\x280\x27F\x3\x2\x2\x2\x281\x33\x3\x2\x2\x2\x282"+
		"\x283\x5\x38\x1D\x2\x283\x35\x3\x2\x2\x2\x284\x2BD\x5j\x36\x2\x285\x287"+
		"\x5\x148\xA5\x2\x286\x288\x5\x15E\xB0\x2\x287\x286\x3\x2\x2\x2\x287\x288"+
		"\x3\x2\x2\x2\x288\x2BD\x3\x2\x2\x2\x289\x28B\x5z>\x2\x28A\x28C\x5\x15E"+
		"\xB0\x2\x28B\x28A\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x2BD\x3\x2\x2"+
		"\x2\x28D\x2BD\x5<\x1F\x2\x28E\x2BD\x5\x12E\x98\x2\x28F\x290\a\x34\x2\x2"+
		"\x290\x291\a\xB7\x2\x2\x291\x292\x5\x38\x1D\x2\x292\x293\aS\x2\x2\x293"+
		"\x294\x5\x64\x33\x2\x294\x295\a\xB8\x2\x2\x295\x2BD\x3\x2\x2\x2\x296\x29D"+
		"\t\x5\x2\x2\x297\x29E\x5Z.\x2\x298\x299\a\xB7\x2\x2\x299\x29A\a\x39\x2"+
		"\x2\x29A\x29B\x5Z.\x2\x29B\x29C\a\xB8\x2\x2\x29C\x29E\x3\x2\x2\x2\x29D"+
		"\x297\x3\x2\x2\x2\x29D\x298\x3\x2\x2\x2\x29E\x2BD\x3\x2\x2\x2\x29F\x2BD"+
		"\x5:\x1E\x2\x2A0\x2A2\a\x33\x2\x2\x2A1\x2A3\x5^\x30\x2\x2A2\x2A1\x3\x2"+
		"\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2A2\x3\x2\x2\x2\x2A4\x2A5\x3\x2\x2"+
		"\x2\x2A5\x2A7\x3\x2\x2\x2\x2A6\x2A8\x5`\x31\x2\x2A7\x2A6\x3\x2\x2\x2\x2A7"+
		"\x2A8\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2\x2A9\x2AA\aX\x2\x2\x2AA\x2BD\x3"+
		"\x2\x2\x2\x2AB\x2AC\a\x33\x2\x2\x2AC\x2AE\x5\x38\x1D\x2\x2AD\x2AF\x5^"+
		"\x30\x2\x2AE\x2AD\x3\x2\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0\x2AE\x3\x2\x2"+
		"\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x2B3\x3\x2\x2\x2\x2B2\x2B4\x5`\x31\x2\x2B3"+
		"\x2B2\x3\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B6"+
		"\aX\x2\x2\x2B6\x2BD\x3\x2\x2\x2\x2B7\x2B8\a\xB7\x2\x2\x2B8\x2B9\x5\x38"+
		"\x1D\x2\x2B9\x2BA\a\xB8\x2\x2\x2BA\x2BD\x3\x2\x2\x2\x2BB\x2BD\x5\x62\x32"+
		"\x2\x2BC\x284\x3\x2\x2\x2\x2BC\x285\x3\x2\x2\x2\x2BC\x289\x3\x2\x2\x2"+
		"\x2BC\x28D\x3\x2\x2\x2\x2BC\x28E\x3\x2\x2\x2\x2BC\x28F\x3\x2\x2\x2\x2BC"+
		"\x296\x3\x2\x2\x2\x2BC\x29F\x3\x2\x2\x2\x2BC\x2A0\x3\x2\x2\x2\x2BC\x2AB"+
		"\x3\x2\x2\x2\x2BC\x2B7\x3\x2\x2\x2\x2BC\x2BB\x3\x2\x2\x2\x2BD\x37\x3\x2"+
		"\x2\x2\x2BE\x2C1\x5\x36\x1C\x2\x2BF\x2C1\x5> \x2\x2C0\x2BE\x3\x2\x2\x2"+
		"\x2C0\x2BF\x3\x2\x2\x2\x2C1\x39\x3\x2\x2\x2\x2C2\x2C4\ar\x2\x2\x2C3\x2C2"+
		"\x3\x2\x2\x2\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2C6\aY"+
		"\x2\x2\x2C6\x2C7\a\xB7\x2\x2\x2C7\x2C8\x5\xE8u\x2\x2C8\x2C9\a\xB8\x2\x2"+
		"\x2C9;\x3\x2\x2\x2\x2CA\x2CB\a\x35\x2\x2\x2CB\x2CC\a\xB7\x2\x2\x2CC\x2CD"+
		"\x5\x64\x33\x2\x2CD\x2CE\a\xC8\x2\x2\x2CE\x2D1\x5\x38\x1D\x2\x2CF\x2D0"+
		"\a\xC8\x2\x2\x2D0\x2D2\x5n\x38\x2\x2D1\x2CF\x3\x2\x2\x2\x2D1\x2D2\x3\x2"+
		"\x2\x2\x2D2\x2D3\x3\x2\x2\x2\x2D3\x2D4\a\xB8\x2\x2\x2D4=\x3\x2\x2\x2\x2D5"+
		"\x2D6\x5@!\x2\x2D6?\x3\x2\x2\x2\x2D7\x2D8\b!\x1\x2\x2D8\x2D9\x5\x42\""+
		"\x2\x2D9\x2E2\x3\x2\x2\x2\x2DA\x2DB\f\x4\x2\x2\x2DB\x2DC\a\x8A\x2\x2\x2DC"+
		"\x2E1\x5\x42\"\x2\x2DD\x2DE\f\x3\x2\x2\x2DE\x2DF\a\x4\x2\x2\x2DF\x2E1"+
		"\x5\x42\"\x2\x2E0\x2DA\x3\x2\x2\x2\x2E0\x2DD\x3\x2\x2\x2\x2E1\x2E4\x3"+
		"\x2\x2\x2\x2E2\x2E0\x3\x2\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3\x41\x3\x2\x2"+
		"\x2\x2E4\x2E2\x3\x2\x2\x2\x2E5\x2E6\b\"\x1\x2\x2E6\x2E7\x5\x44#\x2\x2E7"+
		"\x2F0\x3\x2\x2\x2\x2E8\x2E9\f\x4\x2\x2\x2E9\x2EA\a\x89\x2\x2\x2EA\x2EF"+
		"\x5\x44#\x2\x2EB\x2EC\f\x3\x2\x2\x2EC\x2ED\a\x5\x2\x2\x2ED\x2EF\x5\x44"+
		"#\x2\x2EE\x2E8\x3\x2\x2\x2\x2EE\x2EB\x3\x2\x2\x2\x2EF\x2F2\x3\x2\x2\x2"+
		"\x2F0\x2EE\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x43\x3\x2\x2\x2\x2F2"+
		"\x2F0\x3\x2\x2\x2\x2F3\x2F4\b#\x1\x2\x2F4\x2F5\x5\x46$\x2\x2F5\x301\x3"+
		"\x2\x2\x2\x2F6\x2F7\f\x4\x2\x2\x2F7\x2F8\a\xC2\x2\x2\x2F8\x300\x5\x46"+
		"$\x2\x2F9\x2FA\f\x3\x2\x2\x2FA\x2FC\ap\x2\x2\x2FB\x2FD\ar\x2\x2\x2FC\x2FB"+
		"\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x300\as"+
		"\x2\x2\x2FF\x2F6\x3\x2\x2\x2\x2FF\x2F9\x3\x2\x2\x2\x300\x303\x3\x2\x2"+
		"\x2\x301\x2FF\x3\x2\x2\x2\x301\x302\x3\x2\x2\x2\x302\x45\x3\x2\x2\x2\x303"+
		"\x301\x3\x2\x2\x2\x304\x305\b$\x1\x2\x305\x306\x5H%\x2\x306\x30C\x3\x2"+
		"\x2\x2\x307\x308\f\x3\x2\x2\x308\x309\a\xC4\x2\x2\x309\x30B\x5H%\x2\x30A"+
		"\x307\x3\x2\x2\x2\x30B\x30E\x3\x2\x2\x2\x30C\x30A\x3\x2\x2\x2\x30C\x30D"+
		"\x3\x2\x2\x2\x30DG\x3\x2\x2\x2\x30E\x30C\x3\x2\x2\x2\x30F\x310\b%\x1\x2"+
		"\x310\x311\x5J&\x2\x311\x317\x3\x2\x2\x2\x312\x313\f\x3\x2\x2\x313\x314"+
		"\a\xC1\x2\x2\x314\x316\x5J&\x2\x315\x312\x3\x2\x2\x2\x316\x319\x3\x2\x2"+
		"\x2\x317\x315\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2\x318I\x3\x2\x2\x2\x319"+
		"\x317\x3\x2\x2\x2\x31A\x31B\b&\x1\x2\x31B\x31C\x5L\'\x2\x31C\x328\x3\x2"+
		"\x2\x2\x31D\x31E\f\x5\x2\x2\x31E\x31F\a\xBB\x2\x2\x31F\x327\x5L\'\x2\x320"+
		"\x321\f\x4\x2\x2\x321\x322\a\xAC\x2\x2\x322\x327\x5L\'\x2\x323\x324\f"+
		"\x3\x2\x2\x324\x325\a\xAD\x2\x2\x325\x327\x5L\'\x2\x326\x31D\x3\x2\x2"+
		"\x2\x326\x320\x3\x2\x2\x2\x326\x323\x3\x2\x2\x2\x327\x32A\x3\x2\x2\x2"+
		"\x328\x326\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329K\x3\x2\x2\x2\x32A\x328"+
		"\x3\x2\x2\x2\x32B\x32C\b\'\x1\x2\x32C\x32D\x5N(\x2\x32D\x34E\x3\x2\x2"+
		"\x2\x32E\x32F\f\v\x2\x2\x32F\x330\a\xA7\x2\x2\x330\x34D\x5N(\x2\x331\x332"+
		"\f\n\x2\x2\x332\x333\a\xA9\x2\x2\x333\x34D\x5N(\x2\x334\x335\f\t\x2\x2"+
		"\x335\x336\a\xA8\x2\x2\x336\x34D\x5N(\x2\x337\x338\f\b\x2\x2\x338\x339"+
		"\a\xA7\x2\x2\x339\x33A\a\xBB\x2\x2\x33A\x34D\x5N(\x2\x33B\x33C\f\a\x2"+
		"\x2\x33C\x33D\a\xAA\x2\x2\x33D\x34D\x5N(\x2\x33E\x33F\f\x6\x2\x2\x33F"+
		"\x340\a\xA9\x2\x2\x340\x341\a\xBB\x2\x2\x341\x34D\x5N(\x2\x342\x343\f"+
		"\x5\x2\x2\x343\x344\a\xAB\x2\x2\x344\x34D\x5N(\x2\x345\x346\f\x4\x2\x2"+
		"\x346\x347\ax\x2\x2\x347\x34D\x5X-\x2\x348\x349\f\x3\x2\x2\x349\x34A\a"+
		"r\x2\x2\x34A\x34B\ax\x2\x2\x34B\x34D\x5X-\x2\x34C\x32E\x3\x2\x2\x2\x34C"+
		"\x331\x3\x2\x2\x2\x34C\x334\x3\x2\x2\x2\x34C\x337\x3\x2\x2\x2\x34C\x33B"+
		"\x3\x2\x2\x2\x34C\x33E\x3\x2\x2\x2\x34C\x342\x3\x2\x2\x2\x34C\x345\x3"+
		"\x2\x2\x2\x34C\x348\x3\x2\x2\x2\x34D\x350\x3\x2\x2\x2\x34E\x34C\x3\x2"+
		"\x2\x2\x34E\x34F\x3\x2\x2\x2\x34FM\x3\x2\x2\x2\x350\x34E\x3\x2\x2\x2\x351"+
		"\x352\b(\x1\x2\x352\x353\x5P)\x2\x353\x35C\x3\x2\x2\x2\x354\x355\f\x4"+
		"\x2\x2\x355\x356\a\xC5\x2\x2\x356\x35B\x5P)\x2\x357\x358\f\x3\x2\x2\x358"+
		"\x359\a\xC6\x2\x2\x359\x35B\x5P)\x2\x35A\x354\x3\x2\x2\x2\x35A\x357\x3"+
		"\x2\x2\x2\x35B\x35E\x3\x2\x2\x2\x35C\x35A\x3\x2\x2\x2\x35C\x35D\x3\x2"+
		"\x2\x2\x35DO\x3\x2\x2\x2\x35E\x35C\x3\x2\x2\x2\x35F\x360\b)\x1\x2\x360"+
		"\x361\x5R*\x2\x361\x36D\x3\x2\x2\x2\x362\x363\f\x5\x2\x2\x363\x364\a\xBF"+
		"\x2\x2\x364\x36C\x5R*\x2\x365\x366\f\x4\x2\x2\x366\x367\a\xC0\x2\x2\x367"+
		"\x36C\x5R*\x2\x368\x369\f\x3\x2\x2\x369\x36A\a\xC3\x2\x2\x36A\x36C\x5"+
		"R*\x2\x36B\x362\x3\x2\x2\x2\x36B\x365\x3\x2\x2\x2\x36B\x368\x3\x2\x2\x2"+
		"\x36C\x36F\x3\x2\x2\x2\x36D\x36B\x3\x2\x2\x2\x36D\x36E\x3\x2\x2\x2\x36E"+
		"Q\x3\x2\x2\x2\x36F\x36D\x3\x2\x2\x2\x370\x371\a\xC5\x2\x2\x371\x376\x5"+
		"R*\x2\x372\x373\a\xC6\x2\x2\x373\x376\x5R*\x2\x374\x376\x5T+\x2\x375\x370"+
		"\x3\x2\x2\x2\x375\x372\x3\x2\x2\x2\x375\x374\x3\x2\x2\x2\x376S\x3\x2\x2"+
		"\x2\x377\x37B\x5V,\x2\x378\x379\ar\x2\x2\x379\x37B\x5R*\x2\x37A\x377\x3"+
		"\x2\x2\x2\x37A\x378\x3\x2\x2\x2\x37BU\x3\x2\x2\x2\x37C\x37D\b,\x1\x2\x37D"+
		"\x37E\x5\x36\x1C\x2\x37E\x397\x3\x2\x2\x2\x37F\x380\f\x6\x2\x2\x380\x381"+
		"\aq\x2\x2\x381\x396\x5\\/\x2\x382\x383\f\x5\x2\x2\x383\x384\ar\x2\x2\x384"+
		"\x385\aq\x2\x2\x385\x396\x5\\/\x2\x386\x388\f\x4\x2\x2\x387\x389\ar\x2"+
		"\x2\x388\x387\x3\x2\x2\x2\x388\x389\x3\x2\x2\x2\x389\x38A\x3\x2\x2\x2"+
		"\x38A\x38B\at\x2\x2\x38B\x38C\x5\x38\x1D\x2\x38C\x38D\a\x89\x2\x2\x38D"+
		"\x38E\x5\x38\x1D\x2\x38E\x396\x3\x2\x2\x2\x38F\x391\f\x3\x2\x2\x390\x392"+
		"\ar\x2\x2\x391\x390\x3\x2\x2\x2\x391\x392\x3\x2\x2\x2\x392\x393\x3\x2"+
		"\x2\x2\x393\x394\ax\x2\x2\x394\x396\x5X-\x2\x395\x37F\x3\x2\x2\x2\x395"+
		"\x382\x3\x2\x2\x2\x395\x386\x3\x2\x2\x2\x395\x38F\x3\x2\x2\x2\x396\x399"+
		"\x3\x2\x2\x2\x397\x395\x3\x2\x2\x2\x397\x398\x3\x2\x2\x2\x398W\x3\x2\x2"+
		"\x2\x399\x397\x3\x2\x2\x2\x39A\x39D\x5l\x37\x2\x39B\x39C\ay\x2\x2\x39C"+
		"\x39E\a\xCA\x2\x2\x39D\x39B\x3\x2\x2\x2\x39D\x39E\x3\x2\x2\x2\x39E\x3A1"+
		"\x3\x2\x2\x2\x39F\x3A1\x5\x12E\x98\x2\x3A0\x39A\x3\x2\x2\x2\x3A0\x39F"+
		"\x3\x2\x2\x2\x3A1Y\x3\x2\x2\x2\x3A2\x3AB\a\xBF\x2\x2\x3A3\x3AB\x5\x148"+
		"\xA5\x2\x3A4\x3AB\x5j\x36\x2\x3A5\x3AB\x5\x12E\x98\x2\x3A6\x3A7\a\xB7"+
		"\x2\x2\x3A7\x3A8\x5Z.\x2\x3A8\x3A9\a\xB8\x2\x2\x3A9\x3AB\x3\x2\x2\x2\x3AA"+
		"\x3A2\x3\x2\x2\x2\x3AA\x3A3\x3\x2\x2\x2\x3AA\x3A4\x3\x2\x2\x2\x3AA\x3A5"+
		"\x3\x2\x2\x2\x3AA\x3A6\x3\x2\x2\x2\x3AB[\x3\x2\x2\x2\x3AC\x3AD\a\xB7\x2"+
		"\x2\x3AD\x3B2\x5\x38\x1D\x2\x3AE\x3AF\a\xC8\x2\x2\x3AF\x3B1\x5\x38\x1D"+
		"\x2\x3B0\x3AE\x3\x2\x2\x2\x3B1\x3B4\x3\x2\x2\x2\x3B2\x3B0\x3\x2\x2\x2"+
		"\x3B2\x3B3\x3\x2\x2\x2\x3B3\x3B5\x3\x2\x2\x2\x3B4\x3B2\x3\x2\x2\x2\x3B5"+
		"\x3B6\a\xB8\x2\x2\x3B6\x3BE\x3\x2\x2\x2\x3B7\x3B9\x5z>\x2\x3B8\x3BA\x5"+
		"\x15E\xB0\x2\x3B9\x3B8\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BE\x3"+
		"\x2\x2\x2\x3BB\x3BE\x5\x12E\x98\x2\x3BC\x3BE\x5\x62\x32\x2\x3BD\x3AC\x3"+
		"\x2\x2\x2\x3BD\x3B7\x3\x2\x2\x2\x3BD\x3BB\x3\x2\x2\x2\x3BD\x3BC\x3\x2"+
		"\x2\x2\x3BE]\x3\x2\x2\x2\x3BF\x3C0\a=\x2\x2\x3C0\x3C1\x5\x38\x1D\x2\x3C1"+
		"\x3C2\a>\x2\x2\x3C2\x3C3\x5\x38\x1D\x2\x3C3_\x3\x2\x2\x2\x3C4\x3C5\aH"+
		"\x2\x2\x3C5\x3C6\x5\x38\x1D\x2\x3C6\x61\x3\x2\x2\x2\x3C7\x3C8\a\xB7\x2"+
		"\x2\x3C8\x3C9\x5\xE8u\x2\x3C9\x3CA\a\xB8\x2\x2\x3CA\x63\x3\x2\x2\x2\x3CB"+
		"\x3D4\x5r:\x2\x3CC\x3D4\x5\x138\x9D\x2\x3CD\x3D4\x5\x13A\x9E\x2\x3CE\x3D4"+
		"\x5\x13E\xA0\x2\x3CF\x3D4\x5\x13C\x9F\x2\x3D0\x3D4\a\x93\x2\x2\x3D1\x3D4"+
		"\a(\x2\x2\x3D2\x3D4\x5\x66\x34\x2\x3D3\x3CB\x3\x2\x2\x2\x3D3\x3CC\x3\x2"+
		"\x2\x2\x3D3\x3CD\x3\x2\x2\x2\x3D3\x3CE\x3\x2\x2\x2\x3D3\x3CF\x3\x2\x2"+
		"\x2\x3D3\x3D0\x3\x2\x2\x2\x3D3\x3D1\x3\x2\x2\x2\x3D3\x3D2\x3\x2\x2\x2"+
		"\x3D4\x65\x3\x2\x2\x2\x3D5\x3D6\a\xB9\x2\x2\x3D6\x3D7\x5\x64\x33\x2\x3D7"+
		"\x3D8\a\xBA\x2\x2\x3D8g\x3\x2\x2\x2\x3D9\x3DA\a\xB7\x2\x2\x3DA\x3EB\a"+
		"\xB8\x2\x2\x3DB\x3DC\a\xB7\x2\x2\x3DC\x3DD\x5\xE8u\x2\x3DD\x3DE\a\xB8"+
		"\x2\x2\x3DE\x3EB\x3\x2\x2\x2\x3DF\x3E0\a\xB7\x2\x2\x3E0\x3E5\x5\x38\x1D"+
		"\x2\x3E1\x3E2\a\xC8\x2\x2\x3E2\x3E4\x5\x38\x1D\x2\x3E3\x3E1\x3\x2\x2\x2"+
		"\x3E4\x3E7\x3\x2\x2\x2\x3E5\x3E3\x3\x2\x2\x2\x3E5\x3E6\x3\x2\x2\x2\x3E6"+
		"\x3E8\x3\x2\x2\x2\x3E7\x3E5\x3\x2\x2\x2\x3E8\x3E9\a\xB8\x2\x2\x3E9\x3EB"+
		"\x3\x2\x2\x2\x3EA\x3D9\x3\x2\x2\x2\x3EA\x3DB\x3\x2\x2\x2\x3EA\x3DF\x3"+
		"\x2\x2\x2\x3EBi\x3\x2\x2\x2\x3EC\x3FC\a\xCA\x2\x2\x3ED\x3FC\x5n\x38\x2"+
		"\x3EE\x3FC\a\xC9\x2\x2\x3EF\x3FC\as\x2\x2\x3F0\x3F1\a\xB7\x2\x2\x3F1\x3F6"+
		"\x5j\x36\x2\x3F2\x3F3\a\xC8\x2\x2\x3F3\x3F5\x5j\x36\x2\x3F4\x3F2\x3\x2"+
		"\x2\x2\x3F5\x3F8\x3\x2\x2\x2\x3F6\x3F4\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2"+
		"\x2\x3F7\x3F9\x3\x2\x2\x2\x3F8\x3F6\x3\x2\x2\x2\x3F9\x3FA\a\xB8\x2\x2"+
		"\x3FA\x3FC\x3\x2\x2\x2\x3FB\x3EC\x3\x2\x2\x2\x3FB\x3ED\x3\x2\x2\x2\x3FB"+
		"\x3EE\x3\x2\x2\x2\x3FB\x3EF\x3\x2\x2\x2\x3FB\x3F0\x3\x2\x2\x2\x3FCk\x3"+
		"\x2\x2\x2\x3FD\x400\a\xCA\x2\x2\x3FE\x400\x5z>\x2\x3FF\x3FD\x3\x2\x2\x2"+
		"\x3FF\x3FE\x3\x2\x2\x2\x400m\x3\x2\x2\x2\x401\x403\t\x6\x2\x2\x402\x401"+
		"\x3\x2\x2\x2\x402\x403\x3\x2\x2\x2\x403\x404\x3\x2\x2\x2\x404\x40A\a\xCC"+
		"\x2\x2\x405\x406\a\xB7\x2\x2\x406\x407\x5n\x38\x2\x407\x408\a\xB8\x2\x2"+
		"\x408\x40A\x3\x2\x2\x2\x409\x402\x3\x2\x2\x2\x409\x405\x3\x2\x2\x2\x40A"+
		"o\x3\x2\x2\x2\x40B\x40D\a\xB9\x2\x2\x40C\x40E\x5\x162\xB2\x2\x40D\x40C"+
		"\x3\x2\x2\x2\x40E\x40F\x3\x2\x2\x2\x40F\x40D\x3\x2\x2\x2\x40F\x410\x3"+
		"\x2\x2\x2\x410\x411\x3\x2\x2\x2\x411\x412\a\xBA\x2\x2\x412\x415\x3\x2"+
		"\x2\x2\x413\x415\a\xCB\x2\x2\x414\x40B\x3\x2\x2\x2\x414\x413\x3\x2\x2"+
		"\x2\x415q\x3\x2\x2\x2\x416\x41F\x5p\x39\x2\x417\x419\a\xC7\x2\x2\x418"+
		"\x417\x3\x2\x2\x2\x419\x41A\x3\x2\x2\x2\x41A\x418\x3\x2\x2\x2\x41A\x41B"+
		"\x3\x2\x2\x2\x41B\x41C\x3\x2\x2\x2\x41C\x41E\x5p\x39\x2\x41D\x418\x3\x2"+
		"\x2\x2\x41E\x421\x3\x2\x2\x2\x41F\x41D\x3\x2\x2\x2\x41F\x420\x3\x2\x2"+
		"\x2\x420\x424\x3\x2\x2\x2\x421\x41F\x3\x2\x2\x2\x422\x424\x5\x162\xB2"+
		"\x2\x423\x416\x3\x2\x2\x2\x423\x422\x3\x2\x2\x2\x424s\x3\x2\x2\x2\x425"+
		"\x42A\x5r:\x2\x426\x427\a\xC8\x2\x2\x427\x429\x5r:\x2\x428\x426\x3\x2"+
		"\x2\x2\x429\x42C\x3\x2\x2\x2\x42A\x428\x3\x2\x2\x2\x42A\x42B\x3\x2\x2"+
		"\x2\x42Bu\x3\x2\x2\x2\x42C\x42A\x3\x2\x2\x2\x42D\x42F\a\xB6\x2\x2\x42E"+
		"\x42D\x3\x2\x2\x2\x42F\x430\x3\x2\x2\x2\x430\x42E\x3\x2\x2\x2\x430\x431"+
		"\x3\x2\x2\x2\x431\x434\x3\x2\x2\x2\x432\x435\x5p\x39\x2\x433\x435\x5\x162"+
		"\xB2\x2\x434\x432\x3\x2\x2\x2\x434\x433\x3\x2\x2\x2\x435w\x3\x2\x2\x2"+
		"\x436\x438\a\xB6\x2\x2\x437\x436\x3\x2\x2\x2\x438\x439\x3\x2\x2\x2\x439"+
		"\x437\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43D\x3\x2\x2\x2\x43B\x43E"+
		"\x5p\x39\x2\x43C\x43E\x5\x162\xB2\x2\x43D\x43B\x3\x2\x2\x2\x43D\x43C\x3"+
		"\x2\x2\x2\x43E\x444\x3\x2\x2\x2\x43F\x440\x5r:\x2\x440\x441\a\xC7\x2\x2"+
		"\x441\x442\x5x=\x2\x442\x444\x3\x2\x2\x2\x443\x437\x3\x2\x2\x2\x443\x43F"+
		"\x3\x2\x2\x2\x444y\x3\x2\x2\x2\x445\x447\a\xBC\x2\x2\x446\x445\x3\x2\x2"+
		"\x2\x447\x448\x3\x2\x2\x2\x448\x446\x3\x2\x2\x2\x448\x449\x3\x2\x2\x2"+
		"\x449\x44A\x3\x2\x2\x2\x44A\x452\a\xCB\x2\x2\x44B\x44D\a\xBC\x2\x2\x44C"+
		"\x44B\x3\x2\x2\x2\x44D\x44E\x3\x2\x2\x2\x44E\x44C\x3\x2\x2\x2\x44E\x44F"+
		"\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450\x452\x5\x162\xB2\x2\x451\x446"+
		"\x3\x2\x2\x2\x451\x44C\x3\x2\x2\x2\x452{\x3\x2\x2\x2\x453\x454\x5\x88"+
		"\x45\x2\x454}\x3\x2\x2\x2\x455\x45E\a\xB7\x2\x2\x456\x45B\x5\x80\x41\x2"+
		"\x457\x458\a\xC8\x2\x2\x458\x45A\x5\x80\x41\x2\x459\x457\x3\x2\x2\x2\x45A"+
		"\x45D\x3\x2\x2\x2\x45B\x459\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45F"+
		"\x3\x2\x2\x2\x45D\x45B\x3\x2\x2\x2\x45E\x456\x3\x2\x2\x2\x45E\x45F\x3"+
		"\x2\x2\x2\x45F\x460\x3\x2\x2\x2\x460\x46A\a\xB8\x2\x2\x461\x466\x5\x80"+
		"\x41\x2\x462\x463\a\xC8\x2\x2\x463\x465\x5\x80\x41\x2\x464\x462\x3\x2"+
		"\x2\x2\x465\x468\x3\x2\x2\x2\x466\x464\x3\x2\x2\x2\x466\x467\x3\x2\x2"+
		"\x2\x467\x46A\x3\x2\x2\x2\x468\x466\x3\x2\x2\x2\x469\x455\x3\x2\x2\x2"+
		"\x469\x461\x3\x2\x2\x2\x46A\x7F\x3\x2\x2\x2\x46B\x46D\x5\x84\x43\x2\x46C"+
		"\x46E\aS\x2\x2\x46D\x46C\x3\x2\x2\x2\x46D\x46E\x3\x2\x2\x2\x46E\x46F\x3"+
		"\x2\x2\x2\x46F\x471\x5\x64\x33\x2\x470\x472\ar\x2\x2\x471\x470\x3\x2\x2"+
		"\x2\x471\x472\x3\x2\x2\x2\x472\x474\x3\x2\x2\x2\x473\x475\as\x2\x2\x474"+
		"\x473\x3\x2\x2\x2\x474\x475\x3\x2\x2\x2\x475\x477\x3\x2\x2\x2\x476\x478"+
		"\x5\x82\x42\x2\x477\x476\x3\x2\x2\x2\x477\x478\x3\x2\x2\x2\x478\x47A\x3"+
		"\x2\x2\x2\x479\x47B\a\xE\x2\x2\x47A\x479\x3\x2\x2\x2\x47A\x47B\x3\x2\x2"+
		"\x2\x47B\x47D\x3\x2\x2\x2\x47C\x47E\t\a\x2\x2\x47D\x47C\x3\x2\x2\x2\x47D"+
		"\x47E\x3\x2\x2\x2\x47E\x81\x3\x2\x2\x2\x47F\x480\a\xBB\x2\x2\x480\x484"+
		"\x5j\x36\x2\x481\x482\a\xBB\x2\x2\x482\x484\as\x2\x2\x483\x47F\x3\x2\x2"+
		"\x2\x483\x481\x3\x2\x2\x2\x484\x83\x3\x2\x2\x2\x485\x486\x5z>\x2\x486"+
		"\x85\x3\x2\x2\x2\x487\x488\aT\x2\x2\x488\x48D\a\xCB\x2\x2\x489\x48A\a"+
		"\xC8\x2\x2\x48A\x48C\a\xCB\x2\x2\x48B\x489\x3\x2\x2\x2\x48C\x48F\x3\x2"+
		"\x2\x2\x48D\x48B\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2\x48E\x87\x3\x2\x2\x2"+
		"\x48F\x48D\x3\x2\x2\x2\x490\x494\x5\x8A\x46\x2\x491\x493\x5\x8A\x46\x2"+
		"\x492\x491\x3\x2\x2\x2\x493\x496\x3\x2\x2\x2\x494\x492\x3\x2\x2\x2\x494"+
		"\x495\x3\x2\x2\x2\x495\x89\x3\x2\x2\x2\x496\x494\x3\x2\x2\x2\x497\x498"+
		"\aW\x2\x2\x498\x499\x5\x88\x45\x2\x499\x49A\aX\x2\x2\x49A\x4A5\x3\x2\x2"+
		"\x2\x49B\x49D\x5\x8CG\x2\x49C\x49E\a\xBD\x2\x2\x49D\x49C\x3\x2\x2\x2\x49D"+
		"\x49E\x3\x2\x2\x2\x49E\x4A5\x3\x2\x2\x2\x49F\x4A1\x5\x8EH\x2\x4A0\x4A2"+
		"\a\xBD\x2\x2\x4A1\x4A0\x3\x2\x2\x2\x4A1\x4A2\x3\x2\x2\x2\x4A2\x4A5\x3"+
		"\x2\x2\x2\x4A3\x4A5\a\xBD\x2\x2\x4A4\x497\x3\x2\x2\x2\x4A4\x49B\x3\x2"+
		"\x2\x2\x4A4\x49F\x3\x2\x2\x2\x4A4\x4A3\x3\x2\x2\x2\x4A5\x8B\x3\x2\x2\x2"+
		"\x4A6\x4B4\x5.\x18\x2\x4A7\x4B4\x5\x1C\xF\x2\x4A8\x4B4\x5 \x11\x2\x4A9"+
		"\x4B4\x5*\x16\x2\x4AA\x4B4\x5,\x17\x2\x4AB\x4B4\x5\x4\x3\x2\x4AC\x4B4"+
		"\x5\x1E\x10\x2\x4AD\x4B4\x5\x30\x19\x2\x4AE\x4B4\x5\x6\x4\x2\x4AF\x4B4"+
		"\x5\x12\n\x2\x4B0\x4B4\x5\x16\f\x2\x4B1\x4B4\x5\x14\v\x2\x4B2\x4B4\x5"+
		"\x32\x1A\x2\x4B3\x4A6\x3\x2\x2\x2\x4B3\x4A7\x3\x2\x2\x2\x4B3\x4A8\x3\x2"+
		"\x2\x2\x4B3\x4A9\x3\x2\x2\x2\x4B3\x4AA\x3\x2\x2\x2\x4B3\x4AB\x3\x2\x2"+
		"\x2\x4B3\x4AC\x3\x2\x2\x2\x4B3\x4AD\x3\x2\x2\x2\x4B3\x4AE\x3\x2\x2\x2"+
		"\x4B3\x4AF\x3\x2\x2\x2\x4B3\x4B0\x3\x2\x2\x2\x4B3\x4B1\x3\x2\x2\x2\x4B3"+
		"\x4B2\x3\x2\x2\x2\x4B4\x8D\x3\x2\x2\x2\x4B5\x4D9\x5\xE8u\x2\x4B6\x4D9"+
		"\x5\xB2Z\x2\x4B7\x4D9\x5\xA6T\x2\x4B8\x4D9\x5\xDEp\x2\x4B9\x4D9\x5\x130"+
		"\x99\x2\x4BA\x4D9\x5\x118\x8D\x2\x4BB\x4D9\x5\xE6t\x2\x4BC\x4D9\x5\xD0"+
		"i\x2\x4BD\x4D9\x5\xBE`\x2\x4BE\x4D9\x5\xA0Q\x2\x4BF\x4D9\x5\xA2R\x2\x4C0"+
		"\x4D9\x5\x9EP\x2\x4C1\x4D9\x5\x9CO\x2\x4C2\x4D9\x5\xAEX\x2\x4C3\x4D9\x5"+
		"\x152\xAA\x2\x4C4\x4D9\x5\x94K\x2\x4C5\x4D9\x5\x98M\x2\x4C6\x4D9\x5\x9A"+
		"N\x2\x4C7\x4C9\aL\x2\x2\x4C8\x4CA\x5r:\x2\x4C9\x4C8\x3\x2\x2\x2\x4C9\x4CA"+
		"\x3\x2\x2\x2\x4CA\x4D9\x3\x2\x2\x2\x4CB\x4CD\aK\x2\x2\x4CC\x4CE\x5r:\x2"+
		"\x4CD\x4CC\x3\x2\x2\x2\x4CD\x4CE\x3\x2\x2\x2\x4CE\x4D9\x3\x2\x2\x2\x4CF"+
		"\x4D9\x5\x90I\x2\x4D0\x4D2\aJ\x2\x2\x4D1\x4D3\x5r:\x2\x4D2\x4D1\x3\x2"+
		"\x2\x2\x4D2\x4D3\x3\x2\x2\x2\x4D3\x4D9\x3\x2\x2\x2\x4D4\x4D9\x5\x92J\x2"+
		"\x4D5\x4D9\x5\x96L\x2\x4D6\x4D7\a\xCB\x2\x2\x4D7\x4D9\a\xBE\x2\x2\x4D8"+
		"\x4B5\x3\x2\x2\x2\x4D8\x4B6\x3\x2\x2\x2\x4D8\x4B7\x3\x2\x2\x2\x4D8\x4B8"+
		"\x3\x2\x2\x2\x4D8\x4B9\x3\x2\x2\x2\x4D8\x4BA\x3\x2\x2\x2\x4D8\x4BB\x3"+
		"\x2\x2\x2\x4D8\x4BC\x3\x2\x2\x2\x4D8\x4BD\x3\x2\x2\x2\x4D8\x4BE\x3\x2"+
		"\x2\x2\x4D8\x4BF\x3\x2\x2\x2\x4D8\x4C0\x3\x2\x2\x2\x4D8\x4C1\x3\x2\x2"+
		"\x2\x4D8\x4C2\x3\x2\x2\x2\x4D8\x4C3\x3\x2\x2\x2\x4D8\x4C4\x3\x2\x2\x2"+
		"\x4D8\x4C5\x3\x2\x2\x2\x4D8\x4C6\x3\x2\x2\x2\x4D8\x4C7\x3\x2\x2\x2\x4D8"+
		"\x4CB\x3\x2\x2\x2\x4D8\x4CF\x3\x2\x2\x2\x4D8\x4D0\x3\x2\x2\x2\x4D8\x4D4"+
		"\x3\x2\x2\x2\x4D8\x4D5\x3\x2\x2\x2\x4D8\x4D6\x3\x2\x2\x2\x4D9\x8F\x3\x2"+
		"\x2\x2\x4DA\x4DC\a\x12\x2\x2\x4DB\x4DD\a\x11\x2\x2\x4DC\x4DB\x3\x2\x2"+
		"\x2\x4DC\x4DD\x3\x2\x2\x2\x4DD\x4DF\x3\x2\x2\x2\x4DE\x4E0\x5r:\x2\x4DF"+
		"\x4DE\x3\x2\x2\x2\x4DF\x4E0\x3\x2\x2\x2\x4E0\x91\x3\x2\x2\x2\x4E1\x4E3"+
		"\a\x13\x2\x2\x4E2\x4E4\a\x11\x2\x2\x4E3\x4E2\x3\x2\x2\x2\x4E3\x4E4\x3"+
		"\x2\x2\x2\x4E4\x4E6\x3\x2\x2\x2\x4E5\x4E7\x5r:\x2\x4E6\x4E5\x3\x2\x2\x2"+
		"\x4E6\x4E7\x3\x2\x2\x2\x4E7\x93\x3\x2\x2\x2\x4E8\x4E9\a\x15\x2\x2\x4E9"+
		"\x4EA\x5\x38\x1D\x2\x4EA\x95\x3\x2\x2\x2\x4EB\x4ED\au\x2\x2\x4EC\x4EE"+
		"\x5\x38\x1D\x2\x4ED\x4EC\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2\x2\x4EE\x97\x3"+
		"\x2\x2\x2\x4EF\x4F0\aG\x2\x2\x4F0\x4F1\x5\x34\x1B\x2\x4F1\x4F4\x5\x8A"+
		"\x46\x2\x4F2\x4F3\aH\x2\x2\x4F3\x4F5\x5\x8A\x46\x2\x4F4\x4F2\x3\x2\x2"+
		"\x2\x4F4\x4F5\x3\x2\x2\x2\x4F5\x99\x3\x2\x2\x2\x4F6\x4F7\aI\x2\x2\x4F7"+
		"\x4F8\x5\x34\x1B\x2\x4F8\x4F9\x5\x8A\x46\x2\x4F9\x9B\x3\x2\x2\x2\x4FA"+
		"\x4FB\a\x9B\x2\x2\x4FB\x4FC\a\x9C\x2\x2\x4FC\x4FD\a\xCA\x2\x2\x4FD\x9D"+
		"\x3\x2\x2\x2\x4FE\x4FF\a\x14\x2\x2\x4FF\x500\a\xB7\x2\x2\x500\x501\x5"+
		"\xE4s\x2\x501\x504\a\xB8\x2\x2\x502\x503\aT\x2\x2\x503\x505\a\x88\x2\x2"+
		"\x504\x502\x3\x2\x2\x2\x504\x505\x3\x2\x2\x2\x505\x511\x3\x2\x2\x2\x506"+
		"\x508\a\x14\x2\x2\x507\x509\x5\xE2r\x2\x508\x507\x3\x2\x2\x2\x509\x50A"+
		"\x3\x2\x2\x2\x50A\x508\x3\x2\x2\x2\x50A\x50B\x3\x2\x2\x2\x50B\x50E\x3"+
		"\x2\x2\x2\x50C\x50D\aT\x2\x2\x50D\x50F\a\x88\x2\x2\x50E\x50C\x3\x2\x2"+
		"\x2\x50E\x50F\x3\x2\x2\x2\x50F\x511\x3\x2\x2\x2\x510\x4FE\x3\x2\x2\x2"+
		"\x510\x506\x3\x2\x2\x2\x511\x9F\x3\x2\x2\x2\x512\x513\aW\x2\x2\x513\x514"+
		"\a\xF\x2\x2\x514\x515\x5\x88\x45\x2\x515\x516\aX\x2\x2\x516\x517\a\xF"+
		"\x2\x2\x517\x518\aW\x2\x2\x518\x519\a\x10\x2\x2\x519\x51A\x5\x88\x45\x2"+
		"\x51A\x51B\aX\x2\x2\x51B\x51C\a\x10\x2\x2\x51C\xA1\x3\x2\x2\x2\x51D\x51E"+
		"\aW\x2\x2\x51E\x520\a\x11\x2\x2\x51F\x521\x5r:\x2\x520\x51F\x3\x2\x2\x2"+
		"\x520\x521\x3\x2\x2\x2\x521\x522\x3\x2\x2\x2\x522\x523\x5\x88\x45\x2\x523"+
		"\xA3\x3\x2\x2\x2\x524\x52B\a<\x2\x2\x525\x52C\x5n\x38\x2\x526\x52C\x5"+
		"z>\x2\x527\x528\a\xB7\x2\x2\x528\x529\x5z>\x2\x529\x52A\a\xB8\x2\x2\x52A"+
		"\x52C\x3\x2\x2\x2\x52B\x525\x3\x2\x2\x2\x52B\x526\x3\x2\x2\x2\x52B\x527"+
		"\x3\x2\x2\x2\x52C\xA5\x3\x2\x2\x2\x52D\x52F\a_\x2\x2\x52E\x530\x5\xA4"+
		"S\x2\x52F\x52E\x3\x2\x2\x2\x52F\x530\x3\x2\x2\x2\x530\x532\x3\x2\x2\x2"+
		"\x531\x533\x5\xA8U\x2\x532\x531\x3\x2\x2\x2\x533\x534\x3\x2\x2\x2\x534"+
		"\x532\x3\x2\x2\x2\x534\x535\x3\x2\x2\x2\x535\x537\x3\x2\x2\x2\x536\x538"+
		"\x5\xACW\x2\x537\x536\x3\x2\x2\x2\x537\x538\x3\x2\x2\x2\x538\x53C\x3\x2"+
		"\x2\x2\x539\x53B\x5\x10E\x88\x2\x53A\x539\x3\x2\x2\x2\x53B\x53E\x3\x2"+
		"\x2\x2\x53C\x53A\x3\x2\x2\x2\x53C\x53D\x3\x2\x2\x2\x53D\x540\x3\x2\x2"+
		"\x2\x53E\x53C\x3\x2\x2\x2\x53F\x541\x5\x112\x8A\x2\x540\x53F\x3\x2\x2"+
		"\x2\x540\x541\x3\x2\x2\x2\x541\x543\x3\x2\x2\x2\x542\x544\x5\xFC\x7F\x2"+
		"\x543\x542\x3\x2\x2\x2\x543\x544\x3\x2\x2\x2\x544\x55F\x3\x2\x2\x2\x545"+
		"\x547\a_\x2\x2\x546\x548\x5\xA4S\x2\x547\x546\x3\x2\x2\x2\x547\x548\x3"+
		"\x2\x2\x2\x548\x549\x3\x2\x2\x2\x549\x54B\x5\x120\x91\x2\x54A\x54C\x5"+
		"\xAAV\x2\x54B\x54A\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2\x54D\x54B\x3\x2\x2"+
		"\x2\x54D\x54E\x3\x2\x2\x2\x54E\x550\x3\x2\x2\x2\x54F\x551\x5\xACW\x2\x550"+
		"\x54F\x3\x2\x2\x2\x550\x551\x3\x2\x2\x2\x551\x555\x3\x2\x2\x2\x552\x554"+
		"\x5\x10E\x88\x2\x553\x552\x3\x2\x2\x2\x554\x557\x3\x2\x2\x2\x555\x553"+
		"\x3\x2\x2\x2\x555\x556\x3\x2\x2\x2\x556\x559\x3\x2\x2\x2\x557\x555\x3"+
		"\x2\x2\x2\x558\x55A\x5\x112\x8A\x2\x559\x558\x3\x2\x2\x2\x559\x55A\x3"+
		"\x2\x2\x2\x55A\x55C\x3\x2\x2\x2\x55B\x55D\x5\xFC\x7F\x2\x55C\x55B\x3\x2"+
		"\x2\x2\x55C\x55D\x3\x2\x2\x2\x55D\x55F\x3\x2\x2\x2\x55E\x52D\x3\x2\x2"+
		"\x2\x55E\x545\x3\x2\x2\x2\x55F\xA7\x3\x2\x2\x2\x560\x562\a\x61\x2\x2\x561"+
		"\x560\x3\x2\x2\x2\x561\x562\x3\x2\x2\x2\x562\x563\x3\x2\x2\x2\x563\x568"+
		"\x5\x11E\x90\x2\x564\x565\a\xC8\x2\x2\x565\x567\x5\x124\x93\x2\x566\x564"+
		"\x3\x2\x2\x2\x567\x56A\x3\x2\x2\x2\x568\x566\x3\x2\x2\x2\x568\x569\x3"+
		"\x2\x2\x2\x569\xA9\x3\x2\x2\x2\x56A\x568\x3\x2\x2\x2\x56B\x56D\a\x61\x2"+
		"\x2\x56C\x56B\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2"+
		"\x56E\x573\x5\x124\x93\x2\x56F\x570\a\xC8\x2\x2\x570\x572\x5\x124\x93"+
		"\x2\x571\x56F\x3\x2\x2\x2\x572\x575\x3\x2\x2\x2\x573\x571\x3\x2\x2\x2"+
		"\x573\x574\x3\x2\x2\x2\x574\xAB\x3\x2\x2\x2\x575\x573\x3\x2\x2\x2\x576"+
		"\x577\av\x2\x2\x577\x578\x5\x146\xA4\x2\x578\x579\an\x2\x2\x579\x57A\x5"+
		"\x11E\x90\x2\x57A\xAD\x3\x2\x2\x2\x57B\x57C\aT\x2\x2\x57C\x581\x5\xB0"+
		"Y\x2\x57D\x57E\a\xC8\x2\x2\x57E\x580\x5\xB0Y\x2\x57F\x57D\x3\x2\x2\x2"+
		"\x580\x583\x3\x2\x2\x2\x581\x57F\x3\x2\x2\x2\x581\x582\x3\x2\x2\x2\x582"+
		"\x584\x3\x2\x2\x2\x583\x581\x3\x2\x2\x2\x584\x585\x5\x8EH\x2\x585\xAF"+
		"\x3\x2\x2\x2\x586\x58B\x5r:\x2\x587\x588\a\xB7\x2\x2\x588\x589\x5\xC4"+
		"\x63\x2\x589\x58A\a\xB8\x2\x2\x58A\x58C\x3\x2\x2\x2\x58B\x587\x3\x2\x2"+
		"\x2\x58B\x58C\x3\x2\x2\x2\x58C\x58D\x3\x2\x2\x2\x58D\x58E\aS\x2\x2\x58E"+
		"\x58F\a\xB7\x2\x2\x58F\x590\x5\x8EH\x2\x590\x591\a\xB8\x2\x2\x591\xB1"+
		"\x3\x2\x2\x2\x592\x594\x5\xB4[\x2\x593\x595\x5\xB6\\\x2\x594\x593\x3\x2"+
		"\x2\x2\x594\x595\x3\x2\x2\x2\x595\x596\x3\x2\x2\x2\x596\x598\x5\xB8]\x2"+
		"\x597\x599\x5\xFC\x7F\x2\x598\x597\x3\x2\x2\x2\x598\x599\x3\x2\x2\x2\x599"+
		"\xB3\x3\x2\x2\x2\x59A\x59C\a^\x2\x2\x59B\x59D\an\x2\x2\x59C\x59B\x3\x2"+
		"\x2\x2\x59C\x59D\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E\x5A0\x5\x120\x91"+
		"\x2\x59F\x5A1\x5\x122\x92\x2\x5A0\x59F\x3\x2\x2\x2\x5A0\x5A1\x3\x2\x2"+
		"\x2\x5A1\x5A6\x3\x2\x2\x2\x5A2\x5A3\a\xB7\x2\x2\x5A3\x5A4\x5t;\x2\x5A4"+
		"\x5A5\a\xB8\x2\x2\x5A5\x5A7\x3\x2\x2\x2\x5A6\x5A2\x3\x2\x2\x2\x5A6\x5A7"+
		"\x3\x2\x2\x2\x5A7\xB5\x3\x2\x2\x2\x5A8\x5A9\av\x2\x2\x5A9\x5B2\x5\xF8"+
		"}\x2\x5AA\x5AB\an\x2\x2\x5AB\x5B0\x5\x120\x91\x2\x5AC\x5AD\a\xB7\x2\x2"+
		"\x5AD\x5AE\x5\x146\xA4\x2\x5AE\x5AF\a\xB8\x2\x2\x5AF\x5B1\x3\x2\x2\x2"+
		"\x5B0\x5AC\x3\x2\x2\x2\x5B0\x5B1\x3\x2\x2\x2\x5B1\x5B3\x3\x2\x2\x2\x5B2"+
		"\x5AA\x3\x2\x2\x2\x5B2\x5B3\x3\x2\x2\x2\x5B3\xB7\x3\x2\x2\x2\x5B4\x5B5"+
		"\ao\x2\x2\x5B5\x5BA\x5\xBA^\x2\x5B6\x5B7\a\xC8\x2\x2\x5B7\x5B9\x5\xBA"+
		"^\x2\x5B8\x5B6\x3\x2\x2\x2\x5B9\x5BC\x3\x2\x2\x2\x5BA\x5B8\x3\x2\x2\x2"+
		"\x5BA\x5BB\x3\x2\x2\x2\x5BB\x5C2\x3\x2\x2\x2\x5BC\x5BA\x3\x2\x2\x2\x5BD"+
		"\x5BE\aZ\x2\x2\x5BE\x5C2\ao\x2\x2\x5BF\x5C2\x5\xE8u\x2\x5C0\x5C2\x5\x126"+
		"\x94\x2\x5C1\x5B4\x3\x2\x2\x2\x5C1\x5BD\x3\x2\x2\x2\x5C1\x5BF\x3\x2\x2"+
		"\x2\x5C1\x5C0\x3\x2\x2\x2\x5C2\xB9\x3\x2\x2\x2\x5C3\x5C4\a\xB7\x2\x2\x5C4"+
		"\x5C9\x5\xBC_\x2\x5C5\x5C6\a\xC8\x2\x2\x5C6\x5C8\x5\xBC_\x2\x5C7\x5C5"+
		"\x3\x2\x2\x2\x5C8\x5CB\x3\x2\x2\x2\x5C9\x5C7\x3\x2\x2\x2\x5C9\x5CA\x3"+
		"\x2\x2\x2\x5CA\x5CC\x3\x2\x2\x2\x5CB\x5C9\x3\x2\x2\x2\x5CC\x5CD\a\xB8"+
		"\x2\x2\x5CD\xBB\x3\x2\x2\x2\x5CE\x5CF\x5\x38\x1D\x2\x5CF\xBD\x3\x2\x2"+
		"\x2\x5D0\x5D1\a\x63\x2\x2\x5D1\x5D6\x5\xC0\x61\x2\x5D2\x5D3\a\xC8\x2\x2"+
		"\x5D3\x5D5\x5\xC0\x61\x2\x5D4\x5D2\x3\x2\x2\x2\x5D5\x5D8\x3\x2\x2\x2\x5D6"+
		"\x5D4\x3\x2\x2\x2\x5D6\x5D7\x3\x2\x2\x2\x5D7\x5E8\x3\x2\x2\x2\x5D8\x5D6"+
		"\x3\x2\x2\x2\x5D9\x5DA\a\x63\x2\x2\x5DA\x5DB\x5r:\x2\x5DB\x5DD\a(\x2\x2"+
		"\x5DC\x5DE\a\xCB\x2\x2\x5DD\x5DC\x3\x2\x2\x2\x5DD\x5DE\x3\x2\x2\x2\x5DE"+
		"\x5DF\x3\x2\x2\x2\x5DF\x5E0\aU\x2\x2\x5E0\x5E5\x5\xE8u\x2\x5E1\x5E2\a"+
		"U\x2\x2\x5E2\x5E3\a]\x2\x2\x5E3\x5E4\az\x2\x2\x5E4\x5E6\x5\x120\x91\x2"+
		"\x5E5\x5E1\x3\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5E8\x3\x2\x2\x2\x5E7"+
		"\x5D0\x3\x2\x2\x2\x5E7\x5D9\x3\x2\x2\x2\x5E8\xBF\x3\x2\x2\x2\x5E9\x5FD"+
		"\x5z>\x2\x5EA\x5EC\aS\x2\x2\x5EB\x5EA\x3\x2\x2\x2\x5EB\x5EC\x3\x2\x2\x2"+
		"\x5EC\x5ED\x3\x2\x2\x2\x5ED\x5EF\x5\x64\x33\x2\x5EE\x5F0\x5\xC2\x62\x2"+
		"\x5EF\x5EE\x3\x2\x2\x2\x5EF\x5F0\x3\x2\x2\x2\x5F0\x5FE\x3\x2\x2\x2\x5F1"+
		"\x5F2\a\x18\x2\x2\x5F2\x5F3\a\xB7\x2\x2\x5F3\x5F6\x5\xC6\x64\x2\x5F4\x5F5"+
		"\a\xC8\x2\x2\x5F5\x5F7\x5\xCA\x66\x2\x5F6\x5F4\x3\x2\x2\x2\x5F6\x5F7\x3"+
		"\x2\x2\x2\x5F7\x5F9\x3\x2\x2\x2\x5F8\x5FA\a\xC8\x2\x2\x5F9\x5F8\x3\x2"+
		"\x2\x2\x5F9\x5FA\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB\x5FC\a\xB8\x2"+
		"\x2\x5FC\x5FE\x3\x2\x2\x2\x5FD\x5EB\x3\x2\x2\x2\x5FD\x5F1\x3\x2\x2\x2"+
		"\x5FE\xC1\x3\x2\x2\x2\x5FF\x600\a\xBB\x2\x2\x600\x601\x5\x38\x1D\x2\x601"+
		"\xC3\x3\x2\x2\x2\x602\x607\x5\x14C\xA7\x2\x603\x604\a\xC8\x2\x2\x604\x606"+
		"\x5\x14C\xA7\x2\x605\x603\x3\x2\x2\x2\x606\x609\x3\x2\x2\x2\x607\x605"+
		"\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608\xC5\x3\x2\x2\x2\x609\x607\x3\x2"+
		"\x2\x2\x60A\x60F\x5\xC8\x65\x2\x60B\x60C\a\xC8\x2\x2\x60C\x60E\x5\xC8"+
		"\x65\x2\x60D\x60B\x3\x2\x2\x2\x60E\x611\x3\x2\x2\x2\x60F\x60D\x3\x2\x2"+
		"\x2\x60F\x610\x3\x2\x2\x2\x610\xC7\x3\x2\x2\x2\x611\x60F\x3\x2\x2\x2\x612"+
		"\x613\x5\x14C\xA7\x2\x613\x619\x5\x64\x33\x2\x614\x615\a\x1F\x2\x2\x615"+
		"\x617\a \x2\x2\x616\x618\x5\x160\xB1\x2\x617\x616\x3\x2\x2\x2\x617\x618"+
		"\x3\x2\x2\x2\x618\x61A\x3\x2\x2\x2\x619\x614\x3\x2\x2\x2\x619\x61A\x3"+
		"\x2\x2\x2\x61A\x61C\x3\x2\x2\x2\x61B\x61D\ar\x2\x2\x61C\x61B\x3\x2\x2"+
		"\x2\x61C\x61D\x3\x2\x2\x2\x61D\x61F\x3\x2\x2\x2\x61E\x620\as\x2\x2\x61F"+
		"\x61E\x3\x2\x2\x2\x61F\x620\x3\x2\x2\x2\x620\x626\x3\x2\x2\x2\x621\x624"+
		"\aZ\x2\x2\x622\x625\x5j\x36\x2\x623\x625\x5\x12E\x98\x2\x624\x622\x3\x2"+
		"\x2\x2\x624\x623\x3\x2\x2\x2\x625\x627\x3\x2\x2\x2\x626\x621\x3\x2\x2"+
		"\x2\x626\x627\x3\x2\x2\x2\x627\x642\x3\x2\x2\x2\x628\x629\x5\x14C\xA7"+
		"\x2\x629\x62F\x5\x13C\x9F\x2\x62A\x62B\a\x1F\x2\x2\x62B\x62D\a \x2\x2"+
		"\x62C\x62E\x5\x160\xB1\x2\x62D\x62C\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2"+
		"\x62E\x630\x3\x2\x2\x2\x62F\x62A\x3\x2\x2\x2\x62F\x630\x3\x2\x2\x2\x630"+
		"\x632\x3\x2\x2\x2\x631\x633\ar\x2\x2\x632\x631\x3\x2\x2\x2\x632\x633\x3"+
		"\x2\x2\x2\x633\x635\x3\x2\x2\x2\x634\x636\as\x2\x2\x635\x634\x3\x2\x2"+
		"\x2\x635\x636\x3\x2\x2\x2\x636\x638\x3\x2\x2\x2\x637\x639\x5\x140\xA1"+
		"\x2\x638\x637\x3\x2\x2\x2\x638\x639\x3\x2\x2\x2\x639\x63F\x3\x2\x2\x2"+
		"\x63A\x63D\aZ\x2\x2\x63B\x63E\x5j\x36\x2\x63C\x63E\x5\x12E\x98\x2\x63D"+
		"\x63B\x3\x2\x2\x2\x63D\x63C\x3\x2\x2\x2\x63E\x640\x3\x2\x2\x2\x63F\x63A"+
		"\x3\x2\x2\x2\x63F\x640\x3\x2\x2\x2\x640\x642\x3\x2\x2\x2\x641\x612\x3"+
		"\x2\x2\x2\x641\x628\x3\x2\x2\x2\x642\xC9\x3\x2\x2\x2\x643\x648\x5\xCC"+
		"g\x2\x644\x645\a\xC8\x2\x2\x645\x647\x5\xCCg\x2\x646\x644\x3\x2\x2\x2"+
		"\x647\x64A\x3\x2\x2\x2\x648\x646\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649"+
		"\xCB\x3\x2\x2\x2\x64A\x648\x3\x2\x2\x2\x64B\x64D\a:\x2\x2\x64C\x64E\x5"+
		"\x160\xB1\x2\x64D\x64C\x3\x2\x2\x2\x64D\x64E\x3\x2\x2\x2\x64E\x64F\x3"+
		"\x2\x2\x2\x64F\x650\a\xB7\x2\x2\x650\x651\x5\xC4\x63\x2\x651\x652\a\xB8"+
		"\x2\x2\x652\x65F\x3\x2\x2\x2\x653\x654\a\x1F\x2\x2\x654\x656\a \x2\x2"+
		"\x655\x657\x5\x160\xB1\x2\x656\x655\x3\x2\x2\x2\x656\x657\x3\x2\x2\x2"+
		"\x657\x658\x3\x2\x2\x2\x658\x659\a\xB7\x2\x2\x659\x65A\x5&\x14\x2\x65A"+
		"\x65C\a\xB8\x2\x2\x65B\x65D\x5\x18\r\x2\x65C\x65B\x3\x2\x2\x2\x65C\x65D"+
		"\x3\x2\x2\x2\x65D\x65F\x3\x2\x2\x2\x65E\x64B\x3\x2\x2\x2\x65E\x653\x3"+
		"\x2\x2\x2\x65F\xCD\x3\x2\x2\x2\x660\x661\x5r:\x2\x661\xCF\x3\x2\x2\x2"+
		"\x662\x666\a\x65\x2\x2\x663\x667\x5\xD6l\x2\x664\x667\x5\xD8m\x2\x665"+
		"\x667\x5\xD2j\x2\x666\x663\x3\x2\x2\x2\x666\x664\x3\x2\x2\x2\x666\x665"+
		"\x3\x2\x2\x2\x667\xD1\x3\x2\x2\x2\x668\x669\a\xA6\x2\x2\x669\x677\x5n"+
		"\x38\x2\x66A\x66B\a\x11\x2\x2\x66B\x66C\a\x9F\x2\x2\x66C\x66D\a\x9E\x2"+
		"\x2\x66D\x677\x5\xDAn\x2\x66E\x670\x5\xD4k\x2\x66F\x66E\x3\x2\x2\x2\x670"+
		"\x671\x3\x2\x2\x2\x671\x66F\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672\x673"+
		"\x3\x2\x2\x2\x673\x674\t\x3\x2\x2\x674\x677\x3\x2\x2\x2\x675\x677\x5\xD4"+
		"k\x2\x676\x668\x3\x2\x2\x2\x676\x66A\x3\x2\x2\x2\x676\x66F\x3\x2\x2\x2"+
		"\x676\x675\x3\x2\x2\x2\x677\xD3\x3\x2\x2\x2\x678\x681\x5p\x39\x2\x679"+
		"\x67B\a\xC7\x2\x2\x67A\x679\x3\x2\x2\x2\x67B\x67C\x3\x2\x2\x2\x67C\x67A"+
		"\x3\x2\x2\x2\x67C\x67D\x3\x2\x2\x2\x67D\x67E\x3\x2\x2\x2\x67E\x680\x5"+
		"p\x39\x2\x67F\x67A\x3\x2\x2\x2\x680\x683\x3\x2\x2\x2\x681\x67F\x3\x2\x2"+
		"\x2\x681\x682\x3\x2\x2\x2\x682\xD5\x3\x2\x2\x2\x683\x681\x3\x2\x2\x2\x684"+
		"\x686\x5z>\x2\x685\x687\x5\x142\xA2\x2\x686\x685\x3\x2\x2\x2\x686\x687"+
		"\x3\x2\x2\x2\x687\x688\x3\x2\x2\x2\x688\x689\x5\x144\xA3\x2\x689\x68A"+
		"\x5\x38\x1D\x2\x68A\xD7\x3\x2\x2\x2\x68B\x68D\x5z>\x2\x68C\x68E\x5\x142"+
		"\xA2\x2\x68D\x68C\x3\x2\x2\x2\x68D\x68E\x3\x2\x2\x2\x68E\x68F\x3\x2\x2"+
		"\x2\x68F\x690\a\xBB\x2\x2\x690\x691\a(\x2\x2\x691\x692\aU\x2\x2\x692\x693"+
		"\x5\xE8u\x2\x693\xD9\x3\x2\x2\x2\x694\x695\a\n\x2\x2\x695\x69B\t\b\x2"+
		"\x2\x696\x697\a\a\x2\x2\x697\x69B\a\n\x2\x2\x698\x69B\a\b\x2\x2\x699\x69B"+
		"\a\f\x2\x2\x69A\x694\x3\x2\x2\x2\x69A\x696\x3\x2\x2\x2\x69A\x698\x3\x2"+
		"\x2\x2\x69A\x699\x3\x2\x2\x2\x69B\xDB\x3\x2\x2\x2\x69C\x6A3\a<\x2\x2\x69D"+
		"\x6A4\x5n\x38\x2\x69E\x6A4\x5z>\x2\x69F\x6A0\a\xB7\x2\x2\x6A0\x6A1\x5"+
		"z>\x2\x6A1\x6A2\a\xB8\x2\x2\x6A2\x6A4\x3\x2\x2\x2\x6A3\x69D\x3\x2\x2\x2"+
		"\x6A3\x69E\x3\x2\x2\x2\x6A3\x69F\x3\x2\x2\x2\x6A4\xDD\x3\x2\x2\x2\x6A5"+
		"\x6A7\a]\x2\x2\x6A6\x6A8\x5\xDCo\x2\x6A7\x6A6\x3\x2\x2\x2\x6A7\x6A8\x3"+
		"\x2\x2\x2\x6A8\x6A9\x3\x2\x2\x2\x6A9\x6AA\x5\x11E\x90\x2\x6AA\x6AB\a\x65"+
		"\x2\x2\x6AB\x6B0\x5\xE0q\x2\x6AC\x6AD\a\xC8\x2\x2\x6AD\x6AF\x5\xE0q\x2"+
		"\x6AE\x6AC\x3\x2\x2\x2\x6AF\x6B2\x3\x2\x2\x2\x6B0\x6AE\x3\x2\x2\x2\x6B0"+
		"\x6B1\x3\x2\x2\x2\x6B1\x6B4\x3\x2\x2\x2\x6B2\x6B0\x3\x2\x2\x2\x6B3\x6B5"+
		"\x5\x104\x83\x2\x6B4\x6B3\x3\x2\x2\x2\x6B4\x6B5\x3\x2\x2\x2\x6B5\x6B9"+
		"\x3\x2\x2\x2\x6B6\x6B8\x5\x10E\x88\x2\x6B7\x6B6\x3\x2\x2\x2\x6B8\x6BB"+
		"\x3\x2\x2\x2\x6B9\x6B7\x3\x2\x2\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA\x6BF\x3"+
		"\x2\x2\x2\x6BB\x6B9\x3\x2\x2\x2\x6BC\x6BE\x5\x106\x84\x2\x6BD\x6BC\x3"+
		"\x2\x2\x2\x6BE\x6C1\x3\x2\x2\x2\x6BF\x6BD\x3\x2\x2\x2\x6BF\x6C0\x3\x2"+
		"\x2\x2\x6C0\x6C3\x3\x2\x2\x2\x6C1\x6BF\x3\x2\x2\x2\x6C2\x6C4\x5\x112\x8A"+
		"\x2\x6C3\x6C2\x3\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4\x6C6\x3\x2\x2\x2"+
		"\x6C5\x6C7\x5\xFC\x7F\x2\x6C6\x6C5\x3\x2\x2\x2\x6C6\x6C7\x3\x2\x2\x2\x6C7"+
		"\x6CF\x3\x2\x2\x2\x6C8\x6C9\a]\x2\x2\x6C9\x6CA\a\x8D\x2\x2\x6CA\x6CC\x5"+
		"\x120\x91\x2\x6CB\x6CD\x5\x18\r\x2\x6CC\x6CB\x3\x2\x2\x2\x6CC\x6CD\x3"+
		"\x2\x2\x2\x6CD\x6CF\x3\x2\x2\x2\x6CE\x6A5\x3\x2\x2\x2\x6CE\x6C8\x3\x2"+
		"\x2\x2\x6CF\xDF\x3\x2\x2\x2\x6D0\x6D1\x5\x148\xA5\x2\x6D1\x6D5\x5\x144"+
		"\xA3\x2\x6D2\x6D6\x5\x38\x1D\x2\x6D3\x6D6\aZ\x2\x2\x6D4\x6D6\as\x2\x2"+
		"\x6D5\x6D2\x3\x2\x2\x2\x6D5\x6D3\x3\x2\x2\x2\x6D5\x6D4\x3\x2\x2\x2\x6D6"+
		"\x6EE\x3\x2\x2\x2\x6D7\x6D8\x5z>\x2\x6D8\x6DC\x5\x144\xA3\x2\x6D9\x6DA"+
		"\x5\x148\xA5\x2\x6DA\x6DB\a\xBB\x2\x2\x6DB\x6DD\x3\x2\x2\x2\x6DC\x6D9"+
		"\x3\x2\x2\x2\x6DC\x6DD\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6DF\x5"+
		"\x38\x1D\x2\x6DF\x6EE\x3\x2\x2\x2\x6E0\x6E1\x5\x148\xA5\x2\x6E1\x6E2\a"+
		"\xC7\x2\x2\x6E2\x6EB\x5p\x39\x2\x6E3\x6E4\a\xBB\x2\x2\x6E4\x6EC\x5\x38"+
		"\x1D\x2\x6E5\x6E6\a\xB7\x2\x2\x6E6\x6EC\a\xB8\x2\x2\x6E7\x6E8\a\xB7\x2"+
		"\x2\x6E8\x6E9\x5\xE4s\x2\x6E9\x6EA\a\xB8\x2\x2\x6EA\x6EC\x3\x2\x2\x2\x6EB"+
		"\x6E3\x3\x2\x2\x2\x6EB\x6E5\x3\x2\x2\x2\x6EB\x6E7\x3\x2\x2\x2\x6EC\x6EE"+
		"\x3\x2\x2\x2\x6ED\x6D0\x3\x2\x2\x2\x6ED\x6D7\x3\x2\x2\x2\x6ED\x6E0\x3"+
		"\x2\x2\x2\x6EE\xE1\x3\x2\x2\x2\x6EF\x6F3\x5\x38\x1D\x2\x6F0\x6F3\x5x="+
		"\x2\x6F1\x6F3\x5\x64\x33\x2\x6F2\x6EF\x3\x2\x2\x2\x6F2\x6F0\x3\x2\x2\x2"+
		"\x6F2\x6F1\x3\x2\x2\x2\x6F3\xE3\x3\x2\x2\x2\x6F4\x6F9\x5\xE2r\x2\x6F5"+
		"\x6F6\a\xC8\x2\x2\x6F6\x6F8\x5\xE2r\x2\x6F7\x6F5\x3\x2\x2\x2\x6F8\x6FB"+
		"\x3\x2\x2\x2\x6F9\x6F7\x3\x2\x2\x2\x6F9\x6FA\x3\x2\x2\x2\x6FA\xE5\x3\x2"+
		"\x2\x2\x6FB\x6F9\x3\x2\x2\x2\x6FC\x6FD\a\x9D\x2\x2\x6FD\x702\x5\x38\x1D"+
		"\x2\x6FE\x6FF\a\xC8\x2\x2\x6FF\x701\x5\x38\x1D\x2\x700\x6FE\x3\x2\x2\x2"+
		"\x701\x704\x3\x2\x2\x2\x702\x700\x3\x2\x2\x2\x702\x703\x3\x2\x2\x2\x703"+
		"\x70E\x3\x2\x2\x2\x704\x702\x3\x2\x2\x2\x705\x706\al\x2\x2\x706\x70B\x5"+
		"\x38\x1D\x2\x707\x708\a\xC8\x2\x2\x708\x70A\x5\x38\x1D\x2\x709\x707\x3"+
		"\x2\x2\x2\x70A\x70D\x3\x2\x2\x2\x70B\x709\x3\x2\x2\x2\x70B\x70C\x3\x2"+
		"\x2\x2\x70C\x70F\x3\x2\x2\x2\x70D\x70B\x3\x2\x2\x2\x70E\x705\x3\x2\x2"+
		"\x2\x70E\x70F\x3\x2\x2\x2\x70F\xE7\x3\x2\x2\x2\x710\x718\x5\xEAv\x2\x711"+
		"\x713\a\x44\x2\x2\x712\x714\a\x45\x2\x2\x713\x712\x3\x2\x2\x2\x713\x714"+
		"\x3\x2\x2\x2\x714\x715\x3\x2\x2\x2\x715\x717\x5\xEAv\x2\x716\x711\x3\x2"+
		"\x2\x2\x717\x71A\x3\x2\x2\x2\x718\x716\x3\x2\x2\x2\x718\x719\x3\x2\x2"+
		"\x2\x719\x724\x3\x2\x2\x2\x71A\x718\x3\x2\x2\x2\x71B\x720\x5\xEAv\x2\x71C"+
		"\x71D\t\t\x2\x2\x71D\x71F\x5\xEAv\x2\x71E\x71C\x3\x2\x2\x2\x71F\x722\x3"+
		"\x2\x2\x2\x720\x71E\x3\x2\x2\x2\x720\x721\x3\x2\x2\x2\x721\x724\x3\x2"+
		"\x2\x2\x722\x720\x3\x2\x2\x2\x723\x710\x3\x2\x2\x2\x723\x71B\x3\x2\x2"+
		"\x2\x724\xE9\x3\x2\x2\x2\x725\x727\a\\\x2\x2\x726\x728\x5\xF4{\x2\x727"+
		"\x726\x3\x2\x2\x2\x727\x728\x3\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729\x72B"+
		"\x5\xF8}\x2\x72A\x72C\x5\x102\x82\x2\x72B\x72A\x3\x2\x2\x2\x72B\x72C\x3"+
		"\x2\x2\x2\x72C\x72E\x3\x2\x2\x2\x72D\x72F\x5\x104\x83\x2\x72E\x72D\x3"+
		"\x2\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F\x731\x3\x2\x2\x2\x730\x732\x5\xEC"+
		"w\x2\x731\x730\x3\x2\x2\x2\x731\x732\x3\x2\x2\x2\x732\x736\x3\x2\x2\x2"+
		"\x733\x735\x5\x10E\x88\x2\x734\x733\x3\x2\x2\x2\x735\x738\x3\x2\x2\x2"+
		"\x736\x734\x3\x2\x2\x2\x736\x737\x3\x2\x2\x2\x737\x73C\x3\x2\x2\x2\x738"+
		"\x736\x3\x2\x2\x2\x739\x73B\x5\x106\x84\x2\x73A\x739\x3\x2\x2\x2\x73B"+
		"\x73E\x3\x2\x2\x2\x73C\x73A\x3\x2\x2\x2\x73C\x73D\x3\x2\x2\x2\x73D\x740"+
		"\x3\x2\x2\x2\x73E\x73C\x3\x2\x2\x2\x73F\x741\x5\x112\x8A\x2\x740\x73F"+
		"\x3\x2\x2\x2\x740\x741\x3\x2\x2\x2\x741\x743\x3\x2\x2\x2\x742\x744\x5"+
		"\x108\x85\x2\x743\x742\x3\x2\x2\x2\x743\x744\x3\x2\x2\x2\x744\x746\x3"+
		"\x2\x2\x2\x745\x747\x5\x10C\x87\x2\x746\x745\x3\x2\x2\x2\x746\x747\x3"+
		"\x2\x2\x2\x747\x749\x3\x2\x2\x2\x748\x74A\x5\x114\x8B\x2\x749\x748\x3"+
		"\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A\x74C\x3\x2\x2\x2\x74B\x74D\x5\xFC"+
		"\x7F\x2\x74C\x74B\x3\x2\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74F\x3\x2\x2"+
		"\x2\x74E\x750\x5\xF2z\x2\x74F\x74E\x3\x2\x2\x2\x74F\x750\x3\x2\x2\x2\x750"+
		"\x756\x3\x2\x2\x2\x751\x752\a\xB7\x2\x2\x752\x753\x5\xE8u\x2\x753\x754"+
		"\a\xB8\x2\x2\x754\x756\x3\x2\x2\x2\x755\x725\x3\x2\x2\x2\x755\x751\x3"+
		"\x2\x2\x2\x756\xEB\x3\x2\x2\x2\x757\x758\aT\x2\x2\x758\x759\a\xB7\x2\x2"+
		"\x759\x75A\x5\xEEx\x2\x75A\x75C\a\xB8\x2\x2\x75B\x75D\x5r:\x2\x75C\x75B"+
		"\x3\x2\x2\x2\x75C\x75D\x3\x2\x2\x2\x75D\xED\x3\x2\x2\x2\x75E\x763\x5\xF0"+
		"y\x2\x75F\x760\a\xC8\x2\x2\x760\x762\x5\xF0y\x2\x761\x75F\x3\x2\x2\x2"+
		"\x762\x765\x3\x2\x2\x2\x763\x761\x3\x2\x2\x2\x763\x764\x3\x2\x2\x2\x764"+
		"\xEF\x3\x2\x2\x2\x765\x763\x3\x2\x2\x2\x766\x767\x5\x14C\xA7\x2\x767\x76A"+
		"\x5\x64\x33\x2\x768\x76B\x5j\x36\x2\x769\x76B\x5\x12E\x98\x2\x76A\x768"+
		"\x3\x2\x2\x2\x76A\x769\x3\x2\x2\x2\x76A\x76B\x3\x2\x2\x2\x76B\xF1\x3\x2"+
		"\x2\x2\x76C\x76D\aU\x2\x2\x76D\x777\a\x93\x2\x2\x76E\x778\a\x95\x2\x2"+
		"\x76F\x778\a\x94\x2\x2\x770\x778\a\x96\x2\x2\x771\x772\a\x97\x2\x2\x772"+
		"\x774\a\xB7\x2\x2\x773\x775\x5\xE4s\x2\x774\x773\x3\x2\x2\x2\x774\x775"+
		"\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776\x778\a\xB8\x2\x2\x777\x76E\x3"+
		"\x2\x2\x2\x777\x76F\x3\x2\x2\x2\x777\x770\x3\x2\x2\x2\x777\x771\x3\x2"+
		"\x2\x2\x778\xF3\x3\x2\x2\x2\x779\x77B\a\x39\x2\x2\x77A\x779\x3\x2\x2\x2"+
		"\x77A\x77B\x3\x2\x2\x2\x77B\x77C\x3\x2\x2\x2\x77C\x786\a<\x2\x2\x77D\x77F"+
		"\x5n\x38\x2\x77E\x780\a\x6\x2\x2\x77F\x77E\x3\x2\x2\x2\x77F\x780\x3\x2"+
		"\x2\x2\x780\x787\x3\x2\x2\x2\x781\x787\x5z>\x2\x782\x783\a\xB7\x2\x2\x783"+
		"\x784\x5z>\x2\x784\x785\a\xB8\x2\x2\x785\x787\x3\x2\x2\x2\x786\x77D\x3"+
		"\x2\x2\x2\x786\x781\x3\x2\x2\x2\x786\x782\x3\x2\x2\x2\x787\xF5\x3\x2\x2"+
		"\x2\x788\x789\x5z>\x2\x789\x78A\t\n\x2\x2\x78A\x78B\x5\x38\x1D\x2\x78B"+
		"\xF7\x3\x2\x2\x2\x78C\x791\x5\xFA~\x2\x78D\x78E\a\xC8\x2\x2\x78E\x790"+
		"\x5\xFA~\x2\x78F\x78D\x3\x2\x2\x2\x790\x793\x3\x2\x2\x2\x791\x78F\x3\x2"+
		"\x2\x2\x791\x792\x3\x2\x2\x2\x792\xF9\x3\x2\x2\x2\x793\x791\x3\x2\x2\x2"+
		"\x794\x796\a\x39\x2\x2\x795\x794\x3\x2\x2\x2\x795\x796\x3\x2\x2\x2\x796"+
		"\x7A6\x3\x2\x2\x2\x797\x799\x5\x38\x1D\x2\x798\x79A\x5\x100\x81\x2\x799"+
		"\x798\x3\x2\x2\x2\x799\x79A\x3\x2\x2\x2\x79A\x79F\x3\x2\x2\x2\x79B\x79D"+
		"\aS\x2\x2\x79C\x79B\x3\x2\x2\x2\x79C\x79D\x3\x2\x2\x2\x79D\x79E\x3\x2"+
		"\x2\x2\x79E\x7A0\x5\x14E\xA8\x2\x79F\x79C\x3\x2\x2\x2\x79F\x7A0\x3\x2"+
		"\x2\x2\x7A0\x7A7\x3\x2\x2\x2\x7A1\x7A2\x5r:\x2\x7A2\x7A3\a\xC7\x2\x2\x7A3"+
		"\x7A4\a\xBF\x2\x2\x7A4\x7A7\x3\x2\x2\x2\x7A5\x7A7\a\xBF\x2\x2\x7A6\x797"+
		"\x3\x2\x2\x2\x7A6\x7A1\x3\x2\x2\x2\x7A6\x7A5\x3\x2\x2\x2\x7A7\x7B6\x3"+
		"\x2\x2\x2\x7A8\x7A9\x5z>\x2\x7A9\x7AA\t\n\x2\x2\x7AA\x7AF\x5\x38\x1D\x2"+
		"\x7AB\x7AD\aS\x2\x2\x7AC\x7AB\x3\x2\x2\x2\x7AC\x7AD\x3\x2\x2\x2\x7AD\x7AE"+
		"\x3\x2\x2\x2\x7AE\x7B0\x5\x14E\xA8\x2\x7AF\x7AC\x3\x2\x2\x2\x7AF\x7B0"+
		"\x3\x2\x2\x2\x7B0\x7B6\x3\x2\x2\x2\x7B1\x7B2\x5\x148\xA5\x2\x7B2\x7B3"+
		"\a\xBB\x2\x2\x7B3\x7B4\x5\x38\x1D\x2\x7B4\x7B6\x3\x2\x2\x2\x7B5\x795\x3"+
		"\x2\x2\x2\x7B5\x7A8\x3\x2\x2\x2\x7B5\x7B1\x3\x2\x2\x2\x7B6\xFB\x3\x2\x2"+
		"\x2\x7B7\x7B8\a\x64\x2\x2\x7B8\x7B9\a\xB7\x2\x2\x7B9\x7BE\x5\xFE\x80\x2"+
		"\x7BA\x7BB\a\xC8\x2\x2\x7BB\x7BD\x5\xFE\x80\x2\x7BC\x7BA\x3\x2\x2\x2\x7BD"+
		"\x7C0\x3\x2\x2\x2\x7BE\x7BC\x3\x2\x2\x2\x7BE\x7BF\x3\x2\x2\x2\x7BF\x7C1"+
		"\x3\x2\x2\x2\x7C0\x7BE\x3\x2\x2\x2\x7C1\x7C2\a\xB8\x2\x2\x7C2\xFD\x3\x2"+
		"\x2\x2\x7C3\x7C5\a\xCB\x2\x2\x7C4\x7C6\x5j\x36\x2\x7C5\x7C4\x3\x2\x2\x2"+
		"\x7C5\x7C6\x3\x2\x2\x2\x7C6\x7D1\x3\x2\x2\x2\x7C7\x7C8\a\xA5\x2\x2\x7C8"+
		"\x7C9\aU\x2\x2\x7C9\x7CA\a\xB7\x2\x2\x7CA\x7CB\x5z>\x2\x7CB\x7CC\a\xBB"+
		"\x2\x2\x7CC\x7CD\x5j\x36\x2\x7CD\x7CE\x3\x2\x2\x2\x7CE\x7CF\a\xB8\x2\x2"+
		"\x7CF\x7D1\x3\x2\x2\x2\x7D0\x7C3\x3\x2\x2\x2\x7D0\x7C7\x3\x2\x2\x2\x7D1"+
		"\xFF\x3\x2\x2\x2\x7D2\x7D3\a@\x2\x2\x7D3\x7E8\a\xB7\x2\x2\x7D4\x7D5\a"+
		"\x1A\x2\x2\x7D5\x7D6\al\x2\x2\x7D6\x7DB\x5\x38\x1D\x2\x7D7\x7D8\a\xC8"+
		"\x2\x2\x7D8\x7DA\x5\x38\x1D\x2\x7D9\x7D7\x3\x2\x2\x2\x7DA\x7DD\x3\x2\x2"+
		"\x2\x7DB\x7D9\x3\x2\x2\x2\x7DB\x7DC\x3\x2\x2\x2\x7DC\x7E9\x3\x2\x2\x2"+
		"\x7DD\x7DB\x3\x2\x2\x2\x7DE\x7DF\ak\x2\x2\x7DF\x7E0\al\x2\x2\x7E0\x7E5"+
		"\x5\x116\x8C\x2\x7E1\x7E2\a\xC8\x2\x2\x7E2\x7E4\x5\x116\x8C\x2\x7E3\x7E1"+
		"\x3\x2\x2\x2\x7E4\x7E7\x3\x2\x2\x2\x7E5\x7E3\x3\x2\x2\x2\x7E5\x7E6\x3"+
		"\x2\x2\x2\x7E6\x7E9\x3\x2\x2\x2\x7E7\x7E5\x3\x2\x2\x2\x7E8\x7D4\x3\x2"+
		"\x2\x2\x7E8\x7DE\x3\x2\x2\x2\x7E9\x7EA\x3\x2\x2\x2\x7EA\x7E8\x3\x2\x2"+
		"\x2\x7EA\x7EB\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\x7ED\a\xB8\x2\x2"+
		"\x7ED\x101\x3\x2\x2\x2\x7EE\x7EF\an\x2\x2\x7EF\x7F0\x5\x120\x91\x2\x7F0"+
		"\x103\x3\x2\x2\x2\x7F1\x7F2\a\x61\x2\x2\x7F2\x7F7\x5\x124\x93\x2\x7F3"+
		"\x7F4\a\xC8\x2\x2\x7F4\x7F6\x5\x124\x93\x2\x7F5\x7F3\x3\x2\x2\x2\x7F6"+
		"\x7F9\x3\x2\x2\x2\x7F7\x7F5\x3\x2\x2\x2\x7F7\x7F8\x3\x2\x2\x2\x7F8\x105"+
		"\x3\x2\x2\x2\x7F9\x7F7\x3\x2\x2\x2\x7FA\x7FB\a\xC8\x2\x2\x7FB\x7FD\x5"+
		"\x124\x93\x2\x7FC\x7FA\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2\x7FE\x7FC\x3"+
		"\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x107\x3\x2\x2\x2\x800\x801\ai\x2"+
		"\x2\x801\x802\al\x2\x2\x802\x807\x5\x10A\x86\x2\x803\x804\a\xC8\x2\x2"+
		"\x804\x806\x5\x10A\x86\x2\x805\x803\x3\x2\x2\x2\x806\x809\x3\x2\x2\x2"+
		"\x807\x805\x3\x2\x2\x2\x807\x808\x3\x2\x2\x2\x808\x109\x3\x2\x2\x2\x809"+
		"\x807\x3\x2\x2\x2\x80A\x80D\x5\x14A\xA6\x2\x80B\x80D\x5\x38\x1D\x2\x80C"+
		"\x80A\x3\x2\x2\x2\x80C\x80B\x3\x2\x2\x2\x80D\x10B\x3\x2\x2\x2\x80E\x80F"+
		"\aj\x2\x2\x80F\x810\x5\x34\x1B\x2\x810\x10D\x3\x2\x2\x2\x811\x813\x5\x110"+
		"\x89\x2\x812\x811\x3\x2\x2\x2\x812\x813\x3\x2\x2\x2\x813\x814\x3\x2\x2"+
		"\x2\x814\x815\a\x62\x2\x2\x815\x81A\x5\x124\x93\x2\x816\x817\ag\x2\x2"+
		"\x817\x819\x5\x34\x1B\x2\x818\x816\x3\x2\x2\x2\x819\x81C\x3\x2\x2\x2\x81A"+
		"\x818\x3\x2\x2\x2\x81A\x81B\x3\x2\x2\x2\x81B\x823\x3\x2\x2\x2\x81C\x81A"+
		"\x3\x2\x2\x2\x81D\x81F\x5\x110\x89\x2\x81E\x81D\x3\x2\x2\x2\x81E\x81F"+
		"\x3\x2\x2\x2\x81F\x820\x3\x2\x2\x2\x820\x821\a\x46\x2\x2\x821\x823\x5"+
		"\x124\x93\x2\x822\x812\x3\x2\x2\x2\x822\x81E\x3\x2\x2\x2\x823\x10F\x3"+
		"\x2\x2\x2\x824\x831\a\"\x2\x2\x825\x831\a#\x2\x2\x826\x831\a%\x2\x2\x827"+
		"\x831\a&\x2\x2\x828\x831\a$\x2\x2\x829\x831\a\'\x2\x2\x82A\x82B\a\'\x2"+
		"\x2\x82B\x831\a%\x2\x2\x82C\x82D\a\"\x2\x2\x82D\x831\a%\x2\x2\x82E\x82F"+
		"\a#\x2\x2\x82F\x831\a%\x2\x2\x830\x824\x3\x2\x2\x2\x830\x825\x3\x2\x2"+
		"\x2\x830\x826\x3\x2\x2\x2\x830\x827\x3\x2\x2\x2\x830\x828\x3\x2\x2\x2"+
		"\x830\x829\x3\x2\x2\x2\x830\x82A\x3\x2\x2\x2\x830\x82C\x3\x2\x2\x2\x830"+
		"\x82E\x3\x2\x2\x2\x831\x111\x3\x2\x2\x2\x832\x833\a`\x2\x2\x833\x834\x5"+
		"\x34\x1B\x2\x834\x113\x3\x2\x2\x2\x835\x836\ak\x2\x2\x836\x837\al\x2\x2"+
		"\x837\x83C\x5\x116\x8C\x2\x838\x839\a\xC8\x2\x2\x839\x83B\x5\x116\x8C"+
		"\x2\x83A\x838\x3\x2\x2\x2\x83B\x83E\x3\x2\x2\x2\x83C\x83A\x3\x2\x2\x2"+
		"\x83C\x83D\x3\x2\x2\x2\x83D\x115\x3\x2\x2\x2\x83E\x83C\x3\x2\x2\x2\x83F"+
		"\x842\x5\x14A\xA6\x2\x840\x842\x5\x38\x1D\x2\x841\x83F\x3\x2\x2\x2\x841"+
		"\x840\x3\x2\x2\x2\x842\x844\x3\x2\x2\x2\x843\x845\t\x4\x2\x2\x844\x843"+
		"\x3\x2\x2\x2\x844\x845\x3\x2\x2\x2\x845\x117\x3\x2\x2\x2\x846\x848\a\x8F"+
		"\x2\x2\x847\x849\an\x2\x2\x848\x847\x3\x2\x2\x2\x848\x849\x3\x2\x2\x2"+
		"\x849\x84A\x3\x2\x2\x2\x84A\x84B\x5\x120\x91\x2\x84B\x84C\a\x8E\x2\x2"+
		"\x84C\x84D\x5\x126\x94\x2\x84D\x84E\ag\x2\x2\x84E\x86F\x5\x34\x1B\x2\x84F"+
		"\x850\a=\x2\x2\x850\x853\a\x90\x2\x2\x851\x852\a\x89\x2\x2\x852\x854\x5"+
		"\x34\x1B\x2\x853\x851\x3\x2\x2\x2\x853\x854\x3\x2\x2\x2\x854\x855\x3\x2"+
		"\x2\x2\x855\x856\a>\x2\x2\x856\x870\x5\x11A\x8E\x2\x857\x858\a=\x2\x2"+
		"\x858\x859\ar\x2\x2\x859\x85C\a\x90\x2\x2\x85A\x85B\al\x2\x2\x85B\x85D"+
		"\a\x91\x2\x2\x85C\x85A\x3\x2\x2\x2\x85C\x85D\x3\x2\x2\x2\x85D\x860\x3"+
		"\x2\x2\x2\x85E\x85F\a\x89\x2\x2\x85F\x861\x5\x34\x1B\x2\x860\x85E\x3\x2"+
		"\x2\x2\x860\x861\x3\x2\x2\x2\x861\x862\x3\x2\x2\x2\x862\x863\a>\x2\x2"+
		"\x863\x870\x5\x11C\x8F\x2\x864\x865\a=\x2\x2\x865\x866\ar\x2\x2\x866\x867"+
		"\a\x90\x2\x2\x867\x868\al\x2\x2\x868\x86B\a\x92\x2\x2\x869\x86A\a\x89"+
		"\x2\x2\x86A\x86C\x5\x34\x1B\x2\x86B\x869\x3\x2\x2\x2\x86B\x86C\x3\x2\x2"+
		"\x2\x86C\x86D\x3\x2\x2\x2\x86D\x86E\a>\x2\x2\x86E\x870\x5\x11A\x8E\x2"+
		"\x86F\x84F\x3\x2\x2\x2\x86F\x857\x3\x2\x2\x2\x86F\x864\x3\x2\x2\x2\x870"+
		"\x871\x3\x2\x2\x2\x871\x86F\x3\x2\x2\x2\x871\x872\x3\x2\x2\x2\x872\x878"+
		"\x3\x2\x2\x2\x873\x874\av\x2\x2\x874\x875\x5\xF8}\x2\x875\x876\an\x2\x2"+
		"\x876\x877\x5\x11E\x90\x2\x877\x879\x3\x2\x2\x2\x878\x873\x3\x2\x2\x2"+
		"\x878\x879\x3\x2\x2\x2\x879\x119\x3\x2\x2\x2\x87A\x87B\a]\x2\x2\x87B\x87C"+
		"\a\x65\x2\x2\x87C\x881\x5\xE0q\x2\x87D\x87E\a\xC8\x2\x2\x87E\x880\x5\xE0"+
		"q\x2\x87F\x87D\x3\x2\x2\x2\x880\x883\x3\x2\x2\x2\x881\x87F\x3\x2\x2\x2"+
		"\x881\x882\x3\x2\x2\x2\x882\x886\x3\x2\x2\x2\x883\x881\x3\x2\x2\x2\x884"+
		"\x886\a_\x2\x2\x885\x87A\x3\x2\x2\x2\x885\x884\x3\x2\x2\x2\x886\x11B\x3"+
		"\x2\x2\x2\x887\x88C\a^\x2\x2\x888\x889\a\xB7\x2\x2\x889\x88A\x5t;\x2\x88A"+
		"\x88B\a\xB8\x2\x2\x88B\x88D\x3\x2\x2\x2\x88C\x888\x3\x2\x2\x2\x88C\x88D"+
		"\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E\x88F\ao\x2\x2\x88F\x894\x5\xBA"+
		"^\x2\x890\x891\a\xC8\x2\x2\x891\x893\x5\xBA^\x2\x892\x890\x3\x2\x2\x2"+
		"\x893\x896\x3\x2\x2\x2\x894\x892\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895"+
		"\x11D\x3\x2\x2\x2\x896\x894\x3\x2\x2\x2\x897\x899\x5\x120\x91\x2\x898"+
		"\x89A\x5\x122\x92\x2\x899\x898\x3\x2\x2\x2\x899\x89A\x3\x2\x2\x2\x89A"+
		"\x8A6\x3\x2\x2\x2\x89B\x89D\x5\x120\x91\x2\x89C\x89E\x5\x122\x92\x2\x89D"+
		"\x89C\x3\x2\x2\x2\x89D\x89E\x3\x2\x2\x2\x89E\x8A3\x3\x2\x2\x2\x89F\x8A1"+
		"\aS\x2\x2\x8A0\x89F\x3\x2\x2\x2\x8A0\x8A1\x3\x2\x2\x2\x8A1\x8A2\x3\x2"+
		"\x2\x2\x8A2\x8A4\x5\x12A\x96\x2\x8A3\x8A0\x3\x2\x2\x2\x8A3\x8A4\x3\x2"+
		"\x2\x2\x8A4\x8A6\x3\x2\x2\x2\x8A5\x897\x3\x2\x2\x2\x8A5\x89B\x3\x2\x2"+
		"\x2\x8A6\x11F\x3\x2\x2\x2\x8A7\x8AB\x5r:\x2\x8A8\x8AB\x5z>\x2\x8A9\x8AB"+
		"\x5x=\x2\x8AA\x8A7\x3\x2\x2\x2\x8AA\x8A8\x3\x2\x2\x2\x8AA\x8A9\x3\x2\x2"+
		"\x2\x8AB\x8B0\x3\x2\x2\x2\x8AC\x8AE\aS\x2\x2\x8AD\x8AC\x3\x2\x2\x2\x8AD"+
		"\x8AE\x3\x2\x2\x2\x8AE\x8AF\x3\x2\x2\x2\x8AF\x8B1\x5\x12A\x96\x2\x8B0"+
		"\x8AD\x3\x2\x2\x2\x8B0\x8B1\x3\x2\x2\x2\x8B1\x121\x3\x2\x2\x2\x8B2\x8B3"+
		"\aT\x2\x2\x8B3\x8B4\a\xB7\x2\x2\x8B4\x8B5\a\xCB\x2\x2\x8B5\x8B9\a\xB8"+
		"\x2\x2\x8B6\x8B7\aT\x2\x2\x8B7\x8B9\a\xCB\x2\x2\x8B8\x8B2\x3\x2\x2\x2"+
		"\x8B8\x8B6\x3\x2\x2\x2\x8B9\x123\x3\x2\x2\x2\x8BA\x8BC\x5\x126\x94\x2"+
		"\x8BB\x8BD\x5\x128\x95\x2\x8BC\x8BB\x3\x2\x2\x2\x8BC\x8BD\x3\x2\x2\x2"+
		"\x8BD\x125\x3\x2\x2\x2\x8BE\x8D7\x5r:\x2\x8BF\x8C2\x5z>\x2\x8C0\x8C1\a"+
		"\xC7\x2\x2\x8C1\x8C3\x5\x12E\x98\x2\x8C2\x8C0\x3\x2\x2\x2\x8C2\x8C3\x3"+
		"\x2\x2\x2\x8C3\x8D7\x3\x2\x2\x2\x8C4\x8C7\x5x=\x2\x8C5\x8C6\a\xC7\x2\x2"+
		"\x8C6\x8C8\x5\x12E\x98\x2\x8C7\x8C5\x3\x2\x2\x2\x8C7\x8C8\x3\x2\x2\x2"+
		"\x8C8\x8D7\x3\x2\x2\x2\x8C9\x8CA\a\xB7\x2\x2\x8CA\x8CB\x5\xE8u\x2\x8CB"+
		"\x8CC\a\xB8\x2\x2\x8CC\x8D7\x3\x2\x2\x2\x8CD\x8D7\x5\x130\x99\x2\x8CE"+
		"\x8D4\x5\x12E\x98\x2\x8CF\x8D0\aT\x2\x2\x8D0\x8D1\a\xB7\x2\x2\x8D1\x8D2"+
		"\x5\xEEx\x2\x8D2\x8D3\a\xB8\x2\x2\x8D3\x8D5\x3\x2\x2\x2\x8D4\x8CF\x3\x2"+
		"\x2\x2\x8D4\x8D5\x3\x2\x2\x2\x8D5\x8D7\x3\x2\x2\x2\x8D6\x8BE\x3\x2\x2"+
		"\x2\x8D6\x8BF\x3\x2\x2\x2\x8D6\x8C4\x3\x2\x2\x2\x8D6\x8C9\x3\x2\x2\x2"+
		"\x8D6\x8CD\x3\x2\x2\x2\x8D6\x8CE\x3\x2\x2\x2\x8D7\x8DC\x3\x2\x2\x2\x8D8"+
		"\x8DA\aS\x2\x2\x8D9\x8D8\x3\x2\x2\x2\x8D9\x8DA\x3\x2\x2\x2\x8DA\x8DB\x3"+
		"\x2\x2\x2\x8DB\x8DD\x5\x12A\x96\x2\x8DC\x8D9\x3\x2\x2\x2\x8DC\x8DD\x3"+
		"\x2\x2\x2\x8DD\x127\x3\x2\x2\x2\x8DE\x8DF\aT\x2\x2\x8DF\x8E0\a\xB7\x2"+
		"\x2\x8E0\x8E1\a\xCB\x2\x2\x8E1\x8E6\a\xB8\x2\x2\x8E2\x8E3\a\xB7\x2\x2"+
		"\x8E3\x8E4\a\xCB\x2\x2\x8E4\x8E6\a\xB8\x2\x2\x8E5\x8DE\x3\x2\x2\x2\x8E5"+
		"\x8E2\x3\x2\x2\x2\x8E6\x129\x3\x2\x2\x2\x8E7\x8EA\x5p\x39\x2\x8E8\x8EA"+
		"\a\xCA\x2\x2\x8E9\x8E7\x3\x2\x2\x2\x8E9\x8E8\x3\x2\x2\x2\x8EA\x12B\x3"+
		"\x2\x2\x2\x8EB\x8EE\x5r:\x2\x8EC\x8EE\x5\x162\xB2\x2\x8ED\x8EB\x3\x2\x2"+
		"\x2\x8ED\x8EC\x3\x2\x2\x2\x8EE\x12D\x3\x2\x2\x2\x8EF\x8F0\x5\x12C\x97"+
		"\x2\x8F0\x8F2\a\xB7\x2\x2\x8F1\x8F3\x5\xE4s\x2\x8F2\x8F1\x3\x2\x2\x2\x8F2"+
		"\x8F3\x3\x2\x2\x2\x8F3\x8F4\x3\x2\x2\x2\x8F4\x8F5\a\xB8\x2\x2\x8F5\x12F"+
		"\x3\x2\x2\x2\x8F6\x8FF\am\x2\x2\x8F7\x8F9\x5r:\x2\x8F8\x8FA\x5\x132\x9A"+
		"\x2\x8F9\x8F8\x3\x2\x2\x2\x8F9\x8FA\x3\x2\x2\x2\x8FA\x900\x3\x2\x2\x2"+
		"\x8FB\x8FC\a\xB7\x2\x2\x8FC\x8FD\x5\x38\x1D\x2\x8FD\x8FE\a\xB8\x2\x2\x8FE"+
		"\x900\x3\x2\x2\x2\x8FF\x8F7\x3\x2\x2\x2\x8FF\x8FB\x3\x2\x2\x2\x900\x902"+
		"\x3\x2\x2\x2\x901\x903\x5\x18\r\x2\x902\x901\x3\x2\x2\x2\x902\x903\x3"+
		"\x2\x2\x2\x903\x131\x3\x2\x2\x2\x904\x909\x5\x134\x9B\x2\x905\x906\a\xC8"+
		"\x2\x2\x906\x908\x5\x134\x9B\x2\x907\x905\x3\x2\x2\x2\x908\x90B\x3\x2"+
		"\x2\x2\x909\x907\x3\x2\x2\x2\x909\x90A\x3\x2\x2\x2\x90A\x133\x3\x2\x2"+
		"\x2\x90B\x909\x3\x2\x2\x2\x90C\x90D\x5z>\x2\x90D\x90F\a\xBB\x2\x2\x90E"+
		"\x910\x5\x38\x1D\x2\x90F\x90E\x3\x2\x2\x2\x90F\x910\x3\x2\x2\x2\x910\x916"+
		"\x3\x2\x2\x2\x911\x913\x5\x38\x1D\x2\x912\x914\t\a\x2\x2\x913\x912\x3"+
		"\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914\x916\x3\x2\x2\x2\x915\x90C\x3\x2"+
		"\x2\x2\x915\x911\x3\x2\x2\x2\x916\x135\x3\x2\x2\x2\x917\x91A\a\xB7\x2"+
		"\x2\x918\x91B\x5n\x38\x2\x919\x91B\a;\x2\x2\x91A\x918\x3\x2\x2\x2\x91A"+
		"\x919\x3\x2\x2\x2\x91B\x91C\x3\x2\x2\x2\x91C\x91D\a\xB8\x2\x2\x91D\x137"+
		"\x3\x2\x2\x2\x91E\x920\t\v\x2\x2\x91F\x921\x5\x136\x9C\x2\x920\x91F\x3"+
		"\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921\x928\x3\x2\x2\x2\x922\x923\t\v\x2"+
		"\x2\x923\x924\a[\x2\x2\x924\x928\x5\x136\x9C\x2\x925\x926\t\f\x2\x2\x926"+
		"\x928\x5\x136\x9C\x2\x927\x91E\x3\x2\x2\x2\x927\x922\x3\x2\x2\x2\x927"+
		"\x925\x3\x2\x2\x2\x928\x139\x3\x2\x2\x2\x929\x931\t\r\x2\x2\x92A\x92B"+
		"\a\xB7\x2\x2\x92B\x92E\a\xCC\x2\x2\x92C\x92D\a\xC8\x2\x2\x92D\x92F\a\xCC"+
		"\x2\x2\x92E\x92C\x3\x2\x2\x2\x92E\x92F\x3\x2\x2\x2\x92F\x930\x3\x2\x2"+
		"\x2\x930\x932\a\xB8\x2\x2\x931\x92A\x3\x2\x2\x2\x931\x932\x3\x2\x2\x2"+
		"\x932\x935\x3\x2\x2\x2\x933\x935\a\x86\x2\x2\x934\x929\x3\x2\x2\x2\x934"+
		"\x933\x3\x2\x2\x2\x935\x13B\x3\x2\x2\x2\x936\x937\t\xE\x2\x2\x937\x13D"+
		"\x3\x2\x2\x2\x938\x93A\x5\x13C\x9F\x2\x939\x938\x3\x2\x2\x2\x939\x93A"+
		"\x3\x2\x2\x2\x93A\x93B\x3\x2\x2\x2\x93B\x93C\x5\x140\xA1\x2\x93C\x13F"+
		"\x3\x2\x2\x2\x93D\x946\a\x87\x2\x2\x93E\x93F\a\xB7\x2\x2\x93F\x942\x5"+
		"n\x38\x2\x940\x941\a\xC8\x2\x2\x941\x943\x5n\x38\x2\x942\x940\x3\x2\x2"+
		"\x2\x942\x943\x3\x2\x2\x2\x943\x944\x3\x2\x2\x2\x944\x945\a\xB8\x2\x2"+
		"\x945\x947\x3\x2\x2\x2\x946\x93E\x3\x2\x2\x2\x946\x947\x3\x2\x2\x2\x947"+
		"\x141\x3\x2\x2\x2\x948\x949\a\xC7\x2\x2\x949\x94A\x5p\x39\x2\x94A\x143"+
		"\x3\x2\x2\x2\x94B\x94C\t\n\x2\x2\x94C\x145\x3\x2\x2\x2\x94D\x952\x5\x148"+
		"\xA5\x2\x94E\x94F\a\xC8\x2\x2\x94F\x951\x5\x148\xA5\x2\x950\x94E\x3\x2"+
		"\x2\x2\x951\x954\x3\x2\x2\x2\x952\x950\x3\x2\x2\x2\x952\x953\x3\x2\x2"+
		"\x2\x953\x147\x3\x2\x2\x2\x954\x952\x3\x2\x2\x2\x955\x95F\x5r:\x2\x956"+
		"\x957\x5r:\x2\x957\x958\a\xC7\x2\x2\x958\x959\x5\x162\xB2\x2\x959\x95F"+
		"\x3\x2\x2\x2\x95A\x95B\x5x=\x2\x95B\x95C\a\xC7\x2\x2\x95C\x95D\x5p\x39"+
		"\x2\x95D\x95F\x3\x2\x2\x2\x95E\x955\x3\x2\x2\x2\x95E\x956\x3\x2\x2\x2"+
		"\x95E\x95A\x3\x2\x2\x2\x95F\x149\x3\x2\x2\x2\x960\x963\x5n\x38\x2\x961"+
		"\x963\x5r:\x2\x962\x960\x3\x2\x2\x2\x962\x961\x3\x2\x2\x2\x963\x14B\x3"+
		"\x2\x2\x2\x964\x965\x5p\x39\x2\x965\x14D\x3\x2\x2\x2\x966\x969\x5p\x39"+
		"\x2\x967\x969\a\xCA\x2\x2\x968\x966\x3\x2\x2\x2\x968\x967\x3\x2\x2\x2"+
		"\x969\x14F\x3\x2\x2\x2\x96A\x96D\x5r:\x2\x96B\x96D\x5z>\x2\x96C\x96A\x3"+
		"\x2\x2\x2\x96C\x96B\x3\x2\x2\x2\x96D\x151\x3\x2\x2\x2\x96E\x973\x5\x154"+
		"\xAB\x2\x96F\x973\x5\x156\xAC\x2\x970\x973\x5\x158\xAD\x2\x971\x973\x5"+
		"\x15A\xAE\x2\x972\x96E\x3\x2\x2\x2\x972\x96F\x3\x2\x2\x2\x972\x970\x3"+
		"\x2\x2\x2\x972\x971\x3\x2\x2\x2\x973\x153\x3\x2\x2\x2\x974\x975\a*\x2"+
		"\x2\x975\x976\x5\x150\xA9\x2\x976\x155\x3\x2\x2\x2\x977\x978\a+\x2\x2"+
		"\x978\x979\x5\x150\xA9\x2\x979\x157\x3\x2\x2\x2\x97A\x98A\a)\x2\x2\x97B"+
		"\x98B\a\x30\x2\x2\x97C\x98B\a/\x2\x2\x97D\x98B\a-\x2\x2\x97E\x98B\a.\x2"+
		"\x2\x97F\x982\a\x31\x2\x2\x980\x983\x5n\x38\x2\x981\x983\x5z>\x2\x982"+
		"\x980\x3\x2\x2\x2\x982\x981\x3\x2\x2\x2\x983\x98B\x3\x2\x2\x2\x984\x987"+
		"\a\x32\x2\x2\x985\x988\x5n\x38\x2\x986\x988\x5z>\x2\x987\x985\x3\x2\x2"+
		"\x2\x987\x986\x3\x2\x2\x2\x988\x98B\x3\x2\x2\x2\x989\x98B\x5r:\x2\x98A"+
		"\x97B\x3\x2\x2\x2\x98A\x97C\x3\x2\x2\x2\x98A\x97D\x3\x2\x2\x2\x98A\x97E"+
		"\x3\x2\x2\x2\x98A\x97F\x3\x2\x2\x2\x98A\x984\x3\x2\x2\x2\x98A\x989\x3"+
		"\x2\x2\x2\x98B\x98E\x3\x2\x2\x2\x98C\x98D\a\x61\x2\x2\x98D\x98F\x5\x150"+
		"\xA9\x2\x98E\x98C\x3\x2\x2\x2\x98E\x98F\x3\x2\x2\x2\x98F\x990\x3\x2\x2"+
		"\x2\x990\x991\an\x2\x2\x991\x996\x5z>\x2\x992\x993\a\xC8\x2\x2\x993\x995"+
		"\x5z>\x2\x994\x992\x3\x2\x2\x2\x995\x998\x3\x2\x2\x2\x996\x994\x3\x2\x2"+
		"\x2\x996\x997\x3\x2\x2\x2\x997\x159\x3\x2\x2\x2\x998\x996\x3\x2\x2\x2"+
		"\x999\x99A\a,\x2\x2\x99A\x99B\x5\x150\xA9\x2\x99B\x15B\x3\x2\x2\x2\x99C"+
		"\x99D\a\xCA\x2\x2\x99D\x15D\x3\x2\x2\x2\x99E\x99F\a\x36\x2\x2\x99F\x9A0"+
		"\a\xCB\x2\x2\x9A0\x15F\x3\x2\x2\x2\x9A1\x9A2\t\xF\x2\x2\x9A2\x161\x3\x2"+
		"\x2\x2\x9A3\x9A4\t\x10\x2\x2\x9A4\x163\x3\x2\x2\x2\x14D\x16D\x176\x17C"+
		"\x183\x189\x191\x197\x19B\x1AF\x1BA\x1C4\x1CA\x1E6\x1EF\x1F6\x1FB\x201"+
		"\x207\x20A\x20F\x217\x219\x21D\x220\x225\x22D\x230\x233\x236\x247\x24E"+
		"\x253\x266\x269\x277\x27A\x27D\x280\x287\x28B\x29D\x2A4\x2A7\x2B0\x2B3"+
		"\x2BC\x2C0\x2C3\x2D1\x2E0\x2E2\x2EE\x2F0\x2FC\x2FF\x301\x30C\x317\x326"+
		"\x328\x34C\x34E\x35A\x35C\x36B\x36D\x375\x37A\x388\x391\x395\x397\x39D"+
		"\x3A0\x3AA\x3B2\x3B9\x3BD\x3D3\x3E5\x3EA\x3F6\x3FB\x3FF\x402\x409\x40F"+
		"\x414\x41A\x41F\x423\x42A\x430\x434\x439\x43D\x443\x448\x44E\x451\x45B"+
		"\x45E\x466\x469\x46D\x471\x474\x477\x47A\x47D\x483\x48D\x494\x49D\x4A1"+
		"\x4A4\x4B3\x4C9\x4CD\x4D2\x4D8\x4DC\x4DF\x4E3\x4E6\x4ED\x4F4\x504\x50A"+
		"\x50E\x510\x520\x52B\x52F\x534\x537\x53C\x540\x543\x547\x54D\x550\x555"+
		"\x559\x55C\x55E\x561\x568\x56C\x573\x581\x58B\x594\x598\x59C\x5A0\x5A6"+
		"\x5B0\x5B2\x5BA\x5C1\x5C9\x5D6\x5DD\x5E5\x5E7\x5EB\x5EF\x5F6\x5F9\x5FD"+
		"\x607\x60F\x617\x619\x61C\x61F\x624\x626\x62D\x62F\x632\x635\x638\x63D"+
		"\x63F\x641\x648\x64D\x656\x65C\x65E\x666\x671\x676\x67C\x681\x686\x68D"+
		"\x69A\x6A3\x6A7\x6B0\x6B4\x6B9\x6BF\x6C3\x6C6\x6CC\x6CE\x6D5\x6DC\x6EB"+
		"\x6ED\x6F2\x6F9\x702\x70B\x70E\x713\x718\x720\x723\x727\x72B\x72E\x731"+
		"\x736\x73C\x740\x743\x746\x749\x74C\x74F\x755\x75C\x763\x76A\x774\x777"+
		"\x77A\x77F\x786\x791\x795\x799\x79C\x79F\x7A6\x7AC\x7AF\x7B5\x7BE\x7C5"+
		"\x7D0\x7DB\x7E5\x7E8\x7EA\x7F7\x7FE\x807\x80C\x812\x81A\x81E\x822\x830"+
		"\x83C\x841\x844\x848\x853\x85C\x860\x86B\x86F\x871\x878\x881\x885\x88C"+
		"\x894\x899\x89D\x8A0\x8A3\x8A5\x8AA\x8AD\x8B0\x8B8\x8BC\x8C2\x8C7\x8D4"+
		"\x8D6\x8D9\x8DC\x8E5\x8E9\x8ED\x8F2\x8F9\x8FF\x902\x909\x90F\x913\x915"+
		"\x91A\x920\x927\x92E\x931\x934\x939\x942\x946\x952\x95E\x962\x968\x96C"+
		"\x972\x982\x987\x98A\x98E\x996";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace tsql2pgsql.grammar
