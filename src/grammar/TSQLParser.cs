//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Src\tsql2pgsql\grammar\TSQL.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace tsql2pgsql.grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class TSQLParser : Parser {
	public const int
		T__10=1, T__9=2, T__8=3, T__7=4, T__6=5, T__5=6, T__4=7, T__3=8, T__2=9, 
		T__1=10, T__0=11, READONLY=12, TRY=13, CATCH=14, TRANSACTION=15, COMMIT=16, 
		ROLLBACK=17, RAISE_ERROR=18, PRINT=19, CLUSTERED=20, NONCLUSTERED=21, 
		TABLE=22, PROCEDURE=23, PARTITION=24, INDEX=25, DATABASE=26, CONSTRAINT=27, 
		FOREIGN=28, PRIMARY=29, KEY=30, REFERENCES=31, LEFT=32, RIGHT=33, CROSS=34, 
		OUTER=35, INNER=36, FULL=37, CURSOR=38, FETCH=39, OPEN=40, CLOSE=41, DEALLOCATE=42, 
		FIRST=43, LAST=44, PRIOR=45, NEXT=46, ABSOLUTE=47, RELATIVE=48, CASE=49, 
		CAST=50, CONVERT=51, COLLATE=52, COUNT=53, COUNT_BIG=54, DISTINCT=55, 
		UNIQUE=56, MAX=57, TOP=58, WHEN=59, THEN=60, SWITCH=61, OVER=62, INCLUDE=63, 
		INTERSECT=64, EXCEPT=65, UNION=66, ALL=67, APPLY=68, IF=69, ELSE=70, WHILE=71, 
		GOTO=72, CONTINUE=73, BREAK=74, TRUNCATE=75, ADD=76, REMOVE=77, ALTER=78, 
		CREATE=79, DROP=80, AS=81, WITH=82, FOR=83, REPLICATION=84, BEGIN=85, 
		END=86, EXISTS=87, DEFAULT=88, VARYING=89, SELECT=90, UPDATE=91, INSERT=92, 
		DELETE=93, WHERE=94, FROM=95, JOIN=96, DECLARE=97, OPTION=98, SET=99, 
		TO=100, ON=101, OFF=102, GROUP=103, HAVING=104, ORDER=105, BY=106, EXECUTE=107, 
		INTO=108, VALUES=109, IS=110, IN=111, NOT=112, NULL=113, BETWEEN=114, 
		RETURN=115, OUTPUT=116, OUT=117, LIKE=118, ESCAPE=119, OF=120, DECIMAL=121, 
		NUMERIC=122, VARCHAR=123, NVARCHAR=124, CHAR=125, CHARACTER=126, NCHAR=127, 
		INT=128, TINYINT=129, SMALLINT=130, BIGINT=131, FLOAT=132, IDENTITY=133, 
		LOG=134, AND=135, OR=136, ASC=137, DESC=138, STATISTICS=139, USING=140, 
		MERGE=141, MATCHED=142, TARGET=143, SOURCE=144, XML=145, RAW=146, AUTO=147, 
		EXPLICIT=148, PATH=149, ENABLE=150, DISABLE=151, TRIGGER=152, WAITFOR=153, 
		DELAY=154, COMPUTE=155, LEVEL=156, ISOLATION=157, SPLIT=158, RANGE=159, 
		FUNCTION=160, SCHEME=161, USED=162, OPTIMIZE=163, ROWCOUNT=164, LT=165, 
		LTE=166, GT=167, GTE=168, GT_LT=169, EQUAL_EQUAL=170, NOT_EQUAL=171, ADD_ASSIGN=172, 
		SUB_ASSIGN=173, MUL_ASSIGN=174, DIV_ASSIGN=175, AND_ASSIGN=176, OR_ASSIGN=177, 
		XOR_ASSIGN=178, MOD_ASSIGN=179, HASH=180, LPAREN=181, RPAREN=182, LBRACKET=183, 
		RBRACKET=184, EQUALS=185, AT=186, SEMICOLON=187, COLON=188, STAR=189, 
		SLASH=190, AMPERSAND=191, PIPE=192, PERCENT=193, CARET=194, PLUS=195, 
		MINUS=196, DOT=197, COMMA=198, FloatingPointLiteral=199, StringLiteral=200, 
		Identifier=201, IntegerLiteral=202, WS=203, COMMENT=204, LINE_COMMENT=205;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'dbcc'", "'||'", "'&&'", "'percent'", "'repeatable'", "'snapshot'", 
		"'checkpoint'", "'read'", "'committed'", "'serializable'", "'uncommitted'", 
		"'readonly'", "'try'", "'catch'", "TRANSACTION", "'commit'", "'rollback'", 
		"'raiserror'", "'print'", "'clustered'", "'nonclustered'", "'table'", 
		"PROCEDURE", "'partition'", "'index'", "'database'", "'constraint'", "FOREIGN", 
		"PRIMARY", "'key'", "'references'", "'left'", "'right'", "'cross'", "'outer'", 
		"'inner'", "'full'", "'cursor'", "'fetch'", "'open'", "'close'", "'deallocate'", 
		"'first'", "'last'", "'prior'", "'next'", "'absolute'", "'relative'", 
		"'case'", "'cast'", "'convert'", "'collate'", "'count'", "'count_big'", 
		"'distinct'", "'unique'", "'max'", "'top'", "'when'", "'then'", "'switch'", 
		"'over'", "'include'", "'intersect'", "'except'", "'union'", "'all'", 
		"'apply'", "'if'", "'else'", "'while'", "'goto'", "'continue'", "'break'", 
		"'truncate'", "'add'", "'remove'", "'alter'", "'create'", "'drop'", "'as'", 
		"'with'", "'for'", "'replication'", "'begin'", "'end'", "'exists'", "'default'", 
		"'varying'", "'select'", "'update'", "'insert'", "'delete'", "'where'", 
		"'from'", "'join'", "'declare'", "'option'", "'set'", "'to'", "'on'", 
		"'off'", "'group'", "'having'", "'order'", "'by'", "EXECUTE", "'into'", 
		"'values'", "'is'", "'in'", "'not'", "'null'", "'between'", "'return'", 
		"'output'", "'out'", "'like'", "'escape'", "'of'", "DECIMAL", "NUMERIC", 
		"VARCHAR", "NVARCHAR", "CHAR", "CHARACTER", "NCHAR", "INT", "TINYINT", 
		"SMALLINT", "BIGINT", "FLOAT", "IDENTITY", "'log'", "'and'", "'or'", "'asc'", 
		"'desc'", "'statistics'", "'using'", "'merge'", "'matched'", "'target'", 
		"'source'", "'xml'", "'raw'", "'auto'", "'explicit'", "'path'", "'enable'", 
		"'disable'", "'trigger'", "'waitfor'", "'delay'", "'compute'", "'level'", 
		"'isolation'", "'split'", "'range'", "'function'", "'scheme'", "'used'", 
		"'optimize'", "'rowcount'", "'<'", "'<='", "'>'", "'>='", "'<>'", "'=='", 
		"'!='", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
		"'#'", "'('", "')'", "'['", "']'", "'='", "'@'", "';'", "':'", "'*'", 
		"'/'", "'&'", "'|'", "'%'", "'^'", "'+'", "'-'", "'.'", "','", "FloatingPointLiteral", 
		"StringLiteral", "Identifier", "IntegerLiteral", "WS", "COMMENT", "LINE_COMMENT"
	};
	public const int
		RULE_compileUnit = 0, RULE_dropTable = 1, RULE_alterTable = 2, RULE_alterTableSwitchPartition = 3, 
		RULE_alterTableDropConstraint = 4, RULE_alterTableAddConstraint = 5, RULE_partitionIdent = 6, 
		RULE_alterTableTrigger = 7, RULE_alterIndex = 8, RULE_alterPartitionScheme = 9, 
		RULE_alterPartitionFunction = 10, RULE_basicOptionList = 11, RULE_basicOption = 12, 
		RULE_createTable = 13, RULE_dropIndex = 14, RULE_createIndex = 15, RULE_createIndexIncludeList = 16, 
		RULE_createIndexPartition = 17, RULE_orderedIndexColumnList = 18, RULE_orderedIndexColumn = 19, 
		RULE_createStatistics = 20, RULE_dropProcedure = 21, RULE_createProcedure = 22, 
		RULE_truncateTable = 23, RULE_obscureCommands = 24, RULE_predicateList = 25, 
		RULE_primary = 26, RULE_expression = 27, RULE_convertExpression = 28, 
		RULE_conditionalExpression = 29, RULE_conditionalOrExpression = 30, RULE_conditionalAndExpression = 31, 
		RULE_inclusiveOrExpression = 32, RULE_exclusiveOrExpression = 33, RULE_andExpression = 34, 
		RULE_equalityExpression = 35, RULE_relationalExpression = 36, RULE_additiveExpression = 37, 
		RULE_multiplicativeExpression = 38, RULE_unaryExpression = 39, RULE_unaryExpressionNotPlusMinus = 40, 
		RULE_postfixExpression = 41, RULE_likeTestExpression = 42, RULE_minSelectElement = 43, 
		RULE_expressionSet = 44, RULE_caseWhen = 45, RULE_caseElse = 46, RULE_subSelectExpression = 47, 
		RULE_type = 48, RULE_typeInBracket = 49, RULE_expressionInRest = 50, RULE_literalValue = 51, 
		RULE_stringValue = 52, RULE_integerValue = 53, RULE_qualifiedNamePart = 54, 
		RULE_qualifiedName = 55, RULE_qualifiedNameList = 56, RULE_tempIndex = 57, 
		RULE_tempTable = 58, RULE_variable = 59, RULE_procedureBody = 60, RULE_procedureParameters = 61, 
		RULE_procedureParameter = 62, RULE_procedureParameterInitialValue = 63, 
		RULE_procedureParameterName = 64, RULE_procedureOptions = 65, RULE_statementList = 66, 
		RULE_statement = 67, RULE_ddl = 68, RULE_dml = 69, RULE_returnExpression = 70, 
		RULE_ifStatement = 71, RULE_whileStatement = 72, RULE_waitFor = 73, RULE_raiseError = 74, 
		RULE_tryBlock = 75, RULE_transactionBlock = 76, RULE_deleteTop = 77, RULE_deleteStatement = 78, 
		RULE_deleteFromClause = 79, RULE_deleteFromClauseLoose = 80, RULE_deleteOutput = 81, 
		RULE_commonTableExpression = 82, RULE_commonTableExpressionAtom = 83, 
		RULE_insertStatement = 84, RULE_insertPreamble = 85, RULE_insertOutputClause = 86, 
		RULE_insertDataSource = 87, RULE_insertValueList = 88, RULE_insertValue = 89, 
		RULE_declareStatement = 90, RULE_variableDeclaration = 91, RULE_variableDeclarationAssignment = 92, 
		RULE_columnList = 93, RULE_columnDefinitionList = 94, RULE_columnDefinition = 95, 
		RULE_tableDeclarationOptions = 96, RULE_tableDeclarationOption = 97, RULE_partitionName = 98, 
		RULE_setStatement = 99, RULE_setSessionOther = 100, RULE_setVariableAssignment = 101, 
		RULE_setVariableToCursor = 102, RULE_transactionIsolationLevel = 103, 
		RULE_updateTop = 104, RULE_updateStatement = 105, RULE_updateStatementSetClauseRest = 106, 
		RULE_argument = 107, RULE_argumentList = 108, RULE_computeStatement = 109, 
		RULE_selectStatement = 110, RULE_selectStatementPart = 111, RULE_xmlWithOption = 112, 
		RULE_xmlDefinitionList = 113, RULE_xmlDefinition = 114, RULE_forXmlClause = 115, 
		RULE_selectTopLimit = 116, RULE_selectVariableAssignment = 117, RULE_selectList = 118, 
		RULE_selectListElement = 119, RULE_dmlOptions = 120, RULE_dmlOption = 121, 
		RULE_overClause = 122, RULE_intoClause = 123, RULE_fromClause = 124, RULE_moreInnerJoin = 125, 
		RULE_groupByClause = 126, RULE_groupByElement = 127, RULE_havingClause = 128, 
		RULE_joinOrApply = 129, RULE_joinType = 130, RULE_whereClause = 131, RULE_orderByClause = 132, 
		RULE_orderByElement = 133, RULE_mergeStatement = 134, RULE_mergeMatched = 135, 
		RULE_mergeNotMatched = 136, RULE_tableTargetWithOptions = 137, RULE_tableTarget = 138, 
		RULE_tableTargetOptions = 139, RULE_tableSourceWithOptions = 140, RULE_tableSource = 141, 
		RULE_tableSourceOptions = 142, RULE_tableAlias = 143, RULE_functionName = 144, 
		RULE_functionCall = 145, RULE_executeStatement = 146, RULE_executeArgumentList = 147, 
		RULE_executeArgument = 148, RULE_characterStringTypeLength = 149, RULE_characterStringType = 150, 
		RULE_numericType = 151, RULE_integerType = 152, RULE_identityType = 153, 
		RULE_identitySpec = 154, RULE_propertyOrField = 155, RULE_assignmentOperator = 156, 
		RULE_qualifiedColumnNameList = 157, RULE_qualifiedColumnName = 158, RULE_columnIndexOrName = 159, 
		RULE_columnName = 160, RULE_columnAlias = 161, RULE_cursorId = 162, RULE_cursorStatement = 163, 
		RULE_cursorOpen = 164, RULE_cursorClose = 165, RULE_cursorFetch = 166, 
		RULE_cursorDeallocate = 167, RULE_stringExpression = 168, RULE_collate = 169, 
		RULE_clusterType = 170, RULE_keyword = 171;
	public static readonly string[] ruleNames = {
		"compileUnit", "dropTable", "alterTable", "alterTableSwitchPartition", 
		"alterTableDropConstraint", "alterTableAddConstraint", "partitionIdent", 
		"alterTableTrigger", "alterIndex", "alterPartitionScheme", "alterPartitionFunction", 
		"basicOptionList", "basicOption", "createTable", "dropIndex", "createIndex", 
		"createIndexIncludeList", "createIndexPartition", "orderedIndexColumnList", 
		"orderedIndexColumn", "createStatistics", "dropProcedure", "createProcedure", 
		"truncateTable", "obscureCommands", "predicateList", "primary", "expression", 
		"convertExpression", "conditionalExpression", "conditionalOrExpression", 
		"conditionalAndExpression", "inclusiveOrExpression", "exclusiveOrExpression", 
		"andExpression", "equalityExpression", "relationalExpression", "additiveExpression", 
		"multiplicativeExpression", "unaryExpression", "unaryExpressionNotPlusMinus", 
		"postfixExpression", "likeTestExpression", "minSelectElement", "expressionSet", 
		"caseWhen", "caseElse", "subSelectExpression", "type", "typeInBracket", 
		"expressionInRest", "literalValue", "stringValue", "integerValue", "qualifiedNamePart", 
		"qualifiedName", "qualifiedNameList", "tempIndex", "tempTable", "variable", 
		"procedureBody", "procedureParameters", "procedureParameter", "procedureParameterInitialValue", 
		"procedureParameterName", "procedureOptions", "statementList", "statement", 
		"ddl", "dml", "returnExpression", "ifStatement", "whileStatement", "waitFor", 
		"raiseError", "tryBlock", "transactionBlock", "deleteTop", "deleteStatement", 
		"deleteFromClause", "deleteFromClauseLoose", "deleteOutput", "commonTableExpression", 
		"commonTableExpressionAtom", "insertStatement", "insertPreamble", "insertOutputClause", 
		"insertDataSource", "insertValueList", "insertValue", "declareStatement", 
		"variableDeclaration", "variableDeclarationAssignment", "columnList", 
		"columnDefinitionList", "columnDefinition", "tableDeclarationOptions", 
		"tableDeclarationOption", "partitionName", "setStatement", "setSessionOther", 
		"setVariableAssignment", "setVariableToCursor", "transactionIsolationLevel", 
		"updateTop", "updateStatement", "updateStatementSetClauseRest", "argument", 
		"argumentList", "computeStatement", "selectStatement", "selectStatementPart", 
		"xmlWithOption", "xmlDefinitionList", "xmlDefinition", "forXmlClause", 
		"selectTopLimit", "selectVariableAssignment", "selectList", "selectListElement", 
		"dmlOptions", "dmlOption", "overClause", "intoClause", "fromClause", "moreInnerJoin", 
		"groupByClause", "groupByElement", "havingClause", "joinOrApply", "joinType", 
		"whereClause", "orderByClause", "orderByElement", "mergeStatement", "mergeMatched", 
		"mergeNotMatched", "tableTargetWithOptions", "tableTarget", "tableTargetOptions", 
		"tableSourceWithOptions", "tableSource", "tableSourceOptions", "tableAlias", 
		"functionName", "functionCall", "executeStatement", "executeArgumentList", 
		"executeArgument", "characterStringTypeLength", "characterStringType", 
		"numericType", "integerType", "identityType", "identitySpec", "propertyOrField", 
		"assignmentOperator", "qualifiedColumnNameList", "qualifiedColumnName", 
		"columnIndexOrName", "columnName", "columnAlias", "cursorId", "cursorStatement", 
		"cursorOpen", "cursorClose", "cursorFetch", "cursorDeallocate", "stringExpression", 
		"collate", "clusterType", "keyword"
	};

	public override string GrammarFileName { get { return "TSQL.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TSQLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TSQLParser.Eof, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; statementList();
			State = 345; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_dropTable);
		try {
			State = 353;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347; Match(DROP);
				State = 348; Match(TABLE);
				State = 349; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350; Match(DROP);
				State = 351; Match(TABLE);
				State = 352; tempTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public AlterTableAddConstraintContext alterTableAddConstraint() {
			return GetRuleContext<AlterTableAddConstraintContext>(0);
		}
		public AlterTableSwitchPartitionContext alterTableSwitchPartition() {
			return GetRuleContext<AlterTableSwitchPartitionContext>(0);
		}
		public AlterTableDropConstraintContext alterTableDropConstraint() {
			return GetRuleContext<AlterTableDropConstraintContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public AlterTableTriggerContext alterTableTrigger() {
			return GetRuleContext<AlterTableTriggerContext>(0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_alterTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(ALTER);
			State = 356; Match(TABLE);
			State = 357; tableTargetWithOptions();
			State = 362;
			switch (_input.La(1)) {
			case SWITCH:
				{
				State = 358; alterTableSwitchPartition();
				}
				break;
			case ADD:
				{
				State = 359; alterTableAddConstraint();
				}
				break;
			case DROP:
				{
				State = 360; alterTableDropConstraint();
				}
				break;
			case ENABLE:
			case DISABLE:
				{
				State = 361; alterTableTrigger();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableSwitchPartitionContext : ParserRuleContext {
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSQLParser.PARTITION, i);
		}
		public IntegerValueContext integerValue(int i) {
			return GetRuleContext<IntegerValueContext>(i);
		}
		public ITerminalNode SWITCH() { return GetToken(TSQLParser.SWITCH, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSQLParser.PARTITION); }
		public ITerminalNode TO() { return GetToken(TSQLParser.TO, 0); }
		public IntegerValueContext[] integerValue() {
			return GetRuleContexts<IntegerValueContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public PartitionNameContext partitionName() {
			return GetRuleContext<PartitionNameContext>(0);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public AlterTableSwitchPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableSwitchPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableSwitchPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableSwitchPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableSwitchPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableSwitchPartitionContext alterTableSwitchPartition() {
		AlterTableSwitchPartitionContext _localctx = new AlterTableSwitchPartitionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_alterTableSwitchPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(SWITCH);
			State = 365; Match(PARTITION);
			State = 368;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 366; integerValue();
				}
				break;
			case AT:
				{
				State = 367; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 370; Match(TO);
			State = 371; partitionName();
			State = 372; Match(PARTITION);
			State = 375;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 373; integerValue();
				}
				break;
			case AT:
				{
				State = 374; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableDropConstraintContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public AlterTableDropConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableDropConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableDropConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableDropConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableDropConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableDropConstraintContext alterTableDropConstraint() {
		AlterTableDropConstraintContext _localctx = new AlterTableDropConstraintContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_alterTableDropConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(DROP);
			State = 378; Match(CONSTRAINT);
			State = 379; qualifiedName();
			State = 381;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 380; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableAddConstraintContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ColumnListContext[] columnList() {
			return GetRuleContexts<ColumnListContext>();
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode[] RPAREN() { return GetTokens(TSQLParser.RPAREN); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ColumnListContext columnList(int i) {
			return GetRuleContext<ColumnListContext>(i);
		}
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(TSQLParser.RPAREN, i);
		}
		public ITerminalNode[] LPAREN() { return GetTokens(TSQLParser.LPAREN); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(TSQLParser.ADD, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSQLParser.REFERENCES, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSQLParser.FOREIGN, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(TSQLParser.LPAREN, i);
		}
		public AlterTableAddConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableAddConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableAddConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableAddConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableAddConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableAddConstraintContext alterTableAddConstraint() {
		AlterTableAddConstraintContext _localctx = new AlterTableAddConstraintContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_alterTableAddConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(ADD);
			State = 384; Match(CONSTRAINT);
			State = 385; qualifiedName();
			State = 419;
			switch (_input.La(1)) {
			case PRIMARY:
				{
				{
				State = 386; Match(PRIMARY);
				State = 387; Match(KEY);
				State = 389;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 388; clusterType();
					}
				}

				}
				State = 391; Match(LPAREN);
				State = 392; orderedIndexColumnList();
				State = 393; Match(RPAREN);
				State = 395;
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 394; basicOptionList();
					}
					break;
				}
				State = 399;
				_la = _input.La(1);
				if (_la==ON) {
					{
					State = 397; Match(ON);
					State = 398; partitionIdent();
					}
				}

				}
				break;
			case DEFAULT:
				{
				State = 401; Match(DEFAULT);
				State = 402; Match(LPAREN);
				State = 403; literalValue();
				State = 404; Match(RPAREN);
				State = 405; Match(FOR);
				State = 406; qualifiedName();
				}
				break;
			case FOREIGN:
				{
				State = 408; Match(FOREIGN);
				State = 409; Match(KEY);
				State = 410; Match(LPAREN);
				State = 411; columnList();
				State = 412; Match(RPAREN);
				State = 413; Match(REFERENCES);
				State = 414; tableSource();
				State = 415; Match(LPAREN);
				State = 416; columnList();
				State = 417; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionIdentContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public PartitionIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPartitionIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPartitionIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionIdentContext partitionIdent() {
		PartitionIdentContext _localctx = new PartitionIdentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_partitionIdent);
		try {
			State = 430;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 421; Match(PRIMARY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422; Match(LBRACKET);
				State = 423; Match(PRIMARY);
				State = 424; Match(RBRACKET);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 425; qualifiedName();
				State = 426; Match(LPAREN);
				State = 427; columnList();
				State = 428; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableTriggerContext : ParserRuleContext {
		public ITerminalNode DISABLE() { return GetToken(TSQLParser.DISABLE, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode ENABLE() { return GetToken(TSQLParser.ENABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSQLParser.TRIGGER, 0); }
		public AlterTableTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterTableTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterTableTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableTriggerContext alterTableTrigger() {
		AlterTableTriggerContext _localctx = new AlterTableTriggerContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_alterTableTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			_la = _input.La(1);
			if ( !(_la==ENABLE || _la==DISABLE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 433; Match(TRIGGER);
			State = 434; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterIndexContext : ParserRuleContext {
		public QualifiedNameContext Index;
		public QualifiedNameContext Table;
		public QualifiedNameContext Operation;
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(TSQLParser.ALL, 0); }
		public AlterIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterIndexContext alterIndex() {
		AlterIndexContext _localctx = new AlterIndexContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_alterIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(ALTER);
			State = 437; Match(INDEX);
			State = 440;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 438; _localctx.Index = qualifiedName();
				}
				break;

			case 2:
				{
				State = 439; Match(ALL);
				}
				break;
			}
			State = 442; Match(ON);
			{
			State = 443; _localctx.Table = qualifiedName();
			}
			{
			State = 444; _localctx.Operation = qualifiedName();
			}
			State = 446;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 445; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionSchemeContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode USED() { return GetToken(TSQLParser.USED, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSQLParser.SCHEME, 0); }
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public AlterPartitionSchemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartitionScheme; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterPartitionScheme(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterPartitionScheme(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartitionScheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionSchemeContext alterPartitionScheme() {
		AlterPartitionSchemeContext _localctx = new AlterPartitionSchemeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_alterPartitionScheme);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(ALTER);
			State = 449; Match(PARTITION);
			State = 450; Match(SCHEME);
			State = 451; qualifiedName();
			State = 452; Match(NEXT);
			State = 453; Match(USED);
			State = 454; partitionIdent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionFunctionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(TSQLParser.FUNCTION, 0); }
		public ITerminalNode RANGE() { return GetToken(TSQLParser.RANGE, 0); }
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSQLParser.SPLIT, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AlterPartitionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartitionFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAlterPartitionFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAlterPartitionFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartitionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionFunctionContext alterPartitionFunction() {
		AlterPartitionFunctionContext _localctx = new AlterPartitionFunctionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_alterPartitionFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; Match(ALTER);
			State = 457; Match(PARTITION);
			State = 458; Match(FUNCTION);
			State = 459; functionName();
			State = 460; Match(LPAREN);
			State = 461; Match(RPAREN);
			State = 474;
			switch (_input.La(1)) {
			case MERGE:
				{
				State = 462; Match(MERGE);
				State = 463; Match(RANGE);
				State = 464; Match(LPAREN);
				State = 465; variable();
				State = 466; Match(RPAREN);
				}
				break;
			case SPLIT:
				{
				State = 468; Match(SPLIT);
				State = 469; Match(RANGE);
				State = 470; Match(LPAREN);
				State = 471; variable();
				State = 472; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicOptionListContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public BasicOptionContext[] basicOption() {
			return GetRuleContexts<BasicOptionContext>();
		}
		public BasicOptionContext basicOption(int i) {
			return GetRuleContext<BasicOptionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public BasicOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicOptionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterBasicOptionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitBasicOptionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicOptionListContext basicOptionList() {
		BasicOptionListContext _localctx = new BasicOptionListContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_basicOptionList);
		int _la;
		try {
			State = 490;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; Match(WITH);
				State = 477; Match(LPAREN);
				State = 478; basicOption();
				State = 483;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 479; Match(COMMA);
					State = 480; basicOption();
					}
					}
					State = 485;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 486; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 488; Match(WITH);
				State = 489; basicOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicOptionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public BasicOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterBasicOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitBasicOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicOptionContext basicOption() {
		BasicOptionContext _localctx = new BasicOptionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_basicOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492; Match(Identifier);
			State = 495;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 493; Match(EQUALS);
				State = 494;
				_la = _input.La(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public TableDeclarationOptionsContext tableDeclarationOptions() {
			return GetRuleContext<TableDeclarationOptionsContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ColumnDefinitionListContext columnDefinitionList() {
			return GetRuleContext<ColumnDefinitionListContext>(0);
		}
		public PartitionIdentContext partitionIdent() {
			return GetRuleContext<PartitionIdentContext>(0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(CREATE);
			State = 498; Match(TABLE);
			State = 501;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 499; qualifiedName();
				}
				break;

			case 2:
				{
				State = 500; tempTable();
				}
				break;
			}
			State = 503; Match(LPAREN);
			State = 504; columnDefinitionList();
			State = 507;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 505; Match(COMMA);
				State = 506; tableDeclarationOptions();
				}
				break;
			}
			State = 510;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 509; Match(COMMA);
				}
			}

			State = 512; Match(RPAREN);
			State = 515;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 513; Match(ON);
				State = 514; partitionIdent();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_dropIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517; Match(DROP);
			State = 518; Match(INDEX);
			State = 519; qualifiedName();
			State = 525;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 520; Match(ON);
				State = 521; tableTarget();
				State = 523;
				switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					State = 522; basicOptionList();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public CreateIndexPartitionContext createIndexPartition() {
			return GetRuleContext<CreateIndexPartitionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public CreateIndexIncludeListContext createIndexIncludeList() {
			return GetRuleContext<CreateIndexIncludeListContext>(0);
		}
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public TempIndexContext tempIndex() {
			return GetRuleContext<TempIndexContext>(0);
		}
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_createIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527; Match(CREATE);
			State = 529;
			_la = _input.La(1);
			if (_la==UNIQUE) {
				{
				State = 528; Match(UNIQUE);
				}
			}

			State = 532;
			_la = _input.La(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 531; clusterType();
				}
			}

			State = 534; Match(INDEX);
			State = 537;
			switch (_input.La(1)) {
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				{
				State = 535; qualifiedName();
				}
				break;
			case HASH:
				{
				State = 536; tempIndex();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 539; Match(ON);
			State = 540; tableTarget();
			State = 541; Match(LPAREN);
			State = 542; orderedIndexColumnList();
			State = 543; Match(RPAREN);
			State = 545;
			_la = _input.La(1);
			if (_la==INCLUDE) {
				{
				State = 544; createIndexIncludeList();
				}
			}

			State = 548;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 547; whereClause();
				}
			}

			State = 551;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 550; basicOptionList();
				}
				break;
			}
			State = 554;
			_la = _input.La(1);
			if (_la==ON) {
				{
				State = 553; createIndexPartition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexIncludeListContext : ParserRuleContext {
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSQLParser.INCLUDE, 0); }
		public CreateIndexIncludeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexIncludeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndexIncludeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndexIncludeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexIncludeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexIncludeListContext createIndexIncludeList() {
		CreateIndexIncludeListContext _localctx = new CreateIndexIncludeListContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_createIndexIncludeList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 556; Match(INCLUDE);
			State = 557; Match(LPAREN);
			State = 558; columnList();
			State = 559; Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexPartitionContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public CreateIndexPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexPartition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndexPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndexPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexPartitionContext createIndexPartition() {
		CreateIndexPartitionContext _localctx = new CreateIndexPartitionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_createIndexPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; Match(ON);
			State = 571;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 562; qualifiedName();
				State = 563; Match(LPAREN);
				State = 564; columnList();
				State = 565; Match(RPAREN);
				}
				break;

			case 2:
				{
				State = 567; Match(LBRACKET);
				State = 568; Match(PRIMARY);
				State = 569; Match(RBRACKET);
				}
				break;

			case 3:
				{
				State = 570; Match(PRIMARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedIndexColumnListContext : ParserRuleContext {
		public OrderedIndexColumnContext orderedIndexColumn(int i) {
			return GetRuleContext<OrderedIndexColumnContext>(i);
		}
		public OrderedIndexColumnContext[] orderedIndexColumn() {
			return GetRuleContexts<OrderedIndexColumnContext>();
		}
		public OrderedIndexColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedIndexColumnList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderedIndexColumnList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderedIndexColumnList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedIndexColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedIndexColumnListContext orderedIndexColumnList() {
		OrderedIndexColumnListContext _localctx = new OrderedIndexColumnListContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_orderedIndexColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; orderedIndexColumn();
			State = 578;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 574; Match(COMMA);
				State = 575; orderedIndexColumn();
				}
				}
				State = 580;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedIndexColumnContext : ParserRuleContext {
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public OrderedIndexColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedIndexColumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderedIndexColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderedIndexColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedIndexColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedIndexColumnContext orderedIndexColumn() {
		OrderedIndexColumnContext _localctx = new OrderedIndexColumnContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_orderedIndexColumn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581; columnName();
			State = 583;
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 582;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateStatisticsContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public CreateStatisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createStatistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateStatistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateStatistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateStatistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateStatisticsContext createStatistics() {
		CreateStatisticsContext _localctx = new CreateStatisticsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_createStatistics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585; Match(CREATE);
			State = 586; Match(STATISTICS);
			State = 587; qualifiedName();
			State = 588; Match(ON);
			State = 589; tableTarget();
			State = 590; Match(LPAREN);
			State = 591; qualifiedColumnNameList();
			State = 592; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594; Match(DROP);
			State = 595; Match(PROCEDURE);
			State = 596; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		public ProcedureOptionsContext procedureOptions() {
			return GetRuleContext<ProcedureOptionsContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public ProcedureBodyContext procedureBody() {
			return GetRuleContext<ProcedureBodyContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ProcedureParametersContext procedureParameters() {
			return GetRuleContext<ProcedureParametersContext>(0);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_createProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598; Match(CREATE);
			State = 599; Match(PROCEDURE);
			State = 600; qualifiedName();
			State = 602;
			_la = _input.La(1);
			if (_la==LPAREN || _la==AT) {
				{
				State = 601; procedureParameters();
				}
			}

			State = 605;
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 604; procedureOptions();
				}
			}

			State = 607; Match(AS);
			State = 608; procedureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode TRUNCATE() { return GetToken(TSQLParser.TRUNCATE, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTruncateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTruncateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableContext truncateTable() {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_truncateTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; Match(TRUNCATE);
			State = 611; Match(TABLE);
			State = 612; tableTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObscureCommandsContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObscureCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obscureCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterObscureCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitObscureCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObscureCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObscureCommandsContext obscureCommands() {
		ObscureCommandsContext _localctx = new ObscureCommandsContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_obscureCommands);
		int _la;
		try {
			State = 628;
			switch (_input.La(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614; Match(T__10);
				State = 615; Match(Identifier);
				State = 622;
				switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					State = 616; expression();
					}
					break;

				case 2:
					{
					State = 617; Match(LPAREN);
					State = 619;
					_la = _input.La(1);
					if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
						{
						State = 618; argumentList();
						}
					}

					State = 621; Match(RPAREN);
					}
					break;
				}
				State = 625;
				switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					State = 624; basicOptionList();
					}
					break;
				}
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateListContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PredicateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPredicateList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPredicateList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateListContext predicateList() {
		PredicateListContext _localctx = new PredicateListContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_predicateList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ITerminalNode COUNT() { return GetToken(TSQLParser.COUNT, 0); }
		public ITerminalNode CASE() { return GetToken(TSQLParser.CASE, 0); }
		public SubSelectExpressionContext subSelectExpression() {
			return GetRuleContext<SubSelectExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSQLParser.COUNT_BIG, 0); }
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public MinSelectElementContext minSelectElement() {
			return GetRuleContext<MinSelectElementContext>(0);
		}
		public ITerminalNode EXISTS() { return GetToken(TSQLParser.EXISTS, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public CaseWhenContext[] caseWhen() {
			return GetRuleContexts<CaseWhenContext>();
		}
		public CaseWhenContext caseWhen(int i) {
			return GetRuleContext<CaseWhenContext>(i);
		}
		public CaseElseContext caseElse() {
			return GetRuleContext<CaseElseContext>(0);
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CAST() { return GetToken(TSQLParser.CAST, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ConvertExpressionContext convertExpression() {
			return GetRuleContext<ConvertExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_primary);
		int _la;
		try {
			State = 692;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 632; literalValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 633; qualifiedColumnName();
				State = 635;
				switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					State = 634; collate();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 637; variable();
				State = 639;
				switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					State = 638; collate();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 641; convertExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 642; functionCall();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 643; Match(CAST);
				State = 644; Match(LPAREN);
				State = 645; expression();
				State = 646; Match(AS);
				State = 647; type();
				State = 648; Match(RPAREN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 650;
				_la = _input.La(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 657;
				switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					State = 651; minSelectElement();
					}
					break;

				case 2:
					{
					State = 652; Match(LPAREN);
					State = 653; Match(DISTINCT);
					State = 654; minSelectElement();
					State = 655; Match(RPAREN);
					}
					break;
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 659; Match(EXISTS);
				State = 660; Match(LPAREN);
				State = 661; selectStatement();
				State = 662; Match(RPAREN);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 664; Match(CASE);
				State = 666;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 665; caseWhen();
					}
					}
					State = 668;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WHEN );
				State = 671;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 670; caseElse();
					}
				}

				State = 673; Match(END);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 675; Match(CASE);
				State = 676; expression();
				State = 678;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 677; caseWhen();
					}
					}
					State = 680;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WHEN );
				State = 683;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 682; caseElse();
					}
				}

				State = 685; Match(END);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 687; Match(LPAREN);
				State = 688; expression();
				State = 689; Match(RPAREN);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 691; subSelectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_expression);
		try {
			State = 696;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694; primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConvertExpressionContext : ParserRuleContext {
		public IntegerValueContext Style;
		public ITerminalNode CONVERT() { return GetToken(TSQLParser.CONVERT, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConvertExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convertExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConvertExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConvertExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConvertExpressionContext convertExpression() {
		ConvertExpressionContext _localctx = new ConvertExpressionContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_convertExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698; Match(CONVERT);
			State = 699; Match(LPAREN);
			State = 700; type();
			State = 701; Match(COMMA);
			State = 702; expression();
			State = 705;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 703; Match(COMMA);
				State = 704; _localctx.Style = integerValue();
				}
			}

			State = 707; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709; conditionalOrExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ITerminalNode OR() { return GetToken(TSQLParser.OR, 0); }
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(_ctx, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 712; conditionalAndExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 722;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 720;
					switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
					case 1:
						{
						_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
						State = 714;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 715; Match(OR);
						State = 716; conditionalAndExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
						State = 717;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 718; Match(T__9);
						State = 719; conditionalAndExpression(0);
						}
						break;
					}
					} 
				}
				State = 724;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,49,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 726; inclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 736;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 734;
					switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
					case 1:
						{
						_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
						State = 728;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 729; Match(AND);
						State = 730; inclusiveOrExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
						State = 731;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 732; Match(T__8);
						State = 733; inclusiveOrExpression(0);
						}
						break;
					}
					} 
				}
				State = 738;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode IS() { return GetToken(TSQLParser.IS, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(_ctx, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_inclusiveOrExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 740; exclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 753;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 751;
					switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
					case 1:
						{
						_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
						State = 742;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 743; Match(PIPE);
						State = 744; exclusiveOrExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
						State = 745;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 746; Match(IS);
						State = 748;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 747; Match(NOT);
							}
						}

						State = 750; Match(NULL);
						}
						break;
					}
					} 
				}
				State = 755;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(_ctx, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 757; andExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 764;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 759;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 760; Match(CARET);
					State = 761; andExpression(0);
					}
					} 
				}
				State = 766;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(_ctx, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 768; equalityExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 775;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 770;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 771; Match(AMPERSAND);
					State = 772; equalityExpression(0);
					}
					} 
				}
				State = 777;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,56,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(_ctx, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 779; relationalExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 792;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 790;
					switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 781;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 782; Match(EQUALS);
						State = 783; relationalExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 784;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 785; Match(EQUAL_EQUAL);
						State = 786; relationalExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 787;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 788; Match(NOT_EQUAL);
						State = 789; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 794;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public LikeTestExpressionContext likeTestExpression() {
			return GetRuleContext<LikeTestExpressionContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(_ctx, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 796; additiveExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 830;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 828;
					switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 798;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 799; Match(LT);
						State = 800; additiveExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 801;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 802; Match(GT);
						State = 803; additiveExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 804;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 805; Match(LTE);
						State = 806; additiveExpression(0);
						}
						break;

					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 807;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 808; Match(LT);
						State = 809; Match(EQUALS);
						State = 810; additiveExpression(0);
						}
						break;

					case 5:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 811;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 812; Match(GTE);
						State = 813; additiveExpression(0);
						}
						break;

					case 6:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 814;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 815; Match(GT);
						State = 816; Match(EQUALS);
						State = 817; additiveExpression(0);
						}
						break;

					case 7:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 818;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 819; Match(GT_LT);
						State = 820; additiveExpression(0);
						}
						break;

					case 8:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 821;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 822; Match(LIKE);
						State = 823; likeTestExpression();
						}
						break;

					case 9:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 824;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 825; Match(NOT);
						State = 826; Match(LIKE);
						State = 827; likeTestExpression();
						}
						break;
					}
					} 
				}
				State = 832;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,60,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 834; multiplicativeExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 844;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,62,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 842;
					switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 836;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 837; Match(PLUS);
						State = 838; multiplicativeExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 839;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 840; Match(MINUS);
						State = 841; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 846;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,62,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 848; unaryExpression();
			}
			_ctx.stop = _input.Lt(-1);
			State = 861;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 859;
					switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 850;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 851; Match(STAR);
						State = 852; unaryExpression();
						}
						break;

					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 853;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 854; Match(SLASH);
						State = 855; unaryExpression();
						}
						break;

					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 856;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 857; Match(PERCENT);
						State = 858; unaryExpression();
						}
						break;
					}
					} 
				}
				State = 863;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_unaryExpression);
		try {
			State = 869;
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 864; Match(PLUS);
				State = 865; unaryExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 866; Match(MINUS);
				State = 867; unaryExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 868; unaryExpressionNotPlusMinus();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionNotPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 874;
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 871; postfixExpression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 872; Match(NOT);
				State = 873; unaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(TSQLParser.BETWEEN, 0); }
		public ExpressionSetContext expressionSet() {
			return GetRuleContext<ExpressionSetContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public LikeTestExpressionContext likeTestExpression() {
			return GetRuleContext<LikeTestExpressionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode IN() { return GetToken(TSQLParser.IN, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(_ctx, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 877; primary();
			}
			_ctx.stop = _input.Lt(-1);
			State = 903;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 901;
					switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 879;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 880; Match(IN);
						State = 881; expressionSet();
						}
						break;

					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 882;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 883; Match(NOT);
						State = 884; Match(IN);
						State = 885; expressionSet();
						}
						break;

					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 886;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 888;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 887; Match(NOT);
							}
						}

						State = 890; Match(BETWEEN);
						State = 891; expression();
						State = 892; Match(AND);
						State = 893; expression();
						}
						break;

					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 895;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 897;
						_la = _input.La(1);
						if (_la==NOT) {
							{
							State = 896; Match(NOT);
							}
						}

						State = 899; Match(LIKE);
						State = 900; likeTestExpression();
						}
						break;
					}
					} 
				}
				State = 905;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LikeTestExpressionContext : ParserRuleContext {
		public ITerminalNode ESCAPE() { return GetToken(TSQLParser.ESCAPE, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public LikeTestExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeTestExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterLikeTestExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitLikeTestExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeTestExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeTestExpressionContext likeTestExpression() {
		LikeTestExpressionContext _localctx = new LikeTestExpressionContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_likeTestExpression);
		try {
			State = 912;
			switch (_input.La(1)) {
			case AT:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 906; stringValue();
				State = 909;
				switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					State = 907; Match(ESCAPE);
					State = 908; Match(StringLiteral);
					}
					break;
				}
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 911; functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinSelectElementContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public MinSelectElementContext minSelectElement() {
			return GetRuleContext<MinSelectElementContext>(0);
		}
		public MinSelectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minSelectElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMinSelectElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMinSelectElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinSelectElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinSelectElementContext minSelectElement() {
		MinSelectElementContext _localctx = new MinSelectElementContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_minSelectElement);
		try {
			State = 922;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 914; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 915; qualifiedColumnName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 916; literalValue();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 917; functionCall();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 918; Match(LPAREN);
				State = 919; minSelectElement();
				State = 920; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSetContext : ParserRuleContext {
		public SubSelectExpressionContext subSelectExpression() {
			return GetRuleContext<SubSelectExpressionContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpressionSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpressionSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSetContext expressionSet() {
		ExpressionSetContext _localctx = new ExpressionSetContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_expressionSet);
		int _la;
		try {
			State = 941;
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 924; Match(LPAREN);
				State = 925; expression();
				State = 930;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 926; Match(COMMA);
					State = 927; expression();
					}
					}
					State = 932;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 933; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 935; variable();
				State = 937;
				switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					State = 936; collate();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 939; functionCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 940; subSelectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseWhenContext : ParserRuleContext {
		public ITerminalNode THEN() { return GetToken(TSQLParser.THEN, 0); }
		public ITerminalNode WHEN() { return GetToken(TSQLParser.WHEN, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public CaseWhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseWhen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCaseWhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCaseWhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseWhenContext caseWhen() {
		CaseWhenContext _localctx = new CaseWhenContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_caseWhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 943; Match(WHEN);
			State = 944; expression();
			State = 945; Match(THEN);
			State = 946; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseElseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCaseElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCaseElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseElseContext caseElse() {
		CaseElseContext _localctx = new CaseElseContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_caseElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948; Match(ELSE);
			State = 949; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubSelectExpressionContext : ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public SubSelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subSelectExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSubSelectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSubSelectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubSelectExpressionContext subSelectExpression() {
		SubSelectExpressionContext _localctx = new SubSelectExpressionContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_subSelectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 951; Match(LPAREN);
			State = 952; selectStatement();
			State = 953; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public IdentityTypeContext identityType() {
			return GetRuleContext<IdentityTypeContext>(0);
		}
		public TypeInBracketContext typeInBracket() {
			return GetRuleContext<TypeInBracketContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public CharacterStringTypeContext characterStringType() {
			return GetRuleContext<CharacterStringTypeContext>(0);
		}
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_type);
		try {
			State = 963;
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 955; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 956; characterStringType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 957; numericType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 958; identityType();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 959; integerType();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 960; Match(XML);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 961; Match(CURSOR);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 962; typeInBracket();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInBracketContext : ParserRuleContext {
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeInBracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInBracket; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTypeInBracket(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTypeInBracket(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInBracket(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInBracketContext typeInBracket() {
		TypeInBracketContext _localctx = new TypeInBracketContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_typeInBracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965; Match(LBRACKET);
			State = 966; type();
			State = 967; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionInRestContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionInRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionInRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExpressionInRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExpressionInRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionInRestContext expressionInRest() {
		ExpressionInRestContext _localctx = new ExpressionInRestContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_expressionInRest);
		int _la;
		try {
			State = 986;
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 969; Match(LPAREN);
				State = 970; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 971; Match(LPAREN);
				State = 972; selectStatement();
				State = 973; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 975; Match(LPAREN);
				State = 976; expression();
				State = 981;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 977; Match(COMMA);
					State = 978; expression();
					}
					}
					State = 983;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 984; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		public LiteralValueContext literalValue(int i) {
			return GetRuleContext<LiteralValueContext>(i);
		}
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public LiteralValueContext[] literalValue() {
			return GetRuleContexts<LiteralValueContext>();
		}
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode FloatingPointLiteral() { return GetToken(TSQLParser.FloatingPointLiteral, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_literalValue);
		int _la;
		try {
			State = 1003;
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 988; Match(StringLiteral);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 989; integerValue();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 990; Match(FloatingPointLiteral);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 991; Match(NULL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 992; Match(LPAREN);
				State = 993; literalValue();
				State = 998;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 994; Match(COMMA);
					State = 995; literalValue();
					}
					}
					State = 1000;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1001; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_stringValue);
		try {
			State = 1007;
			switch (_input.La(1)) {
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1005; Match(StringLiteral);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1006; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerValueContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(TSQLParser.IntegerLiteral, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public IntegerValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntegerValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntegerValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerValueContext integerValue() {
		IntegerValueContext _localctx = new IntegerValueContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_integerValue);
		int _la;
		try {
			State = 1017;
			switch (_input.La(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1010;
				_la = _input.La(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 1009;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
				}

				State = 1012; Match(IntegerLiteral);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1013; Match(LPAREN);
				State = 1014; integerValue();
				State = 1015; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNamePartContext : ParserRuleContext {
		public ITerminalNode RBRACKET() { return GetToken(TSQLParser.RBRACKET, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		public ITerminalNode LBRACKET() { return GetToken(TSQLParser.LBRACKET, 0); }
		public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public QualifiedNamePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNamePart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedNamePart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedNamePart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNamePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNamePartContext qualifiedNamePart() {
		QualifiedNamePartContext _localctx = new QualifiedNamePartContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_qualifiedNamePart);
		int _la;
		try {
			State = 1028;
			switch (_input.La(1)) {
			case LBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1019; Match(LBRACKET);
				State = 1021;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1020; keyword();
					}
					}
					State = 1023;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << READONLY) | (1L << TRY) | (1L << CATCH) | (1L << TRANSACTION) | (1L << COMMIT) | (1L << ROLLBACK) | (1L << RAISE_ERROR) | (1L << PRINT) | (1L << CLUSTERED) | (1L << NONCLUSTERED) | (1L << TABLE) | (1L << PROCEDURE) | (1L << PARTITION) | (1L << INDEX) | (1L << DATABASE) | (1L << CONSTRAINT) | (1L << FOREIGN) | (1L << PRIMARY) | (1L << KEY) | (1L << REFERENCES) | (1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL) | (1L << CURSOR) | (1L << FETCH) | (1L << OPEN) | (1L << CLOSE) | (1L << DEALLOCATE) | (1L << FIRST) | (1L << LAST) | (1L << PRIOR) | (1L << NEXT) | (1L << ABSOLUTE) | (1L << RELATIVE) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << COLLATE) | (1L << COUNT) | (1L << COUNT_BIG) | (1L << DISTINCT) | (1L << UNIQUE) | (1L << MAX) | (1L << TOP) | (1L << WHEN) | (1L << THEN) | (1L << SWITCH) | (1L << OVER) | (1L << INCLUDE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTERSECT - 64)) | (1L << (EXCEPT - 64)) | (1L << (UNION - 64)) | (1L << (ALL - 64)) | (1L << (APPLY - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (WHILE - 64)) | (1L << (GOTO - 64)) | (1L << (CONTINUE - 64)) | (1L << (BREAK - 64)) | (1L << (TRUNCATE - 64)) | (1L << (ADD - 64)) | (1L << (REMOVE - 64)) | (1L << (ALTER - 64)) | (1L << (CREATE - 64)) | (1L << (DROP - 64)) | (1L << (AS - 64)) | (1L << (WITH - 64)) | (1L << (FOR - 64)) | (1L << (REPLICATION - 64)) | (1L << (BEGIN - 64)) | (1L << (END - 64)) | (1L << (EXISTS - 64)) | (1L << (DEFAULT - 64)) | (1L << (VARYING - 64)) | (1L << (SELECT - 64)) | (1L << (UPDATE - 64)) | (1L << (INSERT - 64)) | (1L << (DELETE - 64)) | (1L << (WHERE - 64)) | (1L << (FROM - 64)) | (1L << (JOIN - 64)) | (1L << (DECLARE - 64)) | (1L << (OPTION - 64)) | (1L << (SET - 64)) | (1L << (TO - 64)) | (1L << (ON - 64)) | (1L << (OFF - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (EXECUTE - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (IS - 64)) | (1L << (IN - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (BETWEEN - 64)) | (1L << (RETURN - 64)) | (1L << (OUTPUT - 64)) | (1L << (OUT - 64)) | (1L << (LIKE - 64)) | (1L << (ESCAPE - 64)) | (1L << (OF - 64)) | (1L << (DECIMAL - 64)) | (1L << (NUMERIC - 64)) | (1L << (VARCHAR - 64)) | (1L << (NVARCHAR - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (NCHAR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT - 128)) | (1L << (IDENTITY - 128)) | (1L << (LOG - 128)) | (1L << (AND - 128)) | (1L << (OR - 128)) | (1L << (ASC - 128)) | (1L << (DESC - 128)) | (1L << (STATISTICS - 128)) | (1L << (USING - 128)) | (1L << (MERGE - 128)) | (1L << (MATCHED - 128)) | (1L << (TARGET - 128)) | (1L << (SOURCE - 128)) | (1L << (XML - 128)) | (1L << (RAW - 128)) | (1L << (AUTO - 128)) | (1L << (EXPLICIT - 128)) | (1L << (PATH - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (TRIGGER - 128)) | (1L << (WAITFOR - 128)) | (1L << (DELAY - 128)) | (1L << (COMPUTE - 128)) | (1L << (LEVEL - 128)) | (1L << (ISOLATION - 128)) | (1L << (SPLIT - 128)) | (1L << (RANGE - 128)) | (1L << (FUNCTION - 128)) | (1L << (SCHEME - 128)) | (1L << (USED - 128)) | (1L << (OPTIMIZE - 128)) | (1L << (ROWCOUNT - 128)))) != 0) );
				State = 1025; Match(RBRACKET);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1027; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public QualifiedNamePartContext[] qualifiedNamePart() {
			return GetRuleContexts<QualifiedNamePartContext>();
		}
		public QualifiedNamePartContext qualifiedNamePart(int i) {
			return GetRuleContext<QualifiedNamePartContext>(i);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_qualifiedName);
		int _la;
		try {
			int _alt;
			State = 1043;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1030; qualifiedNamePart();
				State = 1039;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,88,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1032;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 1031; Match(DOT);
							}
							}
							State = 1034;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==DOT );
						State = 1036; qualifiedNamePart();
						}
						} 
					}
					State = 1041;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,88,_ctx);
				}
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1042; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045; qualifiedName();
			State = 1050;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1046; Match(COMMA);
				State = 1047; qualifiedName();
				}
				}
				State = 1052;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempIndexContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode HASH(int i) {
			return GetToken(TSQLParser.HASH, i);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode[] HASH() { return GetTokens(TSQLParser.HASH); }
		public TempIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTempIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTempIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempIndexContext tempIndex() {
		TempIndexContext _localctx = new TempIndexContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_tempIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1053; Match(HASH);
				}
				}
				State = 1056;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==HASH );
			State = 1060;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				{
				State = 1058; qualifiedNamePart();
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
				{
				State = 1059; keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempTableContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TSQLParser.DOT, 0); }
		public ITerminalNode HASH(int i) {
			return GetToken(TSQLParser.HASH, i);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode[] HASH() { return GetTokens(TSQLParser.HASH); }
		public TempTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTempTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTempTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempTableContext tempTable() {
		TempTableContext _localctx = new TempTableContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_tempTable);
		int _la;
		try {
			State = 1075;
			switch (_input.La(1)) {
			case HASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1063;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1062; Match(HASH);
					}
					}
					State = 1065;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==HASH );
				State = 1069;
				switch (_input.La(1)) {
				case LBRACKET:
				case Identifier:
					{
					State = 1067; qualifiedNamePart();
					}
					break;
				case READONLY:
				case TRY:
				case CATCH:
				case TRANSACTION:
				case COMMIT:
				case ROLLBACK:
				case RAISE_ERROR:
				case PRINT:
				case CLUSTERED:
				case NONCLUSTERED:
				case TABLE:
				case PROCEDURE:
				case PARTITION:
				case INDEX:
				case DATABASE:
				case CONSTRAINT:
				case FOREIGN:
				case PRIMARY:
				case KEY:
				case REFERENCES:
				case LEFT:
				case RIGHT:
				case CROSS:
				case OUTER:
				case INNER:
				case FULL:
				case CURSOR:
				case FETCH:
				case OPEN:
				case CLOSE:
				case DEALLOCATE:
				case FIRST:
				case LAST:
				case PRIOR:
				case NEXT:
				case ABSOLUTE:
				case RELATIVE:
				case CASE:
				case CAST:
				case CONVERT:
				case COLLATE:
				case COUNT:
				case COUNT_BIG:
				case DISTINCT:
				case UNIQUE:
				case MAX:
				case TOP:
				case WHEN:
				case THEN:
				case SWITCH:
				case OVER:
				case INCLUDE:
				case INTERSECT:
				case EXCEPT:
				case UNION:
				case ALL:
				case APPLY:
				case IF:
				case ELSE:
				case WHILE:
				case GOTO:
				case CONTINUE:
				case BREAK:
				case TRUNCATE:
				case ADD:
				case REMOVE:
				case ALTER:
				case CREATE:
				case DROP:
				case AS:
				case WITH:
				case FOR:
				case REPLICATION:
				case BEGIN:
				case END:
				case EXISTS:
				case DEFAULT:
				case VARYING:
				case SELECT:
				case UPDATE:
				case INSERT:
				case DELETE:
				case WHERE:
				case FROM:
				case JOIN:
				case DECLARE:
				case OPTION:
				case SET:
				case TO:
				case ON:
				case OFF:
				case GROUP:
				case HAVING:
				case ORDER:
				case BY:
				case EXECUTE:
				case INTO:
				case VALUES:
				case IS:
				case IN:
				case NOT:
				case NULL:
				case BETWEEN:
				case RETURN:
				case OUTPUT:
				case OUT:
				case LIKE:
				case ESCAPE:
				case OF:
				case DECIMAL:
				case NUMERIC:
				case VARCHAR:
				case NVARCHAR:
				case CHAR:
				case CHARACTER:
				case NCHAR:
				case INT:
				case TINYINT:
				case SMALLINT:
				case BIGINT:
				case FLOAT:
				case IDENTITY:
				case LOG:
				case AND:
				case OR:
				case ASC:
				case DESC:
				case STATISTICS:
				case USING:
				case MERGE:
				case MATCHED:
				case TARGET:
				case SOURCE:
				case XML:
				case RAW:
				case AUTO:
				case EXPLICIT:
				case PATH:
				case ENABLE:
				case DISABLE:
				case TRIGGER:
				case WAITFOR:
				case DELAY:
				case COMPUTE:
				case LEVEL:
				case ISOLATION:
				case SPLIT:
				case RANGE:
				case FUNCTION:
				case SCHEME:
				case USED:
				case OPTIMIZE:
				case ROWCOUNT:
					{
					State = 1068; keyword();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1071; qualifiedName();
				State = 1072; Match(DOT);
				State = 1073; tempTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode[] AT() { return GetTokens(TSQLParser.AT); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode AT(int i) {
			return GetToken(TSQLParser.AT, i);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_variable);
		int _la;
		try {
			State = 1089;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1078;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1077; Match(AT);
					}
					}
					State = 1080;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==AT );
				State = 1082; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1084;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1083; Match(AT);
					}
					}
					State = 1086;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==AT );
				State = 1088; keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureBodyContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ProcedureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureBodyContext procedureBody() {
		ProcedureBodyContext _localctx = new ProcedureBodyContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_procedureBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParametersContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		public ProcedureParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParametersContext procedureParameters() {
		ProcedureParametersContext _localctx = new ProcedureParametersContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_procedureParameters);
		int _la;
		try {
			State = 1114;
			switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1093; Match(LPAREN);
				State = 1094; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1095; Match(LPAREN);
				State = 1096; procedureParameter();
				State = 1101;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1097; Match(COMMA);
					State = 1098; procedureParameter();
					}
					}
					State = 1103;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1104; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1106; procedureParameter();
				State = 1111;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1107; Match(COMMA);
					State = 1108; procedureParameter();
					}
					}
					State = 1113;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ITerminalNode READONLY() { return GetToken(TSQLParser.READONLY, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ProcedureParameterNameContext procedureParameterName() {
			return GetRuleContext<ProcedureParameterNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ProcedureParameterInitialValueContext procedureParameterInitialValue() {
			return GetRuleContext<ProcedureParameterInitialValueContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116; procedureParameterName();
			State = 1118;
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 1117; Match(AS);
				}
				break;
			}
			State = 1120; type();
			{
			State = 1122;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 1121; Match(NOT);
				}
			}

			State = 1125;
			_la = _input.La(1);
			if (_la==NULL) {
				{
				State = 1124; Match(NULL);
				}
			}

			}
			State = 1128;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 1127; procedureParameterInitialValue();
				}
			}

			State = 1131;
			_la = _input.La(1);
			if (_la==READONLY) {
				{
				State = 1130; Match(READONLY);
				}
			}

			State = 1134;
			_la = _input.La(1);
			if (_la==OUTPUT || _la==OUT) {
				{
				State = 1133;
				_la = _input.La(1);
				if ( !(_la==OUTPUT || _la==OUT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterInitialValueContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ProcedureParameterInitialValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterInitialValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameterInitialValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameterInitialValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameterInitialValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterInitialValueContext procedureParameterInitialValue() {
		ProcedureParameterInitialValueContext _localctx = new ProcedureParameterInitialValueContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_procedureParameterInitialValue);
		try {
			State = 1140;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1136; Match(EQUALS);
				State = 1137; literalValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1138; Match(EQUALS);
				State = 1139; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterNameContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ProcedureParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameterName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureParameterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureParameterName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameterName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterNameContext procedureParameterName() {
		ProcedureParameterNameContext _localctx = new ProcedureParameterNameContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_procedureParameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureOptionsContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(TSQLParser.Identifier); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode Identifier(int i) {
			return GetToken(TSQLParser.Identifier, i);
		}
		public ProcedureOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterProcedureOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitProcedureOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureOptionsContext procedureOptions() {
		ProcedureOptionsContext _localctx = new ProcedureOptionsContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_procedureOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1144; Match(WITH);
			State = 1145; Match(Identifier);
			State = 1150;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1146; Match(COMMA);
				State = 1147; Match(Identifier);
				}
				}
				State = 1152;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153; statement();
			State = 1157;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,110,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1154; statement();
					}
					} 
				}
				State = 1159;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,110,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(TSQLParser.SEMICOLON, 0); }
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public DdlContext ddl() {
			return GetRuleContext<DdlContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_statement);
		try {
			State = 1173;
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1160; Match(BEGIN);
				State = 1161; statementList();
				State = 1162; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1164; ddl();
				State = 1166;
				switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					State = 1165; Match(SEMICOLON);
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1168; dml();
				State = 1170;
				switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					State = 1169; Match(SEMICOLON);
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1172; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlContext : ParserRuleContext {
		public ObscureCommandsContext obscureCommands() {
			return GetRuleContext<ObscureCommandsContext>(0);
		}
		public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		public AlterIndexContext alterIndex() {
			return GetRuleContext<AlterIndexContext>(0);
		}
		public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		public CreateStatisticsContext createStatistics() {
			return GetRuleContext<CreateStatisticsContext>(0);
		}
		public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		public TruncateTableContext truncateTable() {
			return GetRuleContext<TruncateTableContext>(0);
		}
		public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		public AlterPartitionFunctionContext alterPartitionFunction() {
			return GetRuleContext<AlterPartitionFunctionContext>(0);
		}
		public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		public AlterPartitionSchemeContext alterPartitionScheme() {
			return GetRuleContext<AlterPartitionSchemeContext>(0);
		}
		public DdlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDdl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDdl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdlContext ddl() {
		DdlContext _localctx = new DdlContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_ddl);
		try {
			State = 1188;
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1175; createProcedure();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1176; createTable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1177; createIndex();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1178; createStatistics();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1179; dropProcedure();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1180; dropTable();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1181; dropIndex();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1182; truncateTable();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1183; alterTable();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1184; alterIndex();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1185; alterPartitionFunction();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1186; alterPartitionScheme();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1187; obscureCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlContext : ParserRuleContext {
		public ReturnExpressionContext returnExpression() {
			return GetRuleContext<ReturnExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(TSQLParser.BREAK, 0); }
		public DeclareStatementContext declareStatement() {
			return GetRuleContext<DeclareStatementContext>(0);
		}
		public MergeStatementContext mergeStatement() {
			return GetRuleContext<MergeStatementContext>(0);
		}
		public TryBlockContext tryBlock() {
			return GetRuleContext<TryBlockContext>(0);
		}
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSQLParser.COMMIT, 0); }
		public TransactionBlockContext transactionBlock() {
			return GetRuleContext<TransactionBlockContext>(0);
		}
		public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		public ITerminalNode PRINT() { return GetToken(TSQLParser.PRINT, 0); }
		public ITerminalNode COLON() { return GetToken(TSQLParser.COLON, 0); }
		public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public ComputeStatementContext computeStatement() {
			return GetRuleContext<ComputeStatementContext>(0);
		}
		public CommonTableExpressionContext commonTableExpression() {
			return GetRuleContext<CommonTableExpressionContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WaitForContext waitFor() {
			return GetRuleContext<WaitForContext>(0);
		}
		public ITerminalNode CONTINUE() { return GetToken(TSQLParser.CONTINUE, 0); }
		public CursorStatementContext cursorStatement() {
			return GetRuleContext<CursorStatementContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ITerminalNode GOTO() { return GetToken(TSQLParser.GOTO, 0); }
		public RaiseErrorContext raiseError() {
			return GetRuleContext<RaiseErrorContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ROLLBACK() { return GetToken(TSQLParser.ROLLBACK, 0); }
		public DmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDml(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlContext dml() {
		DmlContext _localctx = new DmlContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_dml);
		try {
			State = 1238;
			switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1190; selectStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1191; insertStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1192; deleteStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1193; updateStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1194; executeStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1195; mergeStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1196; computeStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1197; setStatement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1198; declareStatement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1199; tryBlock();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1200; transactionBlock();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1201; raiseError();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1202; waitFor();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1203; commonTableExpression();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1204; cursorStatement();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1205; Match(PRINT);
				State = 1206; expression();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1207; ifStatement();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1208; whileStatement();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1209; Match(BREAK);
				State = 1211;
				switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					State = 1210; qualifiedName();
					}
					break;
				}
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1213; Match(CONTINUE);
				State = 1215;
				switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					State = 1214; qualifiedName();
					}
					break;
				}
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1217; Match(COMMIT);
				State = 1219;
				switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					State = 1218; Match(TRANSACTION);
					}
					break;
				}
				State = 1222;
				switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					State = 1221; qualifiedName();
					}
					break;
				}
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1224; Match(GOTO);
				State = 1226;
				switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					State = 1225; qualifiedName();
					}
					break;
				}
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1228; Match(ROLLBACK);
				State = 1230;
				switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					State = 1229; Match(TRANSACTION);
					}
					break;
				}
				State = 1233;
				switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
				case 1:
					{
					State = 1232; qualifiedName();
					}
					break;
				}
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1235; returnExpression();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1236; Match(Identifier);
				State = 1237; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExpressionContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TSQLParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterReturnExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitReturnExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExpressionContext returnExpression() {
		ReturnExpressionContext _localctx = new ReturnExpressionContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_returnExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240; Match(RETURN);
			State = 1242;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1241; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(TSQLParser.IF, 0); }
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1244; Match(IF);
			State = 1245; predicateList();
			State = 1246; statement();
			State = 1249;
			switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				State = 1247; Match(ELSE);
				State = 1248; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(TSQLParser.WHILE, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251; Match(WHILE);
			State = 1252; predicateList();
			State = 1253; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitForContext : ParserRuleContext {
		public ITerminalNode WAITFOR() { return GetToken(TSQLParser.WAITFOR, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public ITerminalNode DELAY() { return GetToken(TSQLParser.DELAY, 0); }
		public WaitForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitFor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWaitFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWaitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitForContext waitFor() {
		WaitForContext _localctx = new WaitForContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_waitFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255; Match(WAITFOR);
			State = 1256; Match(DELAY);
			State = 1257; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseErrorContext : ParserRuleContext {
		public ITerminalNode LOG() { return GetToken(TSQLParser.LOG, 0); }
		public ITerminalNode RAISE_ERROR() { return GetToken(TSQLParser.RAISE_ERROR, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public RaiseErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseError; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterRaiseError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitRaiseError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseErrorContext raiseError() {
		RaiseErrorContext _localctx = new RaiseErrorContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_raiseError);
		try {
			int _alt;
			State = 1277;
			switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1259; Match(RAISE_ERROR);
				State = 1260; Match(LPAREN);
				State = 1261; argumentList();
				State = 1262; Match(RPAREN);
				State = 1265;
				switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					State = 1263; Match(WITH);
					State = 1264; Match(LOG);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1267; Match(RAISE_ERROR);
				State = 1269;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1268; argument();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1271;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,126,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1275;
				switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					State = 1273; Match(WITH);
					State = 1274; Match(LOG);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryBlockContext : ParserRuleContext {
		public ITerminalNode[] TRY() { return GetTokens(TSQLParser.TRY); }
		public ITerminalNode END(int i) {
			return GetToken(TSQLParser.END, i);
		}
		public StatementListContext[] statementList() {
			return GetRuleContexts<StatementListContext>();
		}
		public ITerminalNode[] CATCH() { return GetTokens(TSQLParser.CATCH); }
		public ITerminalNode[] BEGIN() { return GetTokens(TSQLParser.BEGIN); }
		public ITerminalNode[] END() { return GetTokens(TSQLParser.END); }
		public ITerminalNode CATCH(int i) {
			return GetToken(TSQLParser.CATCH, i);
		}
		public StatementListContext statementList(int i) {
			return GetRuleContext<StatementListContext>(i);
		}
		public ITerminalNode BEGIN(int i) {
			return GetToken(TSQLParser.BEGIN, i);
		}
		public ITerminalNode TRY(int i) {
			return GetToken(TSQLParser.TRY, i);
		}
		public TryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTryBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTryBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryBlockContext tryBlock() {
		TryBlockContext _localctx = new TryBlockContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_tryBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1279; Match(BEGIN);
			State = 1280; Match(TRY);
			State = 1281; statementList();
			State = 1282; Match(END);
			State = 1283; Match(TRY);
			State = 1284; Match(BEGIN);
			State = 1285; Match(CATCH);
			State = 1286; statementList();
			State = 1287; Match(END);
			State = 1288; Match(CATCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionBlockContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public TransactionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTransactionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTransactionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionBlockContext transactionBlock() {
		TransactionBlockContext _localctx = new TransactionBlockContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_transactionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290; Match(BEGIN);
			State = 1291; Match(TRANSACTION);
			State = 1293;
			switch ( Interpreter.AdaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				State = 1292; qualifiedName();
				}
				break;
			}
			State = 1295; statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteTopContext : ParserRuleContext {
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DeleteTopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteTop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteTop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteTop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteTopContext deleteTop() {
		DeleteTopContext _localctx = new DeleteTopContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_deleteTop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1297; Match(TOP);
			State = 1304;
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				State = 1298; integerValue();
				}
				break;

			case 2:
				{
				State = 1299; variable();
				}
				break;

			case 3:
				{
				State = 1300; Match(LPAREN);
				State = 1301; variable();
				State = 1302; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		public DeleteFromClauseContext[] deleteFromClause() {
			return GetRuleContexts<DeleteFromClauseContext>();
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public DeleteFromClauseLooseContext[] deleteFromClauseLoose() {
			return GetRuleContexts<DeleteFromClauseLooseContext>();
		}
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public DeleteFromClauseContext deleteFromClause(int i) {
			return GetRuleContext<DeleteFromClauseContext>(i);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public DeleteOutputContext deleteOutput() {
			return GetRuleContext<DeleteOutputContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public DeleteFromClauseLooseContext deleteFromClauseLoose(int i) {
			return GetRuleContext<DeleteFromClauseLooseContext>(i);
		}
		public DeleteTopContext deleteTop() {
			return GetRuleContext<DeleteTopContext>(0);
		}
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			State = 1355;
			switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1306; Match(DELETE);
				State = 1308;
				switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					State = 1307; deleteTop();
					}
					break;
				}
				State = 1311;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1310; deleteFromClause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1313;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,132,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1316;
				_la = _input.La(1);
				if (_la==OUTPUT) {
					{
					State = 1315; deleteOutput();
					}
				}

				State = 1321;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1318; joinOrApply();
					}
					}
					State = 1323;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1325;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1324; whereClause();
					}
				}

				State = 1328;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1327; dmlOptions();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1330; Match(DELETE);
				State = 1332;
				switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
				case 1:
					{
					State = 1331; deleteTop();
					}
					break;
				}
				State = 1334; tableTarget();
				State = 1336;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1335; deleteFromClauseLoose();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1338;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,138,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1341;
				_la = _input.La(1);
				if (_la==OUTPUT) {
					{
					State = 1340; deleteOutput();
					}
				}

				State = 1346;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1343; joinOrApply();
					}
					}
					State = 1348;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1350;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1349; whereClause();
					}
				}

				State = 1353;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1352; dmlOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFromClauseContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public DeleteFromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFromClauseContext deleteFromClause() {
		DeleteFromClauseContext _localctx = new DeleteFromClauseContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_deleteFromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1358;
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				State = 1357; Match(FROM);
				}
				break;
			}
			State = 1360; tableTargetWithOptions();
			State = 1365;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1361; Match(COMMA);
				State = 1362; tableSourceWithOptions();
				}
				}
				State = 1367;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFromClauseLooseContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public DeleteFromClauseLooseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFromClauseLoose; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteFromClauseLoose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteFromClauseLoose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteFromClauseLoose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFromClauseLooseContext deleteFromClauseLoose() {
		DeleteFromClauseLooseContext _localctx = new DeleteFromClauseLooseContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_deleteFromClauseLoose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1369;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1368; Match(FROM);
				}
				break;
			}
			State = 1371; tableSourceWithOptions();
			State = 1376;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1372; Match(COMMA);
				State = 1373; tableSourceWithOptions();
				}
				}
				State = 1378;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteOutputContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public DeleteOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeleteOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeleteOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteOutputContext deleteOutput() {
		DeleteOutputContext _localctx = new DeleteOutputContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_deleteOutput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379; Match(OUTPUT);
			State = 1380; qualifiedColumnNameList();
			State = 1381; Match(INTO);
			State = 1382; tableTargetWithOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public CommonTableExpressionAtomContext commonTableExpressionAtom(int i) {
			return GetRuleContext<CommonTableExpressionAtomContext>(i);
		}
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public CommonTableExpressionAtomContext[] commonTableExpressionAtom() {
			return GetRuleContexts<CommonTableExpressionAtomContext>();
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCommonTableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCommonTableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionContext commonTableExpression() {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_commonTableExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1384; Match(WITH);
			State = 1385; commonTableExpressionAtom();
			State = 1390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1386; Match(COMMA);
				State = 1387; commonTableExpressionAtom();
				}
				}
				State = 1392;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1393; dml();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionAtomContext : ParserRuleContext {
		public DmlContext dml() {
			return GetRuleContext<DmlContext>(0);
		}
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode RPAREN(int i) {
			return GetToken(TSQLParser.RPAREN, i);
		}
		public ITerminalNode[] LPAREN() { return GetTokens(TSQLParser.LPAREN); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(TSQLParser.RPAREN); }
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(TSQLParser.LPAREN, i);
		}
		public CommonTableExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpressionAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCommonTableExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCommonTableExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionAtomContext commonTableExpressionAtom() {
		CommonTableExpressionAtomContext _localctx = new CommonTableExpressionAtomContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_commonTableExpressionAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1395; qualifiedName();
			State = 1400;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1396; Match(LPAREN);
				State = 1397; columnList();
				State = 1398; Match(RPAREN);
				}
			}

			State = 1402; Match(AS);
			State = 1403; Match(LPAREN);
			State = 1404; dml();
			State = 1405; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public InsertDataSourceContext insertDataSource() {
			return GetRuleContext<InsertDataSourceContext>(0);
		}
		public InsertPreambleContext insertPreamble() {
			return GetRuleContext<InsertPreambleContext>(0);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public InsertOutputClauseContext insertOutputClause() {
			return GetRuleContext<InsertOutputClauseContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1407; insertPreamble();
			State = 1409;
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 1408; insertOutputClause();
				}
				break;
			}
			State = 1411; insertDataSource();
			State = 1413;
			_la = _input.La(1);
			if (_la==OPTION) {
				{
				State = 1412; dmlOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertPreambleContext : ParserRuleContext {
		public TableTargetOptionsContext tableTargetOptions() {
			return GetRuleContext<TableTargetOptionsContext>(0);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public InsertPreambleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertPreamble; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertPreamble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertPreamble(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertPreamble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertPreambleContext insertPreamble() {
		InsertPreambleContext _localctx = new InsertPreambleContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_insertPreamble);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1415; Match(INSERT);
			State = 1417;
			switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				State = 1416; Match(INTO);
				}
				break;
			}
			State = 1419; tableTarget();
			State = 1421;
			switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				State = 1420; tableTargetOptions();
				}
				break;
			}
			State = 1427;
			switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				State = 1423; Match(LPAREN);
				State = 1424; qualifiedNameList();
				State = 1425; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertOutputClauseContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public QualifiedColumnNameListContext qualifiedColumnNameList() {
			return GetRuleContext<QualifiedColumnNameListContext>(0);
		}
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public InsertOutputClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertOutputClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertOutputClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertOutputClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertOutputClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertOutputClauseContext insertOutputClause() {
		InsertOutputClauseContext _localctx = new InsertOutputClauseContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_insertOutputClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1429; Match(OUTPUT);
			State = 1430; selectList();
			State = 1439;
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				State = 1431; Match(INTO);
				State = 1432; tableTarget();
				State = 1437;
				switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					State = 1433; Match(LPAREN);
					State = 1434; qualifiedColumnNameList();
					State = 1435; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertDataSourceContext : ParserRuleContext {
		public InsertValueListContext insertValueList(int i) {
			return GetRuleContext<InsertValueListContext>(i);
		}
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public InsertValueListContext[] insertValueList() {
			return GetRuleContexts<InsertValueListContext>();
		}
		public InsertDataSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertDataSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertDataSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertDataSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertDataSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertDataSourceContext insertDataSource() {
		InsertDataSourceContext _localctx = new InsertDataSourceContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_insertDataSource);
		int _la;
		try {
			State = 1454;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1441; Match(VALUES);
				State = 1442; insertValueList();
				State = 1447;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1443; Match(COMMA);
					State = 1444; insertValueList();
					}
					}
					State = 1449;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1450; Match(DEFAULT);
				State = 1451; Match(VALUES);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1452; selectStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1453; tableSource();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValueListContext : ParserRuleContext {
		public InsertValueContext[] insertValue() {
			return GetRuleContexts<InsertValueContext>();
		}
		public InsertValueContext insertValue(int i) {
			return GetRuleContext<InsertValueContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public InsertValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValueListContext insertValueList() {
		InsertValueListContext _localctx = new InsertValueListContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_insertValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1456; Match(LPAREN);
			State = 1457; insertValue();
			State = 1462;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1458; Match(COMMA);
				State = 1459; insertValue();
				}
				}
				State = 1464;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1465; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InsertValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterInsertValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitInsertValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValueContext insertValue() {
		InsertValueContext _localctx = new InsertValueContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_insertValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1467; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStatementContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(TSQLParser.DECLARE, 0); }
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode OF() { return GetToken(TSQLParser.OF, 0); }
		public ITerminalNode[] FOR() { return GetTokens(TSQLParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(TSQLParser.FOR, i);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeclareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDeclareStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDeclareStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStatementContext declareStatement() {
		DeclareStatementContext _localctx = new DeclareStatementContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_declareStatement);
		int _la;
		try {
			State = 1492;
			switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1469; Match(DECLARE);
				State = 1470; variableDeclaration();
				State = 1475;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1471; Match(COMMA);
					State = 1472; variableDeclaration();
					}
					}
					State = 1477;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1478; Match(DECLARE);
				State = 1479; qualifiedName();
				State = 1480; Match(CURSOR);
				State = 1482;
				_la = _input.La(1);
				if (_la==Identifier) {
					{
					State = 1481; Match(Identifier);
					}
				}

				State = 1484; Match(FOR);
				State = 1485; selectStatement();
				State = 1490;
				_la = _input.La(1);
				if (_la==FOR) {
					{
					State = 1486; Match(FOR);
					State = 1487; Match(UPDATE);
					State = 1488; Match(OF);
					State = 1489; tableTarget();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public TableDeclarationOptionsContext tableDeclarationOptions() {
			return GetRuleContext<TableDeclarationOptionsContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ColumnDefinitionListContext columnDefinitionList() {
			return GetRuleContext<ColumnDefinitionListContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1494; variable();
			State = 1514;
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1496;
				switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
				case 1:
					{
					State = 1495; Match(AS);
					}
					break;
				}
				State = 1498; type();
				State = 1500;
				switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					State = 1499; variableDeclarationAssignment();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1502; Match(TABLE);
				State = 1503; Match(LPAREN);
				State = 1504; columnDefinitionList();
				State = 1507;
				switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
				case 1:
					{
					State = 1505; Match(COMMA);
					State = 1506; tableDeclarationOptions();
					}
					break;
				}
				State = 1510;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1509; Match(COMMA);
					}
				}

				State = 1512; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
		VariableDeclarationAssignmentContext _localctx = new VariableDeclarationAssignmentContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_variableDeclarationAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1518;
			_la = _input.La(1);
			if (_la==EQUALS) {
				{
				State = 1516; Match(EQUALS);
				State = 1517; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnListContext : ParserRuleContext {
		public ColumnNameContext[] columnName() {
			return GetRuleContexts<ColumnNameContext>();
		}
		public ColumnNameContext columnName(int i) {
			return GetRuleContext<ColumnNameContext>(i);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnListContext columnList() {
		ColumnListContext _localctx = new ColumnListContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_columnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1520; columnName();
			State = 1525;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1521; Match(COMMA);
				State = 1522; columnName();
				}
				}
				State = 1527;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionListContext : ParserRuleContext {
		public ColumnDefinitionContext[] columnDefinition() {
			return GetRuleContexts<ColumnDefinitionContext>();
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return GetRuleContext<ColumnDefinitionContext>(i);
		}
		public ColumnDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinitionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnDefinitionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnDefinitionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionListContext columnDefinitionList() {
		ColumnDefinitionListContext _localctx = new ColumnDefinitionListContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_columnDefinitionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1528; columnDefinition();
			State = 1533;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,171,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1529; Match(COMMA);
					State = 1530; columnDefinition();
					}
					} 
				}
				State = 1535;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,171,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public IdentitySpecContext identitySpec() {
			return GetRuleContext<IdentitySpecContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_columnDefinition);
		int _la;
		try {
			State = 1583;
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1536; columnName();
				State = 1537; type();
				State = 1543;
				_la = _input.La(1);
				if (_la==PRIMARY) {
					{
					State = 1538; Match(PRIMARY);
					State = 1539; Match(KEY);
					State = 1541;
					_la = _input.La(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						State = 1540; clusterType();
						}
					}

					}
				}

				State = 1546;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 1545; Match(NOT);
					}
				}

				State = 1549;
				_la = _input.La(1);
				if (_la==NULL) {
					{
					State = 1548; Match(NULL);
					}
				}

				State = 1556;
				_la = _input.La(1);
				if (_la==DEFAULT) {
					{
					State = 1551; Match(DEFAULT);
					State = 1554;
					switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
					case 1:
						{
						State = 1552; literalValue();
						}
						break;

					case 2:
						{
						State = 1553; functionCall();
						}
						break;
					}
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1558; columnName();
				State = 1559; integerType();
				State = 1565;
				_la = _input.La(1);
				if (_la==PRIMARY) {
					{
					State = 1560; Match(PRIMARY);
					State = 1561; Match(KEY);
					State = 1563;
					_la = _input.La(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						State = 1562; clusterType();
						}
					}

					}
				}

				State = 1568;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 1567; Match(NOT);
					}
				}

				State = 1571;
				_la = _input.La(1);
				if (_la==NULL) {
					{
					State = 1570; Match(NULL);
					}
				}

				State = 1574;
				_la = _input.La(1);
				if (_la==IDENTITY) {
					{
					State = 1573; identitySpec();
					}
				}

				State = 1581;
				_la = _input.La(1);
				if (_la==DEFAULT) {
					{
					State = 1576; Match(DEFAULT);
					State = 1579;
					switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
					case 1:
						{
						State = 1577; literalValue();
						}
						break;

					case 2:
						{
						State = 1578; functionCall();
						}
						break;
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeclarationOptionsContext : ParserRuleContext {
		public TableDeclarationOptionContext[] tableDeclarationOption() {
			return GetRuleContexts<TableDeclarationOptionContext>();
		}
		public TableDeclarationOptionContext tableDeclarationOption(int i) {
			return GetRuleContext<TableDeclarationOptionContext>(i);
		}
		public TableDeclarationOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeclarationOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableDeclarationOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableDeclarationOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeclarationOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeclarationOptionsContext tableDeclarationOptions() {
		TableDeclarationOptionsContext _localctx = new TableDeclarationOptionsContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_tableDeclarationOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1585; tableDeclarationOption();
			State = 1590;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,186,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1586; Match(COMMA);
					State = 1587; tableDeclarationOption();
					}
					} 
				}
				State = 1592;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,186,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDeclarationOptionContext : ParserRuleContext {
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public OrderedIndexColumnListContext orderedIndexColumnList() {
			return GetRuleContext<OrderedIndexColumnListContext>(0);
		}
		public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ClusterTypeContext clusterType() {
			return GetRuleContext<ClusterTypeContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public TableDeclarationOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDeclarationOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableDeclarationOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableDeclarationOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDeclarationOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDeclarationOptionContext tableDeclarationOption() {
		TableDeclarationOptionContext _localctx = new TableDeclarationOptionContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_tableDeclarationOption);
		int _la;
		try {
			State = 1612;
			switch (_input.La(1)) {
			case UNIQUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1593; Match(UNIQUE);
				State = 1595;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1594; clusterType();
					}
				}

				State = 1597; Match(LPAREN);
				State = 1598; columnList();
				State = 1599; Match(RPAREN);
				}
				break;
			case PRIMARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1601; Match(PRIMARY);
				State = 1602; Match(KEY);
				State = 1604;
				_la = _input.La(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1603; clusterType();
					}
				}

				State = 1606; Match(LPAREN);
				State = 1607; orderedIndexColumnList();
				State = 1608; Match(RPAREN);
				State = 1610;
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 1609; basicOptionList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionNameContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public PartitionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPartitionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPartitionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionNameContext partitionName() {
		PartitionNameContext _localctx = new PartitionNameContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_partitionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public SetVariableToCursorContext setVariableToCursor() {
			return GetRuleContext<SetVariableToCursorContext>(0);
		}
		public SetVariableAssignmentContext setVariableAssignment() {
			return GetRuleContext<SetVariableAssignmentContext>(0);
		}
		public SetSessionOtherContext setSessionOther() {
			return GetRuleContext<SetSessionOtherContext>(0);
		}
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_setStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1616; Match(SET);
			State = 1620;
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 1617; setVariableAssignment();
				}
				break;

			case 2:
				{
				State = 1618; setVariableToCursor();
				}
				break;

			case 3:
				{
				State = 1619; setSessionOther();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSessionOtherContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public TransactionIsolationLevelContext transactionIsolationLevel() {
			return GetRuleContext<TransactionIsolationLevelContext>(0);
		}
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSQLParser.ROWCOUNT, 0); }
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public ITerminalNode LEVEL() { return GetToken(TSQLParser.LEVEL, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSQLParser.ISOLATION, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public SetSessionOtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSessionOther; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetSessionOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetSessionOther(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetSessionOther(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetSessionOtherContext setSessionOther() {
		SetSessionOtherContext _localctx = new SetSessionOtherContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_setSessionOther);
		int _la;
		try {
			int _alt;
			State = 1636;
			switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1622; Match(ROWCOUNT);
				State = 1623; integerValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1624; Match(TRANSACTION);
				State = 1625; Match(ISOLATION);
				State = 1626; Match(LEVEL);
				State = 1627; transactionIsolationLevel();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1629;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1628; qualifiedName();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1631;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,192,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1633;
				_la = _input.La(1);
				if ( !(_la==ON || _la==OFF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1635; qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableAssignmentContext : ParserRuleContext {
		public PropertyOrFieldContext propertyOrField() {
			return GetRuleContext<PropertyOrFieldContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SetVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariableAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetVariableAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetVariableAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableAssignmentContext setVariableAssignment() {
		SetVariableAssignmentContext _localctx = new SetVariableAssignmentContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_setVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638; variable();
			State = 1640;
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 1639; propertyOrField();
				}
			}

			State = 1642; assignmentOperator();
			State = 1643; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableToCursorContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(TSQLParser.EQUALS, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public PropertyOrFieldContext propertyOrField() {
			return GetRuleContext<PropertyOrFieldContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SetVariableToCursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariableToCursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSetVariableToCursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSetVariableToCursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariableToCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableToCursorContext setVariableToCursor() {
		SetVariableToCursorContext _localctx = new SetVariableToCursorContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_setVariableToCursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1645; variable();
			State = 1647;
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 1646; propertyOrField();
				}
			}

			State = 1649; Match(EQUALS);
			State = 1650; Match(CURSOR);
			State = 1651; Match(FOR);
			State = 1652; selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionIsolationLevelContext : ParserRuleContext {
		public TransactionIsolationLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionIsolationLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTransactionIsolationLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTransactionIsolationLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionIsolationLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionIsolationLevelContext transactionIsolationLevel() {
		TransactionIsolationLevelContext _localctx = new TransactionIsolationLevelContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_transactionIsolationLevel);
		int _la;
		try {
			State = 1660;
			switch (_input.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1654; Match(T__3);
				State = 1655;
				_la = _input.La(1);
				if ( !(_la==T__2 || _la==T__0) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1656; Match(T__6);
				State = 1657; Match(T__3);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1658; Match(T__5);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1659; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateTopContext : ParserRuleContext {
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public UpdateTopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateTop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateTop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateTop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateTopContext updateTop() {
		UpdateTopContext _localctx = new UpdateTopContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_updateTop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662; Match(TOP);
			State = 1669;
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 1663; integerValue();
				}
				break;

			case 2:
				{
				State = 1664; variable();
				}
				break;

			case 3:
				{
				State = 1665; Match(LPAREN);
				State = 1666; variable();
				State = 1667; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		public UpdateStatementSetClauseRestContext updateStatementSetClauseRest(int i) {
			return GetRuleContext<UpdateStatementSetClauseRestContext>(i);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public MoreInnerJoinContext moreInnerJoin(int i) {
			return GetRuleContext<MoreInnerJoinContext>(i);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public UpdateTopContext updateTop() {
			return GetRuleContext<UpdateTopContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public MoreInnerJoinContext[] moreInnerJoin() {
			return GetRuleContexts<MoreInnerJoinContext>();
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public UpdateStatementSetClauseRestContext[] updateStatementSetClauseRest() {
			return GetRuleContexts<UpdateStatementSetClauseRestContext>();
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_updateStatement);
		int _la;
		try {
			int _alt;
			State = 1712;
			switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1671; Match(UPDATE);
				State = 1673;
				switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					State = 1672; updateTop();
					}
					break;
				}
				State = 1675; tableTargetWithOptions();
				State = 1676; Match(SET);
				State = 1677; updateStatementSetClauseRest();
				State = 1682;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,199,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1678; Match(COMMA);
						State = 1679; updateStatementSetClauseRest();
						}
						} 
					}
					State = 1684;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,199,_ctx);
				}
				State = 1686;
				_la = _input.La(1);
				if (_la==FROM) {
					{
					State = 1685; fromClause();
					}
				}

				State = 1691;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1688; joinOrApply();
					}
					}
					State = 1693;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1697;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1694; moreInnerJoin();
					}
					}
					State = 1699;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1701;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1700; whereClause();
					}
				}

				State = 1704;
				_la = _input.La(1);
				if (_la==OPTION) {
					{
					State = 1703; dmlOptions();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1706; Match(UPDATE);
				State = 1707; Match(STATISTICS);
				State = 1708; tableTarget();
				State = 1710;
				switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					State = 1709; basicOptionList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementSetClauseRestContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(TSQLParser.EQUALS, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public UpdateStatementSetClauseRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatementSetClauseRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterUpdateStatementSetClauseRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitUpdateStatementSetClauseRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatementSetClauseRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementSetClauseRestContext updateStatementSetClauseRest() {
		UpdateStatementSetClauseRestContext _localctx = new UpdateStatementSetClauseRestContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_updateStatementSetClauseRest);
		try {
			State = 1743;
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1714; qualifiedColumnName();
				State = 1715; assignmentOperator();
				State = 1719;
				switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					State = 1716; expression();
					}
					break;

				case 2:
					{
					State = 1717; Match(DEFAULT);
					}
					break;

				case 3:
					{
					State = 1718; Match(NULL);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1721; variable();
				State = 1722; assignmentOperator();
				State = 1726;
				switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					State = 1723; qualifiedColumnName();
					State = 1724; Match(EQUALS);
					}
					break;
				}
				State = 1728; expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1730; qualifiedColumnName();
				State = 1731; Match(DOT);
				State = 1732; qualifiedNamePart();
				State = 1741;
				switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
				case 1:
					{
					State = 1733; Match(EQUALS);
					State = 1734; expression();
					}
					break;

				case 2:
					{
					State = 1735; Match(LPAREN);
					State = 1736; Match(RPAREN);
					}
					break;

				case 3:
					{
					State = 1737; Match(LPAREN);
					State = 1738; argumentList();
					State = 1739; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_argument);
		try {
			State = 1748;
			switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1745; expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1746; tempTable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1747; type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1750; argument();
			State = 1755;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1751; Match(COMMA);
				State = 1752; argument();
				}
				}
				State = 1757;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputeStatementContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMPUTE() { return GetToken(TSQLParser.COMPUTE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public ComputeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterComputeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitComputeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputeStatementContext computeStatement() {
		ComputeStatementContext _localctx = new ComputeStatementContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_computeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758; Match(COMPUTE);
			State = 1759; expression();
			State = 1764;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1760; Match(COMMA);
				State = 1761; expression();
				}
				}
				State = 1766;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1776;
			_la = _input.La(1);
			if (_la==BY) {
				{
				State = 1767; Match(BY);
				State = 1768; expression();
				State = 1773;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1769; Match(COMMA);
					State = 1770; expression();
					}
					}
					State = 1775;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public ITerminalNode[] UNION() { return GetTokens(TSQLParser.UNION); }
		public ITerminalNode INTERSECT(int i) {
			return GetToken(TSQLParser.INTERSECT, i);
		}
		public ITerminalNode[] INTERSECT() { return GetTokens(TSQLParser.INTERSECT); }
		public ITerminalNode UNION(int i) {
			return GetToken(TSQLParser.UNION, i);
		}
		public ITerminalNode EXCEPT(int i) {
			return GetToken(TSQLParser.EXCEPT, i);
		}
		public ITerminalNode ALL(int i) {
			return GetToken(TSQLParser.ALL, i);
		}
		public SelectStatementPartContext[] selectStatementPart() {
			return GetRuleContexts<SelectStatementPartContext>();
		}
		public SelectStatementPartContext selectStatementPart(int i) {
			return GetRuleContext<SelectStatementPartContext>(i);
		}
		public ITerminalNode[] EXCEPT() { return GetTokens(TSQLParser.EXCEPT); }
		public ITerminalNode[] ALL() { return GetTokens(TSQLParser.ALL); }
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_selectStatement);
		int _la;
		try {
			State = 1797;
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1778; selectStatementPart();
				State = 1786;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==UNION) {
					{
					{
					State = 1779; Match(UNION);
					State = 1781;
					_la = _input.La(1);
					if (_la==ALL) {
						{
						State = 1780; Match(ALL);
						}
					}

					State = 1783; selectStatementPart();
					}
					}
					State = 1788;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1789; selectStatementPart();
				State = 1794;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==INTERSECT || _la==EXCEPT) {
					{
					{
					State = 1790;
					_la = _input.La(1);
					if ( !(_la==INTERSECT || _la==EXCEPT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 1791; selectStatementPart();
					}
					}
					State = 1796;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementPartContext : ParserRuleContext {
		public MoreInnerJoinContext moreInnerJoin(int i) {
			return GetRuleContext<MoreInnerJoinContext>(i);
		}
		public DmlOptionsContext dmlOptions() {
			return GetRuleContext<DmlOptionsContext>(0);
		}
		public MoreInnerJoinContext[] moreInnerJoin() {
			return GetRuleContexts<MoreInnerJoinContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public ForXmlClauseContext forXmlClause() {
			return GetRuleContext<ForXmlClauseContext>(0);
		}
		public SelectTopLimitContext selectTopLimit() {
			return GetRuleContext<SelectTopLimitContext>(0);
		}
		public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ITerminalNode SELECT() { return GetToken(TSQLParser.SELECT, 0); }
		public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public XmlWithOptionContext xmlWithOption() {
			return GetRuleContext<XmlWithOptionContext>(0);
		}
		public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		public JoinOrApplyContext[] joinOrApply() {
			return GetRuleContexts<JoinOrApplyContext>();
		}
		public JoinOrApplyContext joinOrApply(int i) {
			return GetRuleContext<JoinOrApplyContext>(i);
		}
		public SelectStatementPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatementPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectStatementPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectStatementPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatementPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementPartContext selectStatementPart() {
		SelectStatementPartContext _localctx = new SelectStatementPartContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_selectStatementPart);
		int _la;
		try {
			State = 1847;
			switch (_input.La(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1799; Match(SELECT);
				State = 1801;
				switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					State = 1800; selectTopLimit();
					}
					break;
				}
				State = 1803; selectList();
				State = 1805;
				_la = _input.La(1);
				if (_la==INTO) {
					{
					State = 1804; intoClause();
					}
				}

				State = 1808;
				_la = _input.La(1);
				if (_la==FROM) {
					{
					State = 1807; fromClause();
					}
				}

				State = 1811;
				switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
				case 1:
					{
					State = 1810; xmlWithOption();
					}
					break;
				}
				State = 1816;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0) || _la==APPLY || _la==JOIN) {
					{
					{
					State = 1813; joinOrApply();
					}
					}
					State = 1818;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1822;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1819; moreInnerJoin();
					}
					}
					State = 1824;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1826;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1825; whereClause();
					}
				}

				State = 1829;
				_la = _input.La(1);
				if (_la==GROUP) {
					{
					State = 1828; groupByClause();
					}
				}

				State = 1832;
				_la = _input.La(1);
				if (_la==HAVING) {
					{
					State = 1831; havingClause();
					}
				}

				State = 1835;
				_la = _input.La(1);
				if (_la==ORDER) {
					{
					State = 1834; orderByClause();
					}
				}

				State = 1838;
				switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					State = 1837; dmlOptions();
					}
					break;
				}
				State = 1841;
				switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					State = 1840; forXmlClause();
					}
					break;
				}
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1843; Match(LPAREN);
				State = 1844; selectStatement();
				State = 1845; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlWithOptionContext : ParserRuleContext {
		public QualifiedNameContext Alias;
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public XmlDefinitionListContext xmlDefinitionList() {
			return GetRuleContext<XmlDefinitionListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public XmlWithOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlWithOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlWithOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlWithOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlWithOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlWithOptionContext xmlWithOption() {
		XmlWithOptionContext _localctx = new XmlWithOptionContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_xmlWithOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1849; Match(WITH);
			State = 1850; Match(LPAREN);
			State = 1851; xmlDefinitionList();
			State = 1852; Match(RPAREN);
			State = 1854;
			switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				State = 1853; _localctx.Alias = qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlDefinitionListContext : ParserRuleContext {
		public XmlDefinitionContext xmlDefinition(int i) {
			return GetRuleContext<XmlDefinitionContext>(i);
		}
		public XmlDefinitionContext[] xmlDefinition() {
			return GetRuleContexts<XmlDefinitionContext>();
		}
		public XmlDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlDefinitionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlDefinitionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlDefinitionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlDefinitionListContext xmlDefinitionList() {
		XmlDefinitionListContext _localctx = new XmlDefinitionListContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_xmlDefinitionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1856; xmlDefinition();
			State = 1861;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1857; Match(COMMA);
				State = 1858; xmlDefinition();
				}
				}
				State = 1863;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlDefinitionContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public XmlDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterXmlDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitXmlDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlDefinitionContext xmlDefinition() {
		XmlDefinitionContext _localctx = new XmlDefinitionContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_xmlDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1864; columnName();
			State = 1865; type();
			State = 1868;
			switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				State = 1866; literalValue();
				}
				break;

			case 2:
				{
				State = 1867; functionCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForXmlClauseContext : ParserRuleContext {
		public ITerminalNode PATH() { return GetToken(TSQLParser.PATH, 0); }
		public ITerminalNode RAW() { return GetToken(TSQLParser.RAW, 0); }
		public ITerminalNode AUTO() { return GetToken(TSQLParser.AUTO, 0); }
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSQLParser.EXPLICIT, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public ForXmlClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forXmlClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterForXmlClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitForXmlClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForXmlClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForXmlClauseContext forXmlClause() {
		ForXmlClauseContext _localctx = new ForXmlClauseContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_forXmlClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1870; Match(FOR);
			State = 1871; Match(XML);
			State = 1881;
			switch (_input.La(1)) {
			case AUTO:
				{
				State = 1872; Match(AUTO);
				}
				break;
			case RAW:
				{
				State = 1873; Match(RAW);
				}
				break;
			case EXPLICIT:
				{
				State = 1874; Match(EXPLICIT);
				}
				break;
			case PATH:
				{
				State = 1875; Match(PATH);
				State = 1876; Match(LPAREN);
				State = 1878;
				_la = _input.La(1);
				if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
					{
					State = 1877; argumentList();
					}
				}

				State = 1880; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTopLimitContext : ParserRuleContext {
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SelectTopLimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTopLimit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectTopLimit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectTopLimit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTopLimit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTopLimitContext selectTopLimit() {
		SelectTopLimitContext _localctx = new SelectTopLimitContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_selectTopLimit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1884;
			_la = _input.La(1);
			if (_la==DISTINCT) {
				{
				State = 1883; Match(DISTINCT);
				}
			}

			State = 1886; Match(TOP);
			State = 1896;
			switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				State = 1887; integerValue();
				State = 1889;
				_la = _input.La(1);
				if (_la==T__7) {
					{
					State = 1888; Match(T__7);
					}
				}

				}
				break;

			case 2:
				{
				State = 1891; variable();
				}
				break;

			case 3:
				{
				State = 1892; Match(LPAREN);
				State = 1893; variable();
				State = 1894; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectVariableAssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SelectVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectVariableAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectVariableAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectVariableAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectVariableAssignmentContext selectVariableAssignment() {
		SelectVariableAssignmentContext _localctx = new SelectVariableAssignmentContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_selectVariableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898; variable();
			State = 1899;
			_la = _input.La(1);
			if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (ADD_ASSIGN - 172)) | (1L << (SUB_ASSIGN - 172)) | (1L << (MUL_ASSIGN - 172)) | (1L << (DIV_ASSIGN - 172)) | (1L << (AND_ASSIGN - 172)) | (1L << (OR_ASSIGN - 172)) | (1L << (XOR_ASSIGN - 172)) | (1L << (MOD_ASSIGN - 172)) | (1L << (EQUALS - 172)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1900; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		public SelectListElementContext[] selectListElement() {
			return GetRuleContexts<SelectListElementContext>();
		}
		public SelectListElementContext selectListElement(int i) {
			return GetRuleContext<SelectListElementContext>(i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_selectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1902; selectListElement();
			State = 1907;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,241,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1903; Match(COMMA);
					State = 1904; selectListElement();
					}
					} 
				}
				State = 1909;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,241,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListElementContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(TSQLParser.DOT, 0); }
		public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ColumnAliasContext columnAlias() {
			return GetRuleContext<ColumnAliasContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(TSQLParser.STAR, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public QualifiedColumnNameContext qualifiedColumnName() {
			return GetRuleContext<QualifiedColumnNameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SelectListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListElementContext selectListElement() {
		SelectListElementContext _localctx = new SelectListElementContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_selectListElement);
		int _la;
		try {
			State = 1943;
			switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1911;
				switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					State = 1910; Match(DISTINCT);
					}
					break;
				}
				State = 1928;
				switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					State = 1913; expression();
					State = 1915;
					switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
					case 1:
						{
						State = 1914; overClause();
						}
						break;
					}
					State = 1921;
					switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
					case 1:
						{
						State = 1918;
						_la = _input.La(1);
						if (_la==AS) {
							{
							State = 1917; Match(AS);
							}
						}

						State = 1920; columnAlias();
						}
						break;
					}
					}
					break;

				case 2:
					{
					State = 1923; qualifiedName();
					State = 1924; Match(DOT);
					State = 1925; Match(STAR);
					}
					break;

				case 3:
					{
					State = 1927; Match(STAR);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1930; variable();
				State = 1931;
				_la = _input.La(1);
				if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (ADD_ASSIGN - 172)) | (1L << (SUB_ASSIGN - 172)) | (1L << (MUL_ASSIGN - 172)) | (1L << (DIV_ASSIGN - 172)) | (1L << (AND_ASSIGN - 172)) | (1L << (OR_ASSIGN - 172)) | (1L << (XOR_ASSIGN - 172)) | (1L << (MOD_ASSIGN - 172)) | (1L << (EQUALS - 172)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1932; expression();
				State = 1937;
				switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					State = 1934;
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1933; Match(AS);
						}
					}

					State = 1936; columnAlias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1939; qualifiedColumnName();
				{
				State = 1940; Match(EQUALS);
				}
				State = 1941; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlOptionsContext : ParserRuleContext {
		public DmlOptionContext dmlOption(int i) {
			return GetRuleContext<DmlOptionContext>(i);
		}
		public DmlOptionContext[] dmlOption() {
			return GetRuleContexts<DmlOptionContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode OPTION() { return GetToken(TSQLParser.OPTION, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public DmlOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDmlOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDmlOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlOptionsContext dmlOptions() {
		DmlOptionsContext _localctx = new DmlOptionsContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_dmlOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945; Match(OPTION);
			State = 1946; Match(LPAREN);
			State = 1947; dmlOption();
			State = 1952;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1948; Match(COMMA);
				State = 1949; dmlOption();
				}
				}
				State = 1954;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1955; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlOptionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSQLParser.OPTIMIZE, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DmlOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterDmlOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitDmlOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlOptionContext dmlOption() {
		DmlOptionContext _localctx = new DmlOptionContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_dmlOption);
		int _la;
		try {
			State = 1970;
			switch (_input.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1957; Match(Identifier);
				State = 1959;
				_la = _input.La(1);
				if (_la==NULL || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (LPAREN - 181)) | (1L << (PLUS - 181)) | (1L << (MINUS - 181)) | (1L << (FloatingPointLiteral - 181)) | (1L << (StringLiteral - 181)) | (1L << (IntegerLiteral - 181)))) != 0)) {
					{
					State = 1958; literalValue();
					}
				}

				}
				break;
			case OPTIMIZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1961; Match(OPTIMIZE);
				State = 1962; Match(FOR);
				State = 1963; Match(LPAREN);
				{
				State = 1964; variable();
				State = 1965; Match(EQUALS);
				State = 1966; literalValue();
				}
				State = 1968; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverClauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(TSQLParser.OVER, 0); }
		public ITerminalNode[] PARTITION() { return GetTokens(TSQLParser.PARTITION); }
		public ITerminalNode ORDER(int i) {
			return GetToken(TSQLParser.ORDER, i);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(TSQLParser.PARTITION, i);
		}
		public OrderByElementContext[] orderByElement() {
			return GetRuleContexts<OrderByElementContext>();
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode[] ORDER() { return GetTokens(TSQLParser.ORDER); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public OrderByElementContext orderByElement(int i) {
			return GetRuleContext<OrderByElementContext>(i);
		}
		public ITerminalNode[] BY() { return GetTokens(TSQLParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSQLParser.BY, i);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOverClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOverClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverClauseContext overClause() {
		OverClauseContext _localctx = new OverClauseContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_overClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1972; Match(OVER);
			State = 1973; Match(LPAREN);
			State = 1994;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 1994;
				switch (_input.La(1)) {
				case PARTITION:
					{
					State = 1974; Match(PARTITION);
					State = 1975; Match(BY);
					State = 1976; expression();
					State = 1981;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1977; Match(COMMA);
						State = 1978; expression();
						}
						}
						State = 1983;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				case ORDER:
					{
					State = 1984; Match(ORDER);
					State = 1985; Match(BY);
					State = 1986; orderByElement();
					State = 1991;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1987; Match(COMMA);
						State = 1988; orderByElement();
						}
						}
						State = 1993;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1996;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PARTITION || _la==ORDER );
			State = 1998; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntoClauseContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public IntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntoClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntoClauseContext intoClause() {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_intoClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2000; Match(INTO);
			State = 2001; tableTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_fromClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2003; Match(FROM);
			State = 2004; tableSourceWithOptions();
			State = 2009;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,257,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2005; Match(COMMA);
					State = 2006; tableSourceWithOptions();
					}
					} 
				}
				State = 2011;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,257,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreInnerJoinContext : ParserRuleContext {
		public TableSourceWithOptionsContext[] tableSourceWithOptions() {
			return GetRuleContexts<TableSourceWithOptionsContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions(int i) {
			return GetRuleContext<TableSourceWithOptionsContext>(i);
		}
		public MoreInnerJoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreInnerJoin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMoreInnerJoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMoreInnerJoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreInnerJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreInnerJoinContext moreInnerJoin() {
		MoreInnerJoinContext _localctx = new MoreInnerJoinContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_moreInnerJoin);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2014;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2012; Match(COMMA);
					State = 2013; tableSourceWithOptions();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2016;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,258,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		public GroupByElementContext[] groupByElement() {
			return GetRuleContexts<GroupByElementContext>();
		}
		public ITerminalNode GROUP() { return GetToken(TSQLParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public GroupByElementContext groupByElement(int i) {
			return GetRuleContext<GroupByElementContext>(i);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_groupByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018; Match(GROUP);
			State = 2019; Match(BY);
			State = 2020; groupByElement();
			State = 2025;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2021; Match(COMMA);
				State = 2022; groupByElement();
				}
				}
				State = 2027;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByElementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColumnIndexOrNameContext columnIndexOrName() {
			return GetRuleContext<ColumnIndexOrNameContext>(0);
		}
		public GroupByElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterGroupByElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitGroupByElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByElementContext groupByElement() {
		GroupByElementContext _localctx = new GroupByElementContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_groupByElement);
		try {
			State = 2030;
			switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2028; columnIndexOrName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2029; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public ITerminalNode HAVING() { return GetToken(TSQLParser.HAVING, 0); }
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032; Match(HAVING);
			State = 2033; predicateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinOrApplyContext : ParserRuleContext {
		public PredicateListContext[] predicateList() {
			return GetRuleContexts<PredicateListContext>();
		}
		public TableSourceWithOptionsContext tableSourceWithOptions() {
			return GetRuleContext<TableSourceWithOptionsContext>(0);
		}
		public ITerminalNode[] ON() { return GetTokens(TSQLParser.ON); }
		public PredicateListContext predicateList(int i) {
			return GetRuleContext<PredicateListContext>(i);
		}
		public ITerminalNode ON(int i) {
			return GetToken(TSQLParser.ON, i);
		}
		public ITerminalNode APPLY() { return GetToken(TSQLParser.APPLY, 0); }
		public JoinTypeContext joinType() {
			return GetRuleContext<JoinTypeContext>(0);
		}
		public ITerminalNode JOIN() { return GetToken(TSQLParser.JOIN, 0); }
		public JoinOrApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinOrApply; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterJoinOrApply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitJoinOrApply(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinOrApply(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinOrApplyContext joinOrApply() {
		JoinOrApplyContext _localctx = new JoinOrApplyContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_joinOrApply);
		int _la;
		try {
			State = 2052;
			switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2036;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0)) {
					{
					State = 2035; joinType();
					}
				}

				State = 2038; Match(JOIN);
				State = 2039; tableSourceWithOptions();
				State = 2044;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ON) {
					{
					{
					State = 2040; Match(ON);
					State = 2041; predicateList();
					}
					}
					State = 2046;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2048;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL))) != 0)) {
					{
					State = 2047; joinType();
					}
				}

				State = 2050; Match(APPLY);
				State = 2051; tableSourceWithOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinTypeContext : ParserRuleContext {
		public ITerminalNode LEFT() { return GetToken(TSQLParser.LEFT, 0); }
		public ITerminalNode OUTER() { return GetToken(TSQLParser.OUTER, 0); }
		public ITerminalNode INNER() { return GetToken(TSQLParser.INNER, 0); }
		public ITerminalNode CROSS() { return GetToken(TSQLParser.CROSS, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSQLParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(TSQLParser.FULL, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterJoinType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitJoinType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinTypeContext joinType() {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_joinType);
		try {
			State = 2066;
			switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2054; Match(LEFT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2055; Match(RIGHT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2056; Match(OUTER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2057; Match(INNER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2058; Match(CROSS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2059; Match(FULL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2060; Match(FULL);
				State = 2061; Match(OUTER);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2062; Match(LEFT);
				State = 2063; Match(OUTER);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2064; Match(RIGHT);
				State = 2065; Match(OUTER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public PredicateListContext predicateList() {
			return GetRuleContext<PredicateListContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(TSQLParser.WHERE, 0); }
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068; Match(WHERE);
			State = 2069; predicateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		public OrderByElementContext[] orderByElement() {
			return GetRuleContexts<OrderByElementContext>();
		}
		public ITerminalNode ORDER() { return GetToken(TSQLParser.ORDER, 0); }
		public OrderByElementContext orderByElement(int i) {
			return GetRuleContext<OrderByElementContext>(i);
		}
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_orderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2071; Match(ORDER);
			State = 2072; Match(BY);
			State = 2073; orderByElement();
			State = 2078;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2074; Match(COMMA);
				State = 2075; orderByElement();
				}
				}
				State = 2080;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByElementContext : ParserRuleContext {
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColumnIndexOrNameContext columnIndexOrName() {
			return GetRuleContext<ColumnIndexOrNameContext>(0);
		}
		public OrderByElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterOrderByElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitOrderByElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByElementContext orderByElement() {
		OrderByElementContext _localctx = new OrderByElementContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_orderByElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2083;
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				State = 2081; columnIndexOrName();
				}
				break;

			case 2:
				{
				State = 2082; expression();
				}
				break;
			}
			State = 2086;
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 2085;
				_la = _input.La(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeStatementContext : ParserRuleContext {
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public ITerminalNode TARGET(int i) {
			return GetToken(TSQLParser.TARGET, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(TSQLParser.NOT); }
		public MergeNotMatchedContext mergeNotMatched(int i) {
			return GetRuleContext<MergeNotMatchedContext>(i);
		}
		public ITerminalNode[] SOURCE() { return GetTokens(TSQLParser.SOURCE); }
		public PredicateListContext predicateList(int i) {
			return GetRuleContext<PredicateListContext>(i);
		}
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode INTO(int i) {
			return GetToken(TSQLParser.INTO, i);
		}
		public ITerminalNode[] AND() { return GetTokens(TSQLParser.AND); }
		public ITerminalNode[] TARGET() { return GetTokens(TSQLParser.TARGET); }
		public ITerminalNode[] BY() { return GetTokens(TSQLParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(TSQLParser.BY, i);
		}
		public PredicateListContext[] predicateList() {
			return GetRuleContexts<PredicateListContext>();
		}
		public ITerminalNode MATCHED(int i) {
			return GetToken(TSQLParser.MATCHED, i);
		}
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode AND(int i) {
			return GetToken(TSQLParser.AND, i);
		}
		public ITerminalNode[] THEN() { return GetTokens(TSQLParser.THEN); }
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public TableTargetWithOptionsContext tableTargetWithOptions() {
			return GetRuleContext<TableTargetWithOptionsContext>(0);
		}
		public ITerminalNode USING() { return GetToken(TSQLParser.USING, 0); }
		public MergeMatchedContext[] mergeMatched() {
			return GetRuleContexts<MergeMatchedContext>();
		}
		public ITerminalNode[] INTO() { return GetTokens(TSQLParser.INTO); }
		public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public ITerminalNode[] MATCHED() { return GetTokens(TSQLParser.MATCHED); }
		public ITerminalNode[] WHEN() { return GetTokens(TSQLParser.WHEN); }
		public ITerminalNode SOURCE(int i) {
			return GetToken(TSQLParser.SOURCE, i);
		}
		public MergeNotMatchedContext[] mergeNotMatched() {
			return GetRuleContexts<MergeNotMatchedContext>();
		}
		public MergeMatchedContext mergeMatched(int i) {
			return GetRuleContext<MergeMatchedContext>(i);
		}
		public ITerminalNode NOT(int i) {
			return GetToken(TSQLParser.NOT, i);
		}
		public ITerminalNode WHEN(int i) {
			return GetToken(TSQLParser.WHEN, i);
		}
		public ITerminalNode THEN(int i) {
			return GetToken(TSQLParser.THEN, i);
		}
		public MergeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeStatementContext mergeStatement() {
		MergeStatementContext _localctx = new MergeStatementContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_mergeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2088; Match(MERGE);
			State = 2090;
			switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				State = 2089; Match(INTO);
				}
				break;
			}
			State = 2092; tableTarget();
			State = 2093; Match(USING);
			State = 2094; tableSource();
			State = 2095; Match(ON);
			State = 2096; predicateList();
			State = 2129;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 2129;
				switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					State = 2097; Match(WHEN);
					State = 2098; Match(MATCHED);
					State = 2101;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2099; Match(AND);
						State = 2100; predicateList();
						}
					}

					State = 2103; Match(THEN);
					State = 2104; mergeMatched();
					}
					break;

				case 2:
					{
					State = 2105; Match(WHEN);
					State = 2106; Match(NOT);
					State = 2107; Match(MATCHED);
					State = 2110;
					_la = _input.La(1);
					if (_la==BY) {
						{
						State = 2108; Match(BY);
						State = 2109; Match(TARGET);
						}
					}

					State = 2114;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2112; Match(AND);
						State = 2113; predicateList();
						}
					}

					State = 2116; Match(THEN);
					State = 2117; mergeNotMatched();
					}
					break;

				case 3:
					{
					State = 2118; Match(WHEN);
					State = 2119; Match(NOT);
					State = 2120; Match(MATCHED);
					State = 2121; Match(BY);
					State = 2122; Match(SOURCE);
					State = 2125;
					_la = _input.La(1);
					if (_la==AND) {
						{
						State = 2123; Match(AND);
						State = 2124; predicateList();
						}
					}

					State = 2127; Match(THEN);
					State = 2128; mergeMatched();
					}
					break;
				}
				}
				State = 2131;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==WHEN );
			State = 2138;
			_la = _input.La(1);
			if (_la==OUTPUT) {
				{
				State = 2133; Match(OUTPUT);
				State = 2134; selectList();
				State = 2135; Match(INTO);
				State = 2136; tableTargetWithOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeMatchedContext : ParserRuleContext {
		public UpdateStatementSetClauseRestContext updateStatementSetClauseRest(int i) {
			return GetRuleContext<UpdateStatementSetClauseRestContext>(i);
		}
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public UpdateStatementSetClauseRestContext[] updateStatementSetClauseRest() {
			return GetRuleContexts<UpdateStatementSetClauseRestContext>();
		}
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public MergeMatchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeMatched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeMatched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeMatched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeMatched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeMatchedContext mergeMatched() {
		MergeMatchedContext _localctx = new MergeMatchedContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_mergeMatched);
		int _la;
		try {
			State = 2151;
			switch (_input.La(1)) {
			case UPDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2140; Match(UPDATE);
				State = 2141; Match(SET);
				State = 2142; updateStatementSetClauseRest();
				State = 2147;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2143; Match(COMMA);
					State = 2144; updateStatementSetClauseRest();
					}
					}
					State = 2149;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2150; Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeNotMatchedContext : ParserRuleContext {
		public InsertValueListContext insertValueList(int i) {
			return GetRuleContext<InsertValueListContext>(i);
		}
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public InsertValueListContext[] insertValueList() {
			return GetRuleContexts<InsertValueListContext>();
		}
		public MergeNotMatchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeNotMatched; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterMergeNotMatched(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitMergeNotMatched(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeNotMatched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeNotMatchedContext mergeNotMatched() {
		MergeNotMatchedContext _localctx = new MergeNotMatchedContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_mergeNotMatched);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2153; Match(INSERT);
			State = 2158;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 2154; Match(LPAREN);
				State = 2155; qualifiedNameList();
				State = 2156; Match(RPAREN);
				}
			}

			State = 2160; Match(VALUES);
			State = 2161; insertValueList();
			State = 2166;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2162; Match(COMMA);
				State = 2163; insertValueList();
				}
				}
				State = 2168;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetWithOptionsContext : ParserRuleContext {
		public TableTargetOptionsContext tableTargetOptions() {
			return GetRuleContext<TableTargetOptionsContext>(0);
		}
		public TableTargetContext tableTarget() {
			return GetRuleContext<TableTargetContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public TableTargetWithOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTargetWithOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTargetWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTargetWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTargetWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetWithOptionsContext tableTargetWithOptions() {
		TableTargetWithOptionsContext _localctx = new TableTargetWithOptionsContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_tableTargetWithOptions);
		int _la;
		try {
			State = 2183;
			switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2169; tableTarget();
				State = 2171;
				switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					State = 2170; tableTargetOptions();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2173; tableTarget();
				State = 2175;
				switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					State = 2174; tableTargetOptions();
					}
					break;
				}
				State = 2181;
				switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					State = 2178;
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 2177; Match(AS);
						}
					}

					State = 2180; tableAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public TableTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetContext tableTarget() {
		TableTargetContext _localctx = new TableTargetContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_tableTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2188;
			switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				State = 2185; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2186; variable();
				}
				break;

			case 3:
				{
				State = 2187; tempTable();
				}
				break;
			}
			State = 2194;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 2191;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2190; Match(AS);
					}
				}

				State = 2193; tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTargetOptionsContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public TableTargetOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableTargetOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableTargetOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableTargetOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableTargetOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTargetOptionsContext tableTargetOptions() {
		TableTargetOptionsContext _localctx = new TableTargetOptionsContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_tableTargetOptions);
		try {
			State = 2202;
			switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2196; Match(WITH);
				State = 2197; Match(LPAREN);
				State = 2198; Match(Identifier);
				State = 2199; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2200; Match(WITH);
				State = 2201; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceWithOptionsContext : ParserRuleContext {
		public TableSourceOptionsContext tableSourceOptions() {
			return GetRuleContext<TableSourceOptionsContext>(0);
		}
		public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		public TableSourceWithOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceWithOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSourceWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSourceWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceWithOptionsContext tableSourceWithOptions() {
		TableSourceWithOptionsContext _localctx = new TableSourceWithOptionsContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_tableSourceWithOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2204; tableSource();
			State = 2206;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				State = 2205; tableSourceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public XmlDefinitionListContext xmlDefinitionList() {
			return GetRuleContext<XmlDefinitionListContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_tableSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2232;
			switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				State = 2208; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2209; variable();
				State = 2212;
				_la = _input.La(1);
				if (_la==DOT) {
					{
					State = 2210; Match(DOT);
					State = 2211; functionCall();
					}
				}

				}
				break;

			case 3:
				{
				State = 2214; tempTable();
				State = 2217;
				_la = _input.La(1);
				if (_la==DOT) {
					{
					State = 2215; Match(DOT);
					State = 2216; functionCall();
					}
				}

				}
				break;

			case 4:
				{
				State = 2219; Match(LPAREN);
				State = 2220; selectStatement();
				State = 2221; Match(RPAREN);
				}
				break;

			case 5:
				{
				State = 2223; executeStatement();
				}
				break;

			case 6:
				{
				State = 2224; functionCall();
				State = 2230;
				switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					State = 2225; Match(WITH);
					State = 2226; Match(LPAREN);
					State = 2227; xmlDefinitionList();
					State = 2228; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
			State = 2238;
			switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				State = 2235;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2234; Match(AS);
					}
				}

				State = 2237; tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceOptionsContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public TableSourceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableSourceOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableSourceOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceOptionsContext tableSourceOptions() {
		TableSourceOptionsContext _localctx = new TableSourceOptionsContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_tableSourceOptions);
		try {
			State = 2247;
			switch (_input.La(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2240; Match(WITH);
				State = 2241; Match(LPAREN);
				State = 2242; Match(Identifier);
				State = 2243; Match(RPAREN);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2244; Match(LPAREN);
				State = 2245; Match(Identifier);
				State = 2246; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasContext tableAlias() {
		TableAliasContext _localctx = new TableAliasContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_tableAlias);
		try {
			State = 2251;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2249; qualifiedNamePart();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2250; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2255;
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				State = 2253; qualifiedName();
				}
				break;

			case 2:
				{
				State = 2254; keyword();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2257; functionName();
			State = 2258; Match(LPAREN);
			State = 2260;
			_la = _input.La(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (READONLY - 12)) | (1L << (TRY - 12)) | (1L << (CATCH - 12)) | (1L << (TRANSACTION - 12)) | (1L << (COMMIT - 12)) | (1L << (ROLLBACK - 12)) | (1L << (RAISE_ERROR - 12)) | (1L << (PRINT - 12)) | (1L << (CLUSTERED - 12)) | (1L << (NONCLUSTERED - 12)) | (1L << (TABLE - 12)) | (1L << (PROCEDURE - 12)) | (1L << (PARTITION - 12)) | (1L << (INDEX - 12)) | (1L << (DATABASE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (FOREIGN - 12)) | (1L << (PRIMARY - 12)) | (1L << (KEY - 12)) | (1L << (REFERENCES - 12)) | (1L << (LEFT - 12)) | (1L << (RIGHT - 12)) | (1L << (CROSS - 12)) | (1L << (OUTER - 12)) | (1L << (INNER - 12)) | (1L << (FULL - 12)) | (1L << (CURSOR - 12)) | (1L << (FETCH - 12)) | (1L << (OPEN - 12)) | (1L << (CLOSE - 12)) | (1L << (DEALLOCATE - 12)) | (1L << (FIRST - 12)) | (1L << (LAST - 12)) | (1L << (PRIOR - 12)) | (1L << (NEXT - 12)) | (1L << (ABSOLUTE - 12)) | (1L << (RELATIVE - 12)) | (1L << (CASE - 12)) | (1L << (CAST - 12)) | (1L << (CONVERT - 12)) | (1L << (COLLATE - 12)) | (1L << (COUNT - 12)) | (1L << (COUNT_BIG - 12)) | (1L << (DISTINCT - 12)) | (1L << (UNIQUE - 12)) | (1L << (MAX - 12)) | (1L << (TOP - 12)) | (1L << (WHEN - 12)) | (1L << (THEN - 12)) | (1L << (SWITCH - 12)) | (1L << (OVER - 12)) | (1L << (INCLUDE - 12)) | (1L << (INTERSECT - 12)) | (1L << (EXCEPT - 12)) | (1L << (UNION - 12)) | (1L << (ALL - 12)) | (1L << (APPLY - 12)) | (1L << (IF - 12)) | (1L << (ELSE - 12)) | (1L << (WHILE - 12)) | (1L << (GOTO - 12)) | (1L << (CONTINUE - 12)) | (1L << (BREAK - 12)) | (1L << (TRUNCATE - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (ADD - 76)) | (1L << (REMOVE - 76)) | (1L << (ALTER - 76)) | (1L << (CREATE - 76)) | (1L << (DROP - 76)) | (1L << (AS - 76)) | (1L << (WITH - 76)) | (1L << (FOR - 76)) | (1L << (REPLICATION - 76)) | (1L << (BEGIN - 76)) | (1L << (END - 76)) | (1L << (EXISTS - 76)) | (1L << (DEFAULT - 76)) | (1L << (VARYING - 76)) | (1L << (SELECT - 76)) | (1L << (UPDATE - 76)) | (1L << (INSERT - 76)) | (1L << (DELETE - 76)) | (1L << (WHERE - 76)) | (1L << (FROM - 76)) | (1L << (JOIN - 76)) | (1L << (DECLARE - 76)) | (1L << (OPTION - 76)) | (1L << (SET - 76)) | (1L << (TO - 76)) | (1L << (ON - 76)) | (1L << (OFF - 76)) | (1L << (GROUP - 76)) | (1L << (HAVING - 76)) | (1L << (ORDER - 76)) | (1L << (BY - 76)) | (1L << (EXECUTE - 76)) | (1L << (INTO - 76)) | (1L << (VALUES - 76)) | (1L << (IS - 76)) | (1L << (IN - 76)) | (1L << (NOT - 76)) | (1L << (NULL - 76)) | (1L << (BETWEEN - 76)) | (1L << (RETURN - 76)) | (1L << (OUTPUT - 76)) | (1L << (OUT - 76)) | (1L << (LIKE - 76)) | (1L << (ESCAPE - 76)) | (1L << (OF - 76)) | (1L << (DECIMAL - 76)) | (1L << (NUMERIC - 76)) | (1L << (VARCHAR - 76)) | (1L << (NVARCHAR - 76)) | (1L << (CHAR - 76)) | (1L << (CHARACTER - 76)) | (1L << (NCHAR - 76)) | (1L << (INT - 76)) | (1L << (TINYINT - 76)) | (1L << (SMALLINT - 76)) | (1L << (BIGINT - 76)) | (1L << (FLOAT - 76)) | (1L << (IDENTITY - 76)) | (1L << (LOG - 76)) | (1L << (AND - 76)) | (1L << (OR - 76)) | (1L << (ASC - 76)) | (1L << (DESC - 76)) | (1L << (STATISTICS - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (USING - 140)) | (1L << (MERGE - 140)) | (1L << (MATCHED - 140)) | (1L << (TARGET - 140)) | (1L << (SOURCE - 140)) | (1L << (XML - 140)) | (1L << (RAW - 140)) | (1L << (AUTO - 140)) | (1L << (EXPLICIT - 140)) | (1L << (PATH - 140)) | (1L << (ENABLE - 140)) | (1L << (DISABLE - 140)) | (1L << (TRIGGER - 140)) | (1L << (WAITFOR - 140)) | (1L << (DELAY - 140)) | (1L << (COMPUTE - 140)) | (1L << (LEVEL - 140)) | (1L << (ISOLATION - 140)) | (1L << (SPLIT - 140)) | (1L << (RANGE - 140)) | (1L << (FUNCTION - 140)) | (1L << (SCHEME - 140)) | (1L << (USED - 140)) | (1L << (OPTIMIZE - 140)) | (1L << (ROWCOUNT - 140)) | (1L << (HASH - 140)) | (1L << (LPAREN - 140)) | (1L << (LBRACKET - 140)) | (1L << (AT - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)) | (1L << (FloatingPointLiteral - 140)) | (1L << (StringLiteral - 140)) | (1L << (Identifier - 140)) | (1L << (IntegerLiteral - 140)))) != 0)) {
				{
				State = 2259; argumentList();
				}
			}

			State = 2262; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public ExecuteArgumentListContext executeArgumentList() {
			return GetRuleContext<ExecuteArgumentListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BasicOptionListContext basicOptionList() {
			return GetRuleContext<BasicOptionListContext>(0);
		}
		public ITerminalNode EXECUTE() { return GetToken(TSQLParser.EXECUTE, 0); }
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_executeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2264; Match(EXECUTE);
			State = 2273;
			switch (_input.La(1)) {
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				{
				State = 2265; qualifiedName();
				State = 2267;
				switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					State = 2266; executeArgumentList();
					}
					break;
				}
				}
				break;
			case LPAREN:
				{
				State = 2269; Match(LPAREN);
				State = 2270; expression();
				State = 2271; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2276;
			switch ( Interpreter.AdaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				State = 2275; basicOptionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteArgumentListContext : ParserRuleContext {
		public ExecuteArgumentContext executeArgument(int i) {
			return GetRuleContext<ExecuteArgumentContext>(i);
		}
		public ExecuteArgumentContext[] executeArgument() {
			return GetRuleContexts<ExecuteArgumentContext>();
		}
		public ExecuteArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteArgumentListContext executeArgumentList() {
		ExecuteArgumentListContext _localctx = new ExecuteArgumentListContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_executeArgumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2278; executeArgument();
			State = 2283;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,304,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2279; Match(COMMA);
					State = 2280; executeArgument();
					}
					} 
				}
				State = 2285;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,304,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteArgumentContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ExecuteArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterExecuteArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitExecuteArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteArgumentContext executeArgument() {
		ExecuteArgumentContext _localctx = new ExecuteArgumentContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_executeArgument);
		int _la;
		try {
			State = 2295;
			switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2286; variable();
				State = 2287; Match(EQUALS);
				State = 2289;
				switch ( Interpreter.AdaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					State = 2288; expression();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2291; expression();
				State = 2293;
				switch ( Interpreter.AdaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					State = 2292;
					_la = _input.La(1);
					if ( !(_la==OUTPUT || _la==OUT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterStringTypeLengthContext : ParserRuleContext {
		public ITerminalNode MAX() { return GetToken(TSQLParser.MAX, 0); }
		public ITerminalNode LPAREN() { return GetToken(TSQLParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TSQLParser.RPAREN, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public CharacterStringTypeLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterStringTypeLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCharacterStringTypeLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCharacterStringTypeLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterStringTypeLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterStringTypeLengthContext characterStringTypeLength() {
		CharacterStringTypeLengthContext _localctx = new CharacterStringTypeLengthContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_characterStringTypeLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2297; Match(LPAREN);
			State = 2300;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 2298; integerValue();
				}
				break;
			case MAX:
				{
				State = 2299; Match(MAX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2302; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterStringTypeContext : ParserRuleContext {
		public ITerminalNode NVARCHAR() { return GetToken(TSQLParser.NVARCHAR, 0); }
		public ITerminalNode VARYING() { return GetToken(TSQLParser.VARYING, 0); }
		public ITerminalNode CHARACTER() { return GetToken(TSQLParser.CHARACTER, 0); }
		public ITerminalNode CHAR() { return GetToken(TSQLParser.CHAR, 0); }
		public CharacterStringTypeLengthContext characterStringTypeLength() {
			return GetRuleContext<CharacterStringTypeLengthContext>(0);
		}
		public ITerminalNode NCHAR() { return GetToken(TSQLParser.NCHAR, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSQLParser.VARCHAR, 0); }
		public CharacterStringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterStringType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCharacterStringType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCharacterStringType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterStringType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterStringTypeContext characterStringType() {
		CharacterStringTypeContext _localctx = new CharacterStringTypeContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_characterStringType);
		int _la;
		try {
			State = 2313;
			switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2304;
				_la = _input.La(1);
				if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (CHAR - 125)) | (1L << (CHARACTER - 125)) | (1L << (NCHAR - 125)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2306;
				switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					State = 2305; characterStringTypeLength();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2308;
				_la = _input.La(1);
				if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (CHAR - 125)) | (1L << (CHARACTER - 125)) | (1L << (NCHAR - 125)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2309; Match(VARYING);
				State = 2310; characterStringTypeLength();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2311;
				_la = _input.La(1);
				if ( !(_la==VARCHAR || _la==NVARCHAR) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2312; characterStringTypeLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public IToken Scale;
		public IToken Precision;
		public ITerminalNode DECIMAL() { return GetToken(TSQLParser.DECIMAL, 0); }
		public ITerminalNode NUMERIC() { return GetToken(TSQLParser.NUMERIC, 0); }
		public ITerminalNode[] IntegerLiteral() { return GetTokens(TSQLParser.IntegerLiteral); }
		public ITerminalNode IntegerLiteral(int i) {
			return GetToken(TSQLParser.IntegerLiteral, i);
		}
		public ITerminalNode FLOAT() { return GetToken(TSQLParser.FLOAT, 0); }
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_numericType);
		int _la;
		try {
			State = 2326;
			switch (_input.La(1)) {
			case DECIMAL:
			case NUMERIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2315;
				_la = _input.La(1);
				if ( !(_la==DECIMAL || _la==NUMERIC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2323;
				switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					State = 2316; Match(LPAREN);
					State = 2317; _localctx.Scale = Match(IntegerLiteral);
					State = 2320;
					_la = _input.La(1);
					if (_la==COMMA) {
						{
						State = 2318; Match(COMMA);
						State = 2319; _localctx.Precision = Match(IntegerLiteral);
						}
					}

					State = 2322; Match(RPAREN);
					}
					break;
				}
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2325; Match(FLOAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		public ITerminalNode SMALLINT() { return GetToken(TSQLParser.SMALLINT, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSQLParser.BIGINT, 0); }
		public ITerminalNode INT() { return GetToken(TSQLParser.INT, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSQLParser.TINYINT, 0); }
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_integerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2328;
			_la = _input.La(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentityTypeContext : ParserRuleContext {
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public IdentitySpecContext identitySpec() {
			return GetRuleContext<IdentitySpecContext>(0);
		}
		public IdentityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identityType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIdentityType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIdentityType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityTypeContext identityType() {
		IdentityTypeContext _localctx = new IdentityTypeContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_identityType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2331;
			_la = _input.La(1);
			if (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)))) != 0)) {
				{
				State = 2330; integerType();
				}
			}

			State = 2333; identitySpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentitySpecContext : ParserRuleContext {
		public IntegerValueContext Seed;
		public IntegerValueContext Increment;
		public IntegerValueContext integerValue(int i) {
			return GetRuleContext<IntegerValueContext>(i);
		}
		public ITerminalNode IDENTITY() { return GetToken(TSQLParser.IDENTITY, 0); }
		public IntegerValueContext[] integerValue() {
			return GetRuleContexts<IntegerValueContext>();
		}
		public IdentitySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identitySpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterIdentitySpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitIdentitySpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentitySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentitySpecContext identitySpec() {
		IdentitySpecContext _localctx = new IdentitySpecContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_identitySpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2335; Match(IDENTITY);
			State = 2344;
			switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
			case 1:
				{
				State = 2336; Match(LPAREN);
				State = 2337; _localctx.Seed = integerValue();
				State = 2340;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 2338; Match(COMMA);
					State = 2339; _localctx.Increment = integerValue();
					}
				}

				State = 2342; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyOrFieldContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public PropertyOrFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyOrField; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterPropertyOrField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitPropertyOrField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyOrField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyOrFieldContext propertyOrField() {
		PropertyOrFieldContext _localctx = new PropertyOrFieldContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_propertyOrField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2346; Match(DOT);
			State = 2347; qualifiedNamePart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349;
			_la = _input.La(1);
			if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (ADD_ASSIGN - 172)) | (1L << (SUB_ASSIGN - 172)) | (1L << (MUL_ASSIGN - 172)) | (1L << (DIV_ASSIGN - 172)) | (1L << (AND_ASSIGN - 172)) | (1L << (OR_ASSIGN - 172)) | (1L << (XOR_ASSIGN - 172)) | (1L << (MOD_ASSIGN - 172)) | (1L << (EQUALS - 172)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedColumnNameListContext : ParserRuleContext {
		public QualifiedColumnNameContext qualifiedColumnName(int i) {
			return GetRuleContext<QualifiedColumnNameContext>(i);
		}
		public QualifiedColumnNameContext[] qualifiedColumnName() {
			return GetRuleContexts<QualifiedColumnNameContext>();
		}
		public QualifiedColumnNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedColumnNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedColumnNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedColumnNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedColumnNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedColumnNameListContext qualifiedColumnNameList() {
		QualifiedColumnNameListContext _localctx = new QualifiedColumnNameListContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_qualifiedColumnNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2351; qualifiedColumnName();
			State = 2356;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2352; Match(COMMA);
				State = 2353; qualifiedColumnName();
				}
				}
				State = 2358;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedColumnNameContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public TempTableContext tempTable() {
			return GetRuleContext<TempTableContext>(0);
		}
		public QualifiedColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedColumnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedColumnNameContext qualifiedColumnName() {
		QualifiedColumnNameContext _localctx = new QualifiedColumnNameContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_qualifiedColumnName);
		try {
			State = 2368;
			switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2359; qualifiedName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2360; qualifiedName();
				State = 2361; Match(DOT);
				State = 2362; keyword();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2364; tempTable();
				State = 2365; Match(DOT);
				State = 2366; qualifiedNamePart();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnIndexOrNameContext : ParserRuleContext {
		public IntegerValueContext ColumnIndex;
		public QualifiedNameContext ColumnName;
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public ColumnIndexOrNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnIndexOrName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnIndexOrName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnIndexOrName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnIndexOrName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnIndexOrNameContext columnIndexOrName() {
		ColumnIndexOrNameContext _localctx = new ColumnIndexOrNameContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_columnIndexOrName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2372;
			switch (_input.La(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case IntegerLiteral:
				{
				State = 2370; _localctx.ColumnIndex = integerValue();
				}
				break;
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				{
				State = 2371; _localctx.ColumnName = qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_columnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2374; qualifiedNamePart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAliasContext : ParserRuleContext {
		public QualifiedNamePartContext qualifiedNamePart() {
			return GetRuleContext<QualifiedNamePartContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public ColumnAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterColumnAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitColumnAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAliasContext columnAlias() {
		ColumnAliasContext _localctx = new ColumnAliasContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_columnAlias);
		try {
			State = 2378;
			switch (_input.La(1)) {
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2376; qualifiedNamePart();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2377; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorIdContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CursorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorIdContext cursorId() {
		CursorIdContext _localctx = new CursorIdContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_cursorId);
		try {
			State = 2382;
			switch (_input.La(1)) {
			case READONLY:
			case TRY:
			case CATCH:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case RAISE_ERROR:
			case PRINT:
			case CLUSTERED:
			case NONCLUSTERED:
			case TABLE:
			case PROCEDURE:
			case PARTITION:
			case INDEX:
			case DATABASE:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case KEY:
			case REFERENCES:
			case LEFT:
			case RIGHT:
			case CROSS:
			case OUTER:
			case INNER:
			case FULL:
			case CURSOR:
			case FETCH:
			case OPEN:
			case CLOSE:
			case DEALLOCATE:
			case FIRST:
			case LAST:
			case PRIOR:
			case NEXT:
			case ABSOLUTE:
			case RELATIVE:
			case CASE:
			case CAST:
			case CONVERT:
			case COLLATE:
			case COUNT:
			case COUNT_BIG:
			case DISTINCT:
			case UNIQUE:
			case MAX:
			case TOP:
			case WHEN:
			case THEN:
			case SWITCH:
			case OVER:
			case INCLUDE:
			case INTERSECT:
			case EXCEPT:
			case UNION:
			case ALL:
			case APPLY:
			case IF:
			case ELSE:
			case WHILE:
			case GOTO:
			case CONTINUE:
			case BREAK:
			case TRUNCATE:
			case ADD:
			case REMOVE:
			case ALTER:
			case CREATE:
			case DROP:
			case AS:
			case WITH:
			case FOR:
			case REPLICATION:
			case BEGIN:
			case END:
			case EXISTS:
			case DEFAULT:
			case VARYING:
			case SELECT:
			case UPDATE:
			case INSERT:
			case DELETE:
			case WHERE:
			case FROM:
			case JOIN:
			case DECLARE:
			case OPTION:
			case SET:
			case TO:
			case ON:
			case OFF:
			case GROUP:
			case HAVING:
			case ORDER:
			case BY:
			case EXECUTE:
			case INTO:
			case VALUES:
			case IS:
			case IN:
			case NOT:
			case NULL:
			case BETWEEN:
			case RETURN:
			case OUTPUT:
			case OUT:
			case LIKE:
			case ESCAPE:
			case OF:
			case DECIMAL:
			case NUMERIC:
			case VARCHAR:
			case NVARCHAR:
			case CHAR:
			case CHARACTER:
			case NCHAR:
			case INT:
			case TINYINT:
			case SMALLINT:
			case BIGINT:
			case FLOAT:
			case IDENTITY:
			case LOG:
			case AND:
			case OR:
			case ASC:
			case DESC:
			case STATISTICS:
			case USING:
			case MERGE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case XML:
			case RAW:
			case AUTO:
			case EXPLICIT:
			case PATH:
			case ENABLE:
			case DISABLE:
			case TRIGGER:
			case WAITFOR:
			case DELAY:
			case COMPUTE:
			case LEVEL:
			case ISOLATION:
			case SPLIT:
			case RANGE:
			case FUNCTION:
			case SCHEME:
			case USED:
			case OPTIMIZE:
			case ROWCOUNT:
			case LBRACKET:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2380; qualifiedName();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2381; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorStatementContext : ParserRuleContext {
		public CursorFetchContext cursorFetch() {
			return GetRuleContext<CursorFetchContext>(0);
		}
		public CursorDeallocateContext cursorDeallocate() {
			return GetRuleContext<CursorDeallocateContext>(0);
		}
		public CursorCloseContext cursorClose() {
			return GetRuleContext<CursorCloseContext>(0);
		}
		public CursorOpenContext cursorOpen() {
			return GetRuleContext<CursorOpenContext>(0);
		}
		public CursorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorStatementContext cursorStatement() {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_cursorStatement);
		try {
			State = 2388;
			switch (_input.La(1)) {
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2384; cursorOpen();
				}
				break;
			case CLOSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2385; cursorClose();
				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2386; cursorFetch();
				}
				break;
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2387; cursorDeallocate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorOpenContext : ParserRuleContext {
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(TSQLParser.OPEN, 0); }
		public CursorOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorOpen; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorOpen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorOpen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorOpen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorOpenContext cursorOpen() {
		CursorOpenContext _localctx = new CursorOpenContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_cursorOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2390; Match(OPEN);
			State = 2391; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorCloseContext : ParserRuleContext {
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(TSQLParser.CLOSE, 0); }
		public CursorCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorClose; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorClose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorClose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorClose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorCloseContext cursorClose() {
		CursorCloseContext _localctx = new CursorCloseContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_cursorClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2393; Match(CLOSE);
			State = 2394; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorFetchContext : ParserRuleContext {
		public ITerminalNode ABSOLUTE() { return GetToken(TSQLParser.ABSOLUTE, 0); }
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public ITerminalNode FIRST() { return GetToken(TSQLParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(TSQLParser.LAST, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode FETCH() { return GetToken(TSQLParser.FETCH, 0); }
		public IntegerValueContext integerValue() {
			return GetRuleContext<IntegerValueContext>(0);
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode RELATIVE() { return GetToken(TSQLParser.RELATIVE, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public ITerminalNode PRIOR() { return GetToken(TSQLParser.PRIOR, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorFetch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorFetch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorFetch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorFetch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorFetchContext cursorFetch() {
		CursorFetchContext _localctx = new CursorFetchContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_cursorFetch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2396; Match(FETCH);
			State = 2412;
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 2397; Match(NEXT);
				}
				break;

			case 2:
				{
				State = 2398; Match(PRIOR);
				}
				break;

			case 3:
				{
				State = 2399; Match(FIRST);
				}
				break;

			case 4:
				{
				State = 2400; Match(LAST);
				}
				break;

			case 5:
				{
				State = 2401; Match(ABSOLUTE);
				State = 2404;
				switch (_input.La(1)) {
				case LPAREN:
				case PLUS:
				case MINUS:
				case IntegerLiteral:
					{
					State = 2402; integerValue();
					}
					break;
				case AT:
					{
					State = 2403; variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 6:
				{
				State = 2406; Match(RELATIVE);
				State = 2409;
				switch (_input.La(1)) {
				case LPAREN:
				case PLUS:
				case MINUS:
				case IntegerLiteral:
					{
					State = 2407; integerValue();
					}
					break;
				case AT:
					{
					State = 2408; variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 7:
				{
				State = 2411; qualifiedName();
				}
				break;
			}
			State = 2416;
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 2414; Match(FROM);
				State = 2415; cursorId();
				}
			}

			State = 2418; Match(INTO);
			State = 2419; variable();
			State = 2424;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2420; Match(COMMA);
				State = 2421; variable();
				}
				}
				State = 2426;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorDeallocateContext : ParserRuleContext {
		public CursorIdContext cursorId() {
			return GetRuleContext<CursorIdContext>(0);
		}
		public ITerminalNode DEALLOCATE() { return GetToken(TSQLParser.DEALLOCATE, 0); }
		public CursorDeallocateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorDeallocate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCursorDeallocate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCursorDeallocate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursorDeallocate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorDeallocateContext cursorDeallocate() {
		CursorDeallocateContext _localctx = new CursorDeallocateContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_cursorDeallocate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2427; Match(DEALLOCATE);
			State = 2428; cursorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpressionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(TSQLParser.StringLiteral, 0); }
		public StringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpressionContext stringExpression() {
		StringExpressionContext _localctx = new StringExpressionContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_stringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2430; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollateContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TSQLParser.Identifier, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSQLParser.COLLATE, 0); }
		public CollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollateContext collate() {
		CollateContext _localctx = new CollateContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2432; Match(COLLATE);
			State = 2433; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusterTypeContext : ParserRuleContext {
		public ITerminalNode NONCLUSTERED() { return GetToken(TSQLParser.NONCLUSTERED, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSQLParser.CLUSTERED, 0); }
		public ClusterTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clusterType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterClusterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitClusterType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClusterType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusterTypeContext clusterType() {
		ClusterTypeContext _localctx = new ClusterTypeContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_clusterType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2435;
			_la = _input.La(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(TSQLParser.CASE, 0); }
		public ITerminalNode LOG() { return GetToken(TSQLParser.LOG, 0); }
		public ITerminalNode ELSE() { return GetToken(TSQLParser.ELSE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(TSQLParser.DECIMAL, 0); }
		public ITerminalNode IF() { return GetToken(TSQLParser.IF, 0); }
		public ITerminalNode READONLY() { return GetToken(TSQLParser.READONLY, 0); }
		public ITerminalNode PARTITION() { return GetToken(TSQLParser.PARTITION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(TSQLParser.OPTIMIZE, 0); }
		public ITerminalNode FIRST() { return GetToken(TSQLParser.FIRST, 0); }
		public ITerminalNode COMPUTE() { return GetToken(TSQLParser.COMPUTE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(TSQLParser.EXECUTE, 0); }
		public ITerminalNode TRY() { return GetToken(TSQLParser.TRY, 0); }
		public ITerminalNode OF() { return GetToken(TSQLParser.OF, 0); }
		public ITerminalNode ROWCOUNT() { return GetToken(TSQLParser.ROWCOUNT, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(TSQLParser.PROCEDURE, 0); }
		public ITerminalNode FETCH() { return GetToken(TSQLParser.FETCH, 0); }
		public ITerminalNode RELATIVE() { return GetToken(TSQLParser.RELATIVE, 0); }
		public ITerminalNode USED() { return GetToken(TSQLParser.USED, 0); }
		public ITerminalNode PRIOR() { return GetToken(TSQLParser.PRIOR, 0); }
		public ITerminalNode OVER() { return GetToken(TSQLParser.OVER, 0); }
		public ITerminalNode BETWEEN() { return GetToken(TSQLParser.BETWEEN, 0); }
		public ITerminalNode FOR() { return GetToken(TSQLParser.FOR, 0); }
		public ITerminalNode TOP() { return GetToken(TSQLParser.TOP, 0); }
		public ITerminalNode GROUP() { return GetToken(TSQLParser.GROUP, 0); }
		public ITerminalNode OR() { return GetToken(TSQLParser.OR, 0); }
		public ITerminalNode VARCHAR() { return GetToken(TSQLParser.VARCHAR, 0); }
		public ITerminalNode IN() { return GetToken(TSQLParser.IN, 0); }
		public ITerminalNode FLOAT() { return GetToken(TSQLParser.FLOAT, 0); }
		public ITerminalNode CLUSTERED() { return GetToken(TSQLParser.CLUSTERED, 0); }
		public ITerminalNode INTO() { return GetToken(TSQLParser.INTO, 0); }
		public ITerminalNode KEY() { return GetToken(TSQLParser.KEY, 0); }
		public ITerminalNode MATCHED() { return GetToken(TSQLParser.MATCHED, 0); }
		public ITerminalNode ORDER() { return GetToken(TSQLParser.ORDER, 0); }
		public ITerminalNode WHEN() { return GetToken(TSQLParser.WHEN, 0); }
		public ITerminalNode REFERENCES() { return GetToken(TSQLParser.REFERENCES, 0); }
		public ITerminalNode OUT() { return GetToken(TSQLParser.OUT, 0); }
		public ITerminalNode MERGE() { return GetToken(TSQLParser.MERGE, 0); }
		public ITerminalNode RAW() { return GetToken(TSQLParser.RAW, 0); }
		public ITerminalNode EXCEPT() { return GetToken(TSQLParser.EXCEPT, 0); }
		public ITerminalNode INT() { return GetToken(TSQLParser.INT, 0); }
		public ITerminalNode AS() { return GetToken(TSQLParser.AS, 0); }
		public ITerminalNode COMMIT() { return GetToken(TSQLParser.COMMIT, 0); }
		public ITerminalNode FULL() { return GetToken(TSQLParser.FULL, 0); }
		public ITerminalNode NOT() { return GetToken(TSQLParser.NOT, 0); }
		public ITerminalNode CURSOR() { return GetToken(TSQLParser.CURSOR, 0); }
		public ITerminalNode SOURCE() { return GetToken(TSQLParser.SOURCE, 0); }
		public ITerminalNode PATH() { return GetToken(TSQLParser.PATH, 0); }
		public ITerminalNode STATISTICS() { return GetToken(TSQLParser.STATISTICS, 0); }
		public ITerminalNode CROSS() { return GetToken(TSQLParser.CROSS, 0); }
		public ITerminalNode OPTION() { return GetToken(TSQLParser.OPTION, 0); }
		public ITerminalNode CHARACTER() { return GetToken(TSQLParser.CHARACTER, 0); }
		public ITerminalNode OUTPUT() { return GetToken(TSQLParser.OUTPUT, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(TSQLParser.CONSTRAINT, 0); }
		public ITerminalNode CHAR() { return GetToken(TSQLParser.CHAR, 0); }
		public ITerminalNode DEFAULT() { return GetToken(TSQLParser.DEFAULT, 0); }
		public ITerminalNode NCHAR() { return GetToken(TSQLParser.NCHAR, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(TSQLParser.DEALLOCATE, 0); }
		public ITerminalNode INSERT() { return GetToken(TSQLParser.INSERT, 0); }
		public ITerminalNode LEFT() { return GetToken(TSQLParser.LEFT, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(TSQLParser.ABSOLUTE, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(TSQLParser.NVARCHAR, 0); }
		public ITerminalNode DECLARE() { return GetToken(TSQLParser.DECLARE, 0); }
		public ITerminalNode VARYING() { return GetToken(TSQLParser.VARYING, 0); }
		public ITerminalNode DROP() { return GetToken(TSQLParser.DROP, 0); }
		public ITerminalNode WHILE() { return GetToken(TSQLParser.WHILE, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(TSQLParser.EXPLICIT, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(TSQLParser.NONCLUSTERED, 0); }
		public ITerminalNode EXISTS() { return GetToken(TSQLParser.EXISTS, 0); }
		public ITerminalNode ESCAPE() { return GetToken(TSQLParser.ESCAPE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TSQLParser.FUNCTION, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(TSQLParser.TRUNCATE, 0); }
		public ITerminalNode INNER() { return GetToken(TSQLParser.INNER, 0); }
		public ITerminalNode GOTO() { return GetToken(TSQLParser.GOTO, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TSQLParser.DISTINCT, 0); }
		public ITerminalNode SELECT() { return GetToken(TSQLParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(TSQLParser.SET, 0); }
		public ITerminalNode COUNT() { return GetToken(TSQLParser.COUNT, 0); }
		public ITerminalNode UNION() { return GetToken(TSQLParser.UNION, 0); }
		public ITerminalNode WAITFOR() { return GetToken(TSQLParser.WAITFOR, 0); }
		public ITerminalNode ASC() { return GetToken(TSQLParser.ASC, 0); }
		public ITerminalNode OFF() { return GetToken(TSQLParser.OFF, 0); }
		public ITerminalNode SWITCH() { return GetToken(TSQLParser.SWITCH, 0); }
		public ITerminalNode DISABLE() { return GetToken(TSQLParser.DISABLE, 0); }
		public ITerminalNode CATCH() { return GetToken(TSQLParser.CATCH, 0); }
		public ITerminalNode RIGHT() { return GetToken(TSQLParser.RIGHT, 0); }
		public ITerminalNode INCLUDE() { return GetToken(TSQLParser.INCLUDE, 0); }
		public ITerminalNode INDEX() { return GetToken(TSQLParser.INDEX, 0); }
		public ITerminalNode RETURN() { return GetToken(TSQLParser.RETURN, 0); }
		public ITerminalNode NULL() { return GetToken(TSQLParser.NULL, 0); }
		public ITerminalNode BEGIN() { return GetToken(TSQLParser.BEGIN, 0); }
		public ITerminalNode ISOLATION() { return GetToken(TSQLParser.ISOLATION, 0); }
		public ITerminalNode FOREIGN() { return GetToken(TSQLParser.FOREIGN, 0); }
		public ITerminalNode CAST() { return GetToken(TSQLParser.CAST, 0); }
		public ITerminalNode JOIN() { return GetToken(TSQLParser.JOIN, 0); }
		public ITerminalNode RAISE_ERROR() { return GetToken(TSQLParser.RAISE_ERROR, 0); }
		public ITerminalNode PRINT() { return GetToken(TSQLParser.PRINT, 0); }
		public ITerminalNode RANGE() { return GetToken(TSQLParser.RANGE, 0); }
		public ITerminalNode BIGINT() { return GetToken(TSQLParser.BIGINT, 0); }
		public ITerminalNode OUTER() { return GetToken(TSQLParser.OUTER, 0); }
		public ITerminalNode THEN() { return GetToken(TSQLParser.THEN, 0); }
		public ITerminalNode DATABASE() { return GetToken(TSQLParser.DATABASE, 0); }
		public ITerminalNode COLLATE() { return GetToken(TSQLParser.COLLATE, 0); }
		public ITerminalNode USING() { return GetToken(TSQLParser.USING, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(TSQLParser.COUNT_BIG, 0); }
		public ITerminalNode TABLE() { return GetToken(TSQLParser.TABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(TSQLParser.TRIGGER, 0); }
		public ITerminalNode REPLICATION() { return GetToken(TSQLParser.REPLICATION, 0); }
		public ITerminalNode SCHEME() { return GetToken(TSQLParser.SCHEME, 0); }
		public ITerminalNode IS() { return GetToken(TSQLParser.IS, 0); }
		public ITerminalNode CONVERT() { return GetToken(TSQLParser.CONVERT, 0); }
		public ITerminalNode NUMERIC() { return GetToken(TSQLParser.NUMERIC, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TSQLParser.CONTINUE, 0); }
		public ITerminalNode AUTO() { return GetToken(TSQLParser.AUTO, 0); }
		public ITerminalNode SPLIT() { return GetToken(TSQLParser.SPLIT, 0); }
		public ITerminalNode IDENTITY() { return GetToken(TSQLParser.IDENTITY, 0); }
		public ITerminalNode ALTER() { return GetToken(TSQLParser.ALTER, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(TSQLParser.ROLLBACK, 0); }
		public ITerminalNode XML() { return GetToken(TSQLParser.XML, 0); }
		public ITerminalNode PRIMARY() { return GetToken(TSQLParser.PRIMARY, 0); }
		public ITerminalNode BREAK() { return GetToken(TSQLParser.BREAK, 0); }
		public ITerminalNode DELETE() { return GetToken(TSQLParser.DELETE, 0); }
		public ITerminalNode LEVEL() { return GetToken(TSQLParser.LEVEL, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(TSQLParser.TRANSACTION, 0); }
		public ITerminalNode DELAY() { return GetToken(TSQLParser.DELAY, 0); }
		public ITerminalNode TO() { return GetToken(TSQLParser.TO, 0); }
		public ITerminalNode TINYINT() { return GetToken(TSQLParser.TINYINT, 0); }
		public ITerminalNode ALL() { return GetToken(TSQLParser.ALL, 0); }
		public ITerminalNode OPEN() { return GetToken(TSQLParser.OPEN, 0); }
		public ITerminalNode INTERSECT() { return GetToken(TSQLParser.INTERSECT, 0); }
		public ITerminalNode MAX() { return GetToken(TSQLParser.MAX, 0); }
		public ITerminalNode CLOSE() { return GetToken(TSQLParser.CLOSE, 0); }
		public ITerminalNode ADD() { return GetToken(TSQLParser.ADD, 0); }
		public ITerminalNode AND() { return GetToken(TSQLParser.AND, 0); }
		public ITerminalNode REMOVE() { return GetToken(TSQLParser.REMOVE, 0); }
		public ITerminalNode APPLY() { return GetToken(TSQLParser.APPLY, 0); }
		public ITerminalNode CREATE() { return GetToken(TSQLParser.CREATE, 0); }
		public ITerminalNode HAVING() { return GetToken(TSQLParser.HAVING, 0); }
		public ITerminalNode TARGET() { return GetToken(TSQLParser.TARGET, 0); }
		public ITerminalNode BY() { return GetToken(TSQLParser.BY, 0); }
		public ITerminalNode SMALLINT() { return GetToken(TSQLParser.SMALLINT, 0); }
		public ITerminalNode WITH() { return GetToken(TSQLParser.WITH, 0); }
		public ITerminalNode ON() { return GetToken(TSQLParser.ON, 0); }
		public ITerminalNode VALUES() { return GetToken(TSQLParser.VALUES, 0); }
		public ITerminalNode ENABLE() { return GetToken(TSQLParser.ENABLE, 0); }
		public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		public ITerminalNode DESC() { return GetToken(TSQLParser.DESC, 0); }
		public ITerminalNode LAST() { return GetToken(TSQLParser.LAST, 0); }
		public ITerminalNode UNIQUE() { return GetToken(TSQLParser.UNIQUE, 0); }
		public ITerminalNode NEXT() { return GetToken(TSQLParser.NEXT, 0); }
		public ITerminalNode UPDATE() { return GetToken(TSQLParser.UPDATE, 0); }
		public ITerminalNode END() { return GetToken(TSQLParser.END, 0); }
		public ITerminalNode WHERE() { return GetToken(TSQLParser.WHERE, 0); }
		public ITerminalNode LIKE() { return GetToken(TSQLParser.LIKE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2437;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << READONLY) | (1L << TRY) | (1L << CATCH) | (1L << TRANSACTION) | (1L << COMMIT) | (1L << ROLLBACK) | (1L << RAISE_ERROR) | (1L << PRINT) | (1L << CLUSTERED) | (1L << NONCLUSTERED) | (1L << TABLE) | (1L << PROCEDURE) | (1L << PARTITION) | (1L << INDEX) | (1L << DATABASE) | (1L << CONSTRAINT) | (1L << FOREIGN) | (1L << PRIMARY) | (1L << KEY) | (1L << REFERENCES) | (1L << LEFT) | (1L << RIGHT) | (1L << CROSS) | (1L << OUTER) | (1L << INNER) | (1L << FULL) | (1L << CURSOR) | (1L << FETCH) | (1L << OPEN) | (1L << CLOSE) | (1L << DEALLOCATE) | (1L << FIRST) | (1L << LAST) | (1L << PRIOR) | (1L << NEXT) | (1L << ABSOLUTE) | (1L << RELATIVE) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << COLLATE) | (1L << COUNT) | (1L << COUNT_BIG) | (1L << DISTINCT) | (1L << UNIQUE) | (1L << MAX) | (1L << TOP) | (1L << WHEN) | (1L << THEN) | (1L << SWITCH) | (1L << OVER) | (1L << INCLUDE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTERSECT - 64)) | (1L << (EXCEPT - 64)) | (1L << (UNION - 64)) | (1L << (ALL - 64)) | (1L << (APPLY - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (WHILE - 64)) | (1L << (GOTO - 64)) | (1L << (CONTINUE - 64)) | (1L << (BREAK - 64)) | (1L << (TRUNCATE - 64)) | (1L << (ADD - 64)) | (1L << (REMOVE - 64)) | (1L << (ALTER - 64)) | (1L << (CREATE - 64)) | (1L << (DROP - 64)) | (1L << (AS - 64)) | (1L << (WITH - 64)) | (1L << (FOR - 64)) | (1L << (REPLICATION - 64)) | (1L << (BEGIN - 64)) | (1L << (END - 64)) | (1L << (EXISTS - 64)) | (1L << (DEFAULT - 64)) | (1L << (VARYING - 64)) | (1L << (SELECT - 64)) | (1L << (UPDATE - 64)) | (1L << (INSERT - 64)) | (1L << (DELETE - 64)) | (1L << (WHERE - 64)) | (1L << (FROM - 64)) | (1L << (JOIN - 64)) | (1L << (DECLARE - 64)) | (1L << (OPTION - 64)) | (1L << (SET - 64)) | (1L << (TO - 64)) | (1L << (ON - 64)) | (1L << (OFF - 64)) | (1L << (GROUP - 64)) | (1L << (HAVING - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (EXECUTE - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (IS - 64)) | (1L << (IN - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (BETWEEN - 64)) | (1L << (RETURN - 64)) | (1L << (OUTPUT - 64)) | (1L << (OUT - 64)) | (1L << (LIKE - 64)) | (1L << (ESCAPE - 64)) | (1L << (OF - 64)) | (1L << (DECIMAL - 64)) | (1L << (NUMERIC - 64)) | (1L << (VARCHAR - 64)) | (1L << (NVARCHAR - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (NCHAR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (INT - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT - 128)) | (1L << (IDENTITY - 128)) | (1L << (LOG - 128)) | (1L << (AND - 128)) | (1L << (OR - 128)) | (1L << (ASC - 128)) | (1L << (DESC - 128)) | (1L << (STATISTICS - 128)) | (1L << (USING - 128)) | (1L << (MERGE - 128)) | (1L << (MATCHED - 128)) | (1L << (TARGET - 128)) | (1L << (SOURCE - 128)) | (1L << (XML - 128)) | (1L << (RAW - 128)) | (1L << (AUTO - 128)) | (1L << (EXPLICIT - 128)) | (1L << (PATH - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (TRIGGER - 128)) | (1L << (WAITFOR - 128)) | (1L << (DELAY - 128)) | (1L << (COMPUTE - 128)) | (1L << (LEVEL - 128)) | (1L << (ISOLATION - 128)) | (1L << (SPLIT - 128)) | (1L << (RANGE - 128)) | (1L << (FUNCTION - 128)) | (1L << (SCHEME - 128)) | (1L << (USED - 128)) | (1L << (OPTIMIZE - 128)) | (1L << (ROWCOUNT - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);

		case 31: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);

		case 32: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);

		case 33: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);

		case 34: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);

		case 35: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);

		case 36: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);

		case 37: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);

		case 38: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);

		case 41: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(_ctx, 2);

		case 21: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 2);

		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(_ctx, 4);

		case 17: return Precpred(_ctx, 3);

		case 18: return Precpred(_ctx, 2);

		case 19: return Precpred(_ctx, 1);

		case 11: return Precpred(_ctx, 9);

		case 12: return Precpred(_ctx, 8);

		case 13: return Precpred(_ctx, 7);

		case 14: return Precpred(_ctx, 6);

		case 15: return Precpred(_ctx, 5);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(_ctx, 3);

		case 9: return Precpred(_ctx, 2);

		case 10: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(_ctx, 3);

		case 23: return Precpred(_ctx, 2);

		case 24: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(_ctx, 4);

		case 26: return Precpred(_ctx, 3);

		case 27: return Precpred(_ctx, 2);

		case 28: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xCF\x98A\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x3\x2"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x164\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x16D\n\x4\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x5\x5\x173\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x17A\n\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x5\x6\x180\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5"+
		"\a\x188\n\a\x3\a\x3\a\x3\a\x3\a\x5\a\x18E\n\a\x3\a\x3\a\x5\a\x192\n\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x5\a\x1A6\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x5\b\x1B1\n\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x5\n"+
		"\x1BB\n\n\x3\n\x3\n\x3\n\x3\n\x5\n\x1C1\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1DD\n\f\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\a\r\x1E4\n\r\f\r\xE\r\x1E7\v\r\x3\r\x3\r\x3\r\x3\r\x5\r\x1ED\n\r\x3"+
		"\xE\x3\xE\x3\xE\x5\xE\x1F2\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x1F8\n\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x1FE\n\xF\x3\xF\x5\xF\x201\n\xF\x3\xF\x3"+
		"\xF\x3\xF\x5\xF\x206\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5"+
		"\x10\x20E\n\x10\x5\x10\x210\n\x10\x3\x11\x3\x11\x5\x11\x214\n\x11\x3\x11"+
		"\x5\x11\x217\n\x11\x3\x11\x3\x11\x3\x11\x5\x11\x21C\n\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x224\n\x11\x3\x11\x5\x11\x227\n\x11"+
		"\x3\x11\x5\x11\x22A\n\x11\x3\x11\x5\x11\x22D\n\x11\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x5\x13\x23E\n\x13\x3\x14\x3\x14\x3\x14\a\x14\x243\n\x14"+
		"\f\x14\xE\x14\x246\v\x14\x3\x15\x3\x15\x5\x15\x24A\n\x15\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x25D\n\x18\x3\x18\x5\x18\x260"+
		"\n\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x26E\n\x1A\x3\x1A\x5\x1A\x271\n\x1A\x3\x1A"+
		"\x5\x1A\x274\n\x1A\x3\x1A\x5\x1A\x277\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x5\x1C\x27E\n\x1C\x3\x1C\x3\x1C\x5\x1C\x282\n\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x294\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x6\x1C\x29D\n\x1C\r\x1C\xE\x1C\x29E\x3\x1C\x5"+
		"\x1C\x2A2\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x6\x1C\x2A9\n\x1C\r"+
		"\x1C\xE\x1C\x2AA\x3\x1C\x5\x1C\x2AE\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2B7\n\x1C\x3\x1D\x3\x1D\x5\x1D\x2BB\n\x1D"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x2C4\n\x1E\x3"+
		"\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \a \x2D3"+
		"\n \f \xE \x2D6\v \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\a!\x2E1\n!\f!\xE"+
		"!\x2E4\v!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x2EF\n\"\x3"+
		"\"\a\"\x2F2\n\"\f\"\xE\"\x2F5\v\"\x3#\x3#\x3#\x3#\x3#\x3#\a#\x2FD\n#\f"+
		"#\xE#\x300\v#\x3$\x3$\x3$\x3$\x3$\x3$\a$\x308\n$\f$\xE$\x30B\v$\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\a%\x319\n%\f%\xE%\x31C\v%\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\a&\x33F\n"+
		"&\f&\xE&\x342\v&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\a\'\x34D"+
		"\n\'\f\'\xE\'\x350\v\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3"+
		"(\a(\x35E\n(\f(\xE(\x361\v(\x3)\x3)\x3)\x3)\x3)\x5)\x368\n)\x3*\x3*\x3"+
		"*\x5*\x36D\n*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x37B"+
		"\n+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x384\n+\x3+\x3+\a+\x388\n+\f+\xE+"+
		"\x38B\v+\x3,\x3,\x3,\x5,\x390\n,\x3,\x5,\x393\n,\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x5-\x39D\n-\x3.\x3.\x3.\x3.\a.\x3A3\n.\f.\xE.\x3A6\v.\x3.\x3"+
		".\x3.\x3.\x5.\x3AC\n.\x3.\x3.\x5.\x3B0\n.\x3/\x3/\x3/\x3/\x3/\x3\x30\x3"+
		"\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x5\x32\x3C6\n\x32\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\a\x34\x3D6\n\x34\f\x34\xE\x34\x3D9\v\x34\x3\x34\x3\x34\x5\x34\x3DD\n"+
		"\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x3E7"+
		"\n\x35\f\x35\xE\x35\x3EA\v\x35\x3\x35\x3\x35\x5\x35\x3EE\n\x35\x3\x36"+
		"\x3\x36\x5\x36\x3F2\n\x36\x3\x37\x5\x37\x3F5\n\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x5\x37\x3FC\n\x37\x3\x38\x3\x38\x6\x38\x400\n\x38\r\x38"+
		"\xE\x38\x401\x3\x38\x3\x38\x3\x38\x5\x38\x407\n\x38\x3\x39\x3\x39\x6\x39"+
		"\x40B\n\x39\r\x39\xE\x39\x40C\x3\x39\a\x39\x410\n\x39\f\x39\xE\x39\x413"+
		"\v\x39\x3\x39\x5\x39\x416\n\x39\x3:\x3:\x3:\a:\x41B\n:\f:\xE:\x41E\v:"+
		"\x3;\x6;\x421\n;\r;\xE;\x422\x3;\x3;\x5;\x427\n;\x3<\x6<\x42A\n<\r<\xE"+
		"<\x42B\x3<\x3<\x5<\x430\n<\x3<\x3<\x3<\x3<\x5<\x436\n<\x3=\x6=\x439\n"+
		"=\r=\xE=\x43A\x3=\x3=\x6=\x43F\n=\r=\xE=\x440\x3=\x5=\x444\n=\x3>\x3>"+
		"\x3?\x3?\x3?\x3?\x3?\x3?\a?\x44E\n?\f?\xE?\x451\v?\x3?\x3?\x3?\x3?\x3"+
		"?\a?\x458\n?\f?\xE?\x45B\v?\x5?\x45D\n?\x3@\x3@\x5@\x461\n@\x3@\x3@\x5"+
		"@\x465\n@\x3@\x5@\x468\n@\x3@\x5@\x46B\n@\x3@\x5@\x46E\n@\x3@\x5@\x471"+
		"\n@\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x477\n\x41\x3\x42\x3\x42\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\a\x43\x47F\n\x43\f\x43\xE\x43\x482\v\x43\x3\x44"+
		"\x3\x44\a\x44\x486\n\x44\f\x44\xE\x44\x489\v\x44\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x3\x45\x3\x45\x5\x45\x491\n\x45\x3\x45\x3\x45\x5\x45\x495\n\x45"+
		"\x3\x45\x5\x45\x498\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x4A7\n\x46\x3G\x3"+
		"G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G"+
		"\x3G\x3G\x5G\x4BE\nG\x3G\x3G\x5G\x4C2\nG\x3G\x3G\x5G\x4C6\nG\x3G\x5G\x4C9"+
		"\nG\x3G\x3G\x5G\x4CD\nG\x3G\x3G\x5G\x4D1\nG\x3G\x5G\x4D4\nG\x3G\x3G\x3"+
		"G\x5G\x4D9\nG\x3H\x3H\x5H\x4DD\nH\x3I\x3I\x3I\x3I\x3I\x5I\x4E4\nI\x3J"+
		"\x3J\x3J\x3J\x3K\x3K\x3K\x3K\x3L\x3L\x3L\x3L\x3L\x3L\x5L\x4F4\nL\x3L\x3"+
		"L\x6L\x4F8\nL\rL\xEL\x4F9\x3L\x3L\x5L\x4FE\nL\x5L\x500\nL\x3M\x3M\x3M"+
		"\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3N\x3N\x3N\x5N\x510\nN\x3N\x3N\x3O\x3"+
		"O\x3O\x3O\x3O\x3O\x3O\x5O\x51B\nO\x3P\x3P\x5P\x51F\nP\x3P\x6P\x522\nP"+
		"\rP\xEP\x523\x3P\x5P\x527\nP\x3P\aP\x52A\nP\fP\xEP\x52D\vP\x3P\x5P\x530"+
		"\nP\x3P\x5P\x533\nP\x3P\x3P\x5P\x537\nP\x3P\x3P\x6P\x53B\nP\rP\xEP\x53C"+
		"\x3P\x5P\x540\nP\x3P\aP\x543\nP\fP\xEP\x546\vP\x3P\x5P\x549\nP\x3P\x5"+
		"P\x54C\nP\x5P\x54E\nP\x3Q\x5Q\x551\nQ\x3Q\x3Q\x3Q\aQ\x556\nQ\fQ\xEQ\x559"+
		"\vQ\x3R\x5R\x55C\nR\x3R\x3R\x3R\aR\x561\nR\fR\xER\x564\vR\x3S\x3S\x3S"+
		"\x3S\x3S\x3T\x3T\x3T\x3T\aT\x56F\nT\fT\xET\x572\vT\x3T\x3T\x3U\x3U\x3"+
		"U\x3U\x3U\x5U\x57B\nU\x3U\x3U\x3U\x3U\x3U\x3V\x3V\x5V\x584\nV\x3V\x3V"+
		"\x5V\x588\nV\x3W\x3W\x5W\x58C\nW\x3W\x3W\x5W\x590\nW\x3W\x3W\x3W\x3W\x5"+
		"W\x596\nW\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x5X\x5A0\nX\x5X\x5A2\nX\x3Y"+
		"\x3Y\x3Y\x3Y\aY\x5A8\nY\fY\xEY\x5AB\vY\x3Y\x3Y\x3Y\x3Y\x5Y\x5B1\nY\x3"+
		"Z\x3Z\x3Z\x3Z\aZ\x5B7\nZ\fZ\xEZ\x5BA\vZ\x3Z\x3Z\x3[\x3[\x3\\\x3\\\x3\\"+
		"\x3\\\a\\\x5C4\n\\\f\\\xE\\\x5C7\v\\\x3\\\x3\\\x3\\\x3\\\x5\\\x5CD\n\\"+
		"\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x5\\\x5D5\n\\\x5\\\x5D7\n\\\x3]\x3]\x5"+
		"]\x5DB\n]\x3]\x3]\x5]\x5DF\n]\x3]\x3]\x3]\x3]\x3]\x5]\x5E6\n]\x3]\x5]"+
		"\x5E9\n]\x3]\x3]\x5]\x5ED\n]\x3^\x3^\x5^\x5F1\n^\x3_\x3_\x3_\a_\x5F6\n"+
		"_\f_\xE_\x5F9\v_\x3`\x3`\x3`\a`\x5FE\n`\f`\xE`\x601\v`\x3\x61\x3\x61\x3"+
		"\x61\x3\x61\x3\x61\x5\x61\x608\n\x61\x5\x61\x60A\n\x61\x3\x61\x5\x61\x60D"+
		"\n\x61\x3\x61\x5\x61\x610\n\x61\x3\x61\x3\x61\x3\x61\x5\x61\x615\n\x61"+
		"\x5\x61\x617\n\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x61E\n\x61"+
		"\x5\x61\x620\n\x61\x3\x61\x5\x61\x623\n\x61\x3\x61\x5\x61\x626\n\x61\x3"+
		"\x61\x5\x61\x629\n\x61\x3\x61\x3\x61\x3\x61\x5\x61\x62E\n\x61\x5\x61\x630"+
		"\n\x61\x5\x61\x632\n\x61\x3\x62\x3\x62\x3\x62\a\x62\x637\n\x62\f\x62\xE"+
		"\x62\x63A\v\x62\x3\x63\x3\x63\x5\x63\x63E\n\x63\x3\x63\x3\x63\x3\x63\x3"+
		"\x63\x3\x63\x3\x63\x3\x63\x5\x63\x647\n\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x5\x63\x64D\n\x63\x5\x63\x64F\n\x63\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x5\x65\x657\n\x65\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x6\x66\x660\n\x66\r\x66\xE\x66\x661\x3\x66\x3\x66\x3\x66\x5\x66\x667"+
		"\n\x66\x3g\x3g\x5g\x66B\ng\x3g\x3g\x3g\x3h\x3h\x5h\x672\nh\x3h\x3h\x3"+
		"h\x3h\x3h\x3i\x3i\x3i\x3i\x3i\x3i\x5i\x67F\ni\x3j\x3j\x3j\x3j\x3j\x3j"+
		"\x3j\x5j\x688\nj\x3k\x3k\x5k\x68C\nk\x3k\x3k\x3k\x3k\x3k\ak\x693\nk\f"+
		"k\xEk\x696\vk\x3k\x5k\x699\nk\x3k\ak\x69C\nk\fk\xEk\x69F\vk\x3k\ak\x6A2"+
		"\nk\fk\xEk\x6A5\vk\x3k\x5k\x6A8\nk\x3k\x5k\x6AB\nk\x3k\x3k\x3k\x3k\x5"+
		"k\x6B1\nk\x5k\x6B3\nk\x3l\x3l\x3l\x3l\x3l\x5l\x6BA\nl\x3l\x3l\x3l\x3l"+
		"\x3l\x5l\x6C1\nl\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x5"+
		"l\x6D0\nl\x5l\x6D2\nl\x3m\x3m\x3m\x5m\x6D7\nm\x3n\x3n\x3n\an\x6DC\nn\f"+
		"n\xEn\x6DF\vn\x3o\x3o\x3o\x3o\ao\x6E5\no\fo\xEo\x6E8\vo\x3o\x3o\x3o\x3"+
		"o\ao\x6EE\no\fo\xEo\x6F1\vo\x5o\x6F3\no\x3p\x3p\x3p\x5p\x6F8\np\x3p\a"+
		"p\x6FB\np\fp\xEp\x6FE\vp\x3p\x3p\x3p\ap\x703\np\fp\xEp\x706\vp\x5p\x708"+
		"\np\x3q\x3q\x5q\x70C\nq\x3q\x3q\x5q\x710\nq\x3q\x5q\x713\nq\x3q\x5q\x716"+
		"\nq\x3q\aq\x719\nq\fq\xEq\x71C\vq\x3q\aq\x71F\nq\fq\xEq\x722\vq\x3q\x5"+
		"q\x725\nq\x3q\x5q\x728\nq\x3q\x5q\x72B\nq\x3q\x5q\x72E\nq\x3q\x5q\x731"+
		"\nq\x3q\x5q\x734\nq\x3q\x3q\x3q\x3q\x5q\x73A\nq\x3r\x3r\x3r\x3r\x3r\x5"+
		"r\x741\nr\x3s\x3s\x3s\as\x746\ns\fs\xEs\x749\vs\x3t\x3t\x3t\x3t\x5t\x74F"+
		"\nt\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x5u\x759\nu\x3u\x5u\x75C\nu\x3v\x5"+
		"v\x75F\nv\x3v\x3v\x3v\x5v\x764\nv\x3v\x3v\x3v\x3v\x3v\x5v\x76B\nv\x3w"+
		"\x3w\x3w\x3w\x3x\x3x\x3x\ax\x774\nx\fx\xEx\x777\vx\x3y\x5y\x77A\ny\x3"+
		"y\x3y\x5y\x77E\ny\x3y\x5y\x781\ny\x3y\x5y\x784\ny\x3y\x3y\x3y\x3y\x3y"+
		"\x5y\x78B\ny\x3y\x3y\x3y\x3y\x5y\x791\ny\x3y\x5y\x794\ny\x3y\x3y\x3y\x3"+
		"y\x5y\x79A\ny\x3z\x3z\x3z\x3z\x3z\az\x7A1\nz\fz\xEz\x7A4\vz\x3z\x3z\x3"+
		"{\x3{\x5{\x7AA\n{\x3{\x3{\x3{\x3{\x3{\x3{\x3{\x3{\x3{\x5{\x7B5\n{\x3|"+
		"\x3|\x3|\x3|\x3|\x3|\x3|\a|\x7BE\n|\f|\xE|\x7C1\v|\x3|\x3|\x3|\x3|\x3"+
		"|\a|\x7C8\n|\f|\xE|\x7CB\v|\x6|\x7CD\n|\r|\xE|\x7CE\x3|\x3|\x3}\x3}\x3"+
		"}\x3~\x3~\x3~\x3~\a~\x7DA\n~\f~\xE~\x7DD\v~\x3\x7F\x3\x7F\x6\x7F\x7E1"+
		"\n\x7F\r\x7F\xE\x7F\x7E2\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\a\x80\x7EA"+
		"\n\x80\f\x80\xE\x80\x7ED\v\x80\x3\x81\x3\x81\x5\x81\x7F1\n\x81\x3\x82"+
		"\x3\x82\x3\x82\x3\x83\x5\x83\x7F7\n\x83\x3\x83\x3\x83\x3\x83\x3\x83\a"+
		"\x83\x7FD\n\x83\f\x83\xE\x83\x800\v\x83\x3\x83\x5\x83\x803\n\x83\x3\x83"+
		"\x3\x83\x5\x83\x807\n\x83\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3"+
		"\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x5\x84\x815\n\x84\x3\x85\x3\x85"+
		"\x3\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\a\x86\x81F\n\x86\f\x86\xE\x86"+
		"\x822\v\x86\x3\x87\x3\x87\x5\x87\x826\n\x87\x3\x87\x5\x87\x829\n\x87\x3"+
		"\x88\x3\x88\x5\x88\x82D\n\x88\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88"+
		"\x3\x88\x3\x88\x3\x88\x5\x88\x838\n\x88\x3\x88\x3\x88\x3\x88\x3\x88\x3"+
		"\x88\x3\x88\x3\x88\x5\x88\x841\n\x88\x3\x88\x3\x88\x5\x88\x845\n\x88\x3"+
		"\x88\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88\x5\x88\x850"+
		"\n\x88\x3\x88\x3\x88\x6\x88\x854\n\x88\r\x88\xE\x88\x855\x3\x88\x3\x88"+
		"\x3\x88\x3\x88\x3\x88\x5\x88\x85D\n\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3"+
		"\x89\a\x89\x864\n\x89\f\x89\xE\x89\x867\v\x89\x3\x89\x5\x89\x86A\n\x89"+
		"\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x5\x8A\x871\n\x8A\x3\x8A\x3\x8A\x3"+
		"\x8A\x3\x8A\a\x8A\x877\n\x8A\f\x8A\xE\x8A\x87A\v\x8A\x3\x8B\x3\x8B\x5"+
		"\x8B\x87E\n\x8B\x3\x8B\x3\x8B\x5\x8B\x882\n\x8B\x3\x8B\x5\x8B\x885\n\x8B"+
		"\x3\x8B\x5\x8B\x888\n\x8B\x5\x8B\x88A\n\x8B\x3\x8C\x3\x8C\x3\x8C\x5\x8C"+
		"\x88F\n\x8C\x3\x8C\x5\x8C\x892\n\x8C\x3\x8C\x5\x8C\x895\n\x8C\x3\x8D\x3"+
		"\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\x89D\n\x8D\x3\x8E\x3\x8E\x5\x8E"+
		"\x8A1\n\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\x8A7\n\x8F\x3\x8F\x3\x8F"+
		"\x3\x8F\x5\x8F\x8AC\n\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3"+
		"\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\x8B9\n\x8F\x5\x8F\x8BB\n\x8F\x3"+
		"\x8F\x5\x8F\x8BE\n\x8F\x3\x8F\x5\x8F\x8C1\n\x8F\x3\x90\x3\x90\x3\x90\x3"+
		"\x90\x3\x90\x3\x90\x3\x90\x5\x90\x8CA\n\x90\x3\x91\x3\x91\x5\x91\x8CE"+
		"\n\x91\x3\x92\x3\x92\x5\x92\x8D2\n\x92\x3\x93\x3\x93\x3\x93\x5\x93\x8D7"+
		"\n\x93\x3\x93\x3\x93\x3\x94\x3\x94\x3\x94\x5\x94\x8DE\n\x94\x3\x94\x3"+
		"\x94\x3\x94\x3\x94\x5\x94\x8E4\n\x94\x3\x94\x5\x94\x8E7\n\x94\x3\x95\x3"+
		"\x95\x3\x95\a\x95\x8EC\n\x95\f\x95\xE\x95\x8EF\v\x95\x3\x96\x3\x96\x3"+
		"\x96\x5\x96\x8F4\n\x96\x3\x96\x3\x96\x5\x96\x8F8\n\x96\x5\x96\x8FA\n\x96"+
		"\x3\x97\x3\x97\x3\x97\x5\x97\x8FF\n\x97\x3\x97\x3\x97\x3\x98\x3\x98\x5"+
		"\x98\x905\n\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\x90C\n\x98\x3"+
		"\x99\x3\x99\x3\x99\x3\x99\x3\x99\x5\x99\x913\n\x99\x3\x99\x5\x99\x916"+
		"\n\x99\x3\x99\x5\x99\x919\n\x99\x3\x9A\x3\x9A\x3\x9B\x5\x9B\x91E\n\x9B"+
		"\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x5\x9C\x927\n\x9C\x3"+
		"\x9C\x3\x9C\x5\x9C\x92B\n\x9C\x3\x9D\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x3\x9F"+
		"\x3\x9F\x3\x9F\a\x9F\x935\n\x9F\f\x9F\xE\x9F\x938\v\x9F\x3\xA0\x3\xA0"+
		"\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\x943\n\xA0\x3"+
		"\xA1\x3\xA1\x5\xA1\x947\n\xA1\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x5\xA3\x94D"+
		"\n\xA3\x3\xA4\x3\xA4\x5\xA4\x951\n\xA4\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x5"+
		"\xA5\x957\n\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA8\x3\xA8"+
		"\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x967\n\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x5\xA8\x96C\n\xA8\x3\xA8\x5\xA8\x96F\n\xA8\x3\xA8\x3\xA8\x5"+
		"\xA8\x973\n\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\a\xA8\x979\n\xA8\f\xA8\xE"+
		"\xA8\x97C\v\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xAA\x3\xAA\x3\xAB\x3\xAB\x3\xAB"+
		"\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3\xAD\x2\x2\f>@\x42\x44\x46HJLNT\xAE\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34"+
		"\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2"+
		"P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2"+
		"n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2"+
		"\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2"+
		"\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2"+
		"\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2"+
		"\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2"+
		"\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2"+
		"\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2"+
		"\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112"+
		"\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124"+
		"\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136"+
		"\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148"+
		"\x2\x14A\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x2"+
		"\x11\x3\x2\x98\x99\x3\x2gh\x3\x2\x8B\x8C\x3\x2\x37\x38\x3\x2\xC5\xC6\x3"+
		"\x2vw\x4\x2\v\v\r\r\x3\x2\x42\x43\x4\x2\xAE\xB5\xBB\xBB\x3\x2\x7F\x81"+
		"\x3\x2}~\x3\x2{|\x3\x2\x82\x85\x3\x2\x16\x17\x3\x2\xE\xA6\xA9D\x2\x15A"+
		"\x3\x2\x2\x2\x4\x163\x3\x2\x2\x2\x6\x165\x3\x2\x2\x2\b\x16E\x3\x2\x2\x2"+
		"\n\x17B\x3\x2\x2\x2\f\x181\x3\x2\x2\x2\xE\x1B0\x3\x2\x2\x2\x10\x1B2\x3"+
		"\x2\x2\x2\x12\x1B6\x3\x2\x2\x2\x14\x1C2\x3\x2\x2\x2\x16\x1CA\x3\x2\x2"+
		"\x2\x18\x1EC\x3\x2\x2\x2\x1A\x1EE\x3\x2\x2\x2\x1C\x1F3\x3\x2\x2\x2\x1E"+
		"\x207\x3\x2\x2\x2 \x211\x3\x2\x2\x2\"\x22E\x3\x2\x2\x2$\x233\x3\x2\x2"+
		"\x2&\x23F\x3\x2\x2\x2(\x247\x3\x2\x2\x2*\x24B\x3\x2\x2\x2,\x254\x3\x2"+
		"\x2\x2.\x258\x3\x2\x2\x2\x30\x264\x3\x2\x2\x2\x32\x276\x3\x2\x2\x2\x34"+
		"\x278\x3\x2\x2\x2\x36\x2B6\x3\x2\x2\x2\x38\x2BA\x3\x2\x2\x2:\x2BC\x3\x2"+
		"\x2\x2<\x2C7\x3\x2\x2\x2>\x2C9\x3\x2\x2\x2@\x2D7\x3\x2\x2\x2\x42\x2E5"+
		"\x3\x2\x2\x2\x44\x2F6\x3\x2\x2\x2\x46\x301\x3\x2\x2\x2H\x30C\x3\x2\x2"+
		"\x2J\x31D\x3\x2\x2\x2L\x343\x3\x2\x2\x2N\x351\x3\x2\x2\x2P\x367\x3\x2"+
		"\x2\x2R\x36C\x3\x2\x2\x2T\x36E\x3\x2\x2\x2V\x392\x3\x2\x2\x2X\x39C\x3"+
		"\x2\x2\x2Z\x3AF\x3\x2\x2\x2\\\x3B1\x3\x2\x2\x2^\x3B6\x3\x2\x2\x2`\x3B9"+
		"\x3\x2\x2\x2\x62\x3C5\x3\x2\x2\x2\x64\x3C7\x3\x2\x2\x2\x66\x3DC\x3\x2"+
		"\x2\x2h\x3ED\x3\x2\x2\x2j\x3F1\x3\x2\x2\x2l\x3FB\x3\x2\x2\x2n\x406\x3"+
		"\x2\x2\x2p\x415\x3\x2\x2\x2r\x417\x3\x2\x2\x2t\x420\x3\x2\x2\x2v\x435"+
		"\x3\x2\x2\x2x\x443\x3\x2\x2\x2z\x445\x3\x2\x2\x2|\x45C\x3\x2\x2\x2~\x45E"+
		"\x3\x2\x2\x2\x80\x476\x3\x2\x2\x2\x82\x478\x3\x2\x2\x2\x84\x47A\x3\x2"+
		"\x2\x2\x86\x483\x3\x2\x2\x2\x88\x497\x3\x2\x2\x2\x8A\x4A6\x3\x2\x2\x2"+
		"\x8C\x4D8\x3\x2\x2\x2\x8E\x4DA\x3\x2\x2\x2\x90\x4DE\x3\x2\x2\x2\x92\x4E5"+
		"\x3\x2\x2\x2\x94\x4E9\x3\x2\x2\x2\x96\x4FF\x3\x2\x2\x2\x98\x501\x3\x2"+
		"\x2\x2\x9A\x50C\x3\x2\x2\x2\x9C\x513\x3\x2\x2\x2\x9E\x54D\x3\x2\x2\x2"+
		"\xA0\x550\x3\x2\x2\x2\xA2\x55B\x3\x2\x2\x2\xA4\x565\x3\x2\x2\x2\xA6\x56A"+
		"\x3\x2\x2\x2\xA8\x575\x3\x2\x2\x2\xAA\x581\x3\x2\x2\x2\xAC\x589\x3\x2"+
		"\x2\x2\xAE\x597\x3\x2\x2\x2\xB0\x5B0\x3\x2\x2\x2\xB2\x5B2\x3\x2\x2\x2"+
		"\xB4\x5BD\x3\x2\x2\x2\xB6\x5D6\x3\x2\x2\x2\xB8\x5D8\x3\x2\x2\x2\xBA\x5F0"+
		"\x3\x2\x2\x2\xBC\x5F2\x3\x2\x2\x2\xBE\x5FA\x3\x2\x2\x2\xC0\x631\x3\x2"+
		"\x2\x2\xC2\x633\x3\x2\x2\x2\xC4\x64E\x3\x2\x2\x2\xC6\x650\x3\x2\x2\x2"+
		"\xC8\x652\x3\x2\x2\x2\xCA\x666\x3\x2\x2\x2\xCC\x668\x3\x2\x2\x2\xCE\x66F"+
		"\x3\x2\x2\x2\xD0\x67E\x3\x2\x2\x2\xD2\x680\x3\x2\x2\x2\xD4\x6B2\x3\x2"+
		"\x2\x2\xD6\x6D1\x3\x2\x2\x2\xD8\x6D6\x3\x2\x2\x2\xDA\x6D8\x3\x2\x2\x2"+
		"\xDC\x6E0\x3\x2\x2\x2\xDE\x707\x3\x2\x2\x2\xE0\x739\x3\x2\x2\x2\xE2\x73B"+
		"\x3\x2\x2\x2\xE4\x742\x3\x2\x2\x2\xE6\x74A\x3\x2\x2\x2\xE8\x750\x3\x2"+
		"\x2\x2\xEA\x75E\x3\x2\x2\x2\xEC\x76C\x3\x2\x2\x2\xEE\x770\x3\x2\x2\x2"+
		"\xF0\x799\x3\x2\x2\x2\xF2\x79B\x3\x2\x2\x2\xF4\x7B4\x3\x2\x2\x2\xF6\x7B6"+
		"\x3\x2\x2\x2\xF8\x7D2\x3\x2\x2\x2\xFA\x7D5\x3\x2\x2\x2\xFC\x7E0\x3\x2"+
		"\x2\x2\xFE\x7E4\x3\x2\x2\x2\x100\x7F0\x3\x2\x2\x2\x102\x7F2\x3\x2\x2\x2"+
		"\x104\x806\x3\x2\x2\x2\x106\x814\x3\x2\x2\x2\x108\x816\x3\x2\x2\x2\x10A"+
		"\x819\x3\x2\x2\x2\x10C\x825\x3\x2\x2\x2\x10E\x82A\x3\x2\x2\x2\x110\x869"+
		"\x3\x2\x2\x2\x112\x86B\x3\x2\x2\x2\x114\x889\x3\x2\x2\x2\x116\x88E\x3"+
		"\x2\x2\x2\x118\x89C\x3\x2\x2\x2\x11A\x89E\x3\x2\x2\x2\x11C\x8BA\x3\x2"+
		"\x2\x2\x11E\x8C9\x3\x2\x2\x2\x120\x8CD\x3\x2\x2\x2\x122\x8D1\x3\x2\x2"+
		"\x2\x124\x8D3\x3\x2\x2\x2\x126\x8DA\x3\x2\x2\x2\x128\x8E8\x3\x2\x2\x2"+
		"\x12A\x8F9\x3\x2\x2\x2\x12C\x8FB\x3\x2\x2\x2\x12E\x90B\x3\x2\x2\x2\x130"+
		"\x918\x3\x2\x2\x2\x132\x91A\x3\x2\x2\x2\x134\x91D\x3\x2\x2\x2\x136\x921"+
		"\x3\x2\x2\x2\x138\x92C\x3\x2\x2\x2\x13A\x92F\x3\x2\x2\x2\x13C\x931\x3"+
		"\x2\x2\x2\x13E\x942\x3\x2\x2\x2\x140\x946\x3\x2\x2\x2\x142\x948\x3\x2"+
		"\x2\x2\x144\x94C\x3\x2\x2\x2\x146\x950\x3\x2\x2\x2\x148\x956\x3\x2\x2"+
		"\x2\x14A\x958\x3\x2\x2\x2\x14C\x95B\x3\x2\x2\x2\x14E\x95E\x3\x2\x2\x2"+
		"\x150\x97D\x3\x2\x2\x2\x152\x980\x3\x2\x2\x2\x154\x982\x3\x2\x2\x2\x156"+
		"\x985\x3\x2\x2\x2\x158\x987\x3\x2\x2\x2\x15A\x15B\x5\x86\x44\x2\x15B\x15C"+
		"\a\x2\x2\x3\x15C\x3\x3\x2\x2\x2\x15D\x15E\aR\x2\x2\x15E\x15F\a\x18\x2"+
		"\x2\x15F\x164\x5p\x39\x2\x160\x161\aR\x2\x2\x161\x162\a\x18\x2\x2\x162"+
		"\x164\x5v<\x2\x163\x15D\x3\x2\x2\x2\x163\x160\x3\x2\x2\x2\x164\x5\x3\x2"+
		"\x2\x2\x165\x166\aP\x2\x2\x166\x167\a\x18\x2\x2\x167\x16C\x5\x114\x8B"+
		"\x2\x168\x16D\x5\b\x5\x2\x169\x16D\x5\f\a\x2\x16A\x16D\x5\n\x6\x2\x16B"+
		"\x16D\x5\x10\t\x2\x16C\x168\x3\x2\x2\x2\x16C\x169\x3\x2\x2\x2\x16C\x16A"+
		"\x3\x2\x2\x2\x16C\x16B\x3\x2\x2\x2\x16D\a\x3\x2\x2\x2\x16E\x16F\a?\x2"+
		"\x2\x16F\x172\a\x1A\x2\x2\x170\x173\x5l\x37\x2\x171\x173\x5x=\x2\x172"+
		"\x170\x3\x2\x2\x2\x172\x171\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x175"+
		"\a\x66\x2\x2\x175\x176\x5\xC6\x64\x2\x176\x179\a\x1A\x2\x2\x177\x17A\x5"+
		"l\x37\x2\x178\x17A\x5x=\x2\x179\x177\x3\x2\x2\x2\x179\x178\x3\x2\x2\x2"+
		"\x17A\t\x3\x2\x2\x2\x17B\x17C\aR\x2\x2\x17C\x17D\a\x1D\x2\x2\x17D\x17F"+
		"\x5p\x39\x2\x17E\x180\x5\x18\r\x2\x17F\x17E\x3\x2\x2\x2\x17F\x180\x3\x2"+
		"\x2\x2\x180\v\x3\x2\x2\x2\x181\x182\aN\x2\x2\x182\x183\a\x1D\x2\x2\x183"+
		"\x1A5\x5p\x39\x2\x184\x185\a\x1F\x2\x2\x185\x187\a \x2\x2\x186\x188\x5"+
		"\x156\xAC\x2\x187\x186\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188\x189\x3"+
		"\x2\x2\x2\x189\x18A\a\xB7\x2\x2\x18A\x18B\x5&\x14\x2\x18B\x18D\a\xB8\x2"+
		"\x2\x18C\x18E\x5\x18\r\x2\x18D\x18C\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2"+
		"\x18E\x191\x3\x2\x2\x2\x18F\x190\ag\x2\x2\x190\x192\x5\xE\b\x2\x191\x18F"+
		"\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2\x192\x1A6\x3\x2\x2\x2\x193\x194\aZ"+
		"\x2\x2\x194\x195\a\xB7\x2\x2\x195\x196\x5h\x35\x2\x196\x197\a\xB8\x2\x2"+
		"\x197\x198\aU\x2\x2\x198\x199\x5p\x39\x2\x199\x1A6\x3\x2\x2\x2\x19A\x19B"+
		"\a\x1E\x2\x2\x19B\x19C\a \x2\x2\x19C\x19D\a\xB7\x2\x2\x19D\x19E\x5\xBC"+
		"_\x2\x19E\x19F\a\xB8\x2\x2\x19F\x1A0\a!\x2\x2\x1A0\x1A1\x5\x11C\x8F\x2"+
		"\x1A1\x1A2\a\xB7\x2\x2\x1A2\x1A3\x5\xBC_\x2\x1A3\x1A4\a\xB8\x2\x2\x1A4"+
		"\x1A6\x3\x2\x2\x2\x1A5\x184\x3\x2\x2\x2\x1A5\x193\x3\x2\x2\x2\x1A5\x19A"+
		"\x3\x2\x2\x2\x1A6\r\x3\x2\x2\x2\x1A7\x1B1\a\x1F\x2\x2\x1A8\x1A9\a\xB9"+
		"\x2\x2\x1A9\x1AA\a\x1F\x2\x2\x1AA\x1B1\a\xBA\x2\x2\x1AB\x1AC\x5p\x39\x2"+
		"\x1AC\x1AD\a\xB7\x2\x2\x1AD\x1AE\x5\xBC_\x2\x1AE\x1AF\a\xB8\x2\x2\x1AF"+
		"\x1B1\x3\x2\x2\x2\x1B0\x1A7\x3\x2\x2\x2\x1B0\x1A8\x3\x2\x2\x2\x1B0\x1AB"+
		"\x3\x2\x2\x2\x1B1\xF\x3\x2\x2\x2\x1B2\x1B3\t\x2\x2\x2\x1B3\x1B4\a\x9A"+
		"\x2\x2\x1B4\x1B5\x5p\x39\x2\x1B5\x11\x3\x2\x2\x2\x1B6\x1B7\aP\x2\x2\x1B7"+
		"\x1BA\a\x1B\x2\x2\x1B8\x1BB\x5p\x39\x2\x1B9\x1BB\a\x45\x2\x2\x1BA\x1B8"+
		"\x3\x2\x2\x2\x1BA\x1B9\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BD\ag"+
		"\x2\x2\x1BD\x1BE\x5p\x39\x2\x1BE\x1C0\x5p\x39\x2\x1BF\x1C1\x5\x18\r\x2"+
		"\x1C0\x1BF\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x13\x3\x2\x2\x2\x1C2"+
		"\x1C3\aP\x2\x2\x1C3\x1C4\a\x1A\x2\x2\x1C4\x1C5\a\xA3\x2\x2\x1C5\x1C6\x5"+
		"p\x39\x2\x1C6\x1C7\a\x30\x2\x2\x1C7\x1C8\a\xA4\x2\x2\x1C8\x1C9\x5\xE\b"+
		"\x2\x1C9\x15\x3\x2\x2\x2\x1CA\x1CB\aP\x2\x2\x1CB\x1CC\a\x1A\x2\x2\x1CC"+
		"\x1CD\a\xA2\x2\x2\x1CD\x1CE\x5\x122\x92\x2\x1CE\x1CF\a\xB7\x2\x2\x1CF"+
		"\x1DC\a\xB8\x2\x2\x1D0\x1D1\a\x8F\x2\x2\x1D1\x1D2\a\xA1\x2\x2\x1D2\x1D3"+
		"\a\xB7\x2\x2\x1D3\x1D4\x5x=\x2\x1D4\x1D5\a\xB8\x2\x2\x1D5\x1DD\x3\x2\x2"+
		"\x2\x1D6\x1D7\a\xA0\x2\x2\x1D7\x1D8\a\xA1\x2\x2\x1D8\x1D9\a\xB7\x2\x2"+
		"\x1D9\x1DA\x5x=\x2\x1DA\x1DB\a\xB8\x2\x2\x1DB\x1DD\x3\x2\x2\x2\x1DC\x1D0"+
		"\x3\x2\x2\x2\x1DC\x1D6\x3\x2\x2\x2\x1DD\x17\x3\x2\x2\x2\x1DE\x1DF\aT\x2"+
		"\x2\x1DF\x1E0\a\xB7\x2\x2\x1E0\x1E5\x5\x1A\xE\x2\x1E1\x1E2\a\xC8\x2\x2"+
		"\x1E2\x1E4\x5\x1A\xE\x2\x1E3\x1E1\x3\x2\x2\x2\x1E4\x1E7\x3\x2\x2\x2\x1E5"+
		"\x1E3\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E8\x3\x2\x2\x2\x1E7\x1E5"+
		"\x3\x2\x2\x2\x1E8\x1E9\a\xB8\x2\x2\x1E9\x1ED\x3\x2\x2\x2\x1EA\x1EB\aT"+
		"\x2\x2\x1EB\x1ED\x5\x1A\xE\x2\x1EC\x1DE\x3\x2\x2\x2\x1EC\x1EA\x3\x2\x2"+
		"\x2\x1ED\x19\x3\x2\x2\x2\x1EE\x1F1\a\xCB\x2\x2\x1EF\x1F0\a\xBB\x2\x2\x1F0"+
		"\x1F2\t\x3\x2\x2\x1F1\x1EF\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2\x1F2\x1B"+
		"\x3\x2\x2\x2\x1F3\x1F4\aQ\x2\x2\x1F4\x1F7\a\x18\x2\x2\x1F5\x1F8\x5p\x39"+
		"\x2\x1F6\x1F8\x5v<\x2\x1F7\x1F5\x3\x2\x2\x2\x1F7\x1F6\x3\x2\x2\x2\x1F8"+
		"\x1F9\x3\x2\x2\x2\x1F9\x1FA\a\xB7\x2\x2\x1FA\x1FD\x5\xBE`\x2\x1FB\x1FC"+
		"\a\xC8\x2\x2\x1FC\x1FE\x5\xC2\x62\x2\x1FD\x1FB\x3\x2\x2\x2\x1FD\x1FE\x3"+
		"\x2\x2\x2\x1FE\x200\x3\x2\x2\x2\x1FF\x201\a\xC8\x2\x2\x200\x1FF\x3\x2"+
		"\x2\x2\x200\x201\x3\x2\x2\x2\x201\x202\x3\x2\x2\x2\x202\x205\a\xB8\x2"+
		"\x2\x203\x204\ag\x2\x2\x204\x206\x5\xE\b\x2\x205\x203\x3\x2\x2\x2\x205"+
		"\x206\x3\x2\x2\x2\x206\x1D\x3\x2\x2\x2\x207\x208\aR\x2\x2\x208\x209\a"+
		"\x1B\x2\x2\x209\x20F\x5p\x39\x2\x20A\x20B\ag\x2\x2\x20B\x20D\x5\x116\x8C"+
		"\x2\x20C\x20E\x5\x18\r\x2\x20D\x20C\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2"+
		"\x20E\x210\x3\x2\x2\x2\x20F\x20A\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210"+
		"\x1F\x3\x2\x2\x2\x211\x213\aQ\x2\x2\x212\x214\a:\x2\x2\x213\x212\x3\x2"+
		"\x2\x2\x213\x214\x3\x2\x2\x2\x214\x216\x3\x2\x2\x2\x215\x217\x5\x156\xAC"+
		"\x2\x216\x215\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2"+
		"\x218\x21B\a\x1B\x2\x2\x219\x21C\x5p\x39\x2\x21A\x21C\x5t;\x2\x21B\x219"+
		"\x3\x2\x2\x2\x21B\x21A\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x21E\ag"+
		"\x2\x2\x21E\x21F\x5\x116\x8C\x2\x21F\x220\a\xB7\x2\x2\x220\x221\x5&\x14"+
		"\x2\x221\x223\a\xB8\x2\x2\x222\x224\x5\"\x12\x2\x223\x222\x3\x2\x2\x2"+
		"\x223\x224\x3\x2\x2\x2\x224\x226\x3\x2\x2\x2\x225\x227\x5\x108\x85\x2"+
		"\x226\x225\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227\x229\x3\x2\x2\x2\x228"+
		"\x22A\x5\x18\r\x2\x229\x228\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2\x22A\x22C"+
		"\x3\x2\x2\x2\x22B\x22D\x5$\x13\x2\x22C\x22B\x3\x2\x2\x2\x22C\x22D\x3\x2"+
		"\x2\x2\x22D!\x3\x2\x2\x2\x22E\x22F\a\x41\x2\x2\x22F\x230\a\xB7\x2\x2\x230"+
		"\x231\x5\xBC_\x2\x231\x232\a\xB8\x2\x2\x232#\x3\x2\x2\x2\x233\x23D\ag"+
		"\x2\x2\x234\x235\x5p\x39\x2\x235\x236\a\xB7\x2\x2\x236\x237\x5\xBC_\x2"+
		"\x237\x238\a\xB8\x2\x2\x238\x23E\x3\x2\x2\x2\x239\x23A\a\xB9\x2\x2\x23A"+
		"\x23B\a\x1F\x2\x2\x23B\x23E\a\xBA\x2\x2\x23C\x23E\a\x1F\x2\x2\x23D\x234"+
		"\x3\x2\x2\x2\x23D\x239\x3\x2\x2\x2\x23D\x23C\x3\x2\x2\x2\x23E%\x3\x2\x2"+
		"\x2\x23F\x244\x5(\x15\x2\x240\x241\a\xC8\x2\x2\x241\x243\x5(\x15\x2\x242"+
		"\x240\x3\x2\x2\x2\x243\x246\x3\x2\x2\x2\x244\x242\x3\x2\x2\x2\x244\x245"+
		"\x3\x2\x2\x2\x245\'\x3\x2\x2\x2\x246\x244\x3\x2\x2\x2\x247\x249\x5\x142"+
		"\xA2\x2\x248\x24A\t\x4\x2\x2\x249\x248\x3\x2\x2\x2\x249\x24A\x3\x2\x2"+
		"\x2\x24A)\x3\x2\x2\x2\x24B\x24C\aQ\x2\x2\x24C\x24D\a\x8D\x2\x2\x24D\x24E"+
		"\x5p\x39\x2\x24E\x24F\ag\x2\x2\x24F\x250\x5\x116\x8C\x2\x250\x251\a\xB7"+
		"\x2\x2\x251\x252\x5\x13C\x9F\x2\x252\x253\a\xB8\x2\x2\x253+\x3\x2\x2\x2"+
		"\x254\x255\aR\x2\x2\x255\x256\a\x19\x2\x2\x256\x257\x5p\x39\x2\x257-\x3"+
		"\x2\x2\x2\x258\x259\aQ\x2\x2\x259\x25A\a\x19\x2\x2\x25A\x25C\x5p\x39\x2"+
		"\x25B\x25D\x5|?\x2\x25C\x25B\x3\x2\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25F"+
		"\x3\x2\x2\x2\x25E\x260\x5\x84\x43\x2\x25F\x25E\x3\x2\x2\x2\x25F\x260\x3"+
		"\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x262\aS\x2\x2\x262\x263\x5z>\x2\x263"+
		"/\x3\x2\x2\x2\x264\x265\aM\x2\x2\x265\x266\a\x18\x2\x2\x266\x267\x5\x116"+
		"\x8C\x2\x267\x31\x3\x2\x2\x2\x268\x269\a\x3\x2\x2\x269\x270\a\xCB\x2\x2"+
		"\x26A\x271\x5\x38\x1D\x2\x26B\x26D\a\xB7\x2\x2\x26C\x26E\x5\xDAn\x2\x26D"+
		"\x26C\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x271"+
		"\a\xB8\x2\x2\x270\x26A\x3\x2\x2\x2\x270\x26B\x3\x2\x2\x2\x271\x273\x3"+
		"\x2\x2\x2\x272\x274\x5\x18\r\x2\x273\x272\x3\x2\x2\x2\x273\x274\x3\x2"+
		"\x2\x2\x274\x277\x3\x2\x2\x2\x275\x277\a\t\x2\x2\x276\x268\x3\x2\x2\x2"+
		"\x276\x275\x3\x2\x2\x2\x277\x33\x3\x2\x2\x2\x278\x279\x5\x38\x1D\x2\x279"+
		"\x35\x3\x2\x2\x2\x27A\x2B7\x5h\x35\x2\x27B\x27D\x5\x13E\xA0\x2\x27C\x27E"+
		"\x5\x154\xAB\x2\x27D\x27C\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E\x2B7"+
		"\x3\x2\x2\x2\x27F\x281\x5x=\x2\x280\x282\x5\x154\xAB\x2\x281\x280\x3\x2"+
		"\x2\x2\x281\x282\x3\x2\x2\x2\x282\x2B7\x3\x2\x2\x2\x283\x2B7\x5:\x1E\x2"+
		"\x284\x2B7\x5\x124\x93\x2\x285\x286\a\x34\x2\x2\x286\x287\a\xB7\x2\x2"+
		"\x287\x288\x5\x38\x1D\x2\x288\x289\aS\x2\x2\x289\x28A\x5\x62\x32\x2\x28A"+
		"\x28B\a\xB8\x2\x2\x28B\x2B7\x3\x2\x2\x2\x28C\x293\t\x5\x2\x2\x28D\x294"+
		"\x5X-\x2\x28E\x28F\a\xB7\x2\x2\x28F\x290\a\x39\x2\x2\x290\x291\x5X-\x2"+
		"\x291\x292\a\xB8\x2\x2\x292\x294\x3\x2\x2\x2\x293\x28D\x3\x2\x2\x2\x293"+
		"\x28E\x3\x2\x2\x2\x294\x2B7\x3\x2\x2\x2\x295\x296\aY\x2\x2\x296\x297\a"+
		"\xB7\x2\x2\x297\x298\x5\xDEp\x2\x298\x299\a\xB8\x2\x2\x299\x2B7\x3\x2"+
		"\x2\x2\x29A\x29C\a\x33\x2\x2\x29B\x29D\x5\\/\x2\x29C\x29B\x3\x2\x2\x2"+
		"\x29D\x29E\x3\x2\x2\x2\x29E\x29C\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F"+
		"\x2A1\x3\x2\x2\x2\x2A0\x2A2\x5^\x30\x2\x2A1\x2A0\x3\x2\x2\x2\x2A1\x2A2"+
		"\x3\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A4\aX\x2\x2\x2A4\x2B7\x3\x2"+
		"\x2\x2\x2A5\x2A6\a\x33\x2\x2\x2A6\x2A8\x5\x38\x1D\x2\x2A7\x2A9\x5\\/\x2"+
		"\x2A8\x2A7\x3\x2\x2\x2\x2A9\x2AA\x3\x2\x2\x2\x2AA\x2A8\x3\x2\x2\x2\x2AA"+
		"\x2AB\x3\x2\x2\x2\x2AB\x2AD\x3\x2\x2\x2\x2AC\x2AE\x5^\x30\x2\x2AD\x2AC"+
		"\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x2B0\aX"+
		"\x2\x2\x2B0\x2B7\x3\x2\x2\x2\x2B1\x2B2\a\xB7\x2\x2\x2B2\x2B3\x5\x38\x1D"+
		"\x2\x2B3\x2B4\a\xB8\x2\x2\x2B4\x2B7\x3\x2\x2\x2\x2B5\x2B7\x5`\x31\x2\x2B6"+
		"\x27A\x3\x2\x2\x2\x2B6\x27B\x3\x2\x2\x2\x2B6\x27F\x3\x2\x2\x2\x2B6\x283"+
		"\x3\x2\x2\x2\x2B6\x284\x3\x2\x2\x2\x2B6\x285\x3\x2\x2\x2\x2B6\x28C\x3"+
		"\x2\x2\x2\x2B6\x295\x3\x2\x2\x2\x2B6\x29A\x3\x2\x2\x2\x2B6\x2A5\x3\x2"+
		"\x2\x2\x2B6\x2B1\x3\x2\x2\x2\x2B6\x2B5\x3\x2\x2\x2\x2B7\x37\x3\x2\x2\x2"+
		"\x2B8\x2BB\x5\x36\x1C\x2\x2B9\x2BB\x5<\x1F\x2\x2BA\x2B8\x3\x2\x2\x2\x2BA"+
		"\x2B9\x3\x2\x2\x2\x2BB\x39\x3\x2\x2\x2\x2BC\x2BD\a\x35\x2\x2\x2BD\x2BE"+
		"\a\xB7\x2\x2\x2BE\x2BF\x5\x62\x32\x2\x2BF\x2C0\a\xC8\x2\x2\x2C0\x2C3\x5"+
		"\x38\x1D\x2\x2C1\x2C2\a\xC8\x2\x2\x2C2\x2C4\x5l\x37\x2\x2C3\x2C1\x3\x2"+
		"\x2\x2\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2C6\a\xB8\x2"+
		"\x2\x2C6;\x3\x2\x2\x2\x2C7\x2C8\x5> \x2\x2C8=\x3\x2\x2\x2\x2C9\x2CA\b"+
		" \x1\x2\x2CA\x2CB\x5@!\x2\x2CB\x2D4\x3\x2\x2\x2\x2CC\x2CD\f\x4\x2\x2\x2CD"+
		"\x2CE\a\x8A\x2\x2\x2CE\x2D3\x5@!\x2\x2CF\x2D0\f\x3\x2\x2\x2D0\x2D1\a\x4"+
		"\x2\x2\x2D1\x2D3\x5@!\x2\x2D2\x2CC\x3\x2\x2\x2\x2D2\x2CF\x3\x2\x2\x2\x2D3"+
		"\x2D6\x3\x2\x2\x2\x2D4\x2D2\x3\x2\x2\x2\x2D4\x2D5\x3\x2\x2\x2\x2D5?\x3"+
		"\x2\x2\x2\x2D6\x2D4\x3\x2\x2\x2\x2D7\x2D8\b!\x1\x2\x2D8\x2D9\x5\x42\""+
		"\x2\x2D9\x2E2\x3\x2\x2\x2\x2DA\x2DB\f\x4\x2\x2\x2DB\x2DC\a\x89\x2\x2\x2DC"+
		"\x2E1\x5\x42\"\x2\x2DD\x2DE\f\x3\x2\x2\x2DE\x2DF\a\x5\x2\x2\x2DF\x2E1"+
		"\x5\x42\"\x2\x2E0\x2DA\x3\x2\x2\x2\x2E0\x2DD\x3\x2\x2\x2\x2E1\x2E4\x3"+
		"\x2\x2\x2\x2E2\x2E0\x3\x2\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3\x41\x3\x2\x2"+
		"\x2\x2E4\x2E2\x3\x2\x2\x2\x2E5\x2E6\b\"\x1\x2\x2E6\x2E7\x5\x44#\x2\x2E7"+
		"\x2F3\x3\x2\x2\x2\x2E8\x2E9\f\x4\x2\x2\x2E9\x2EA\a\xC2\x2\x2\x2EA\x2F2"+
		"\x5\x44#\x2\x2EB\x2EC\f\x3\x2\x2\x2EC\x2EE\ap\x2\x2\x2ED\x2EF\ar\x2\x2"+
		"\x2EE\x2ED\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0"+
		"\x2F2\as\x2\x2\x2F1\x2E8\x3\x2\x2\x2\x2F1\x2EB\x3\x2\x2\x2\x2F2\x2F5\x3"+
		"\x2\x2\x2\x2F3\x2F1\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2\x2\x2F4\x43\x3\x2\x2"+
		"\x2\x2F5\x2F3\x3\x2\x2\x2\x2F6\x2F7\b#\x1\x2\x2F7\x2F8\x5\x46$\x2\x2F8"+
		"\x2FE\x3\x2\x2\x2\x2F9\x2FA\f\x3\x2\x2\x2FA\x2FB\a\xC4\x2\x2\x2FB\x2FD"+
		"\x5\x46$\x2\x2FC\x2F9\x3\x2\x2\x2\x2FD\x300\x3\x2\x2\x2\x2FE\x2FC\x3\x2"+
		"\x2\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF\x45\x3\x2\x2\x2\x300\x2FE\x3\x2\x2\x2"+
		"\x301\x302\b$\x1\x2\x302\x303\x5H%\x2\x303\x309\x3\x2\x2\x2\x304\x305"+
		"\f\x3\x2\x2\x305\x306\a\xC1\x2\x2\x306\x308\x5H%\x2\x307\x304\x3\x2\x2"+
		"\x2\x308\x30B\x3\x2\x2\x2\x309\x307\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2"+
		"\x30AG\x3\x2\x2\x2\x30B\x309\x3\x2\x2\x2\x30C\x30D\b%\x1\x2\x30D\x30E"+
		"\x5J&\x2\x30E\x31A\x3\x2\x2\x2\x30F\x310\f\x5\x2\x2\x310\x311\a\xBB\x2"+
		"\x2\x311\x319\x5J&\x2\x312\x313\f\x4\x2\x2\x313\x314\a\xAC\x2\x2\x314"+
		"\x319\x5J&\x2\x315\x316\f\x3\x2\x2\x316\x317\a\xAD\x2\x2\x317\x319\x5"+
		"J&\x2\x318\x30F\x3\x2\x2\x2\x318\x312\x3\x2\x2\x2\x318\x315\x3\x2\x2\x2"+
		"\x319\x31C\x3\x2\x2\x2\x31A\x318\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2\x31B"+
		"I\x3\x2\x2\x2\x31C\x31A\x3\x2\x2\x2\x31D\x31E\b&\x1\x2\x31E\x31F\x5L\'"+
		"\x2\x31F\x340\x3\x2\x2\x2\x320\x321\f\v\x2\x2\x321\x322\a\xA7\x2\x2\x322"+
		"\x33F\x5L\'\x2\x323\x324\f\n\x2\x2\x324\x325\a\xA9\x2\x2\x325\x33F\x5"+
		"L\'\x2\x326\x327\f\t\x2\x2\x327\x328\a\xA8\x2\x2\x328\x33F\x5L\'\x2\x329"+
		"\x32A\f\b\x2\x2\x32A\x32B\a\xA7\x2\x2\x32B\x32C\a\xBB\x2\x2\x32C\x33F"+
		"\x5L\'\x2\x32D\x32E\f\a\x2\x2\x32E\x32F\a\xAA\x2\x2\x32F\x33F\x5L\'\x2"+
		"\x330\x331\f\x6\x2\x2\x331\x332\a\xA9\x2\x2\x332\x333\a\xBB\x2\x2\x333"+
		"\x33F\x5L\'\x2\x334\x335\f\x5\x2\x2\x335\x336\a\xAB\x2\x2\x336\x33F\x5"+
		"L\'\x2\x337\x338\f\x4\x2\x2\x338\x339\ax\x2\x2\x339\x33F\x5V,\x2\x33A"+
		"\x33B\f\x3\x2\x2\x33B\x33C\ar\x2\x2\x33C\x33D\ax\x2\x2\x33D\x33F\x5V,"+
		"\x2\x33E\x320\x3\x2\x2\x2\x33E\x323\x3\x2\x2\x2\x33E\x326\x3\x2\x2\x2"+
		"\x33E\x329\x3\x2\x2\x2\x33E\x32D\x3\x2\x2\x2\x33E\x330\x3\x2\x2\x2\x33E"+
		"\x334\x3\x2\x2\x2\x33E\x337\x3\x2\x2\x2\x33E\x33A\x3\x2\x2\x2\x33F\x342"+
		"\x3\x2\x2\x2\x340\x33E\x3\x2\x2\x2\x340\x341\x3\x2\x2\x2\x341K\x3\x2\x2"+
		"\x2\x342\x340\x3\x2\x2\x2\x343\x344\b\'\x1\x2\x344\x345\x5N(\x2\x345\x34E"+
		"\x3\x2\x2\x2\x346\x347\f\x4\x2\x2\x347\x348\a\xC5\x2\x2\x348\x34D\x5N"+
		"(\x2\x349\x34A\f\x3\x2\x2\x34A\x34B\a\xC6\x2\x2\x34B\x34D\x5N(\x2\x34C"+
		"\x346\x3\x2\x2\x2\x34C\x349\x3\x2\x2\x2\x34D\x350\x3\x2\x2\x2\x34E\x34C"+
		"\x3\x2\x2\x2\x34E\x34F\x3\x2\x2\x2\x34FM\x3\x2\x2\x2\x350\x34E\x3\x2\x2"+
		"\x2\x351\x352\b(\x1\x2\x352\x353\x5P)\x2\x353\x35F\x3\x2\x2\x2\x354\x355"+
		"\f\x5\x2\x2\x355\x356\a\xBF\x2\x2\x356\x35E\x5P)\x2\x357\x358\f\x4\x2"+
		"\x2\x358\x359\a\xC0\x2\x2\x359\x35E\x5P)\x2\x35A\x35B\f\x3\x2\x2\x35B"+
		"\x35C\a\xC3\x2\x2\x35C\x35E\x5P)\x2\x35D\x354\x3\x2\x2\x2\x35D\x357\x3"+
		"\x2\x2\x2\x35D\x35A\x3\x2\x2\x2\x35E\x361\x3\x2\x2\x2\x35F\x35D\x3\x2"+
		"\x2\x2\x35F\x360\x3\x2\x2\x2\x360O\x3\x2\x2\x2\x361\x35F\x3\x2\x2\x2\x362"+
		"\x363\a\xC5\x2\x2\x363\x368\x5P)\x2\x364\x365\a\xC6\x2\x2\x365\x368\x5"+
		"P)\x2\x366\x368\x5R*\x2\x367\x362\x3\x2\x2\x2\x367\x364\x3\x2\x2\x2\x367"+
		"\x366\x3\x2\x2\x2\x368Q\x3\x2\x2\x2\x369\x36D\x5T+\x2\x36A\x36B\ar\x2"+
		"\x2\x36B\x36D\x5P)\x2\x36C\x369\x3\x2\x2\x2\x36C\x36A\x3\x2\x2\x2\x36D"+
		"S\x3\x2\x2\x2\x36E\x36F\b+\x1\x2\x36F\x370\x5\x36\x1C\x2\x370\x389\x3"+
		"\x2\x2\x2\x371\x372\f\x6\x2\x2\x372\x373\aq\x2\x2\x373\x388\x5Z.\x2\x374"+
		"\x375\f\x5\x2\x2\x375\x376\ar\x2\x2\x376\x377\aq\x2\x2\x377\x388\x5Z."+
		"\x2\x378\x37A\f\x4\x2\x2\x379\x37B\ar\x2\x2\x37A\x379\x3\x2\x2\x2\x37A"+
		"\x37B\x3\x2\x2\x2\x37B\x37C\x3\x2\x2\x2\x37C\x37D\at\x2\x2\x37D\x37E\x5"+
		"\x38\x1D\x2\x37E\x37F\a\x89\x2\x2\x37F\x380\x5\x38\x1D\x2\x380\x388\x3"+
		"\x2\x2\x2\x381\x383\f\x3\x2\x2\x382\x384\ar\x2\x2\x383\x382\x3\x2\x2\x2"+
		"\x383\x384\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385\x386\ax\x2\x2\x386\x388"+
		"\x5V,\x2\x387\x371\x3\x2\x2\x2\x387\x374\x3\x2\x2\x2\x387\x378\x3\x2\x2"+
		"\x2\x387\x381\x3\x2\x2\x2\x388\x38B\x3\x2\x2\x2\x389\x387\x3\x2\x2\x2"+
		"\x389\x38A\x3\x2\x2\x2\x38AU\x3\x2\x2\x2\x38B\x389\x3\x2\x2\x2\x38C\x38F"+
		"\x5j\x36\x2\x38D\x38E\ay\x2\x2\x38E\x390\a\xCA\x2\x2\x38F\x38D\x3\x2\x2"+
		"\x2\x38F\x390\x3\x2\x2\x2\x390\x393\x3\x2\x2\x2\x391\x393\x5\x124\x93"+
		"\x2\x392\x38C\x3\x2\x2\x2\x392\x391\x3\x2\x2\x2\x393W\x3\x2\x2\x2\x394"+
		"\x39D\a\xBF\x2\x2\x395\x39D\x5\x13E\xA0\x2\x396\x39D\x5h\x35\x2\x397\x39D"+
		"\x5\x124\x93\x2\x398\x399\a\xB7\x2\x2\x399\x39A\x5X-\x2\x39A\x39B\a\xB8"+
		"\x2\x2\x39B\x39D\x3\x2\x2\x2\x39C\x394\x3\x2\x2\x2\x39C\x395\x3\x2\x2"+
		"\x2\x39C\x396\x3\x2\x2\x2\x39C\x397\x3\x2\x2\x2\x39C\x398\x3\x2\x2\x2"+
		"\x39DY\x3\x2\x2\x2\x39E\x39F\a\xB7\x2\x2\x39F\x3A4\x5\x38\x1D\x2\x3A0"+
		"\x3A1\a\xC8\x2\x2\x3A1\x3A3\x5\x38\x1D\x2\x3A2\x3A0\x3\x2\x2\x2\x3A3\x3A6"+
		"\x3\x2\x2\x2\x3A4\x3A2\x3\x2\x2\x2\x3A4\x3A5\x3\x2\x2\x2\x3A5\x3A7\x3"+
		"\x2\x2\x2\x3A6\x3A4\x3\x2\x2\x2\x3A7\x3A8\a\xB8\x2\x2\x3A8\x3B0\x3\x2"+
		"\x2\x2\x3A9\x3AB\x5x=\x2\x3AA\x3AC\x5\x154\xAB\x2\x3AB\x3AA\x3\x2\x2\x2"+
		"\x3AB\x3AC\x3\x2\x2\x2\x3AC\x3B0\x3\x2\x2\x2\x3AD\x3B0\x5\x124\x93\x2"+
		"\x3AE\x3B0\x5`\x31\x2\x3AF\x39E\x3\x2\x2\x2\x3AF\x3A9\x3\x2\x2\x2\x3AF"+
		"\x3AD\x3\x2\x2\x2\x3AF\x3AE\x3\x2\x2\x2\x3B0[\x3\x2\x2\x2\x3B1\x3B2\a"+
		"=\x2\x2\x3B2\x3B3\x5\x38\x1D\x2\x3B3\x3B4\a>\x2\x2\x3B4\x3B5\x5\x38\x1D"+
		"\x2\x3B5]\x3\x2\x2\x2\x3B6\x3B7\aH\x2\x2\x3B7\x3B8\x5\x38\x1D\x2\x3B8"+
		"_\x3\x2\x2\x2\x3B9\x3BA\a\xB7\x2\x2\x3BA\x3BB\x5\xDEp\x2\x3BB\x3BC\a\xB8"+
		"\x2\x2\x3BC\x61\x3\x2\x2\x2\x3BD\x3C6\x5p\x39\x2\x3BE\x3C6\x5\x12E\x98"+
		"\x2\x3BF\x3C6\x5\x130\x99\x2\x3C0\x3C6\x5\x134\x9B\x2\x3C1\x3C6\x5\x132"+
		"\x9A\x2\x3C2\x3C6\a\x93\x2\x2\x3C3\x3C6\a(\x2\x2\x3C4\x3C6\x5\x64\x33"+
		"\x2\x3C5\x3BD\x3\x2\x2\x2\x3C5\x3BE\x3\x2\x2\x2\x3C5\x3BF\x3\x2\x2\x2"+
		"\x3C5\x3C0\x3\x2\x2\x2\x3C5\x3C1\x3\x2\x2\x2\x3C5\x3C2\x3\x2\x2\x2\x3C5"+
		"\x3C3\x3\x2\x2\x2\x3C5\x3C4\x3\x2\x2\x2\x3C6\x63\x3\x2\x2\x2\x3C7\x3C8"+
		"\a\xB9\x2\x2\x3C8\x3C9\x5\x62\x32\x2\x3C9\x3CA\a\xBA\x2\x2\x3CA\x65\x3"+
		"\x2\x2\x2\x3CB\x3CC\a\xB7\x2\x2\x3CC\x3DD\a\xB8\x2\x2\x3CD\x3CE\a\xB7"+
		"\x2\x2\x3CE\x3CF\x5\xDEp\x2\x3CF\x3D0\a\xB8\x2\x2\x3D0\x3DD\x3\x2\x2\x2"+
		"\x3D1\x3D2\a\xB7\x2\x2\x3D2\x3D7\x5\x38\x1D\x2\x3D3\x3D4\a\xC8\x2\x2\x3D4"+
		"\x3D6\x5\x38\x1D\x2\x3D5\x3D3\x3\x2\x2\x2\x3D6\x3D9\x3\x2\x2\x2\x3D7\x3D5"+
		"\x3\x2\x2\x2\x3D7\x3D8\x3\x2\x2\x2\x3D8\x3DA\x3\x2\x2\x2\x3D9\x3D7\x3"+
		"\x2\x2\x2\x3DA\x3DB\a\xB8\x2\x2\x3DB\x3DD\x3\x2\x2\x2\x3DC\x3CB\x3\x2"+
		"\x2\x2\x3DC\x3CD\x3\x2\x2\x2\x3DC\x3D1\x3\x2\x2\x2\x3DDg\x3\x2\x2\x2\x3DE"+
		"\x3EE\a\xCA\x2\x2\x3DF\x3EE\x5l\x37\x2\x3E0\x3EE\a\xC9\x2\x2\x3E1\x3EE"+
		"\as\x2\x2\x3E2\x3E3\a\xB7\x2\x2\x3E3\x3E8\x5h\x35\x2\x3E4\x3E5\a\xC8\x2"+
		"\x2\x3E5\x3E7\x5h\x35\x2\x3E6\x3E4\x3\x2\x2\x2\x3E7\x3EA\x3\x2\x2\x2\x3E8"+
		"\x3E6\x3\x2\x2\x2\x3E8\x3E9\x3\x2\x2\x2\x3E9\x3EB\x3\x2\x2\x2\x3EA\x3E8"+
		"\x3\x2\x2\x2\x3EB\x3EC\a\xB8\x2\x2\x3EC\x3EE\x3\x2\x2\x2\x3ED\x3DE\x3"+
		"\x2\x2\x2\x3ED\x3DF\x3\x2\x2\x2\x3ED\x3E0\x3\x2\x2\x2\x3ED\x3E1\x3\x2"+
		"\x2\x2\x3ED\x3E2\x3\x2\x2\x2\x3EEi\x3\x2\x2\x2\x3EF\x3F2\a\xCA\x2\x2\x3F0"+
		"\x3F2\x5x=\x2\x3F1\x3EF\x3\x2\x2\x2\x3F1\x3F0\x3\x2\x2\x2\x3F2k\x3\x2"+
		"\x2\x2\x3F3\x3F5\t\x6\x2\x2\x3F4\x3F3\x3\x2\x2\x2\x3F4\x3F5\x3\x2\x2\x2"+
		"\x3F5\x3F6\x3\x2\x2\x2\x3F6\x3FC\a\xCC\x2\x2\x3F7\x3F8\a\xB7\x2\x2\x3F8"+
		"\x3F9\x5l\x37\x2\x3F9\x3FA\a\xB8\x2\x2\x3FA\x3FC\x3\x2\x2\x2\x3FB\x3F4"+
		"\x3\x2\x2\x2\x3FB\x3F7\x3\x2\x2\x2\x3FCm\x3\x2\x2\x2\x3FD\x3FF\a\xB9\x2"+
		"\x2\x3FE\x400\x5\x158\xAD\x2\x3FF\x3FE\x3\x2\x2\x2\x400\x401\x3\x2\x2"+
		"\x2\x401\x3FF\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x403\x3\x2\x2\x2"+
		"\x403\x404\a\xBA\x2\x2\x404\x407\x3\x2\x2\x2\x405\x407\a\xCB\x2\x2\x406"+
		"\x3FD\x3\x2\x2\x2\x406\x405\x3\x2\x2\x2\x407o\x3\x2\x2\x2\x408\x411\x5"+
		"n\x38\x2\x409\x40B\a\xC7\x2\x2\x40A\x409\x3\x2\x2\x2\x40B\x40C\x3\x2\x2"+
		"\x2\x40C\x40A\x3\x2\x2\x2\x40C\x40D\x3\x2\x2\x2\x40D\x40E\x3\x2\x2\x2"+
		"\x40E\x410\x5n\x38\x2\x40F\x40A\x3\x2\x2\x2\x410\x413\x3\x2\x2\x2\x411"+
		"\x40F\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2\x412\x416\x3\x2\x2\x2\x413\x411"+
		"\x3\x2\x2\x2\x414\x416\x5\x158\xAD\x2\x415\x408\x3\x2\x2\x2\x415\x414"+
		"\x3\x2\x2\x2\x416q\x3\x2\x2\x2\x417\x41C\x5p\x39\x2\x418\x419\a\xC8\x2"+
		"\x2\x419\x41B\x5p\x39\x2\x41A\x418\x3\x2\x2\x2\x41B\x41E\x3\x2\x2\x2\x41C"+
		"\x41A\x3\x2\x2\x2\x41C\x41D\x3\x2\x2\x2\x41Ds\x3\x2\x2\x2\x41E\x41C\x3"+
		"\x2\x2\x2\x41F\x421\a\xB6\x2\x2\x420\x41F\x3\x2\x2\x2\x421\x422\x3\x2"+
		"\x2\x2\x422\x420\x3\x2\x2\x2\x422\x423\x3\x2\x2\x2\x423\x426\x3\x2\x2"+
		"\x2\x424\x427\x5n\x38\x2\x425\x427\x5\x158\xAD\x2\x426\x424\x3\x2\x2\x2"+
		"\x426\x425\x3\x2\x2\x2\x427u\x3\x2\x2\x2\x428\x42A\a\xB6\x2\x2\x429\x428"+
		"\x3\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\x429\x3\x2\x2\x2\x42B\x42C\x3"+
		"\x2\x2\x2\x42C\x42F\x3\x2\x2\x2\x42D\x430\x5n\x38\x2\x42E\x430\x5\x158"+
		"\xAD\x2\x42F\x42D\x3\x2\x2\x2\x42F\x42E\x3\x2\x2\x2\x430\x436\x3\x2\x2"+
		"\x2\x431\x432\x5p\x39\x2\x432\x433\a\xC7\x2\x2\x433\x434\x5v<\x2\x434"+
		"\x436\x3\x2\x2\x2\x435\x429\x3\x2\x2\x2\x435\x431\x3\x2\x2\x2\x436w\x3"+
		"\x2\x2\x2\x437\x439\a\xBC\x2\x2\x438\x437\x3\x2\x2\x2\x439\x43A\x3\x2"+
		"\x2\x2\x43A\x438\x3\x2\x2\x2\x43A\x43B\x3\x2\x2\x2\x43B\x43C\x3\x2\x2"+
		"\x2\x43C\x444\a\xCB\x2\x2\x43D\x43F\a\xBC\x2\x2\x43E\x43D\x3\x2\x2\x2"+
		"\x43F\x440\x3\x2\x2\x2\x440\x43E\x3\x2\x2\x2\x440\x441\x3\x2\x2\x2\x441"+
		"\x442\x3\x2\x2\x2\x442\x444\x5\x158\xAD\x2\x443\x438\x3\x2\x2\x2\x443"+
		"\x43E\x3\x2\x2\x2\x444y\x3\x2\x2\x2\x445\x446\x5\x86\x44\x2\x446{\x3\x2"+
		"\x2\x2\x447\x448\a\xB7\x2\x2\x448\x45D\a\xB8\x2\x2\x449\x44A\a\xB7\x2"+
		"\x2\x44A\x44F\x5~@\x2\x44B\x44C\a\xC8\x2\x2\x44C\x44E\x5~@\x2\x44D\x44B"+
		"\x3\x2\x2\x2\x44E\x451\x3\x2\x2\x2\x44F\x44D\x3\x2\x2\x2\x44F\x450\x3"+
		"\x2\x2\x2\x450\x452\x3\x2\x2\x2\x451\x44F\x3\x2\x2\x2\x452\x453\a\xB8"+
		"\x2\x2\x453\x45D\x3\x2\x2\x2\x454\x459\x5~@\x2\x455\x456\a\xC8\x2\x2\x456"+
		"\x458\x5~@\x2\x457\x455\x3\x2\x2\x2\x458\x45B\x3\x2\x2\x2\x459\x457\x3"+
		"\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45A\x45D\x3\x2\x2\x2\x45B\x459\x3\x2"+
		"\x2\x2\x45C\x447\x3\x2\x2\x2\x45C\x449\x3\x2\x2\x2\x45C\x454\x3\x2\x2"+
		"\x2\x45D}\x3\x2\x2\x2\x45E\x460\x5\x82\x42\x2\x45F\x461\aS\x2\x2\x460"+
		"\x45F\x3\x2\x2\x2\x460\x461\x3\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462\x464"+
		"\x5\x62\x32\x2\x463\x465\ar\x2\x2\x464\x463\x3\x2\x2\x2\x464\x465\x3\x2"+
		"\x2\x2\x465\x467\x3\x2\x2\x2\x466\x468\as\x2\x2\x467\x466\x3\x2\x2\x2"+
		"\x467\x468\x3\x2\x2\x2\x468\x46A\x3\x2\x2\x2\x469\x46B\x5\x80\x41\x2\x46A"+
		"\x469\x3\x2\x2\x2\x46A\x46B\x3\x2\x2\x2\x46B\x46D\x3\x2\x2\x2\x46C\x46E"+
		"\a\xE\x2\x2\x46D\x46C\x3\x2\x2\x2\x46D\x46E\x3\x2\x2\x2\x46E\x470\x3\x2"+
		"\x2\x2\x46F\x471\t\a\x2\x2\x470\x46F\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2"+
		"\x471\x7F\x3\x2\x2\x2\x472\x473\a\xBB\x2\x2\x473\x477\x5h\x35\x2\x474"+
		"\x475\a\xBB\x2\x2\x475\x477\as\x2\x2\x476\x472\x3\x2\x2\x2\x476\x474\x3"+
		"\x2\x2\x2\x477\x81\x3\x2\x2\x2\x478\x479\x5x=\x2\x479\x83\x3\x2\x2\x2"+
		"\x47A\x47B\aT\x2\x2\x47B\x480\a\xCB\x2\x2\x47C\x47D\a\xC8\x2\x2\x47D\x47F"+
		"\a\xCB\x2\x2\x47E\x47C\x3\x2\x2\x2\x47F\x482\x3\x2\x2\x2\x480\x47E\x3"+
		"\x2\x2\x2\x480\x481\x3\x2\x2\x2\x481\x85\x3\x2\x2\x2\x482\x480\x3\x2\x2"+
		"\x2\x483\x487\x5\x88\x45\x2\x484\x486\x5\x88\x45\x2\x485\x484\x3\x2\x2"+
		"\x2\x486\x489\x3\x2\x2\x2\x487\x485\x3\x2\x2\x2\x487\x488\x3\x2\x2\x2"+
		"\x488\x87\x3\x2\x2\x2\x489\x487\x3\x2\x2\x2\x48A\x48B\aW\x2\x2\x48B\x48C"+
		"\x5\x86\x44\x2\x48C\x48D\aX\x2\x2\x48D\x498\x3\x2\x2\x2\x48E\x490\x5\x8A"+
		"\x46\x2\x48F\x491\a\xBD\x2\x2\x490\x48F\x3\x2\x2\x2\x490\x491\x3\x2\x2"+
		"\x2\x491\x498\x3\x2\x2\x2\x492\x494\x5\x8CG\x2\x493\x495\a\xBD\x2\x2\x494"+
		"\x493\x3\x2\x2\x2\x494\x495\x3\x2\x2\x2\x495\x498\x3\x2\x2\x2\x496\x498"+
		"\a\xBD\x2\x2\x497\x48A\x3\x2\x2\x2\x497\x48E\x3\x2\x2\x2\x497\x492\x3"+
		"\x2\x2\x2\x497\x496\x3\x2\x2\x2\x498\x89\x3\x2\x2\x2\x499\x4A7\x5.\x18"+
		"\x2\x49A\x4A7\x5\x1C\xF\x2\x49B\x4A7\x5 \x11\x2\x49C\x4A7\x5*\x16\x2\x49D"+
		"\x4A7\x5,\x17\x2\x49E\x4A7\x5\x4\x3\x2\x49F\x4A7\x5\x1E\x10\x2\x4A0\x4A7"+
		"\x5\x30\x19\x2\x4A1\x4A7\x5\x6\x4\x2\x4A2\x4A7\x5\x12\n\x2\x4A3\x4A7\x5"+
		"\x16\f\x2\x4A4\x4A7\x5\x14\v\x2\x4A5\x4A7\x5\x32\x1A\x2\x4A6\x499\x3\x2"+
		"\x2\x2\x4A6\x49A\x3\x2\x2\x2\x4A6\x49B\x3\x2\x2\x2\x4A6\x49C\x3\x2\x2"+
		"\x2\x4A6\x49D\x3\x2\x2\x2\x4A6\x49E\x3\x2\x2\x2\x4A6\x49F\x3\x2\x2\x2"+
		"\x4A6\x4A0\x3\x2\x2\x2\x4A6\x4A1\x3\x2\x2\x2\x4A6\x4A2\x3\x2\x2\x2\x4A6"+
		"\x4A3\x3\x2\x2\x2\x4A6\x4A4\x3\x2\x2\x2\x4A6\x4A5\x3\x2\x2\x2\x4A7\x8B"+
		"\x3\x2\x2\x2\x4A8\x4D9\x5\xDEp\x2\x4A9\x4D9\x5\xAAV\x2\x4AA\x4D9\x5\x9E"+
		"P\x2\x4AB\x4D9\x5\xD4k\x2\x4AC\x4D9\x5\x126\x94\x2\x4AD\x4D9\x5\x10E\x88"+
		"\x2\x4AE\x4D9\x5\xDCo\x2\x4AF\x4D9\x5\xC8\x65\x2\x4B0\x4D9\x5\xB6\\\x2"+
		"\x4B1\x4D9\x5\x98M\x2\x4B2\x4D9\x5\x9AN\x2\x4B3\x4D9\x5\x96L\x2\x4B4\x4D9"+
		"\x5\x94K\x2\x4B5\x4D9\x5\xA6T\x2\x4B6\x4D9\x5\x148\xA5\x2\x4B7\x4B8\a"+
		"\x15\x2\x2\x4B8\x4D9\x5\x38\x1D\x2\x4B9\x4D9\x5\x90I\x2\x4BA\x4D9\x5\x92"+
		"J\x2\x4BB\x4BD\aL\x2\x2\x4BC\x4BE\x5p\x39\x2\x4BD\x4BC\x3\x2\x2\x2\x4BD"+
		"\x4BE\x3\x2\x2\x2\x4BE\x4D9\x3\x2\x2\x2\x4BF\x4C1\aK\x2\x2\x4C0\x4C2\x5"+
		"p\x39\x2\x4C1\x4C0\x3\x2\x2\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2\x4D9\x3\x2\x2"+
		"\x2\x4C3\x4C5\a\x12\x2\x2\x4C4\x4C6\a\x11\x2\x2\x4C5\x4C4\x3\x2\x2\x2"+
		"\x4C5\x4C6\x3\x2\x2\x2\x4C6\x4C8\x3\x2\x2\x2\x4C7\x4C9\x5p\x39\x2\x4C8"+
		"\x4C7\x3\x2\x2\x2\x4C8\x4C9\x3\x2\x2\x2\x4C9\x4D9\x3\x2\x2\x2\x4CA\x4CC"+
		"\aJ\x2\x2\x4CB\x4CD\x5p\x39\x2\x4CC\x4CB\x3\x2\x2\x2\x4CC\x4CD\x3\x2\x2"+
		"\x2\x4CD\x4D9\x3\x2\x2\x2\x4CE\x4D0\a\x13\x2\x2\x4CF\x4D1\a\x11\x2\x2"+
		"\x4D0\x4CF\x3\x2\x2\x2\x4D0\x4D1\x3\x2\x2\x2\x4D1\x4D3\x3\x2\x2\x2\x4D2"+
		"\x4D4\x5p\x39\x2\x4D3\x4D2\x3\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2\x4D4\x4D9"+
		"\x3\x2\x2\x2\x4D5\x4D9\x5\x8EH\x2\x4D6\x4D7\a\xCB\x2\x2\x4D7\x4D9\a\xBE"+
		"\x2\x2\x4D8\x4A8\x3\x2\x2\x2\x4D8\x4A9\x3\x2\x2\x2\x4D8\x4AA\x3\x2\x2"+
		"\x2\x4D8\x4AB\x3\x2\x2\x2\x4D8\x4AC\x3\x2\x2\x2\x4D8\x4AD\x3\x2\x2\x2"+
		"\x4D8\x4AE\x3\x2\x2\x2\x4D8\x4AF\x3\x2\x2\x2\x4D8\x4B0\x3\x2\x2\x2\x4D8"+
		"\x4B1\x3\x2\x2\x2\x4D8\x4B2\x3\x2\x2\x2\x4D8\x4B3\x3\x2\x2\x2\x4D8\x4B4"+
		"\x3\x2\x2\x2\x4D8\x4B5\x3\x2\x2\x2\x4D8\x4B6\x3\x2\x2\x2\x4D8\x4B7\x3"+
		"\x2\x2\x2\x4D8\x4B9\x3\x2\x2\x2\x4D8\x4BA\x3\x2\x2\x2\x4D8\x4BB\x3\x2"+
		"\x2\x2\x4D8\x4BF\x3\x2\x2\x2\x4D8\x4C3\x3\x2\x2\x2\x4D8\x4CA\x3\x2\x2"+
		"\x2\x4D8\x4CE\x3\x2\x2\x2\x4D8\x4D5\x3\x2\x2\x2\x4D8\x4D6\x3\x2\x2\x2"+
		"\x4D9\x8D\x3\x2\x2\x2\x4DA\x4DC\au\x2\x2\x4DB\x4DD\x5\x38\x1D\x2\x4DC"+
		"\x4DB\x3\x2\x2\x2\x4DC\x4DD\x3\x2\x2\x2\x4DD\x8F\x3\x2\x2\x2\x4DE\x4DF"+
		"\aG\x2\x2\x4DF\x4E0\x5\x34\x1B\x2\x4E0\x4E3\x5\x88\x45\x2\x4E1\x4E2\a"+
		"H\x2\x2\x4E2\x4E4\x5\x88\x45\x2\x4E3\x4E1\x3\x2\x2\x2\x4E3\x4E4\x3\x2"+
		"\x2\x2\x4E4\x91\x3\x2\x2\x2\x4E5\x4E6\aI\x2\x2\x4E6\x4E7\x5\x34\x1B\x2"+
		"\x4E7\x4E8\x5\x88\x45\x2\x4E8\x93\x3\x2\x2\x2\x4E9\x4EA\a\x9B\x2\x2\x4EA"+
		"\x4EB\a\x9C\x2\x2\x4EB\x4EC\a\xCA\x2\x2\x4EC\x95\x3\x2\x2\x2\x4ED\x4EE"+
		"\a\x14\x2\x2\x4EE\x4EF\a\xB7\x2\x2\x4EF\x4F0\x5\xDAn\x2\x4F0\x4F3\a\xB8"+
		"\x2\x2\x4F1\x4F2\aT\x2\x2\x4F2\x4F4\a\x88\x2\x2\x4F3\x4F1\x3\x2\x2\x2"+
		"\x4F3\x4F4\x3\x2\x2\x2\x4F4\x500\x3\x2\x2\x2\x4F5\x4F7\a\x14\x2\x2\x4F6"+
		"\x4F8\x5\xD8m\x2\x4F7\x4F6\x3\x2\x2\x2\x4F8\x4F9\x3\x2\x2\x2\x4F9\x4F7"+
		"\x3\x2\x2\x2\x4F9\x4FA\x3\x2\x2\x2\x4FA\x4FD\x3\x2\x2\x2\x4FB\x4FC\aT"+
		"\x2\x2\x4FC\x4FE\a\x88\x2\x2\x4FD\x4FB\x3\x2\x2\x2\x4FD\x4FE\x3\x2\x2"+
		"\x2\x4FE\x500\x3\x2\x2\x2\x4FF\x4ED\x3\x2\x2\x2\x4FF\x4F5\x3\x2\x2\x2"+
		"\x500\x97\x3\x2\x2\x2\x501\x502\aW\x2\x2\x502\x503\a\xF\x2\x2\x503\x504"+
		"\x5\x86\x44\x2\x504\x505\aX\x2\x2\x505\x506\a\xF\x2\x2\x506\x507\aW\x2"+
		"\x2\x507\x508\a\x10\x2\x2\x508\x509\x5\x86\x44\x2\x509\x50A\aX\x2\x2\x50A"+
		"\x50B\a\x10\x2\x2\x50B\x99\x3\x2\x2\x2\x50C\x50D\aW\x2\x2\x50D\x50F\a"+
		"\x11\x2\x2\x50E\x510\x5p\x39\x2\x50F\x50E\x3\x2\x2\x2\x50F\x510\x3\x2"+
		"\x2\x2\x510\x511\x3\x2\x2\x2\x511\x512\x5\x86\x44\x2\x512\x9B\x3\x2\x2"+
		"\x2\x513\x51A\a<\x2\x2\x514\x51B\x5l\x37\x2\x515\x51B\x5x=\x2\x516\x517"+
		"\a\xB7\x2\x2\x517\x518\x5x=\x2\x518\x519\a\xB8\x2\x2\x519\x51B\x3\x2\x2"+
		"\x2\x51A\x514\x3\x2\x2\x2\x51A\x515\x3\x2\x2\x2\x51A\x516\x3\x2\x2\x2"+
		"\x51B\x9D\x3\x2\x2\x2\x51C\x51E\a_\x2\x2\x51D\x51F\x5\x9CO\x2\x51E\x51D"+
		"\x3\x2\x2\x2\x51E\x51F\x3\x2\x2\x2\x51F\x521\x3\x2\x2\x2\x520\x522\x5"+
		"\xA0Q\x2\x521\x520\x3\x2\x2\x2\x522\x523\x3\x2\x2\x2\x523\x521\x3\x2\x2"+
		"\x2\x523\x524\x3\x2\x2\x2\x524\x526\x3\x2\x2\x2\x525\x527\x5\xA4S\x2\x526"+
		"\x525\x3\x2\x2\x2\x526\x527\x3\x2\x2\x2\x527\x52B\x3\x2\x2\x2\x528\x52A"+
		"\x5\x104\x83\x2\x529\x528\x3\x2\x2\x2\x52A\x52D\x3\x2\x2\x2\x52B\x529"+
		"\x3\x2\x2\x2\x52B\x52C\x3\x2\x2\x2\x52C\x52F\x3\x2\x2\x2\x52D\x52B\x3"+
		"\x2\x2\x2\x52E\x530\x5\x108\x85\x2\x52F\x52E\x3\x2\x2\x2\x52F\x530\x3"+
		"\x2\x2\x2\x530\x532\x3\x2\x2\x2\x531\x533\x5\xF2z\x2\x532\x531\x3\x2\x2"+
		"\x2\x532\x533\x3\x2\x2\x2\x533\x54E\x3\x2\x2\x2\x534\x536\a_\x2\x2\x535"+
		"\x537\x5\x9CO\x2\x536\x535\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x538"+
		"\x3\x2\x2\x2\x538\x53A\x5\x116\x8C\x2\x539\x53B\x5\xA2R\x2\x53A\x539\x3"+
		"\x2\x2\x2\x53B\x53C\x3\x2\x2\x2\x53C\x53A\x3\x2\x2\x2\x53C\x53D\x3\x2"+
		"\x2\x2\x53D\x53F\x3\x2\x2\x2\x53E\x540\x5\xA4S\x2\x53F\x53E\x3\x2\x2\x2"+
		"\x53F\x540\x3\x2\x2\x2\x540\x544\x3\x2\x2\x2\x541\x543\x5\x104\x83\x2"+
		"\x542\x541\x3\x2\x2\x2\x543\x546\x3\x2\x2\x2\x544\x542\x3\x2\x2\x2\x544"+
		"\x545\x3\x2\x2\x2\x545\x548\x3\x2\x2\x2\x546\x544\x3\x2\x2\x2\x547\x549"+
		"\x5\x108\x85\x2\x548\x547\x3\x2\x2\x2\x548\x549\x3\x2\x2\x2\x549\x54B"+
		"\x3\x2\x2\x2\x54A\x54C\x5\xF2z\x2\x54B\x54A\x3\x2\x2\x2\x54B\x54C\x3\x2"+
		"\x2\x2\x54C\x54E\x3\x2\x2\x2\x54D\x51C\x3\x2\x2\x2\x54D\x534\x3\x2\x2"+
		"\x2\x54E\x9F\x3\x2\x2\x2\x54F\x551\a\x61\x2\x2\x550\x54F\x3\x2\x2\x2\x550"+
		"\x551\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552\x557\x5\x114\x8B\x2\x553"+
		"\x554\a\xC8\x2\x2\x554\x556\x5\x11A\x8E\x2\x555\x553\x3\x2\x2\x2\x556"+
		"\x559\x3\x2\x2\x2\x557\x555\x3\x2\x2\x2\x557\x558\x3\x2\x2\x2\x558\xA1"+
		"\x3\x2\x2\x2\x559\x557\x3\x2\x2\x2\x55A\x55C\a\x61\x2\x2\x55B\x55A\x3"+
		"\x2\x2\x2\x55B\x55C\x3\x2\x2\x2\x55C\x55D\x3\x2\x2\x2\x55D\x562\x5\x11A"+
		"\x8E\x2\x55E\x55F\a\xC8\x2\x2\x55F\x561\x5\x11A\x8E\x2\x560\x55E\x3\x2"+
		"\x2\x2\x561\x564\x3\x2\x2\x2\x562\x560\x3\x2\x2\x2\x562\x563\x3\x2\x2"+
		"\x2\x563\xA3\x3\x2\x2\x2\x564\x562\x3\x2\x2\x2\x565\x566\av\x2\x2\x566"+
		"\x567\x5\x13C\x9F\x2\x567\x568\an\x2\x2\x568\x569\x5\x114\x8B\x2\x569"+
		"\xA5\x3\x2\x2\x2\x56A\x56B\aT\x2\x2\x56B\x570\x5\xA8U\x2\x56C\x56D\a\xC8"+
		"\x2\x2\x56D\x56F\x5\xA8U\x2\x56E\x56C\x3\x2\x2\x2\x56F\x572\x3\x2\x2\x2"+
		"\x570\x56E\x3\x2\x2\x2\x570\x571\x3\x2\x2\x2\x571\x573\x3\x2\x2\x2\x572"+
		"\x570\x3\x2\x2\x2\x573\x574\x5\x8CG\x2\x574\xA7\x3\x2\x2\x2\x575\x57A"+
		"\x5p\x39\x2\x576\x577\a\xB7\x2\x2\x577\x578\x5\xBC_\x2\x578\x579\a\xB8"+
		"\x2\x2\x579\x57B\x3\x2\x2\x2\x57A\x576\x3\x2\x2\x2\x57A\x57B\x3\x2\x2"+
		"\x2\x57B\x57C\x3\x2\x2\x2\x57C\x57D\aS\x2\x2\x57D\x57E\a\xB7\x2\x2\x57E"+
		"\x57F\x5\x8CG\x2\x57F\x580\a\xB8\x2\x2\x580\xA9\x3\x2\x2\x2\x581\x583"+
		"\x5\xACW\x2\x582\x584\x5\xAEX\x2\x583\x582\x3\x2\x2\x2\x583\x584\x3\x2"+
		"\x2\x2\x584\x585\x3\x2\x2\x2\x585\x587\x5\xB0Y\x2\x586\x588\x5\xF2z\x2"+
		"\x587\x586\x3\x2\x2\x2\x587\x588\x3\x2\x2\x2\x588\xAB\x3\x2\x2\x2\x589"+
		"\x58B\a^\x2\x2\x58A\x58C\an\x2\x2\x58B\x58A\x3\x2\x2\x2\x58B\x58C\x3\x2"+
		"\x2\x2\x58C\x58D\x3\x2\x2\x2\x58D\x58F\x5\x116\x8C\x2\x58E\x590\x5\x118"+
		"\x8D\x2\x58F\x58E\x3\x2\x2\x2\x58F\x590\x3\x2\x2\x2\x590\x595\x3\x2\x2"+
		"\x2\x591\x592\a\xB7\x2\x2\x592\x593\x5r:\x2\x593\x594\a\xB8\x2\x2\x594"+
		"\x596\x3\x2\x2\x2\x595\x591\x3\x2\x2\x2\x595\x596\x3\x2\x2\x2\x596\xAD"+
		"\x3\x2\x2\x2\x597\x598\av\x2\x2\x598\x5A1\x5\xEEx\x2\x599\x59A\an\x2\x2"+
		"\x59A\x59F\x5\x116\x8C\x2\x59B\x59C\a\xB7\x2\x2\x59C\x59D\x5\x13C\x9F"+
		"\x2\x59D\x59E\a\xB8\x2\x2\x59E\x5A0\x3\x2\x2\x2\x59F\x59B\x3\x2\x2\x2"+
		"\x59F\x5A0\x3\x2\x2\x2\x5A0\x5A2\x3\x2\x2\x2\x5A1\x599\x3\x2\x2\x2\x5A1"+
		"\x5A2\x3\x2\x2\x2\x5A2\xAF\x3\x2\x2\x2\x5A3\x5A4\ao\x2\x2\x5A4\x5A9\x5"+
		"\xB2Z\x2\x5A5\x5A6\a\xC8\x2\x2\x5A6\x5A8\x5\xB2Z\x2\x5A7\x5A5\x3\x2\x2"+
		"\x2\x5A8\x5AB\x3\x2\x2\x2\x5A9\x5A7\x3\x2\x2\x2\x5A9\x5AA\x3\x2\x2\x2"+
		"\x5AA\x5B1\x3\x2\x2\x2\x5AB\x5A9\x3\x2\x2\x2\x5AC\x5AD\aZ\x2\x2\x5AD\x5B1"+
		"\ao\x2\x2\x5AE\x5B1\x5\xDEp\x2\x5AF\x5B1\x5\x11C\x8F\x2\x5B0\x5A3\x3\x2"+
		"\x2\x2\x5B0\x5AC\x3\x2\x2\x2\x5B0\x5AE\x3\x2\x2\x2\x5B0\x5AF\x3\x2\x2"+
		"\x2\x5B1\xB1\x3\x2\x2\x2\x5B2\x5B3\a\xB7\x2\x2\x5B3\x5B8\x5\xB4[\x2\x5B4"+
		"\x5B5\a\xC8\x2\x2\x5B5\x5B7\x5\xB4[\x2\x5B6\x5B4\x3\x2\x2\x2\x5B7\x5BA"+
		"\x3\x2\x2\x2\x5B8\x5B6\x3\x2\x2\x2\x5B8\x5B9\x3\x2\x2\x2\x5B9\x5BB\x3"+
		"\x2\x2\x2\x5BA\x5B8\x3\x2\x2\x2\x5BB\x5BC\a\xB8\x2\x2\x5BC\xB3\x3\x2\x2"+
		"\x2\x5BD\x5BE\x5\x38\x1D\x2\x5BE\xB5\x3\x2\x2\x2\x5BF\x5C0\a\x63\x2\x2"+
		"\x5C0\x5C5\x5\xB8]\x2\x5C1\x5C2\a\xC8\x2\x2\x5C2\x5C4\x5\xB8]\x2\x5C3"+
		"\x5C1\x3\x2\x2\x2\x5C4\x5C7\x3\x2\x2\x2\x5C5\x5C3\x3\x2\x2\x2\x5C5\x5C6"+
		"\x3\x2\x2\x2\x5C6\x5D7\x3\x2\x2\x2\x5C7\x5C5\x3\x2\x2\x2\x5C8\x5C9\a\x63"+
		"\x2\x2\x5C9\x5CA\x5p\x39\x2\x5CA\x5CC\a(\x2\x2\x5CB\x5CD\a\xCB\x2\x2\x5CC"+
		"\x5CB\x3\x2\x2\x2\x5CC\x5CD\x3\x2\x2\x2\x5CD\x5CE\x3\x2\x2\x2\x5CE\x5CF"+
		"\aU\x2\x2\x5CF\x5D4\x5\xDEp\x2\x5D0\x5D1\aU\x2\x2\x5D1\x5D2\a]\x2\x2\x5D2"+
		"\x5D3\az\x2\x2\x5D3\x5D5\x5\x116\x8C\x2\x5D4\x5D0\x3\x2\x2\x2\x5D4\x5D5"+
		"\x3\x2\x2\x2\x5D5\x5D7\x3\x2\x2\x2\x5D6\x5BF\x3\x2\x2\x2\x5D6\x5C8\x3"+
		"\x2\x2\x2\x5D7\xB7\x3\x2\x2\x2\x5D8\x5EC\x5x=\x2\x5D9\x5DB\aS\x2\x2\x5DA"+
		"\x5D9\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DC\x3\x2\x2\x2\x5DC\x5DE"+
		"\x5\x62\x32\x2\x5DD\x5DF\x5\xBA^\x2\x5DE\x5DD\x3\x2\x2\x2\x5DE\x5DF\x3"+
		"\x2\x2\x2\x5DF\x5ED\x3\x2\x2\x2\x5E0\x5E1\a\x18\x2\x2\x5E1\x5E2\a\xB7"+
		"\x2\x2\x5E2\x5E5\x5\xBE`\x2\x5E3\x5E4\a\xC8\x2\x2\x5E4\x5E6\x5\xC2\x62"+
		"\x2\x5E5\x5E3\x3\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5E8\x3\x2\x2\x2"+
		"\x5E7\x5E9\a\xC8\x2\x2\x5E8\x5E7\x3\x2\x2\x2\x5E8\x5E9\x3\x2\x2\x2\x5E9"+
		"\x5EA\x3\x2\x2\x2\x5EA\x5EB\a\xB8\x2\x2\x5EB\x5ED\x3\x2\x2\x2\x5EC\x5DA"+
		"\x3\x2\x2\x2\x5EC\x5E0\x3\x2\x2\x2\x5ED\xB9\x3\x2\x2\x2\x5EE\x5EF\a\xBB"+
		"\x2\x2\x5EF\x5F1\x5\x38\x1D\x2\x5F0\x5EE\x3\x2\x2\x2\x5F0\x5F1\x3\x2\x2"+
		"\x2\x5F1\xBB\x3\x2\x2\x2\x5F2\x5F7\x5\x142\xA2\x2\x5F3\x5F4\a\xC8\x2\x2"+
		"\x5F4\x5F6\x5\x142\xA2\x2\x5F5\x5F3\x3\x2\x2\x2\x5F6\x5F9\x3\x2\x2\x2"+
		"\x5F7\x5F5\x3\x2\x2\x2\x5F7\x5F8\x3\x2\x2\x2\x5F8\xBD\x3\x2\x2\x2\x5F9"+
		"\x5F7\x3\x2\x2\x2\x5FA\x5FF\x5\xC0\x61\x2\x5FB\x5FC\a\xC8\x2\x2\x5FC\x5FE"+
		"\x5\xC0\x61\x2\x5FD\x5FB\x3\x2\x2\x2\x5FE\x601\x3\x2\x2\x2\x5FF\x5FD\x3"+
		"\x2\x2\x2\x5FF\x600\x3\x2\x2\x2\x600\xBF\x3\x2\x2\x2\x601\x5FF\x3\x2\x2"+
		"\x2\x602\x603\x5\x142\xA2\x2\x603\x609\x5\x62\x32\x2\x604\x605\a\x1F\x2"+
		"\x2\x605\x607\a \x2\x2\x606\x608\x5\x156\xAC\x2\x607\x606\x3\x2\x2\x2"+
		"\x607\x608\x3\x2\x2\x2\x608\x60A\x3\x2\x2\x2\x609\x604\x3\x2\x2\x2\x609"+
		"\x60A\x3\x2\x2\x2\x60A\x60C\x3\x2\x2\x2\x60B\x60D\ar\x2\x2\x60C\x60B\x3"+
		"\x2\x2\x2\x60C\x60D\x3\x2\x2\x2\x60D\x60F\x3\x2\x2\x2\x60E\x610\as\x2"+
		"\x2\x60F\x60E\x3\x2\x2\x2\x60F\x610\x3\x2\x2\x2\x610\x616\x3\x2\x2\x2"+
		"\x611\x614\aZ\x2\x2\x612\x615\x5h\x35\x2\x613\x615\x5\x124\x93\x2\x614"+
		"\x612\x3\x2\x2\x2\x614\x613\x3\x2\x2\x2\x615\x617\x3\x2\x2\x2\x616\x611"+
		"\x3\x2\x2\x2\x616\x617\x3\x2\x2\x2\x617\x632\x3\x2\x2\x2\x618\x619\x5"+
		"\x142\xA2\x2\x619\x61F\x5\x132\x9A\x2\x61A\x61B\a\x1F\x2\x2\x61B\x61D"+
		"\a \x2\x2\x61C\x61E\x5\x156\xAC\x2\x61D\x61C\x3\x2\x2\x2\x61D\x61E\x3"+
		"\x2\x2\x2\x61E\x620\x3\x2\x2\x2\x61F\x61A\x3\x2\x2\x2\x61F\x620\x3\x2"+
		"\x2\x2\x620\x622\x3\x2\x2\x2\x621\x623\ar\x2\x2\x622\x621\x3\x2\x2\x2"+
		"\x622\x623\x3\x2\x2\x2\x623\x625\x3\x2\x2\x2\x624\x626\as\x2\x2\x625\x624"+
		"\x3\x2\x2\x2\x625\x626\x3\x2\x2\x2\x626\x628\x3\x2\x2\x2\x627\x629\x5"+
		"\x136\x9C\x2\x628\x627\x3\x2\x2\x2\x628\x629\x3\x2\x2\x2\x629\x62F\x3"+
		"\x2\x2\x2\x62A\x62D\aZ\x2\x2\x62B\x62E\x5h\x35\x2\x62C\x62E\x5\x124\x93"+
		"\x2\x62D\x62B\x3\x2\x2\x2\x62D\x62C\x3\x2\x2\x2\x62E\x630\x3\x2\x2\x2"+
		"\x62F\x62A\x3\x2\x2\x2\x62F\x630\x3\x2\x2\x2\x630\x632\x3\x2\x2\x2\x631"+
		"\x602\x3\x2\x2\x2\x631\x618\x3\x2\x2\x2\x632\xC1\x3\x2\x2\x2\x633\x638"+
		"\x5\xC4\x63\x2\x634\x635\a\xC8\x2\x2\x635\x637\x5\xC4\x63\x2\x636\x634"+
		"\x3\x2\x2\x2\x637\x63A\x3\x2\x2\x2\x638\x636\x3\x2\x2\x2\x638\x639\x3"+
		"\x2\x2\x2\x639\xC3\x3\x2\x2\x2\x63A\x638\x3\x2\x2\x2\x63B\x63D\a:\x2\x2"+
		"\x63C\x63E\x5\x156\xAC\x2\x63D\x63C\x3\x2\x2\x2\x63D\x63E\x3\x2\x2\x2"+
		"\x63E\x63F\x3\x2\x2\x2\x63F\x640\a\xB7\x2\x2\x640\x641\x5\xBC_\x2\x641"+
		"\x642\a\xB8\x2\x2\x642\x64F\x3\x2\x2\x2\x643\x644\a\x1F\x2\x2\x644\x646"+
		"\a \x2\x2\x645\x647\x5\x156\xAC\x2\x646\x645\x3\x2\x2\x2\x646\x647\x3"+
		"\x2\x2\x2\x647\x648\x3\x2\x2\x2\x648\x649\a\xB7\x2\x2\x649\x64A\x5&\x14"+
		"\x2\x64A\x64C\a\xB8\x2\x2\x64B\x64D\x5\x18\r\x2\x64C\x64B\x3\x2\x2\x2"+
		"\x64C\x64D\x3\x2\x2\x2\x64D\x64F\x3\x2\x2\x2\x64E\x63B\x3\x2\x2\x2\x64E"+
		"\x643\x3\x2\x2\x2\x64F\xC5\x3\x2\x2\x2\x650\x651\x5p\x39\x2\x651\xC7\x3"+
		"\x2\x2\x2\x652\x656\a\x65\x2\x2\x653\x657\x5\xCCg\x2\x654\x657\x5\xCE"+
		"h\x2\x655\x657\x5\xCA\x66\x2\x656\x653\x3\x2\x2\x2\x656\x654\x3\x2\x2"+
		"\x2\x656\x655\x3\x2\x2\x2\x657\xC9\x3\x2\x2\x2\x658\x659\a\xA6\x2\x2\x659"+
		"\x667\x5l\x37\x2\x65A\x65B\a\x11\x2\x2\x65B\x65C\a\x9F\x2\x2\x65C\x65D"+
		"\a\x9E\x2\x2\x65D\x667\x5\xD0i\x2\x65E\x660\x5p\x39\x2\x65F\x65E\x3\x2"+
		"\x2\x2\x660\x661\x3\x2\x2\x2\x661\x65F\x3\x2\x2\x2\x661\x662\x3\x2\x2"+
		"\x2\x662\x663\x3\x2\x2\x2\x663\x664\t\x3\x2\x2\x664\x667\x3\x2\x2\x2\x665"+
		"\x667\x5p\x39\x2\x666\x658\x3\x2\x2\x2\x666\x65A\x3\x2\x2\x2\x666\x65F"+
		"\x3\x2\x2\x2\x666\x665\x3\x2\x2\x2\x667\xCB\x3\x2\x2\x2\x668\x66A\x5x"+
		"=\x2\x669\x66B\x5\x138\x9D\x2\x66A\x669\x3\x2\x2\x2\x66A\x66B\x3\x2\x2"+
		"\x2\x66B\x66C\x3\x2\x2\x2\x66C\x66D\x5\x13A\x9E\x2\x66D\x66E\x5\x38\x1D"+
		"\x2\x66E\xCD\x3\x2\x2\x2\x66F\x671\x5x=\x2\x670\x672\x5\x138\x9D\x2\x671"+
		"\x670\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672\x673\x3\x2\x2\x2\x673\x674"+
		"\a\xBB\x2\x2\x674\x675\a(\x2\x2\x675\x676\aU\x2\x2\x676\x677\x5\xDEp\x2"+
		"\x677\xCF\x3\x2\x2\x2\x678\x679\a\n\x2\x2\x679\x67F\t\b\x2\x2\x67A\x67B"+
		"\a\a\x2\x2\x67B\x67F\a\n\x2\x2\x67C\x67F\a\b\x2\x2\x67D\x67F\a\f\x2\x2"+
		"\x67E\x678\x3\x2\x2\x2\x67E\x67A\x3\x2\x2\x2\x67E\x67C\x3\x2\x2\x2\x67E"+
		"\x67D\x3\x2\x2\x2\x67F\xD1\x3\x2\x2\x2\x680\x687\a<\x2\x2\x681\x688\x5"+
		"l\x37\x2\x682\x688\x5x=\x2\x683\x684\a\xB7\x2\x2\x684\x685\x5x=\x2\x685"+
		"\x686\a\xB8\x2\x2\x686\x688\x3\x2\x2\x2\x687\x681\x3\x2\x2\x2\x687\x682"+
		"\x3\x2\x2\x2\x687\x683\x3\x2\x2\x2\x688\xD3\x3\x2\x2\x2\x689\x68B\a]\x2"+
		"\x2\x68A\x68C\x5\xD2j\x2\x68B\x68A\x3\x2\x2\x2\x68B\x68C\x3\x2\x2\x2\x68C"+
		"\x68D\x3\x2\x2\x2\x68D\x68E\x5\x114\x8B\x2\x68E\x68F\a\x65\x2\x2\x68F"+
		"\x694\x5\xD6l\x2\x690\x691\a\xC8\x2\x2\x691\x693\x5\xD6l\x2\x692\x690"+
		"\x3\x2\x2\x2\x693\x696\x3\x2\x2\x2\x694\x692\x3\x2\x2\x2\x694\x695\x3"+
		"\x2\x2\x2\x695\x698\x3\x2\x2\x2\x696\x694\x3\x2\x2\x2\x697\x699\x5\xFA"+
		"~\x2\x698\x697\x3\x2\x2\x2\x698\x699\x3\x2\x2\x2\x699\x69D\x3\x2\x2\x2"+
		"\x69A\x69C\x5\x104\x83\x2\x69B\x69A\x3\x2\x2\x2\x69C\x69F\x3\x2\x2\x2"+
		"\x69D\x69B\x3\x2\x2\x2\x69D\x69E\x3\x2\x2\x2\x69E\x6A3\x3\x2\x2\x2\x69F"+
		"\x69D\x3\x2\x2\x2\x6A0\x6A2\x5\xFC\x7F\x2\x6A1\x6A0\x3\x2\x2\x2\x6A2\x6A5"+
		"\x3\x2\x2\x2\x6A3\x6A1\x3\x2\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6A7\x3"+
		"\x2\x2\x2\x6A5\x6A3\x3\x2\x2\x2\x6A6\x6A8\x5\x108\x85\x2\x6A7\x6A6\x3"+
		"\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6AA\x3\x2\x2\x2\x6A9\x6AB\x5\xF2"+
		"z\x2\x6AA\x6A9\x3\x2\x2\x2\x6AA\x6AB\x3\x2\x2\x2\x6AB\x6B3\x3\x2\x2\x2"+
		"\x6AC\x6AD\a]\x2\x2\x6AD\x6AE\a\x8D\x2\x2\x6AE\x6B0\x5\x116\x8C\x2\x6AF"+
		"\x6B1\x5\x18\r\x2\x6B0\x6AF\x3\x2\x2\x2\x6B0\x6B1\x3\x2\x2\x2\x6B1\x6B3"+
		"\x3\x2\x2\x2\x6B2\x689\x3\x2\x2\x2\x6B2\x6AC\x3\x2\x2\x2\x6B3\xD5\x3\x2"+
		"\x2\x2\x6B4\x6B5\x5\x13E\xA0\x2\x6B5\x6B9\x5\x13A\x9E\x2\x6B6\x6BA\x5"+
		"\x38\x1D\x2\x6B7\x6BA\aZ\x2\x2\x6B8\x6BA\as\x2\x2\x6B9\x6B6\x3\x2\x2\x2"+
		"\x6B9\x6B7\x3\x2\x2\x2\x6B9\x6B8\x3\x2\x2\x2\x6BA\x6D2\x3\x2\x2\x2\x6BB"+
		"\x6BC\x5x=\x2\x6BC\x6C0\x5\x13A\x9E\x2\x6BD\x6BE\x5\x13E\xA0\x2\x6BE\x6BF"+
		"\a\xBB\x2\x2\x6BF\x6C1\x3\x2\x2\x2\x6C0\x6BD\x3\x2\x2\x2\x6C0\x6C1\x3"+
		"\x2\x2\x2\x6C1\x6C2\x3\x2\x2\x2\x6C2\x6C3\x5\x38\x1D\x2\x6C3\x6D2\x3\x2"+
		"\x2\x2\x6C4\x6C5\x5\x13E\xA0\x2\x6C5\x6C6\a\xC7\x2\x2\x6C6\x6CF\x5n\x38"+
		"\x2\x6C7\x6C8\a\xBB\x2\x2\x6C8\x6D0\x5\x38\x1D\x2\x6C9\x6CA\a\xB7\x2\x2"+
		"\x6CA\x6D0\a\xB8\x2\x2\x6CB\x6CC\a\xB7\x2\x2\x6CC\x6CD\x5\xDAn\x2\x6CD"+
		"\x6CE\a\xB8\x2\x2\x6CE\x6D0\x3\x2\x2\x2\x6CF\x6C7\x3\x2\x2\x2\x6CF\x6C9"+
		"\x3\x2\x2\x2\x6CF\x6CB\x3\x2\x2\x2\x6D0\x6D2\x3\x2\x2\x2\x6D1\x6B4\x3"+
		"\x2\x2\x2\x6D1\x6BB\x3\x2\x2\x2\x6D1\x6C4\x3\x2\x2\x2\x6D2\xD7\x3\x2\x2"+
		"\x2\x6D3\x6D7\x5\x38\x1D\x2\x6D4\x6D7\x5v<\x2\x6D5\x6D7\x5\x62\x32\x2"+
		"\x6D6\x6D3\x3\x2\x2\x2\x6D6\x6D4\x3\x2\x2\x2\x6D6\x6D5\x3\x2\x2\x2\x6D7"+
		"\xD9\x3\x2\x2\x2\x6D8\x6DD\x5\xD8m\x2\x6D9\x6DA\a\xC8\x2\x2\x6DA\x6DC"+
		"\x5\xD8m\x2\x6DB\x6D9\x3\x2\x2\x2\x6DC\x6DF\x3\x2\x2\x2\x6DD\x6DB\x3\x2"+
		"\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\xDB\x3\x2\x2\x2\x6DF\x6DD\x3\x2\x2\x2"+
		"\x6E0\x6E1\a\x9D\x2\x2\x6E1\x6E6\x5\x38\x1D\x2\x6E2\x6E3\a\xC8\x2\x2\x6E3"+
		"\x6E5\x5\x38\x1D\x2\x6E4\x6E2\x3\x2\x2\x2\x6E5\x6E8\x3\x2\x2\x2\x6E6\x6E4"+
		"\x3\x2\x2\x2\x6E6\x6E7\x3\x2\x2\x2\x6E7\x6F2\x3\x2\x2\x2\x6E8\x6E6\x3"+
		"\x2\x2\x2\x6E9\x6EA\al\x2\x2\x6EA\x6EF\x5\x38\x1D\x2\x6EB\x6EC\a\xC8\x2"+
		"\x2\x6EC\x6EE\x5\x38\x1D\x2\x6ED\x6EB\x3\x2\x2\x2\x6EE\x6F1\x3\x2\x2\x2"+
		"\x6EF\x6ED\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2\x2\x6F0\x6F3\x3\x2\x2\x2\x6F1"+
		"\x6EF\x3\x2\x2\x2\x6F2\x6E9\x3\x2\x2\x2\x6F2\x6F3\x3\x2\x2\x2\x6F3\xDD"+
		"\x3\x2\x2\x2\x6F4\x6FC\x5\xE0q\x2\x6F5\x6F7\a\x44\x2\x2\x6F6\x6F8\a\x45"+
		"\x2\x2\x6F7\x6F6\x3\x2\x2\x2\x6F7\x6F8\x3\x2\x2\x2\x6F8\x6F9\x3\x2\x2"+
		"\x2\x6F9\x6FB\x5\xE0q\x2\x6FA\x6F5\x3\x2\x2\x2\x6FB\x6FE\x3\x2\x2\x2\x6FC"+
		"\x6FA\x3\x2\x2\x2\x6FC\x6FD\x3\x2\x2\x2\x6FD\x708\x3\x2\x2\x2\x6FE\x6FC"+
		"\x3\x2\x2\x2\x6FF\x704\x5\xE0q\x2\x700\x701\t\t\x2\x2\x701\x703\x5\xE0"+
		"q\x2\x702\x700\x3\x2\x2\x2\x703\x706\x3\x2\x2\x2\x704\x702\x3\x2\x2\x2"+
		"\x704\x705\x3\x2\x2\x2\x705\x708\x3\x2\x2\x2\x706\x704\x3\x2\x2\x2\x707"+
		"\x6F4\x3\x2\x2\x2\x707\x6FF\x3\x2\x2\x2\x708\xDF\x3\x2\x2\x2\x709\x70B"+
		"\a\\\x2\x2\x70A\x70C\x5\xEAv\x2\x70B\x70A\x3\x2\x2\x2\x70B\x70C\x3\x2"+
		"\x2\x2\x70C\x70D\x3\x2\x2\x2\x70D\x70F\x5\xEEx\x2\x70E\x710\x5\xF8}\x2"+
		"\x70F\x70E\x3\x2\x2\x2\x70F\x710\x3\x2\x2\x2\x710\x712\x3\x2\x2\x2\x711"+
		"\x713\x5\xFA~\x2\x712\x711\x3\x2\x2\x2\x712\x713\x3\x2\x2\x2\x713\x715"+
		"\x3\x2\x2\x2\x714\x716\x5\xE2r\x2\x715\x714\x3\x2\x2\x2\x715\x716\x3\x2"+
		"\x2\x2\x716\x71A\x3\x2\x2\x2\x717\x719\x5\x104\x83\x2\x718\x717\x3\x2"+
		"\x2\x2\x719\x71C\x3\x2\x2\x2\x71A\x718\x3\x2\x2\x2\x71A\x71B\x3\x2\x2"+
		"\x2\x71B\x720\x3\x2\x2\x2\x71C\x71A\x3\x2\x2\x2\x71D\x71F\x5\xFC\x7F\x2"+
		"\x71E\x71D\x3\x2\x2\x2\x71F\x722\x3\x2\x2\x2\x720\x71E\x3\x2\x2\x2\x720"+
		"\x721\x3\x2\x2\x2\x721\x724\x3\x2\x2\x2\x722\x720\x3\x2\x2\x2\x723\x725"+
		"\x5\x108\x85\x2\x724\x723\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2\x725\x727"+
		"\x3\x2\x2\x2\x726\x728\x5\xFE\x80\x2\x727\x726\x3\x2\x2\x2\x727\x728\x3"+
		"\x2\x2\x2\x728\x72A\x3\x2\x2\x2\x729\x72B\x5\x102\x82\x2\x72A\x729\x3"+
		"\x2\x2\x2\x72A\x72B\x3\x2\x2\x2\x72B\x72D\x3\x2\x2\x2\x72C\x72E\x5\x10A"+
		"\x86\x2\x72D\x72C\x3\x2\x2\x2\x72D\x72E\x3\x2\x2\x2\x72E\x730\x3\x2\x2"+
		"\x2\x72F\x731\x5\xF2z\x2\x730\x72F\x3\x2\x2\x2\x730\x731\x3\x2\x2\x2\x731"+
		"\x733\x3\x2\x2\x2\x732\x734\x5\xE8u\x2\x733\x732\x3\x2\x2\x2\x733\x734"+
		"\x3\x2\x2\x2\x734\x73A\x3\x2\x2\x2\x735\x736\a\xB7\x2\x2\x736\x737\x5"+
		"\xDEp\x2\x737\x738\a\xB8\x2\x2\x738\x73A\x3\x2\x2\x2\x739\x709\x3\x2\x2"+
		"\x2\x739\x735\x3\x2\x2\x2\x73A\xE1\x3\x2\x2\x2\x73B\x73C\aT\x2\x2\x73C"+
		"\x73D\a\xB7\x2\x2\x73D\x73E\x5\xE4s\x2\x73E\x740\a\xB8\x2\x2\x73F\x741"+
		"\x5p\x39\x2\x740\x73F\x3\x2\x2\x2\x740\x741\x3\x2\x2\x2\x741\xE3\x3\x2"+
		"\x2\x2\x742\x747\x5\xE6t\x2\x743\x744\a\xC8\x2\x2\x744\x746\x5\xE6t\x2"+
		"\x745\x743\x3\x2\x2\x2\x746\x749\x3\x2\x2\x2\x747\x745\x3\x2\x2\x2\x747"+
		"\x748\x3\x2\x2\x2\x748\xE5\x3\x2\x2\x2\x749\x747\x3\x2\x2\x2\x74A\x74B"+
		"\x5\x142\xA2\x2\x74B\x74E\x5\x62\x32\x2\x74C\x74F\x5h\x35\x2\x74D\x74F"+
		"\x5\x124\x93\x2\x74E\x74C\x3\x2\x2\x2\x74E\x74D\x3\x2\x2\x2\x74E\x74F"+
		"\x3\x2\x2\x2\x74F\xE7\x3\x2\x2\x2\x750\x751\aU\x2\x2\x751\x75B\a\x93\x2"+
		"\x2\x752\x75C\a\x95\x2\x2\x753\x75C\a\x94\x2\x2\x754\x75C\a\x96\x2\x2"+
		"\x755\x756\a\x97\x2\x2\x756\x758\a\xB7\x2\x2\x757\x759\x5\xDAn\x2\x758"+
		"\x757\x3\x2\x2\x2\x758\x759\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75C"+
		"\a\xB8\x2\x2\x75B\x752\x3\x2\x2\x2\x75B\x753\x3\x2\x2\x2\x75B\x754\x3"+
		"\x2\x2\x2\x75B\x755\x3\x2\x2\x2\x75C\xE9\x3\x2\x2\x2\x75D\x75F\a\x39\x2"+
		"\x2\x75E\x75D\x3\x2\x2\x2\x75E\x75F\x3\x2\x2\x2\x75F\x760\x3\x2\x2\x2"+
		"\x760\x76A\a<\x2\x2\x761\x763\x5l\x37\x2\x762\x764\a\x6\x2\x2\x763\x762"+
		"\x3\x2\x2\x2\x763\x764\x3\x2\x2\x2\x764\x76B\x3\x2\x2\x2\x765\x76B\x5"+
		"x=\x2\x766\x767\a\xB7\x2\x2\x767\x768\x5x=\x2\x768\x769\a\xB8\x2\x2\x769"+
		"\x76B\x3\x2\x2\x2\x76A\x761\x3\x2\x2\x2\x76A\x765\x3\x2\x2\x2\x76A\x766"+
		"\x3\x2\x2\x2\x76B\xEB\x3\x2\x2\x2\x76C\x76D\x5x=\x2\x76D\x76E\t\n\x2\x2"+
		"\x76E\x76F\x5\x38\x1D\x2\x76F\xED\x3\x2\x2\x2\x770\x775\x5\xF0y\x2\x771"+
		"\x772\a\xC8\x2\x2\x772\x774\x5\xF0y\x2\x773\x771\x3\x2\x2\x2\x774\x777"+
		"\x3\x2\x2\x2\x775\x773\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776\xEF\x3\x2"+
		"\x2\x2\x777\x775\x3\x2\x2\x2\x778\x77A\a\x39\x2\x2\x779\x778\x3\x2\x2"+
		"\x2\x779\x77A\x3\x2\x2\x2\x77A\x78A\x3\x2\x2\x2\x77B\x77D\x5\x38\x1D\x2"+
		"\x77C\x77E\x5\xF6|\x2\x77D\x77C\x3\x2\x2\x2\x77D\x77E\x3\x2\x2\x2\x77E"+
		"\x783\x3\x2\x2\x2\x77F\x781\aS\x2\x2\x780\x77F\x3\x2\x2\x2\x780\x781\x3"+
		"\x2\x2\x2\x781\x782\x3\x2\x2\x2\x782\x784\x5\x144\xA3\x2\x783\x780\x3"+
		"\x2\x2\x2\x783\x784\x3\x2\x2\x2\x784\x78B\x3\x2\x2\x2\x785\x786\x5p\x39"+
		"\x2\x786\x787\a\xC7\x2\x2\x787\x788\a\xBF\x2\x2\x788\x78B\x3\x2\x2\x2"+
		"\x789\x78B\a\xBF\x2\x2\x78A\x77B\x3\x2\x2\x2\x78A\x785\x3\x2\x2\x2\x78A"+
		"\x789\x3\x2\x2\x2\x78B\x79A\x3\x2\x2\x2\x78C\x78D\x5x=\x2\x78D\x78E\t"+
		"\n\x2\x2\x78E\x793\x5\x38\x1D\x2\x78F\x791\aS\x2\x2\x790\x78F\x3\x2\x2"+
		"\x2\x790\x791\x3\x2\x2\x2\x791\x792\x3\x2\x2\x2\x792\x794\x5\x144\xA3"+
		"\x2\x793\x790\x3\x2\x2\x2\x793\x794\x3\x2\x2\x2\x794\x79A\x3\x2\x2\x2"+
		"\x795\x796\x5\x13E\xA0\x2\x796\x797\a\xBB\x2\x2\x797\x798\x5\x38\x1D\x2"+
		"\x798\x79A\x3\x2\x2\x2\x799\x779\x3\x2\x2\x2\x799\x78C\x3\x2\x2\x2\x799"+
		"\x795\x3\x2\x2\x2\x79A\xF1\x3\x2\x2\x2\x79B\x79C\a\x64\x2\x2\x79C\x79D"+
		"\a\xB7\x2\x2\x79D\x7A2\x5\xF4{\x2\x79E\x79F\a\xC8\x2\x2\x79F\x7A1\x5\xF4"+
		"{\x2\x7A0\x79E\x3\x2\x2\x2\x7A1\x7A4\x3\x2\x2\x2\x7A2\x7A0\x3\x2\x2\x2"+
		"\x7A2\x7A3\x3\x2\x2\x2\x7A3\x7A5\x3\x2\x2\x2\x7A4\x7A2\x3\x2\x2\x2\x7A5"+
		"\x7A6\a\xB8\x2\x2\x7A6\xF3\x3\x2\x2\x2\x7A7\x7A9\a\xCB\x2\x2\x7A8\x7AA"+
		"\x5h\x35\x2\x7A9\x7A8\x3\x2\x2\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7B5\x3\x2"+
		"\x2\x2\x7AB\x7AC\a\xA5\x2\x2\x7AC\x7AD\aU\x2\x2\x7AD\x7AE\a\xB7\x2\x2"+
		"\x7AE\x7AF\x5x=\x2\x7AF\x7B0\a\xBB\x2\x2\x7B0\x7B1\x5h\x35\x2\x7B1\x7B2"+
		"\x3\x2\x2\x2\x7B2\x7B3\a\xB8\x2\x2\x7B3\x7B5\x3\x2\x2\x2\x7B4\x7A7\x3"+
		"\x2\x2\x2\x7B4\x7AB\x3\x2\x2\x2\x7B5\xF5\x3\x2\x2\x2\x7B6\x7B7\a@\x2\x2"+
		"\x7B7\x7CC\a\xB7\x2\x2\x7B8\x7B9\a\x1A\x2\x2\x7B9\x7BA\al\x2\x2\x7BA\x7BF"+
		"\x5\x38\x1D\x2\x7BB\x7BC\a\xC8\x2\x2\x7BC\x7BE\x5\x38\x1D\x2\x7BD\x7BB"+
		"\x3\x2\x2\x2\x7BE\x7C1\x3\x2\x2\x2\x7BF\x7BD\x3\x2\x2\x2\x7BF\x7C0\x3"+
		"\x2\x2\x2\x7C0\x7CD\x3\x2\x2\x2\x7C1\x7BF\x3\x2\x2\x2\x7C2\x7C3\ak\x2"+
		"\x2\x7C3\x7C4\al\x2\x2\x7C4\x7C9\x5\x10C\x87\x2\x7C5\x7C6\a\xC8\x2\x2"+
		"\x7C6\x7C8\x5\x10C\x87\x2\x7C7\x7C5\x3\x2\x2\x2\x7C8\x7CB\x3\x2\x2\x2"+
		"\x7C9\x7C7\x3\x2\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7CD\x3\x2\x2\x2\x7CB"+
		"\x7C9\x3\x2\x2\x2\x7CC\x7B8\x3\x2\x2\x2\x7CC\x7C2\x3\x2\x2\x2\x7CD\x7CE"+
		"\x3\x2\x2\x2\x7CE\x7CC\x3\x2\x2\x2\x7CE\x7CF\x3\x2\x2\x2\x7CF\x7D0\x3"+
		"\x2\x2\x2\x7D0\x7D1\a\xB8\x2\x2\x7D1\xF7\x3\x2\x2\x2\x7D2\x7D3\an\x2\x2"+
		"\x7D3\x7D4\x5\x116\x8C\x2\x7D4\xF9\x3\x2\x2\x2\x7D5\x7D6\a\x61\x2\x2\x7D6"+
		"\x7DB\x5\x11A\x8E\x2\x7D7\x7D8\a\xC8\x2\x2\x7D8\x7DA\x5\x11A\x8E\x2\x7D9"+
		"\x7D7\x3\x2\x2\x2\x7DA\x7DD\x3\x2\x2\x2\x7DB\x7D9\x3\x2\x2\x2\x7DB\x7DC"+
		"\x3\x2\x2\x2\x7DC\xFB\x3\x2\x2\x2\x7DD\x7DB\x3\x2\x2\x2\x7DE\x7DF\a\xC8"+
		"\x2\x2\x7DF\x7E1\x5\x11A\x8E\x2\x7E0\x7DE\x3\x2\x2\x2\x7E1\x7E2\x3\x2"+
		"\x2\x2\x7E2\x7E0\x3\x2\x2\x2\x7E2\x7E3\x3\x2\x2\x2\x7E3\xFD\x3\x2\x2\x2"+
		"\x7E4\x7E5\ai\x2\x2\x7E5\x7E6\al\x2\x2\x7E6\x7EB\x5\x100\x81\x2\x7E7\x7E8"+
		"\a\xC8\x2\x2\x7E8\x7EA\x5\x100\x81\x2\x7E9\x7E7\x3\x2\x2\x2\x7EA\x7ED"+
		"\x3\x2\x2\x2\x7EB\x7E9\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\xFF\x3\x2"+
		"\x2\x2\x7ED\x7EB\x3\x2\x2\x2\x7EE\x7F1\x5\x140\xA1\x2\x7EF\x7F1\x5\x38"+
		"\x1D\x2\x7F0\x7EE\x3\x2\x2\x2\x7F0\x7EF\x3\x2\x2\x2\x7F1\x101\x3\x2\x2"+
		"\x2\x7F2\x7F3\aj\x2\x2\x7F3\x7F4\x5\x34\x1B\x2\x7F4\x103\x3\x2\x2\x2\x7F5"+
		"\x7F7\x5\x106\x84\x2\x7F6\x7F5\x3\x2\x2\x2\x7F6\x7F7\x3\x2\x2\x2\x7F7"+
		"\x7F8\x3\x2\x2\x2\x7F8\x7F9\a\x62\x2\x2\x7F9\x7FE\x5\x11A\x8E\x2\x7FA"+
		"\x7FB\ag\x2\x2\x7FB\x7FD\x5\x34\x1B\x2\x7FC\x7FA\x3\x2\x2\x2\x7FD\x800"+
		"\x3\x2\x2\x2\x7FE\x7FC\x3\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x807\x3"+
		"\x2\x2\x2\x800\x7FE\x3\x2\x2\x2\x801\x803\x5\x106\x84\x2\x802\x801\x3"+
		"\x2\x2\x2\x802\x803\x3\x2\x2\x2\x803\x804\x3\x2\x2\x2\x804\x805\a\x46"+
		"\x2\x2\x805\x807\x5\x11A\x8E\x2\x806\x7F6\x3\x2\x2\x2\x806\x802\x3\x2"+
		"\x2\x2\x807\x105\x3\x2\x2\x2\x808\x815\a\"\x2\x2\x809\x815\a#\x2\x2\x80A"+
		"\x815\a%\x2\x2\x80B\x815\a&\x2\x2\x80C\x815\a$\x2\x2\x80D\x815\a\'\x2"+
		"\x2\x80E\x80F\a\'\x2\x2\x80F\x815\a%\x2\x2\x810\x811\a\"\x2\x2\x811\x815"+
		"\a%\x2\x2\x812\x813\a#\x2\x2\x813\x815\a%\x2\x2\x814\x808\x3\x2\x2\x2"+
		"\x814\x809\x3\x2\x2\x2\x814\x80A\x3\x2\x2\x2\x814\x80B\x3\x2\x2\x2\x814"+
		"\x80C\x3\x2\x2\x2\x814\x80D\x3\x2\x2\x2\x814\x80E\x3\x2\x2\x2\x814\x810"+
		"\x3\x2\x2\x2\x814\x812\x3\x2\x2\x2\x815\x107\x3\x2\x2\x2\x816\x817\a`"+
		"\x2\x2\x817\x818\x5\x34\x1B\x2\x818\x109\x3\x2\x2\x2\x819\x81A\ak\x2\x2"+
		"\x81A\x81B\al\x2\x2\x81B\x820\x5\x10C\x87\x2\x81C\x81D\a\xC8\x2\x2\x81D"+
		"\x81F\x5\x10C\x87\x2\x81E\x81C\x3\x2\x2\x2\x81F\x822\x3\x2\x2\x2\x820"+
		"\x81E\x3\x2\x2\x2\x820\x821\x3\x2\x2\x2\x821\x10B\x3\x2\x2\x2\x822\x820"+
		"\x3\x2\x2\x2\x823\x826\x5\x140\xA1\x2\x824\x826\x5\x38\x1D\x2\x825\x823"+
		"\x3\x2\x2\x2\x825\x824\x3\x2\x2\x2\x826\x828\x3\x2\x2\x2\x827\x829\t\x4"+
		"\x2\x2\x828\x827\x3\x2\x2\x2\x828\x829\x3\x2\x2\x2\x829\x10D\x3\x2\x2"+
		"\x2\x82A\x82C\a\x8F\x2\x2\x82B\x82D\an\x2\x2\x82C\x82B\x3\x2\x2\x2\x82C"+
		"\x82D\x3\x2\x2\x2\x82D\x82E\x3\x2\x2\x2\x82E\x82F\x5\x116\x8C\x2\x82F"+
		"\x830\a\x8E\x2\x2\x830\x831\x5\x11C\x8F\x2\x831\x832\ag\x2\x2\x832\x853"+
		"\x5\x34\x1B\x2\x833\x834\a=\x2\x2\x834\x837\a\x90\x2\x2\x835\x836\a\x89"+
		"\x2\x2\x836\x838\x5\x34\x1B\x2\x837\x835\x3\x2\x2\x2\x837\x838\x3\x2\x2"+
		"\x2\x838\x839\x3\x2\x2\x2\x839\x83A\a>\x2\x2\x83A\x854\x5\x110\x89\x2"+
		"\x83B\x83C\a=\x2\x2\x83C\x83D\ar\x2\x2\x83D\x840\a\x90\x2\x2\x83E\x83F"+
		"\al\x2\x2\x83F\x841\a\x91\x2\x2\x840\x83E\x3\x2\x2\x2\x840\x841\x3\x2"+
		"\x2\x2\x841\x844\x3\x2\x2\x2\x842\x843\a\x89\x2\x2\x843\x845\x5\x34\x1B"+
		"\x2\x844\x842\x3\x2\x2\x2\x844\x845\x3\x2\x2\x2\x845\x846\x3\x2\x2\x2"+
		"\x846\x847\a>\x2\x2\x847\x854\x5\x112\x8A\x2\x848\x849\a=\x2\x2\x849\x84A"+
		"\ar\x2\x2\x84A\x84B\a\x90\x2\x2\x84B\x84C\al\x2\x2\x84C\x84F\a\x92\x2"+
		"\x2\x84D\x84E\a\x89\x2\x2\x84E\x850\x5\x34\x1B\x2\x84F\x84D\x3\x2\x2\x2"+
		"\x84F\x850\x3\x2\x2\x2\x850\x851\x3\x2\x2\x2\x851\x852\a>\x2\x2\x852\x854"+
		"\x5\x110\x89\x2\x853\x833\x3\x2\x2\x2\x853\x83B\x3\x2\x2\x2\x853\x848"+
		"\x3\x2\x2\x2\x854\x855\x3\x2\x2\x2\x855\x853\x3\x2\x2\x2\x855\x856\x3"+
		"\x2\x2\x2\x856\x85C\x3\x2\x2\x2\x857\x858\av\x2\x2\x858\x859\x5\xEEx\x2"+
		"\x859\x85A\an\x2\x2\x85A\x85B\x5\x114\x8B\x2\x85B\x85D\x3\x2\x2\x2\x85C"+
		"\x857\x3\x2\x2\x2\x85C\x85D\x3\x2\x2\x2\x85D\x10F\x3\x2\x2\x2\x85E\x85F"+
		"\a]\x2\x2\x85F\x860\a\x65\x2\x2\x860\x865\x5\xD6l\x2\x861\x862\a\xC8\x2"+
		"\x2\x862\x864\x5\xD6l\x2\x863\x861\x3\x2\x2\x2\x864\x867\x3\x2\x2\x2\x865"+
		"\x863\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x86A\x3\x2\x2\x2\x867\x865"+
		"\x3\x2\x2\x2\x868\x86A\a_\x2\x2\x869\x85E\x3\x2\x2\x2\x869\x868\x3\x2"+
		"\x2\x2\x86A\x111\x3\x2\x2\x2\x86B\x870\a^\x2\x2\x86C\x86D\a\xB7\x2\x2"+
		"\x86D\x86E\x5r:\x2\x86E\x86F\a\xB8\x2\x2\x86F\x871\x3\x2\x2\x2\x870\x86C"+
		"\x3\x2\x2\x2\x870\x871\x3\x2\x2\x2\x871\x872\x3\x2\x2\x2\x872\x873\ao"+
		"\x2\x2\x873\x878\x5\xB2Z\x2\x874\x875\a\xC8\x2\x2\x875\x877\x5\xB2Z\x2"+
		"\x876\x874\x3\x2\x2\x2\x877\x87A\x3\x2\x2\x2\x878\x876\x3\x2\x2\x2\x878"+
		"\x879\x3\x2\x2\x2\x879\x113\x3\x2\x2\x2\x87A\x878\x3\x2\x2\x2\x87B\x87D"+
		"\x5\x116\x8C\x2\x87C\x87E\x5\x118\x8D\x2\x87D\x87C\x3\x2\x2\x2\x87D\x87E"+
		"\x3\x2\x2\x2\x87E\x88A\x3\x2\x2\x2\x87F\x881\x5\x116\x8C\x2\x880\x882"+
		"\x5\x118\x8D\x2\x881\x880\x3\x2\x2\x2\x881\x882\x3\x2\x2\x2\x882\x887"+
		"\x3\x2\x2\x2\x883\x885\aS\x2\x2\x884\x883\x3\x2\x2\x2\x884\x885\x3\x2"+
		"\x2\x2\x885\x886\x3\x2\x2\x2\x886\x888\x5\x120\x91\x2\x887\x884\x3\x2"+
		"\x2\x2\x887\x888\x3\x2\x2\x2\x888\x88A\x3\x2\x2\x2\x889\x87B\x3\x2\x2"+
		"\x2\x889\x87F\x3\x2\x2\x2\x88A\x115\x3\x2\x2\x2\x88B\x88F\x5p\x39\x2\x88C"+
		"\x88F\x5x=\x2\x88D\x88F\x5v<\x2\x88E\x88B\x3\x2\x2\x2\x88E\x88C\x3\x2"+
		"\x2\x2\x88E\x88D\x3\x2\x2\x2\x88F\x894\x3\x2\x2\x2\x890\x892\aS\x2\x2"+
		"\x891\x890\x3\x2\x2\x2\x891\x892\x3\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893"+
		"\x895\x5\x120\x91\x2\x894\x891\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895"+
		"\x117\x3\x2\x2\x2\x896\x897\aT\x2\x2\x897\x898\a\xB7\x2\x2\x898\x899\a"+
		"\xCB\x2\x2\x899\x89D\a\xB8\x2\x2\x89A\x89B\aT\x2\x2\x89B\x89D\a\xCB\x2"+
		"\x2\x89C\x896\x3\x2\x2\x2\x89C\x89A\x3\x2\x2\x2\x89D\x119\x3\x2\x2\x2"+
		"\x89E\x8A0\x5\x11C\x8F\x2\x89F\x8A1\x5\x11E\x90\x2\x8A0\x89F\x3\x2\x2"+
		"\x2\x8A0\x8A1\x3\x2\x2\x2\x8A1\x11B\x3\x2\x2\x2\x8A2\x8BB\x5p\x39\x2\x8A3"+
		"\x8A6\x5x=\x2\x8A4\x8A5\a\xC7\x2\x2\x8A5\x8A7\x5\x124\x93\x2\x8A6\x8A4"+
		"\x3\x2\x2\x2\x8A6\x8A7\x3\x2\x2\x2\x8A7\x8BB\x3\x2\x2\x2\x8A8\x8AB\x5"+
		"v<\x2\x8A9\x8AA\a\xC7\x2\x2\x8AA\x8AC\x5\x124\x93\x2\x8AB\x8A9\x3\x2\x2"+
		"\x2\x8AB\x8AC\x3\x2\x2\x2\x8AC\x8BB\x3\x2\x2\x2\x8AD\x8AE\a\xB7\x2\x2"+
		"\x8AE\x8AF\x5\xDEp\x2\x8AF\x8B0\a\xB8\x2\x2\x8B0\x8BB\x3\x2\x2\x2\x8B1"+
		"\x8BB\x5\x126\x94\x2\x8B2\x8B8\x5\x124\x93\x2\x8B3\x8B4\aT\x2\x2\x8B4"+
		"\x8B5\a\xB7\x2\x2\x8B5\x8B6\x5\xE4s\x2\x8B6\x8B7\a\xB8\x2\x2\x8B7\x8B9"+
		"\x3\x2\x2\x2\x8B8\x8B3\x3\x2\x2\x2\x8B8\x8B9\x3\x2\x2\x2\x8B9\x8BB\x3"+
		"\x2\x2\x2\x8BA\x8A2\x3\x2\x2\x2\x8BA\x8A3\x3\x2\x2\x2\x8BA\x8A8\x3\x2"+
		"\x2\x2\x8BA\x8AD\x3\x2\x2\x2\x8BA\x8B1\x3\x2\x2\x2\x8BA\x8B2\x3\x2\x2"+
		"\x2\x8BB\x8C0\x3\x2\x2\x2\x8BC\x8BE\aS\x2\x2\x8BD\x8BC\x3\x2\x2\x2\x8BD"+
		"\x8BE\x3\x2\x2\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF\x8C1\x5\x120\x91\x2\x8C0"+
		"\x8BD\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1\x11D\x3\x2\x2\x2\x8C2\x8C3"+
		"\aT\x2\x2\x8C3\x8C4\a\xB7\x2\x2\x8C4\x8C5\a\xCB\x2\x2\x8C5\x8CA\a\xB8"+
		"\x2\x2\x8C6\x8C7\a\xB7\x2\x2\x8C7\x8C8\a\xCB\x2\x2\x8C8\x8CA\a\xB8\x2"+
		"\x2\x8C9\x8C2\x3\x2\x2\x2\x8C9\x8C6\x3\x2\x2\x2\x8CA\x11F\x3\x2\x2\x2"+
		"\x8CB\x8CE\x5n\x38\x2\x8CC\x8CE\a\xCA\x2\x2\x8CD\x8CB\x3\x2\x2\x2\x8CD"+
		"\x8CC\x3\x2\x2\x2\x8CE\x121\x3\x2\x2\x2\x8CF\x8D2\x5p\x39\x2\x8D0\x8D2"+
		"\x5\x158\xAD\x2\x8D1\x8CF\x3\x2\x2\x2\x8D1\x8D0\x3\x2\x2\x2\x8D2\x123"+
		"\x3\x2\x2\x2\x8D3\x8D4\x5\x122\x92\x2\x8D4\x8D6\a\xB7\x2\x2\x8D5\x8D7"+
		"\x5\xDAn\x2\x8D6\x8D5\x3\x2\x2\x2\x8D6\x8D7\x3\x2\x2\x2\x8D7\x8D8\x3\x2"+
		"\x2\x2\x8D8\x8D9\a\xB8\x2\x2\x8D9\x125\x3\x2\x2\x2\x8DA\x8E3\am\x2\x2"+
		"\x8DB\x8DD\x5p\x39\x2\x8DC\x8DE\x5\x128\x95\x2\x8DD\x8DC\x3\x2\x2\x2\x8DD"+
		"\x8DE\x3\x2\x2\x2\x8DE\x8E4\x3\x2\x2\x2\x8DF\x8E0\a\xB7\x2\x2\x8E0\x8E1"+
		"\x5\x38\x1D\x2\x8E1\x8E2\a\xB8\x2\x2\x8E2\x8E4\x3\x2\x2\x2\x8E3\x8DB\x3"+
		"\x2\x2\x2\x8E3\x8DF\x3\x2\x2\x2\x8E4\x8E6\x3\x2\x2\x2\x8E5\x8E7\x5\x18"+
		"\r\x2\x8E6\x8E5\x3\x2\x2\x2\x8E6\x8E7\x3\x2\x2\x2\x8E7\x127\x3\x2\x2\x2"+
		"\x8E8\x8ED\x5\x12A\x96\x2\x8E9\x8EA\a\xC8\x2\x2\x8EA\x8EC\x5\x12A\x96"+
		"\x2\x8EB\x8E9\x3\x2\x2\x2\x8EC\x8EF\x3\x2\x2\x2\x8ED\x8EB\x3\x2\x2\x2"+
		"\x8ED\x8EE\x3\x2\x2\x2\x8EE\x129\x3\x2\x2\x2\x8EF\x8ED\x3\x2\x2\x2\x8F0"+
		"\x8F1\x5x=\x2\x8F1\x8F3\a\xBB\x2\x2\x8F2\x8F4\x5\x38\x1D\x2\x8F3\x8F2"+
		"\x3\x2\x2\x2\x8F3\x8F4\x3\x2\x2\x2\x8F4\x8FA\x3\x2\x2\x2\x8F5\x8F7\x5"+
		"\x38\x1D\x2\x8F6\x8F8\t\a\x2\x2\x8F7\x8F6\x3\x2\x2\x2\x8F7\x8F8\x3\x2"+
		"\x2\x2\x8F8\x8FA\x3\x2\x2\x2\x8F9\x8F0\x3\x2\x2\x2\x8F9\x8F5\x3\x2\x2"+
		"\x2\x8FA\x12B\x3\x2\x2\x2\x8FB\x8FE\a\xB7\x2\x2\x8FC\x8FF\x5l\x37\x2\x8FD"+
		"\x8FF\a;\x2\x2\x8FE\x8FC\x3\x2\x2\x2\x8FE\x8FD\x3\x2\x2\x2\x8FF\x900\x3"+
		"\x2\x2\x2\x900\x901\a\xB8\x2\x2\x901\x12D\x3\x2\x2\x2\x902\x904\t\v\x2"+
		"\x2\x903\x905\x5\x12C\x97\x2\x904\x903\x3\x2\x2\x2\x904\x905\x3\x2\x2"+
		"\x2\x905\x90C\x3\x2\x2\x2\x906\x907\t\v\x2\x2\x907\x908\a[\x2\x2\x908"+
		"\x90C\x5\x12C\x97\x2\x909\x90A\t\f\x2\x2\x90A\x90C\x5\x12C\x97\x2\x90B"+
		"\x902\x3\x2\x2\x2\x90B\x906\x3\x2\x2\x2\x90B\x909\x3\x2\x2\x2\x90C\x12F"+
		"\x3\x2\x2\x2\x90D\x915\t\r\x2\x2\x90E\x90F\a\xB7\x2\x2\x90F\x912\a\xCC"+
		"\x2\x2\x910\x911\a\xC8\x2\x2\x911\x913\a\xCC\x2\x2\x912\x910\x3\x2\x2"+
		"\x2\x912\x913\x3\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914\x916\a\xB8\x2\x2"+
		"\x915\x90E\x3\x2\x2\x2\x915\x916\x3\x2\x2\x2\x916\x919\x3\x2\x2\x2\x917"+
		"\x919\a\x86\x2\x2\x918\x90D\x3\x2\x2\x2\x918\x917\x3\x2\x2\x2\x919\x131"+
		"\x3\x2\x2\x2\x91A\x91B\t\xE\x2\x2\x91B\x133\x3\x2\x2\x2\x91C\x91E\x5\x132"+
		"\x9A\x2\x91D\x91C\x3\x2\x2\x2\x91D\x91E\x3\x2\x2\x2\x91E\x91F\x3\x2\x2"+
		"\x2\x91F\x920\x5\x136\x9C\x2\x920\x135\x3\x2\x2\x2\x921\x92A\a\x87\x2"+
		"\x2\x922\x923\a\xB7\x2\x2\x923\x926\x5l\x37\x2\x924\x925\a\xC8\x2\x2\x925"+
		"\x927\x5l\x37\x2\x926\x924\x3\x2\x2\x2\x926\x927\x3\x2\x2\x2\x927\x928"+
		"\x3\x2\x2\x2\x928\x929\a\xB8\x2\x2\x929\x92B\x3\x2\x2\x2\x92A\x922\x3"+
		"\x2\x2\x2\x92A\x92B\x3\x2\x2\x2\x92B\x137\x3\x2\x2\x2\x92C\x92D\a\xC7"+
		"\x2\x2\x92D\x92E\x5n\x38\x2\x92E\x139\x3\x2\x2\x2\x92F\x930\t\n\x2\x2"+
		"\x930\x13B\x3\x2\x2\x2\x931\x936\x5\x13E\xA0\x2\x932\x933\a\xC8\x2\x2"+
		"\x933\x935\x5\x13E\xA0\x2\x934\x932\x3\x2\x2\x2\x935\x938\x3\x2\x2\x2"+
		"\x936\x934\x3\x2\x2\x2\x936\x937\x3\x2\x2\x2\x937\x13D\x3\x2\x2\x2\x938"+
		"\x936\x3\x2\x2\x2\x939\x943\x5p\x39\x2\x93A\x93B\x5p\x39\x2\x93B\x93C"+
		"\a\xC7\x2\x2\x93C\x93D\x5\x158\xAD\x2\x93D\x943\x3\x2\x2\x2\x93E\x93F"+
		"\x5v<\x2\x93F\x940\a\xC7\x2\x2\x940\x941\x5n\x38\x2\x941\x943\x3\x2\x2"+
		"\x2\x942\x939\x3\x2\x2\x2\x942\x93A\x3\x2\x2\x2\x942\x93E\x3\x2\x2\x2"+
		"\x943\x13F\x3\x2\x2\x2\x944\x947\x5l\x37\x2\x945\x947\x5p\x39\x2\x946"+
		"\x944\x3\x2\x2\x2\x946\x945\x3\x2\x2\x2\x947\x141\x3\x2\x2\x2\x948\x949"+
		"\x5n\x38\x2\x949\x143\x3\x2\x2\x2\x94A\x94D\x5n\x38\x2\x94B\x94D\a\xCA"+
		"\x2\x2\x94C\x94A\x3\x2\x2\x2\x94C\x94B\x3\x2\x2\x2\x94D\x145\x3\x2\x2"+
		"\x2\x94E\x951\x5p\x39\x2\x94F\x951\x5x=\x2\x950\x94E\x3\x2\x2\x2\x950"+
		"\x94F\x3\x2\x2\x2\x951\x147\x3\x2\x2\x2\x952\x957\x5\x14A\xA6\x2\x953"+
		"\x957\x5\x14C\xA7\x2\x954\x957\x5\x14E\xA8\x2\x955\x957\x5\x150\xA9\x2"+
		"\x956\x952\x3\x2\x2\x2\x956\x953\x3\x2\x2\x2\x956\x954\x3\x2\x2\x2\x956"+
		"\x955\x3\x2\x2\x2\x957\x149\x3\x2\x2\x2\x958\x959\a*\x2\x2\x959\x95A\x5"+
		"\x146\xA4\x2\x95A\x14B\x3\x2\x2\x2\x95B\x95C\a+\x2\x2\x95C\x95D\x5\x146"+
		"\xA4\x2\x95D\x14D\x3\x2\x2\x2\x95E\x96E\a)\x2\x2\x95F\x96F\a\x30\x2\x2"+
		"\x960\x96F\a/\x2\x2\x961\x96F\a-\x2\x2\x962\x96F\a.\x2\x2\x963\x966\a"+
		"\x31\x2\x2\x964\x967\x5l\x37\x2\x965\x967\x5x=\x2\x966\x964\x3\x2\x2\x2"+
		"\x966\x965\x3\x2\x2\x2\x967\x96F\x3\x2\x2\x2\x968\x96B\a\x32\x2\x2\x969"+
		"\x96C\x5l\x37\x2\x96A\x96C\x5x=\x2\x96B\x969\x3\x2\x2\x2\x96B\x96A\x3"+
		"\x2\x2\x2\x96C\x96F\x3\x2\x2\x2\x96D\x96F\x5p\x39\x2\x96E\x95F\x3\x2\x2"+
		"\x2\x96E\x960\x3\x2\x2\x2\x96E\x961\x3\x2\x2\x2\x96E\x962\x3\x2\x2\x2"+
		"\x96E\x963\x3\x2\x2\x2\x96E\x968\x3\x2\x2\x2\x96E\x96D\x3\x2\x2\x2\x96F"+
		"\x972\x3\x2\x2\x2\x970\x971\a\x61\x2\x2\x971\x973\x5\x146\xA4\x2\x972"+
		"\x970\x3\x2\x2\x2\x972\x973\x3\x2\x2\x2\x973\x974\x3\x2\x2\x2\x974\x975"+
		"\an\x2\x2\x975\x97A\x5x=\x2\x976\x977\a\xC8\x2\x2\x977\x979\x5x=\x2\x978"+
		"\x976\x3\x2\x2\x2\x979\x97C\x3\x2\x2\x2\x97A\x978\x3\x2\x2\x2\x97A\x97B"+
		"\x3\x2\x2\x2\x97B\x14F\x3\x2\x2\x2\x97C\x97A\x3\x2\x2\x2\x97D\x97E\a,"+
		"\x2\x2\x97E\x97F\x5\x146\xA4\x2\x97F\x151\x3\x2\x2\x2\x980\x981\a\xCA"+
		"\x2\x2\x981\x153\x3\x2\x2\x2\x982\x983\a\x36\x2\x2\x983\x984\a\xCB\x2"+
		"\x2\x984\x155\x3\x2\x2\x2\x985\x986\t\xF\x2\x2\x986\x157\x3\x2\x2\x2\x987"+
		"\x988\t\x10\x2\x2\x988\x159\x3\x2\x2\x2\x14A\x163\x16C\x172\x179\x17F"+
		"\x187\x18D\x191\x1A5\x1B0\x1BA\x1C0\x1DC\x1E5\x1EC\x1F1\x1F7\x1FD\x200"+
		"\x205\x20D\x20F\x213\x216\x21B\x223\x226\x229\x22C\x23D\x244\x249\x25C"+
		"\x25F\x26D\x270\x273\x276\x27D\x281\x293\x29E\x2A1\x2AA\x2AD\x2B6\x2BA"+
		"\x2C3\x2D2\x2D4\x2E0\x2E2\x2EE\x2F1\x2F3\x2FE\x309\x318\x31A\x33E\x340"+
		"\x34C\x34E\x35D\x35F\x367\x36C\x37A\x383\x387\x389\x38F\x392\x39C\x3A4"+
		"\x3AB\x3AF\x3C5\x3D7\x3DC\x3E8\x3ED\x3F1\x3F4\x3FB\x401\x406\x40C\x411"+
		"\x415\x41C\x422\x426\x42B\x42F\x435\x43A\x440\x443\x44F\x459\x45C\x460"+
		"\x464\x467\x46A\x46D\x470\x476\x480\x487\x490\x494\x497\x4A6\x4BD\x4C1"+
		"\x4C5\x4C8\x4CC\x4D0\x4D3\x4D8\x4DC\x4E3\x4F3\x4F9\x4FD\x4FF\x50F\x51A"+
		"\x51E\x523\x526\x52B\x52F\x532\x536\x53C\x53F\x544\x548\x54B\x54D\x550"+
		"\x557\x55B\x562\x570\x57A\x583\x587\x58B\x58F\x595\x59F\x5A1\x5A9\x5B0"+
		"\x5B8\x5C5\x5CC\x5D4\x5D6\x5DA\x5DE\x5E5\x5E8\x5EC\x5F0\x5F7\x5FF\x607"+
		"\x609\x60C\x60F\x614\x616\x61D\x61F\x622\x625\x628\x62D\x62F\x631\x638"+
		"\x63D\x646\x64C\x64E\x656\x661\x666\x66A\x671\x67E\x687\x68B\x694\x698"+
		"\x69D\x6A3\x6A7\x6AA\x6B0\x6B2\x6B9\x6C0\x6CF\x6D1\x6D6\x6DD\x6E6\x6EF"+
		"\x6F2\x6F7\x6FC\x704\x707\x70B\x70F\x712\x715\x71A\x720\x724\x727\x72A"+
		"\x72D\x730\x733\x739\x740\x747\x74E\x758\x75B\x75E\x763\x76A\x775\x779"+
		"\x77D\x780\x783\x78A\x790\x793\x799\x7A2\x7A9\x7B4\x7BF\x7C9\x7CC\x7CE"+
		"\x7DB\x7E2\x7EB\x7F0\x7F6\x7FE\x802\x806\x814\x820\x825\x828\x82C\x837"+
		"\x840\x844\x84F\x853\x855\x85C\x865\x869\x870\x878\x87D\x881\x884\x887"+
		"\x889\x88E\x891\x894\x89C\x8A0\x8A6\x8AB\x8B8\x8BA\x8BD\x8C0\x8C9\x8CD"+
		"\x8D1\x8D6\x8DD\x8E3\x8E6\x8ED\x8F3\x8F7\x8F9\x8FE\x904\x90B\x912\x915"+
		"\x918\x91D\x926\x92A\x936\x942\x946\x94C\x950\x956\x966\x96B\x96E\x972"+
		"\x97A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace tsql2pgsql.grammar
